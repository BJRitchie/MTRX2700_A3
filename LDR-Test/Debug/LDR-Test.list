
LDR-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d78  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f0c  08000f0c  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f0c  08000f0c  00020128  2**0
                  CONTENTS
  4 .ARM          00000000  08000f0c  08000f0c  00020128  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f0c  08000f0c  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f0c  08000f0c  00010f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f10  08000f10  00010f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  08000f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020128  2**0
                  CONTENTS
 10 .bss          0000002c  20000128  20000128  00020128  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000154  20000154  00020128  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 14 .debug_info   000033c6  00000000  00000000  0002019b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000b3c  00000000  00000000  00023561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000220  00000000  00000000  000240a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000185  00000000  00000000  000242c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001510a  00000000  00000000  00024445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000027bc  00000000  00000000  0003954f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0007616e  00000000  00000000  0003bd0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000714  00000000  00000000  000b1e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  000b2590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000128 	.word	0x20000128
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000ef4 	.word	0x08000ef4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000012c 	.word	0x2000012c
 80001d0:	08000ef4 	.word	0x08000ef4

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	; (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	; (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <ContinuousReadSingleChannel>:

	return ADC1->DR;
}


void ContinuousReadSingleChannel(ADCxPort *ADC_port) {
 8000264:	b480      	push	{r7}
 8000266:	b085      	sub	sp, #20
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]

	// get a pointer to the location of the LEDs
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800026c:	4b73      	ldr	r3, [pc, #460]	; (800043c <ContinuousReadSingleChannel+0x1d8>)
 800026e:	60fb      	str	r3, [r7, #12]

	RCC->AHBENR |= ADC_port->AHBENREnable;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	689a      	ldr	r2, [r3, #8]
 8000274:	4b72      	ldr	r3, [pc, #456]	; (8000440 <ContinuousReadSingleChannel+0x1dc>)
 8000276:	695b      	ldr	r3, [r3, #20]
 8000278:	4971      	ldr	r1, [pc, #452]	; (8000440 <ContinuousReadSingleChannel+0x1dc>)
 800027a:	4313      	orrs	r3, r2
 800027c:	614b      	str	r3, [r1, #20]

	// set to synchronise the ADC with the clock
	ADC_port->ADCx_Common->CCR |= ADC_port->ClockMode;
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	68d9      	ldr	r1, [r3, #12]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	689a      	ldr	r2, [r3, #8]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	430a      	orrs	r2, r1
 800028e:	609a      	str	r2, [r3, #8]

	// ADEN must be = 0 for configuration (is the default)
	ADC_port->ADCx->CR &= ~ADC_port->VoltageRegulatorClear; // clear voltage regulator enable
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	691b      	ldr	r3, [r3, #16]
 8000294:	43d9      	mvns	r1, r3
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	689a      	ldr	r2, [r3, #8]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	400a      	ands	r2, r1
 80002a2:	609a      	str	r2, [r3, #8]
	ADC_port->ADCx->CR |= ADC_port->VoltageRegulatorMode; // set ADVREGEN TO 01
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	6959      	ldr	r1, [r3, #20]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	689a      	ldr	r2, [r3, #8]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	430a      	orrs	r2, r1
 80002b4:	609a      	str	r2, [r3, #8]
	ADC_port->ADCx->CR &= ~ADC_port->DifferentialModeForCalibration; // clear bit to enable Single-ended-input
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	699b      	ldr	r3, [r3, #24]
 80002ba:	43d9      	mvns	r1, r3
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	689a      	ldr	r2, [r3, #8]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	400a      	ands	r2, r1
 80002c8:	609a      	str	r2, [r3, #8]

	// calibrate the ADC (self calibration routine)
	ADC_port->ADCx->CR |= ADC_port->ADCCalibrate;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	69d9      	ldr	r1, [r3, #28]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	689a      	ldr	r2, [r3, #8]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	430a      	orrs	r2, r1
 80002da:	609a      	str	r2, [r3, #8]
	while((ADC_port->ADCx->CR & ADC_port->ADCCalibrate) == ADC_port->ADCCalibrate); // Waiting for the calibration to finish
 80002dc:	bf00      	nop
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	689a      	ldr	r2, [r3, #8]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	69db      	ldr	r3, [r3, #28]
 80002e8:	401a      	ands	r2, r3
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	69db      	ldr	r3, [r3, #28]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d0f5      	beq.n	80002de <ContinuousReadSingleChannel+0x7a>

	// select the channel, only one conversion so it goes in
	//  the first conversion slot (SQ1)
	//  and the L value should be 0 (L=0000 does one conversion only)
	ADC_port->ADCx->SQR1 = 0; // clear any existing channel requests
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2200      	movs	r2, #0
 80002f8:	631a      	str	r2, [r3, #48]	; 0x30
	ADC_port->ADCx->SQR1 |= ADC_port->Channel1 << ADC_port->Channel1Pos; // request channel 2
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000302:	fa02 f103 	lsl.w	r1, r2, r3
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	430a      	orrs	r2, r1
 8000312:	631a      	str	r2, [r3, #48]	; 0x30
	ADC_port->ADCx->SQR1 |= ADC_port->Channel2 << ADC_port->Channel2Pos; // request channel 2
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800031c:	fa02 f103 	lsl.w	r1, r2, r3
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	430a      	orrs	r2, r1
 800032c:	631a      	str	r2, [r3, #48]	; 0x30
	ADC_port->ADCx->SQR1 |= ADC_port->Channel3 << ADC_port->Channel3Pos; // request channel 2
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000336:	fa02 f103 	lsl.w	r1, r2, r3
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	430a      	orrs	r2, r1
 8000346:	631a      	str	r2, [r3, #48]	; 0x30
	ADC_port->ADCx->SQR1 |= ADC_port->Channel4 << ADC_port->Channel4Pos; // request channel 2
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000350:	fa02 f103 	lsl.w	r1, r2, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	430a      	orrs	r2, r1
 8000360:	631a      	str	r2, [r3, #48]	; 0x30
	ADC_port->ADCx->SQR1 |= ADC_port->NumChannels << ADC_port->NumChannelsPos; // set the number of channels to read
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	6a1a      	ldr	r2, [r3, #32]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800036a:	fa02 f103 	lsl.w	r1, r2, r3
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	430a      	orrs	r2, r1
 800037a:	631a      	str	r2, [r3, #48]	; 0x30

	// continuous mode
	ADC_port->ADCx->CFGR |= ADC_port->RunningMode;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	68da      	ldr	r2, [r3, #12]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	430a      	orrs	r2, r1
 800038c:	60da      	str	r2, [r3, #12]

	// Enable ADC
	ADC_port->ADCx->CR |= ADC_port->ADCEnable;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	689a      	ldr	r2, [r3, #8]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	430a      	orrs	r2, r1
 800039e:	609a      	str	r2, [r3, #8]

	while (ADC_port->ADCx->ISR == 0); //Wait the ADC to be ready.
 80003a0:	bf00      	nop
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d0fa      	beq.n	80003a2 <ContinuousReadSingleChannel+0x13e>

	// request the process to start
	// only need once in continuous mode
	ADC_port->ADCx->CR |= ADC_port->ADCStart;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	689a      	ldr	r2, [r3, #8]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	430a      	orrs	r2, r1
 80003bc:	609a      	str	r2, [r3, #8]

	ADC_port->value_1 = 0;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2200      	movs	r2, #0
 80003c2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	ADC_port->scale_1 = 0;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	2200      	movs	r2, #0
 80003ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Loop forever */
	for(;;) {

		// Wait for the end of conversion
		while(!(ADC_port->ADCx->ISR &= ADC_ISR_EOC));
 80003ce:	bf00      	nop
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	6812      	ldr	r2, [r2, #0]
 80003da:	f003 0304 	and.w	r3, r3, #4
 80003de:	6013      	str	r3, [r2, #0]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d0f5      	beq.n	80003d0 <ContinuousReadSingleChannel+0x16c>

		ADC_port->value_1 = ADC_port->ADCx->DR;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003ea:	b29a      	uxth	r2, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

		// read the value from ADC1->DR,
		// full range is 12 bits (0xFFF maximum)
		// divide the scale into 8 even partitions (for 8 leds)
		ADC_port->scale_1 = ADC_port->value_1 / (0xfff / 8);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80003f8:	b29a      	uxth	r2, r3
 80003fa:	4b12      	ldr	r3, [pc, #72]	; (8000444 <ContinuousReadSingleChannel+0x1e0>)
 80003fc:	fba3 1302 	umull	r1, r3, r3, r2
 8000400:	1ad2      	subs	r2, r2, r3
 8000402:	0852      	lsrs	r2, r2, #1
 8000404:	4413      	add	r3, r2
 8000406:	0a1b      	lsrs	r3, r3, #8
 8000408:	b29a      	uxth	r2, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

		if (ADC_port->scale_1 > 7) {
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8000416:	b29b      	uxth	r3, r3
 8000418:	2b07      	cmp	r3, #7
 800041a:	d903      	bls.n	8000424 <ContinuousReadSingleChannel+0x1c0>
			ADC_port->scale_1 = 7;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2207      	movs	r2, #7
 8000420:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		}

		*led_register = 1 << ADC_port->scale_1 ;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800042a:	b29b      	uxth	r3, r3
 800042c:	461a      	mov	r2, r3
 800042e:	2301      	movs	r3, #1
 8000430:	4093      	lsls	r3, r2
 8000432:	b2da      	uxtb	r2, r3
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	701a      	strb	r2, [r3, #0]
		while(!(ADC_port->ADCx->ISR &= ADC_ISR_EOC));
 8000438:	e7c9      	b.n	80003ce <ContinuousReadSingleChannel+0x16a>
 800043a:	bf00      	nop
 800043c:	48001015 	.word	0x48001015
 8000440:	40021000 	.word	0x40021000
 8000444:	00804021 	.word	0x00804021

08000448 <enable_ADC3_interrupt>:
	NVIC_SetPriority(ADC1_2_IRQn, 3);  // Set Priority
	NVIC_EnableIRQ(ADC1_2_IRQn);
	__enable_irq();
}

void enable_ADC3_interrupt() {
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800044c:	b672      	cpsid	i
}
 800044e:	bf00      	nop
	__disable_irq();
	NVIC_SetPriority(ADC3_IRQn, 2);  // Set Priority
 8000450:	2102      	movs	r1, #2
 8000452:	202f      	movs	r0, #47	; 0x2f
 8000454:	f7ff fedc 	bl	8000210 <__NVIC_SetPriority>
	NVIC_EnableIRQ(ADC3_IRQn);
 8000458:	202f      	movs	r0, #47	; 0x2f
 800045a:	f7ff febb 	bl	80001d4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800045e:	b662      	cpsie	i
}
 8000460:	bf00      	nop
	__enable_irq();
}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}

08000466 <toggle_EOC_interrupt>:

void toggle_EOC_interrupt(ADCxPort *ADC_port) {
 8000466:	b480      	push	{r7}
 8000468:	b083      	sub	sp, #12
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
	ADC_port->ADCx->IER ^= ADC_IER_EOCIE;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	685a      	ldr	r2, [r3, #4]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f082 0204 	eor.w	r2, r2, #4
 800047c:	605a      	str	r2, [r3, #4]
}
 800047e:	bf00      	nop
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr

0800048a <toggle_ADRDY_interrupt>:

void toggle_ADRDY_interrupt(ADCxPort *ADC_port) {
 800048a:	b480      	push	{r7}
 800048c:	b083      	sub	sp, #12
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
	ADC_port->ADCx->IER ^= ADC_IER_ADRDYIE;
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	685a      	ldr	r2, [r3, #4]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f082 0201 	eor.w	r2, r2, #1
 80004a0:	605a      	str	r2, [r3, #4]
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <toggle_EOS_interrupt>:

void toggle_EOS_interrupt(ADCxPort *ADC_port) {
 80004ae:	b480      	push	{r7}
 80004b0:	b083      	sub	sp, #12
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
	ADC_port->ADCx->IER ^= ADC_IER_EOSIE;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	685a      	ldr	r2, [r3, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f082 0208 	eor.w	r2, r2, #8
 80004c4:	605a      	str	r2, [r3, #4]
}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
	...

080004d4 <ADCInitialise>:


void ADCInitialise(ADCxPort *ADC_port) {
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	RCC->AHBENR |= ADC_port->AHBENREnable;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	689a      	ldr	r2, [r3, #8]
 80004e0:	4b4d      	ldr	r3, [pc, #308]	; (8000618 <ADCInitialise+0x144>)
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	494c      	ldr	r1, [pc, #304]	; (8000618 <ADCInitialise+0x144>)
 80004e6:	4313      	orrs	r3, r2
 80004e8:	614b      	str	r3, [r1, #20]

	// set to synchronise the ADC with the clock
	ADC_port->ADCx_Common->CCR |= ADC_port->ClockMode;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	68d9      	ldr	r1, [r3, #12]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	689a      	ldr	r2, [r3, #8]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	430a      	orrs	r2, r1
 80004fa:	609a      	str	r2, [r3, #8]

	// ADEN must be = 0 for configuration (is the default)
	ADC_port->ADCx->CR &= ~ADC_port->VoltageRegulatorClear; // clear voltage regulator enable
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	691b      	ldr	r3, [r3, #16]
 8000500:	43d9      	mvns	r1, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	689a      	ldr	r2, [r3, #8]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	400a      	ands	r2, r1
 800050e:	609a      	str	r2, [r3, #8]
	ADC_port->ADCx->CR |= ADC_port->VoltageRegulatorMode; // set ADVREGEN TO 01
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	6959      	ldr	r1, [r3, #20]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	689a      	ldr	r2, [r3, #8]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	430a      	orrs	r2, r1
 8000520:	609a      	str	r2, [r3, #8]
	ADC_port->ADCx->CR &= ~ADC_port->DifferentialModeForCalibration; // clear bit to enable Single-ended-input
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	43d9      	mvns	r1, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	689a      	ldr	r2, [r3, #8]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	400a      	ands	r2, r1
 8000534:	609a      	str	r2, [r3, #8]

	// calibrate the ADC (self calibration routine)
	ADC_port->ADCx->CR |= ADC_port->ADCCalibrate;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	69d9      	ldr	r1, [r3, #28]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	689a      	ldr	r2, [r3, #8]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	430a      	orrs	r2, r1
 8000546:	609a      	str	r2, [r3, #8]
	while((ADC_port->ADCx->CR & ADC_port->ADCCalibrate) == ADC_port->ADCCalibrate); // Waiting for the calibration to finish
 8000548:	bf00      	nop
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	689a      	ldr	r2, [r3, #8]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	69db      	ldr	r3, [r3, #28]
 8000554:	401a      	ands	r2, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	429a      	cmp	r2, r3
 800055c:	d0f5      	beq.n	800054a <ADCInitialise+0x76>

	// select the channel, only one conversion so it goes in
	//  the first conversion slot (SQ1)
	//  and the L value should be 0 (L=0000 does one conversion only)
	ADC_port->ADCx->SQR1 = 0; // clear any existing channel requests
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2200      	movs	r2, #0
 8000564:	631a      	str	r2, [r3, #48]	; 0x30
	ADC_port->ADCx->SQR1 |= ADC_port->Channel1 << ADC_port->Channel1Pos; // request channel 2
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800056e:	fa02 f103 	lsl.w	r1, r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	430a      	orrs	r2, r1
 800057e:	631a      	str	r2, [r3, #48]	; 0x30
	ADC_port->ADCx->SQR1 |= ADC_port->Channel2 << ADC_port->Channel2Pos; // request channel 2
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000588:	fa02 f103 	lsl.w	r1, r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	430a      	orrs	r2, r1
 8000598:	631a      	str	r2, [r3, #48]	; 0x30
	ADC_port->ADCx->SQR1 |= ADC_port->Channel3 << ADC_port->Channel3Pos; // request channel 2
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a2:	fa02 f103 	lsl.w	r1, r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	430a      	orrs	r2, r1
 80005b2:	631a      	str	r2, [r3, #48]	; 0x30
	ADC_port->ADCx->SQR1 |= ADC_port->Channel4 << ADC_port->Channel4Pos; // request channel 2
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005bc:	fa02 f103 	lsl.w	r1, r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	430a      	orrs	r2, r1
 80005cc:	631a      	str	r2, [r3, #48]	; 0x30
	ADC_port->ADCx->SQR1 |= ADC_port->NumChannels << ADC_port->NumChannelsPos; // set the number of channels to read
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	6a1a      	ldr	r2, [r3, #32]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005d6:	fa02 f103 	lsl.w	r1, r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	430a      	orrs	r2, r1
 80005e6:	631a      	str	r2, [r3, #48]	; 0x30

	// one shot mode
	ADC_port->ADCx->CFGR |= ADC_port->RunningMode;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	68da      	ldr	r2, [r3, #12]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	430a      	orrs	r2, r1
 80005f8:	60da      	str	r2, [r3, #12]

	// Enable ADC
	ADC_port->ADCx->CR |= ADC_port->ADCEnable;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	689a      	ldr	r2, [r3, #8]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	430a      	orrs	r2, r1
 800060a:	609a      	str	r2, [r3, #8]
	//ADC1->CR |= ADC_CR_ADEN;

}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	40021000 	.word	0x40021000

0800061c <SingleReadMultiChannelADCInterrupt>:

void SingleReadMultiChannelADCInterrupt(ADCxPort *ADC_port) {
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	// get a pointer to the location of the LEDs
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000624:	4b87      	ldr	r3, [pc, #540]	; (8000844 <SingleReadMultiChannelADCInterrupt+0x228>)
 8000626:	60fb      	str	r3, [r7, #12]
			}
		}

	*/
		// request the process to start
		ADC_port->ADCx->CR |= ADC_port->ADCStart;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	689a      	ldr	r2, [r3, #8]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	430a      	orrs	r2, r1
 8000638:	609a      	str	r2, [r3, #8]

		if (((ADC_port->ADCx->ISR & ADC_ISR_EOC) != 0) && (ADC_port->value_4 == 0)){
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f003 0304 	and.w	r3, r3, #4
 8000644:	2b00      	cmp	r3, #0
 8000646:	d04b      	beq.n	80006e0 <SingleReadMultiChannelADCInterrupt+0xc4>
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800064e:	b29b      	uxth	r3, r3
 8000650:	2b00      	cmp	r3, #0
 8000652:	d145      	bne.n	80006e0 <SingleReadMultiChannelADCInterrupt+0xc4>
			if (ADC_port->conversion_counter == 0) {
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800065a:	b29b      	uxth	r3, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	d13f      	bne.n	80006e0 <SingleReadMultiChannelADCInterrupt+0xc4>
					ADC_port->value_1 = ADC_port->ADCx->DR;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	b29a      	uxth	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
					ADC_port->conversion_counter++;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8000674:	b29b      	uxth	r3, r3
 8000676:	3301      	adds	r3, #1
 8000678:	b29a      	uxth	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
					ADC_port->value_2 = ADC_port->ADCx->DR;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000686:	b29a      	uxth	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
					ADC_port->conversion_counter++;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8000694:	b29b      	uxth	r3, r3
 8000696:	3301      	adds	r3, #1
 8000698:	b29a      	uxth	r2, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
					ADC_port->value_3 = ADC_port->ADCx->DR;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
					ADC_port->conversion_counter++;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	3301      	adds	r3, #1
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
					ADC_port->value_4 = ADC_port->ADCx->DR;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
					ADC_port->conversion_counter++;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	3301      	adds	r3, #1
 80006d8:	b29a      	uxth	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
			}
		}
		//Conversion Sequence has been finished
		if (((ADC_port->ADCx->ISR & ADC_ISR_EOS) != 0) && (ADC_port->conversion_counter > ADC_port->NumChannels)){
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	f000 80a3 	beq.w	8000836 <SingleReadMultiChannelADCInterrupt+0x21a>
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	461a      	mov	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6a1b      	ldr	r3, [r3, #32]
 80006fe:	429a      	cmp	r2, r3
 8000700:	f240 8099 	bls.w	8000836 <SingleReadMultiChannelADCInterrupt+0x21a>
			//Reset sequence flag
			//ADC2->ISR &= ADC_ISR_EOS;

			//Get scaled values so we can put them into the display/LEDs
			ADC_port->scale_1 = ADC_port->value_1 / (0xfff / 2);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800070a:	b29a      	uxth	r2, r3
 800070c:	4b4e      	ldr	r3, [pc, #312]	; (8000848 <SingleReadMultiChannelADCInterrupt+0x22c>)
 800070e:	fba3 1302 	umull	r1, r3, r3, r2
 8000712:	1ad2      	subs	r2, r2, r3
 8000714:	0852      	lsrs	r2, r2, #1
 8000716:	4413      	add	r3, r2
 8000718:	0a9b      	lsrs	r3, r3, #10
 800071a:	b29a      	uxth	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

			if (ADC_port->scale_1 > 1) {
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8000728:	b29b      	uxth	r3, r3
 800072a:	2b01      	cmp	r3, #1
 800072c:	d903      	bls.n	8000736 <SingleReadMultiChannelADCInterrupt+0x11a>
				ADC_port->scale_1 = 1;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2201      	movs	r2, #1
 8000732:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
			}

			// full range is 12 bits (0xFFF maximum)
			// divide the scale into 4 even partitions (for 4 leds)
			ADC_port->scale_2 = ADC_port->value_2 / (0xfff / 2);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800073c:	b29a      	uxth	r2, r3
 800073e:	4b42      	ldr	r3, [pc, #264]	; (8000848 <SingleReadMultiChannelADCInterrupt+0x22c>)
 8000740:	fba3 1302 	umull	r1, r3, r3, r2
 8000744:	1ad2      	subs	r2, r2, r3
 8000746:	0852      	lsrs	r2, r2, #1
 8000748:	4413      	add	r3, r2
 800074a:	0a9b      	lsrs	r3, r3, #10
 800074c:	b29a      	uxth	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

			if (ADC_port->scale_2 > 1) {
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800075a:	b29b      	uxth	r3, r3
 800075c:	2b01      	cmp	r3, #1
 800075e:	d903      	bls.n	8000768 <SingleReadMultiChannelADCInterrupt+0x14c>
				ADC_port->scale_2 = 1;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2201      	movs	r2, #1
 8000764:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
			}

			ADC_port->scale_3 = ADC_port->value_3 / (0xfff / 2);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800076e:	b29a      	uxth	r2, r3
 8000770:	4b35      	ldr	r3, [pc, #212]	; (8000848 <SingleReadMultiChannelADCInterrupt+0x22c>)
 8000772:	fba3 1302 	umull	r1, r3, r3, r2
 8000776:	1ad2      	subs	r2, r2, r3
 8000778:	0852      	lsrs	r2, r2, #1
 800077a:	4413      	add	r3, r2
 800077c:	0a9b      	lsrs	r3, r3, #10
 800077e:	b29a      	uxth	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

			if (ADC_port->scale_3 > 1) {
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800078c:	b29b      	uxth	r3, r3
 800078e:	2b01      	cmp	r3, #1
 8000790:	d903      	bls.n	800079a <SingleReadMultiChannelADCInterrupt+0x17e>
				ADC_port->scale_3 = 1;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2201      	movs	r2, #1
 8000796:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
			}

			ADC_port->scale_4 = ADC_port->value_4 / (0xfff / 2);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	4b29      	ldr	r3, [pc, #164]	; (8000848 <SingleReadMultiChannelADCInterrupt+0x22c>)
 80007a4:	fba3 1302 	umull	r1, r3, r3, r2
 80007a8:	1ad2      	subs	r2, r2, r3
 80007aa:	0852      	lsrs	r2, r2, #1
 80007ac:	4413      	add	r3, r2
 80007ae:	0a9b      	lsrs	r3, r3, #10
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

			if (ADC_port->scale_4 > 1) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80007be:	b29b      	uxth	r3, r3
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d903      	bls.n	80007cc <SingleReadMultiChannelADCInterrupt+0x1b0>
				ADC_port->scale_4 = 1;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2201      	movs	r2, #1
 80007c8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
			}
			// draw the state of channel 2 in the first 4 LEDs
			// and the state of channel 3 in the second set of 4 LEDs
			*led_register = 1 << ADC_port->scale_1 | 1 << (ADC_port->scale_2 + 2) | 1 << (ADC_port->scale_3 + 4); //| 1 << (ADC_port->scale_4 + 6);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	461a      	mov	r2, r3
 80007d6:	2301      	movs	r3, #1
 80007d8:	4093      	lsls	r3, r2
 80007da:	b25a      	sxtb	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	3302      	adds	r3, #2
 80007e6:	2101      	movs	r1, #1
 80007e8:	fa01 f303 	lsl.w	r3, r1, r3
 80007ec:	b25b      	sxtb	r3, r3
 80007ee:	4313      	orrs	r3, r2
 80007f0:	b25a      	sxtb	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	3304      	adds	r3, #4
 80007fc:	2101      	movs	r1, #1
 80007fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000802:	b25b      	sxtb	r3, r3
 8000804:	4313      	orrs	r3, r2
 8000806:	b25b      	sxtb	r3, r3
 8000808:	b2da      	uxtb	r2, r3
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	701a      	strb	r2, [r3, #0]
			ADC_port->value_1 = 0;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2200      	movs	r2, #0
 8000812:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			ADC_port->value_2 = 0;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2200      	movs	r2, #0
 800081a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			ADC_port->value_3 = 0;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			ADC_port->value_4 = 0;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2200      	movs	r2, #0
 800082a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			ADC_port->conversion_counter = 0;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2200      	movs	r2, #0
 8000832:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		}

	//}

}
 8000836:	bf00      	nop
 8000838:	3714      	adds	r7, #20
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	48001015 	.word	0x48001015
 8000848:	00200401 	.word	0x00200401

0800084c <spin_and_count_leds>:
	1,
	0,
	3,
};

void spin_and_count_leds(ADCxPort *ADC, GameData *game_data){
 800084c:	b480      	push	{r7}
 800084e:	b087      	sub	sp, #28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000856:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <spin_and_count_leds+0xac>)
 8000858:	60fb      	str	r3, [r7, #12]
	int position = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]


	if (ADC->scale_1 == 1){
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8000864:	b29b      	uxth	r3, r3
 8000866:	2b01      	cmp	r3, #1
 8000868:	d107      	bne.n	800087a <spin_and_count_leds+0x2e>
		game_data->StartCounter++;
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	785b      	ldrb	r3, [r3, #1]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	3301      	adds	r3, #1
 8000872:	b2da      	uxtb	r2, r3
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	705a      	strb	r2, [r3, #1]
 8000878:	e002      	b.n	8000880 <spin_and_count_leds+0x34>
	}
	else {
		game_data->StartCounter = 0;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	2200      	movs	r2, #0
 800087e:	705a      	strb	r2, [r3, #1]

		for (uint32_t i = 0; i < 0x4FFF; i++);

	}
	*/
	if (game_data->StartCounter >= game_data->StartValue){
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	785b      	ldrb	r3, [r3, #1]
 8000884:	b2da      	uxtb	r2, r3
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	429a      	cmp	r2, r3
 800088e:	d32c      	bcc.n	80008ea <spin_and_count_leds+0x9e>
		for (int i = 0; i <= game_data->StartCounter; i++) {
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	e014      	b.n	80008c0 <spin_and_count_leds+0x74>
			*led_register |= 1 << (8 - i);
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	b25a      	sxtb	r2, r3
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	f1c3 0308 	rsb	r3, r3, #8
 80008a2:	2101      	movs	r1, #1
 80008a4:	fa01 f303 	lsl.w	r3, r1, r3
 80008a8:	b25b      	sxtb	r3, r3
 80008aa:	4313      	orrs	r3, r2
 80008ac:	b25b      	sxtb	r3, r3
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	701a      	strb	r2, [r3, #0]
			game_data->GamePhaseValue = 2;
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	2202      	movs	r2, #2
 80008b8:	709a      	strb	r2, [r3, #2]
		for (int i = 0; i <= game_data->StartCounter; i++) {
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	3301      	adds	r3, #1
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	785b      	ldrb	r3, [r3, #1]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	461a      	mov	r2, r3
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	4293      	cmp	r3, r2
 80008cc:	dde3      	ble.n	8000896 <spin_and_count_leds+0x4a>
		}
		//Flash leds to Start
		for (uint32_t i = 0; i < 0xAFFF; i++);
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	e002      	b.n	80008da <spin_and_count_leds+0x8e>
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	3301      	adds	r3, #1
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	f64a 72fe 	movw	r2, #45054	; 0xaffe
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d9f7      	bls.n	80008d4 <spin_and_count_leds+0x88>
		game_data->StartCounter = 0;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	2200      	movs	r2, #0
 80008e8:	705a      	strb	r2, [r3, #1]
	}
}
 80008ea:	bf00      	nop
 80008ec:	371c      	adds	r7, #28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	48001015 	.word	0x48001015

080008fc <GameTimer>:

void GameTimer(ADCxPort *ADC, GameData *game_data){
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000906:	4b0d      	ldr	r3, [pc, #52]	; (800093c <GameTimer+0x40>)
 8000908:	60fb      	str	r3, [r7, #12]
	if (game_data->Phase2Timer == game_data->Phase2TimeLimit){
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	78db      	ldrb	r3, [r3, #3]
 800090e:	b2da      	uxtb	r2, r3
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	791b      	ldrb	r3, [r3, #4]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	429a      	cmp	r2, r3
 8000918:	d103      	bne.n	8000922 <GameTimer+0x26>
		*led_register = 0xFF;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	22ff      	movs	r2, #255	; 0xff
 800091e:	701a      	strb	r2, [r3, #0]
		for(;;);
 8000920:	e7fe      	b.n	8000920 <GameTimer+0x24>
	}
	else {
		game_data->Phase2Timer++;
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	78db      	ldrb	r3, [r3, #3]
 8000926:	b2db      	uxtb	r3, r3
 8000928:	3301      	adds	r3, #1
 800092a:	b2da      	uxtb	r2, r3
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	70da      	strb	r2, [r3, #3]
	}

}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	48001015 	.word	0x48001015

08000940 <spin_leds>:
	if (*led_register == 0) {
		*led_register = 1;
	}
}

void spin_leds(){
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <spin_leds+0x60>)
 8000948:	607b      	str	r3, [r7, #4]
	int position = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
	while (position <= 7) {
 800094e:	e01d      	b.n	800098c <spin_leds+0x4c>
		*led_register = 0x00;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
		*led_register |= 1 << position;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	b25a      	sxtb	r2, r3
 800095c:	2101      	movs	r1, #1
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	fa01 f303 	lsl.w	r3, r1, r3
 8000964:	b25b      	sxtb	r3, r3
 8000966:	4313      	orrs	r3, r2
 8000968:	b25b      	sxtb	r3, r3
 800096a:	b2da      	uxtb	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	701a      	strb	r2, [r3, #0]
		position++;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	3301      	adds	r3, #1
 8000974:	60fb      	str	r3, [r7, #12]
		for (uint32_t i = 0; i < 0xAFFF; i++);
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	e002      	b.n	8000982 <spin_leds+0x42>
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	3301      	adds	r3, #1
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	f64a 72fe 	movw	r2, #45054	; 0xaffe
 8000988:	4293      	cmp	r3, r2
 800098a:	d9f7      	bls.n	800097c <spin_leds+0x3c>
	while (position <= 7) {
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	2b07      	cmp	r3, #7
 8000990:	ddde      	ble.n	8000950 <spin_leds+0x10>
	}
}
 8000992:	bf00      	nop
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	48001015 	.word	0x48001015

080009a4 <__NVIC_EnableIRQ>:
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	db0b      	blt.n	80009ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	f003 021f 	and.w	r2, r3, #31
 80009bc:	4907      	ldr	r1, [pc, #28]	; (80009dc <__NVIC_EnableIRQ+0x38>)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	095b      	lsrs	r3, r3, #5
 80009c4:	2001      	movs	r0, #1
 80009c6:	fa00 f202 	lsl.w	r2, r0, r2
 80009ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000e100 	.word	0xe000e100

080009e0 <__NVIC_SetPriority>:
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	db0a      	blt.n	8000a0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	490c      	ldr	r1, [pc, #48]	; (8000a2c <__NVIC_SetPriority+0x4c>)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	0112      	lsls	r2, r2, #4
 8000a00:	b2d2      	uxtb	r2, r2
 8000a02:	440b      	add	r3, r1
 8000a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a08:	e00a      	b.n	8000a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4908      	ldr	r1, [pc, #32]	; (8000a30 <__NVIC_SetPriority+0x50>)
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	f003 030f 	and.w	r3, r3, #15
 8000a16:	3b04      	subs	r3, #4
 8000a18:	0112      	lsls	r2, r2, #4
 8000a1a:	b2d2      	uxtb	r2, r2
 8000a1c:	440b      	add	r3, r1
 8000a1e:	761a      	strb	r2, [r3, #24]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000e100 	.word	0xe000e100
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <enable_clocks>:
void (*TIM2_interrupt)(GameData *game_data1) = 0x00;
void (*on_timer2_complete)(ADCxPort *ADC_port, GameData *game_data1) = 0x00;


// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <enable_clocks+0x34>)
 8000a3a:	695b      	ldr	r3, [r3, #20]
 8000a3c:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <enable_clocks+0x34>)
 8000a3e:	f443 1338 	orr.w	r3, r3, #3014656	; 0x2e0000
 8000a42:	6153      	str	r3, [r2, #20]

	// enable the clock for ADC1
	RCC->AHBENR |= RCC_AHBENR_ADC12EN;
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <enable_clocks+0x34>)
 8000a46:	695b      	ldr	r3, [r3, #20]
 8000a48:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <enable_clocks+0x34>)
 8000a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBENR_ADC34EN;
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <enable_clocks+0x34>)
 8000a52:	695b      	ldr	r3, [r3, #20]
 8000a54:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <enable_clocks+0x34>)
 8000a56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a5a:	6153      	str	r3, [r2, #20]
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40021000 	.word	0x40021000

08000a6c <initialise_board>:

// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0

	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <initialise_board+0x20>)
 8000a74:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f245 5255 	movw	r2, #21845	; 0x5555
 8000a7c:	801a      	strh	r2, [r3, #0]
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	48001002 	.word	0x48001002

08000a90 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler() {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	if (ADC12_interrupt != 0x00) {
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <ADC1_2_IRQHandler+0x18>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <ADC1_2_IRQHandler+0x14>
		ADC12_interrupt(&ADC2_Port);
 8000a9c:	4b02      	ldr	r3, [pc, #8]	; (8000aa8 <ADC1_2_IRQHandler+0x18>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <ADC1_2_IRQHandler+0x1c>)
 8000aa2:	4798      	blx	r3
	}
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000144 	.word	0x20000144
 8000aac:	20000000 	.word	0x20000000

08000ab0 <ADC3_IRQHandler>:

void ADC3_IRQHandler() {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	if (ADC3_interrupt != 0x00) {
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <ADC3_IRQHandler+0x18>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <ADC3_IRQHandler+0x14>
		ADC3_interrupt(&ADC3_Port);
 8000abc:	4b02      	ldr	r3, [pc, #8]	; (8000ac8 <ADC3_IRQHandler+0x18>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <ADC3_IRQHandler+0x1c>)
 8000ac2:	4798      	blx	r3
	}
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000148 	.word	0x20000148
 8000acc:	20000068 	.word	0x20000068

08000ad0 <EXTI0_IRQHandler>:

void (*on_button_press)() = 0x00;

void EXTI0_IRQHandler(void) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	// run the button press handler (make sure it is not null first !)
	if (on_button_press != 0x00) {
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <EXTI0_IRQHandler+0x24>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d002      	beq.n	8000ae2 <EXTI0_IRQHandler+0x12>
		on_button_press();
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <EXTI0_IRQHandler+0x24>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4798      	blx	r3
	}

	// reset the interrupt (so it doesn't keep firing until the next trigger)
	EXTI->PR |= EXTI_PR_PR0;
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <EXTI0_IRQHandler+0x28>)
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <EXTI0_IRQHandler+0x28>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6153      	str	r3, [r2, #20]
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000150 	.word	0x20000150
 8000af8:	40010400 	.word	0x40010400

08000afc <EnableEXTIInterrupt>:

void EnableEXTIInterrupt() {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	//  otherwise can lead to strange behaviour
	__disable_irq();

	// Enable the system configuration controller (SYSCFG in RCC)
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <EnableEXTIInterrupt+0x48>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <EnableEXTIInterrupt+0x48>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	6193      	str	r3, [r2, #24]

	// External Interrupts details on large manual page 294)
	// PA0 is on interrupt EXTI0 large manual - page 250
	// EXTI0 in  SYSCFG_EXTICR1 needs to be 0x00 (SYSCFG_EXTICR1_EXTI0_PA)
	SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 8000b10:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <EnableEXTIInterrupt+0x4c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]

	//  Select EXTI0 interrupt on rising edge
	EXTI->RTSR |= EXTI_RTSR_TR0; // rising edge of EXTI line 0 (includes PA0)
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <EnableEXTIInterrupt+0x50>)
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	4a0c      	ldr	r2, [pc, #48]	; (8000b4c <EnableEXTIInterrupt+0x50>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6093      	str	r3, [r2, #8]

	// set the interrupt from EXTI line 0 as 'not masked' - as in, enable it.
	EXTI->IMR |= EXTI_IMR_MR0;
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <EnableEXTIInterrupt+0x50>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a09      	ldr	r2, [pc, #36]	; (8000b4c <EnableEXTIInterrupt+0x50>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6013      	str	r3, [r2, #0]

	// Tell the NVIC module that EXTI0 interrupts should be handled
	NVIC_SetPriority(EXTI0_IRQn, 1);  // Set Priority
 8000b2e:	2101      	movs	r1, #1
 8000b30:	2006      	movs	r0, #6
 8000b32:	f7ff ff55 	bl	80009e0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000b36:	2006      	movs	r0, #6
 8000b38:	f7ff ff34 	bl	80009a4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b3c:	b662      	cpsie	i
}
 8000b3e:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010000 	.word	0x40010000
 8000b4c:	40010400 	.word	0x40010400

08000b50 <Timer2CompletionFunction>:

void Timer2CompletionFunction() {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	if (game_data1.GamePhaseValue == 1) {
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <Timer2CompletionFunction+0x68>)
 8000b56:	789b      	ldrb	r3, [r3, #2]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d109      	bne.n	8000b72 <Timer2CompletionFunction+0x22>
		if (on_timer2_complete != 0x00) {
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <Timer2CompletionFunction+0x6c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d025      	beq.n	8000bb2 <Timer2CompletionFunction+0x62>
			on_timer2_complete(&ADC3_Port, &game_data1);
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <Timer2CompletionFunction+0x6c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4913      	ldr	r1, [pc, #76]	; (8000bb8 <Timer2CompletionFunction+0x68>)
 8000b6c:	4814      	ldr	r0, [pc, #80]	; (8000bc0 <Timer2CompletionFunction+0x70>)
 8000b6e:	4798      	blx	r3
		if (on_timer2_complete != 0x00) {
			on_timer2_complete(&ADC2_Port, &game_data1);
		}
	}

}
 8000b70:	e01f      	b.n	8000bb2 <Timer2CompletionFunction+0x62>
	else if (game_data1.GamePhaseValue == 2) {
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <Timer2CompletionFunction+0x68>)
 8000b74:	789b      	ldrb	r3, [r3, #2]
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d10c      	bne.n	8000b96 <Timer2CompletionFunction+0x46>
		on_timer2_complete = &GameTimer;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <Timer2CompletionFunction+0x6c>)
 8000b7e:	4a11      	ldr	r2, [pc, #68]	; (8000bc4 <Timer2CompletionFunction+0x74>)
 8000b80:	601a      	str	r2, [r3, #0]
		if (on_timer2_complete != 0x00) {
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <Timer2CompletionFunction+0x6c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d013      	beq.n	8000bb2 <Timer2CompletionFunction+0x62>
			on_timer2_complete(&ADC3_Port, &game_data1);
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <Timer2CompletionFunction+0x6c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	490a      	ldr	r1, [pc, #40]	; (8000bb8 <Timer2CompletionFunction+0x68>)
 8000b90:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <Timer2CompletionFunction+0x70>)
 8000b92:	4798      	blx	r3
}
 8000b94:	e00d      	b.n	8000bb2 <Timer2CompletionFunction+0x62>
	else if (game_data1.GamePhaseValue == 3) {
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <Timer2CompletionFunction+0x68>)
 8000b98:	789b      	ldrb	r3, [r3, #2]
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b03      	cmp	r3, #3
 8000b9e:	d108      	bne.n	8000bb2 <Timer2CompletionFunction+0x62>
		if (on_timer2_complete != 0x00) {
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <Timer2CompletionFunction+0x6c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d004      	beq.n	8000bb2 <Timer2CompletionFunction+0x62>
			on_timer2_complete(&ADC2_Port, &game_data1);
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <Timer2CompletionFunction+0x6c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4902      	ldr	r1, [pc, #8]	; (8000bb8 <Timer2CompletionFunction+0x68>)
 8000bae:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <Timer2CompletionFunction+0x78>)
 8000bb0:	4798      	blx	r3
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200000d0 	.word	0x200000d0
 8000bbc:	2000014c 	.word	0x2000014c
 8000bc0:	20000068 	.word	0x20000068
 8000bc4:	080008fd 	.word	0x080008fd
 8000bc8:	20000000 	.word	0x20000000

08000bcc <main>:

int main(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
	enable_clocks();
 8000bd2:	f7ff ff2f 	bl	8000a34 <enable_clocks>
	initialise_board();
 8000bd6:	f7ff ff49 	bl	8000a6c <initialise_board>

	on_button_press = &spin_leds;
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <main+0x74>)
 8000bdc:	4a19      	ldr	r2, [pc, #100]	; (8000c44 <main+0x78>)
 8000bde:	601a      	str	r2, [r3, #0]
	EnableEXTIInterrupt();
 8000be0:	f7ff ff8c 	bl	8000afc <EnableEXTIInterrupt>
	enable_timer_interrupt();
 8000be4:	f000 f922 	bl	8000e2c <enable_timer_interrupt>



	// check if the button is pressed, determine which mode
	//  to enter.
	if ((GPIOA->IDR & 0x01) == 0){
 8000be8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bec:	691b      	ldr	r3, [r3, #16]
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d11f      	bne.n	8000c36 <main+0x6a>
		//SingleReadMultiChannelADC2();


		ADC12_interrupt = &SingleReadMultiChannelADCInterrupt;
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <main+0x7c>)
 8000bf8:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <main+0x80>)
 8000bfa:	601a      	str	r2, [r3, #0]
		ADC3_interrupt = &SingleReadMultiChannelADCInterrupt;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <main+0x84>)
 8000bfe:	4a13      	ldr	r2, [pc, #76]	; (8000c4c <main+0x80>)
 8000c00:	601a      	str	r2, [r3, #0]
		//enable_ADC12_interrupt();
		enable_ADC3_interrupt();
 8000c02:	f7ff fc21 	bl	8000448 <enable_ADC3_interrupt>
		toggle_EOC_interrupt(&ADC3_Port);
 8000c06:	4813      	ldr	r0, [pc, #76]	; (8000c54 <main+0x88>)
 8000c08:	f7ff fc2d 	bl	8000466 <toggle_EOC_interrupt>
		toggle_ADRDY_interrupt(&ADC3_Port);
 8000c0c:	4811      	ldr	r0, [pc, #68]	; (8000c54 <main+0x88>)
 8000c0e:	f7ff fc3c 	bl	800048a <toggle_ADRDY_interrupt>
		toggle_EOS_interrupt(&ADC3_Port);
 8000c12:	4810      	ldr	r0, [pc, #64]	; (8000c54 <main+0x88>)
 8000c14:	f7ff fc4b 	bl	80004ae <toggle_EOS_interrupt>

		on_timer2_complete = &spin_and_count_leds;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <main+0x8c>)
 8000c1a:	4a10      	ldr	r2, [pc, #64]	; (8000c5c <main+0x90>)
 8000c1c:	601a      	str	r2, [r3, #0]
		uint32_t period = 1000; // ms
 8000c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c22:	607b      	str	r3, [r7, #4]
		TimerInitialise(&TIM2_init, period, &Timer2CompletionFunction);
 8000c24:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <main+0x94>)
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	480e      	ldr	r0, [pc, #56]	; (8000c64 <main+0x98>)
 8000c2a:	f000 f865 	bl	8000cf8 <TimerInitialise>
		ADCInitialise(&ADC3_Port);
 8000c2e:	4809      	ldr	r0, [pc, #36]	; (8000c54 <main+0x88>)
 8000c30:	f7ff fc50 	bl	80004d4 <ADCInitialise>
 8000c34:	e002      	b.n	8000c3c <main+0x70>



	}
	else{
		ContinuousReadSingleChannel(&ADC3_Port);
 8000c36:	4807      	ldr	r0, [pc, #28]	; (8000c54 <main+0x88>)
 8000c38:	f7ff fb14 	bl	8000264 <ContinuousReadSingleChannel>

	}

	for(;;);
 8000c3c:	e7fe      	b.n	8000c3c <main+0x70>
 8000c3e:	bf00      	nop
 8000c40:	20000150 	.word	0x20000150
 8000c44:	08000941 	.word	0x08000941
 8000c48:	20000144 	.word	0x20000144
 8000c4c:	0800061d 	.word	0x0800061d
 8000c50:	20000148 	.word	0x20000148
 8000c54:	20000068 	.word	0x20000068
 8000c58:	2000014c 	.word	0x2000014c
 8000c5c:	0800084d 	.word	0x0800084d
 8000c60:	08000b51 	.word	0x08000b51
 8000c64:	200000d8 	.word	0x200000d8

08000c68 <__NVIC_EnableIRQ>:
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db0b      	blt.n	8000c92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	f003 021f 	and.w	r2, r3, #31
 8000c80:	4907      	ldr	r1, [pc, #28]	; (8000ca0 <__NVIC_EnableIRQ+0x38>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	095b      	lsrs	r3, r3, #5
 8000c88:	2001      	movs	r0, #1
 8000c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000e100 	.word	0xe000e100

08000ca4 <__NVIC_SetPriority>:
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	6039      	str	r1, [r7, #0]
 8000cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	db0a      	blt.n	8000cce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	490c      	ldr	r1, [pc, #48]	; (8000cf0 <__NVIC_SetPriority+0x4c>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	0112      	lsls	r2, r2, #4
 8000cc4:	b2d2      	uxtb	r2, r2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ccc:	e00a      	b.n	8000ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4908      	ldr	r1, [pc, #32]	; (8000cf4 <__NVIC_SetPriority+0x50>)
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f003 030f 	and.w	r3, r3, #15
 8000cda:	3b04      	subs	r3, #4
 8000cdc:	0112      	lsls	r2, r2, #4
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	761a      	strb	r2, [r3, #24]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000e100 	.word	0xe000e100
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <TimerInitialise>:
		TIM_DIER_UIE, 		// enable update interrupt
		0x00,
};

// initialise a hardware timer
void TimerInitialise(HardwareTimer *hardware_timer, uint32_t delay, void (*completion_function)()) {
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]

    // Enable clock
    RCC->APB1ENR |= hardware_timer->MaskAPB1ENR;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	695a      	ldr	r2, [r3, #20]
 8000d08:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <TimerInitialise+0x84>)
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	491b      	ldr	r1, [pc, #108]	; (8000d7c <TimerInitialise+0x84>)
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61cb      	str	r3, [r1, #28]

    // set prescaler
    hardware_timer->PrescaleValue = 7999; // bring clock speed down to 1kHz
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d18:	809a      	strh	r2, [r3, #4]
    hardware_timer->TIMx->PSC = hardware_timer->PrescaleValue;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	889b      	ldrh	r3, [r3, #4]
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	629a      	str	r2, [r3, #40]	; 0x28

    // set auto reload register to delay time
    hardware_timer->ARRValue = delay;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	68ba      	ldr	r2, [r7, #8]
 8000d2a:	609a      	str	r2, [r3, #8]
    hardware_timer->TIMx->ARR = hardware_timer->ARRValue;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	6892      	ldr	r2, [r2, #8]
 8000d34:	62da      	str	r2, [r3, #44]	; 0x2c

    // set CR1 mask
    hardware_timer->TIMx->CR1 |= hardware_timer->MaskCR1;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	69d9      	ldr	r1, [r3, #28]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	430a      	orrs	r2, r1
 8000d46:	601a      	str	r2, [r3, #0]

    // set DIER mask
    hardware_timer->TIMx->DIER |= hardware_timer->MaskDIER;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	6a19      	ldr	r1, [r3, #32]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	68da      	ldr	r2, [r3, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	430a      	orrs	r2, r1
 8000d58:	60da      	str	r2, [r3, #12]

    // set the timer completion function
    hardware_timer->timer_completion_function = completion_function;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	625a      	str	r2, [r3, #36]	; 0x24

    // start TIMx
    hardware_timer->TIMx->CR1 |= TIM_CR1_CEN;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f042 0201 	orr.w	r2, r2, #1
 8000d6e:	601a      	str	r2, [r3, #0]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	40021000 	.word	0x40021000

08000d80 <TIM2_IRQHandler>:


// tim2 overflow handler
void TIM2_IRQHandler(void) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 8000d84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d88:	691b      	ldr	r3, [r3, #16]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d01e      	beq.n	8000dd0 <TIM2_IRQHandler+0x50>
        TIM2->SR &= ~TIM_SR_UIF; // Clear the interrupt flag
 8000d92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d96:	691b      	ldr	r3, [r3, #16]
 8000d98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d9c:	f023 0301 	bic.w	r3, r3, #1
 8000da0:	6113      	str	r3, [r2, #16]

        if (TIM2_init.oneShotMode) {
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <TIM2_IRQHandler+0x54>)
 8000da4:	7b1b      	ldrb	r3, [r3, #12]
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d00a      	beq.n	8000dc2 <TIM2_IRQHandler+0x42>
            TIM2->CR1 &= ~TIM_CR1_CEN; // Stop the timer if in one-shot mode
 8000dac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000db6:	f023 0301 	bic.w	r3, r3, #1
 8000dba:	6013      	str	r3, [r2, #0]

            TIM2_init.oneShotMode = 0; // turn off the oneshot mode
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <TIM2_IRQHandler+0x54>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	731a      	strb	r2, [r3, #12]
        }

        if (TIM2_init.timer_completion_function != NULL) {
 8000dc2:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <TIM2_IRQHandler+0x54>)
 8000dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d002      	beq.n	8000dd0 <TIM2_IRQHandler+0x50>
            TIM2_init.timer_completion_function();
 8000dca:	4b02      	ldr	r3, [pc, #8]	; (8000dd4 <TIM2_IRQHandler+0x54>)
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dce:	4798      	blx	r3
        }
    }
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200000d8 	.word	0x200000d8

08000dd8 <TIM4_IRQHandler>:

// tim4 overflow handler
void TIM4_IRQHandler(void) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
    if (TIM4->SR & TIM_SR_UIF) {
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <TIM4_IRQHandler+0x4c>)
 8000dde:	691b      	ldr	r3, [r3, #16]
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d01a      	beq.n	8000e1e <TIM4_IRQHandler+0x46>
        TIM4->SR &= ~TIM_SR_UIF; // Clear the interrupt flag
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <TIM4_IRQHandler+0x4c>)
 8000dea:	691b      	ldr	r3, [r3, #16]
 8000dec:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <TIM4_IRQHandler+0x4c>)
 8000dee:	f023 0301 	bic.w	r3, r3, #1
 8000df2:	6113      	str	r3, [r2, #16]

        if (TIM4_init.oneShotMode) {
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <TIM4_IRQHandler+0x50>)
 8000df6:	7b1b      	ldrb	r3, [r3, #12]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d008      	beq.n	8000e10 <TIM4_IRQHandler+0x38>

        	TIM4->CR1 &= ~TIM_CR1_CEN; // Stop the timer if in one-shot mode
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <TIM4_IRQHandler+0x4c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <TIM4_IRQHandler+0x4c>)
 8000e04:	f023 0301 	bic.w	r3, r3, #1
 8000e08:	6013      	str	r3, [r2, #0]

            TIM4_init.oneShotMode = 0; // turn off the oneshot mode
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <TIM4_IRQHandler+0x50>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	731a      	strb	r2, [r3, #12]
        }

        if (TIM4_init.timer_completion_function != NULL) {
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <TIM4_IRQHandler+0x50>)
 8000e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d002      	beq.n	8000e1e <TIM4_IRQHandler+0x46>
            TIM4_init.timer_completion_function();
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <TIM4_IRQHandler+0x50>)
 8000e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1c:	4798      	blx	r3
        }
    }
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40000800 	.word	0x40000800
 8000e28:	20000100 	.word	0x20000100

08000e2c <enable_timer_interrupt>:


// enable the timer overflow interrupt
void enable_timer_interrupt() {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
    // disable interrupts
	__disable_irq();

	NVIC_SetPriority(TIM2_IRQn, 1); // Set priority
 8000e34:	2101      	movs	r1, #1
 8000e36:	201c      	movs	r0, #28
 8000e38:	f7ff ff34 	bl	8000ca4 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn); 		// Enable TIM2 IRQ
 8000e3c:	201c      	movs	r0, #28
 8000e3e:	f7ff ff13 	bl	8000c68 <__NVIC_EnableIRQ>

	NVIC_SetPriority(TIM4_IRQn, 1); // Set priority
 8000e42:	2101      	movs	r1, #1
 8000e44:	201e      	movs	r0, #30
 8000e46:	f7ff ff2d 	bl	8000ca4 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM4_IRQn); 		// Enable TIM2 IRQ
 8000e4a:	201e      	movs	r0, #30
 8000e4c:	f7ff ff0c 	bl	8000c68 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000e50:	b662      	cpsie	i
}
 8000e52:	bf00      	nop

    // re-enable interrupts
    __enable_irq();
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e5a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e5c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e60:	480c      	ldr	r0, [pc, #48]	; (8000e94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e62:	490d      	ldr	r1, [pc, #52]	; (8000e98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e64:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <LoopForever+0xe>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e78:	4c0a      	ldr	r4, [pc, #40]	; (8000ea4 <LoopForever+0x16>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e86:	f000 f811 	bl	8000eac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e8a:	f7ff fe9f 	bl	8000bcc <main>

08000e8e <LoopForever>:

LoopForever:
  b LoopForever
 8000e8e:	e7fe      	b.n	8000e8e <LoopForever>
  ldr   r0, =_estack
 8000e90:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8000e9c:	08000f14 	.word	0x08000f14
  ldr r2, =_sbss
 8000ea0:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8000ea4:	20000154 	.word	0x20000154

08000ea8 <ADC4_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC4_IRQHandler>
	...

08000eac <__libc_init_array>:
 8000eac:	b570      	push	{r4, r5, r6, lr}
 8000eae:	4d0d      	ldr	r5, [pc, #52]	; (8000ee4 <__libc_init_array+0x38>)
 8000eb0:	4c0d      	ldr	r4, [pc, #52]	; (8000ee8 <__libc_init_array+0x3c>)
 8000eb2:	1b64      	subs	r4, r4, r5
 8000eb4:	10a4      	asrs	r4, r4, #2
 8000eb6:	2600      	movs	r6, #0
 8000eb8:	42a6      	cmp	r6, r4
 8000eba:	d109      	bne.n	8000ed0 <__libc_init_array+0x24>
 8000ebc:	4d0b      	ldr	r5, [pc, #44]	; (8000eec <__libc_init_array+0x40>)
 8000ebe:	4c0c      	ldr	r4, [pc, #48]	; (8000ef0 <__libc_init_array+0x44>)
 8000ec0:	f000 f818 	bl	8000ef4 <_init>
 8000ec4:	1b64      	subs	r4, r4, r5
 8000ec6:	10a4      	asrs	r4, r4, #2
 8000ec8:	2600      	movs	r6, #0
 8000eca:	42a6      	cmp	r6, r4
 8000ecc:	d105      	bne.n	8000eda <__libc_init_array+0x2e>
 8000ece:	bd70      	pop	{r4, r5, r6, pc}
 8000ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ed4:	4798      	blx	r3
 8000ed6:	3601      	adds	r6, #1
 8000ed8:	e7ee      	b.n	8000eb8 <__libc_init_array+0xc>
 8000eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ede:	4798      	blx	r3
 8000ee0:	3601      	adds	r6, #1
 8000ee2:	e7f2      	b.n	8000eca <__libc_init_array+0x1e>
 8000ee4:	08000f0c 	.word	0x08000f0c
 8000ee8:	08000f0c 	.word	0x08000f0c
 8000eec:	08000f0c 	.word	0x08000f0c
 8000ef0:	08000f10 	.word	0x08000f10

08000ef4 <_init>:
 8000ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef6:	bf00      	nop
 8000ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000efa:	bc08      	pop	{r3}
 8000efc:	469e      	mov	lr, r3
 8000efe:	4770      	bx	lr

08000f00 <_fini>:
 8000f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f02:	bf00      	nop
 8000f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f06:	bc08      	pop	{r3}
 8000f08:	469e      	mov	lr, r3
 8000f0a:	4770      	bx	lr
