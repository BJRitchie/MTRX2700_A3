
joystick_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08009358  08009358  0000a358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097b8  080097b8  0000b364  2**0
                  CONTENTS
  4 .ARM          00000008  080097b8  080097b8  0000a7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097c0  080097c0  0000b364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097c0  080097c0  0000a7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080097c4  080097c4  0000a7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000364  20000000  080097c8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b364  2**0
                  CONTENTS
 10 .bss          000005b0  20000364  20000364  0000b364  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000914  20000914  0000b364  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b364  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001369d  00000000  00000000  0000b394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d47  00000000  00000000  0001ea31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  00021778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e87  00000000  00000000  00022a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fe4f  00000000  00000000  000238c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001757e  00000000  00000000  00043716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bae72  00000000  00000000  0005ac94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00115b06  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000064a4  00000000  00000000  00115b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0011bff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000364 	.word	0x20000364
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800933c 	.word	0x0800933c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000368 	.word	0x20000368
 80001cc:	0800933c 	.word	0x0800933c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <enable_clocks>:
uint16_t x_coordinate = 0;
uint16_t y_coordinate = 0;


// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000cf8:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <enable_clocks+0x1c>)
 8000cfa:	695b      	ldr	r3, [r3, #20]
 8000cfc:	4a04      	ldr	r2, [pc, #16]	@ (8000d10 <enable_clocks+0x1c>)
 8000cfe:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 8000d02:	6153      	str	r3, [r2, #20]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000

08000d14 <initialise_board>:

// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0

	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <initialise_board+0x20>)
 8000d1c:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000d24:	801a      	strh	r2, [r3, #0]
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	48001002 	.word	0x48001002

08000d38 <SingleReadMultiChannelADC>:
//	for (volatile uint32_t i = 0; i < 0x100; i++) {
//		// waste time !
//	}
}

void SingleReadMultiChannelADC() {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0

	// get a pointer to the location of the LEDs
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000d3e:	4b72      	ldr	r3, [pc, #456]	@ (8000f08 <SingleReadMultiChannelADC+0x1d0>)
 8000d40:	60bb      	str	r3, [r7, #8]

	// enable the clock for ADC1
	RCC->AHBENR |= RCC_AHBENR_ADC12EN;
 8000d42:	4b72      	ldr	r3, [pc, #456]	@ (8000f0c <SingleReadMultiChannelADC+0x1d4>)
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	4a71      	ldr	r2, [pc, #452]	@ (8000f0c <SingleReadMultiChannelADC+0x1d4>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d4c:	6153      	str	r3, [r2, #20]

	// set to synchronise the ADC with the clock
	ADC12_COMMON->CCR |= ADC12_CCR_CKMODE_0;
 8000d4e:	4b70      	ldr	r3, [pc, #448]	@ (8000f10 <SingleReadMultiChannelADC+0x1d8>)
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	4a6f      	ldr	r2, [pc, #444]	@ (8000f10 <SingleReadMultiChannelADC+0x1d8>)
 8000d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d58:	6093      	str	r3, [r2, #8]

	// ADEN must be = 0 for configuration (is the default)
	ADC1->CR &= ~ADC_CR_ADVREGEN; // clear voltage regulator enable
 8000d5a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d64:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000d68:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADVREGEN_0; // set ADVREGEN TO 01
 8000d6a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d78:	6093      	str	r3, [r2, #8]
	ADC1->CR &= ~ADC_CR_ADCALDIF; // clear bit to enable Single-ended-input
 8000d7a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d84:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000d88:	6093      	str	r3, [r2, #8]

	// calibrate the ADC (self calibration routine)
	ADC1->CR |= ADC_CR_ADCAL;
 8000d8a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d94:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d98:	6093      	str	r3, [r2, #8]
	while((ADC1->CR & ADC_CR_ADCAL) == ADC_CR_ADCAL); // Waiting for the calibration to finish
 8000d9a:	bf00      	nop
 8000d9c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000da6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000daa:	d0f7      	beq.n	8000d9c <SingleReadMultiChannelADC+0x64>

	// We want to read from two channels each sequence
	//  the first channel goes in SQ1
	//  the second channel goes in SQ2
	//  the number of channels to read = 2, so the L value is 1
	ADC1->SQR1 = 0;
 8000dac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000db0:	2200      	movs	r2, #0
 8000db2:	631a      	str	r2, [r3, #48]	@ 0x30
	ADC1->SQR1 |= 0x02 << ADC_SQR1_SQ1_Pos; // set the request for channel 2
 8000db4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dc2:	6313      	str	r3, [r2, #48]	@ 0x30
	ADC1->SQR1 |= 0x03 << ADC_SQR1_SQ2_Pos; // set the request for channel 3
 8000dc4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000dce:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8000dd2:	6313      	str	r3, [r2, #48]	@ 0x30
	ADC1->SQR1 |= 0x01 << ADC_SQR1_L_Pos; // set the number of channels to read
 8000dd4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	6313      	str	r3, [r2, #48]	@ 0x30

	// single shot mode
	ADC1->CFGR &= ~ADC_CFGR_CONT;
 8000de4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000dee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000df2:	60d3      	str	r3, [r2, #12]

	// Enable the ADC
	ADC1->CR |= ADC_CR_ADEN;
 8000df4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	6093      	str	r3, [r2, #8]

	// Wait the ADC to be ready.
	while (ADC1->ISR == 0);
 8000e04:	bf00      	nop
 8000e06:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d0fa      	beq.n	8000e06 <SingleReadMultiChannelADC+0xce>

	uint16_t value_1 = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	80fb      	strh	r3, [r7, #6]
	uint16_t value_2 = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	80bb      	strh	r3, [r7, #4]

    /* Loop forever */
	for(;;) {

		// request the process to start
		ADC1->CR |= ADC_CR_ADSTART;
 8000e18:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e22:	f043 0304 	orr.w	r3, r3, #4
 8000e26:	6093      	str	r3, [r2, #8]

		// Wait for the end of the first conversion
		while(!(ADC1->ISR & ADC_ISR_EOC));
 8000e28:	bf00      	nop
 8000e2a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f003 0304 	and.w	r3, r3, #4
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d0f8      	beq.n	8000e2a <SingleReadMultiChannelADC+0xf2>

		// read the first value
		value_1 = ADC1->DR;
 8000e38:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	80fb      	strh	r3, [r7, #6]
		// Max left: 1980
		// Max right: 4096
		// Map this range to 0-1000
		uint16_t mapped_value_1 = (1000.0 / (4150.0- 1950.0)) * (value_1 - 1950.0);
 8000e40:	88fb      	ldrh	r3, [r7, #6]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fb6e 	bl	8000524 <__aeabi_i2d>
 8000e48:	a327      	add	r3, pc, #156	@ (adr r3, 8000ee8 <SingleReadMultiChannelADC+0x1b0>)
 8000e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4e:	f7ff fa1b 	bl	8000288 <__aeabi_dsub>
 8000e52:	4602      	mov	r2, r0
 8000e54:	460b      	mov	r3, r1
 8000e56:	4610      	mov	r0, r2
 8000e58:	4619      	mov	r1, r3
 8000e5a:	a325      	add	r3, pc, #148	@ (adr r3, 8000ef0 <SingleReadMultiChannelADC+0x1b8>)
 8000e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e60:	f7ff fbca 	bl	80005f8 <__aeabi_dmul>
 8000e64:	4602      	mov	r2, r0
 8000e66:	460b      	mov	r3, r1
 8000e68:	4610      	mov	r0, r2
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f7ff fe9c 	bl	8000ba8 <__aeabi_d2uiz>
 8000e70:	4603      	mov	r3, r0
 8000e72:	807b      	strh	r3, [r7, #2]

//		while(!(ADC1->ISR & ADC_ISR_EOC));

		// read the second value
		value_2 = ADC1->DR;
 8000e74:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7a:	80bb      	strh	r3, [r7, #4]
		// Max forward: 2410
		// Max back: 3390
		// Map this range to 0-1000
		uint16_t mapped_value_2 = (1000.0 / (3900.0- 2200.0)) * (value_2 - 2200.0);
 8000e7c:	88bb      	ldrh	r3, [r7, #4]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fb50 	bl	8000524 <__aeabi_i2d>
 8000e84:	a31c      	add	r3, pc, #112	@ (adr r3, 8000ef8 <SingleReadMultiChannelADC+0x1c0>)
 8000e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8a:	f7ff f9fd 	bl	8000288 <__aeabi_dsub>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	460b      	mov	r3, r1
 8000e92:	4610      	mov	r0, r2
 8000e94:	4619      	mov	r1, r3
 8000e96:	a31a      	add	r3, pc, #104	@ (adr r3, 8000f00 <SingleReadMultiChannelADC+0x1c8>)
 8000e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9c:	f7ff fbac 	bl	80005f8 <__aeabi_dmul>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f7ff fe7e 	bl	8000ba8 <__aeabi_d2uiz>
 8000eac:	4603      	mov	r3, r0
 8000eae:	81fb      	strh	r3, [r7, #14]
		mapped_value_2 = 1000 - mapped_value_2;
 8000eb0:	89fb      	ldrh	r3, [r7, #14]
 8000eb2:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8000eb6:	81fb      	strh	r3, [r7, #14]
		if (mapped_value_2 > 1000) {
 8000eb8:	89fb      	ldrh	r3, [r7, #14]
 8000eba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ebe:	d901      	bls.n	8000ec4 <SingleReadMultiChannelADC+0x18c>
			mapped_value_2 = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	81fb      	strh	r3, [r7, #14]
		}

		x_coordinate = mapped_value_1;
 8000ec4:	4a13      	ldr	r2, [pc, #76]	@ (8000f14 <SingleReadMultiChannelADC+0x1dc>)
 8000ec6:	887b      	ldrh	r3, [r7, #2]
 8000ec8:	8013      	strh	r3, [r2, #0]
		y_coordinate = mapped_value_2;
 8000eca:	4a13      	ldr	r2, [pc, #76]	@ (8000f18 <SingleReadMultiChannelADC+0x1e0>)
 8000ecc:	89fb      	ldrh	r3, [r7, #14]
 8000ece:	8013      	strh	r3, [r2, #0]

		// reset the sequence flag
		ADC1->ISR |= ADC_ISR_EOS;
 8000ed0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000eda:	f043 0308 	orr.w	r3, r3, #8
 8000ede:	6013      	str	r3, [r2, #0]

		sendToServos();
 8000ee0:	f000 f828 	bl	8000f34 <sendToServos>
	for(;;) {
 8000ee4:	e798      	b.n	8000e18 <SingleReadMultiChannelADC+0xe0>
 8000ee6:	bf00      	nop
 8000ee8:	00000000 	.word	0x00000000
 8000eec:	409e7800 	.word	0x409e7800
 8000ef0:	d1745d17 	.word	0xd1745d17
 8000ef4:	3fdd1745 	.word	0x3fdd1745
 8000ef8:	00000000 	.word	0x00000000
 8000efc:	40a13000 	.word	0x40a13000
 8000f00:	d2d2d2d3 	.word	0xd2d2d2d3
 8000f04:	3fe2d2d2 	.word	0x3fe2d2d2
 8000f08:	48001015 	.word	0x48001015
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	50000300 	.word	0x50000300
 8000f14:	20000380 	.word	0x20000380
 8000f18:	20000382 	.word	0x20000382

08000f1c <setup_adc>:
//
//		SerialOutputString(string_to_send2, &USART1_PORT);
	}
}

int setup_adc(void) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	enable_clocks();
 8000f20:	f7ff fee8 	bl	8000cf4 <enable_clocks>
	initialise_board();
 8000f24:	f7ff fef6 	bl	8000d14 <initialise_board>
//	SerialInitialise(BAUD_115200, &USART1_PORT, &finished_transmission);
	SingleReadMultiChannelADC();
 8000f28:	f7ff ff06 	bl	8000d38 <SingleReadMultiChannelADC>
}
 8000f2c:	bf00      	nop
 8000f2e:	4618      	mov	r0, r3
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <sendToServos>:

void sendToServos() {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
	// get joystick values

	// map values
	float x_pos = (float)(x_coordinate)/1000;
 8000f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb4 <sendToServos+0x80>)
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	ee07 3a90 	vmov	s15, r3
 8000f42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f46:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8000fb8 <sendToServos+0x84>
 8000f4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f4e:	edc7 7a01 	vstr	s15, [r7, #4]
	float y_pos = (float)(y_coordinate)/1000;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	@ (8000fbc <sendToServos+0x88>)
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	ee07 3a90 	vmov	s15, r3
 8000f5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f5e:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000fb8 <sendToServos+0x84>
 8000f62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f66:	edc7 7a00 	vstr	s15, [r7]

	// send axis 1 to position
	servoGoToFractionalPosition(&Servo1, y_pos);
 8000f6a:	ed97 0a00 	vldr	s0, [r7]
 8000f6e:	4814      	ldr	r0, [pc, #80]	@ (8000fc0 <sendToServos+0x8c>)
 8000f70:	f000 fad4 	bl	800151c <servoGoToFractionalPosition>
	servoGoToFractionalPosition(&Servo2, 1-y_pos);  // inverse
 8000f74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f78:	edd7 7a00 	vldr	s15, [r7]
 8000f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f80:	eeb0 0a67 	vmov.f32	s0, s15
 8000f84:	480f      	ldr	r0, [pc, #60]	@ (8000fc4 <sendToServos+0x90>)
 8000f86:	f000 fac9 	bl	800151c <servoGoToFractionalPosition>

	// send axis 2 to position
	servoGoToFractionalPosition(&Servo3, y_pos);
 8000f8a:	ed97 0a00 	vldr	s0, [r7]
 8000f8e:	480e      	ldr	r0, [pc, #56]	@ (8000fc8 <sendToServos+0x94>)
 8000f90:	f000 fac4 	bl	800151c <servoGoToFractionalPosition>
	servoGoToFractionalPosition(&Servo4, 1-y_pos);  // inverse
 8000f94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f98:	edd7 7a00 	vldr	s15, [r7]
 8000f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa4:	4809      	ldr	r0, [pc, #36]	@ (8000fcc <sendToServos+0x98>)
 8000fa6:	f000 fab9 	bl	800151c <servoGoToFractionalPosition>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000380 	.word	0x20000380
 8000fb8:	447a0000 	.word	0x447a0000
 8000fbc:	20000382 	.word	0x20000382
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000050 	.word	0x20000050
 8000fc8:	200000a0 	.word	0x200000a0
 8000fcc:	200000f0 	.word	0x200000f0

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd4:	f000 fe42 	bl	8001c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd8:	f000 f824 	bl	8001024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fdc:	f000 fa1a 	bl	8001414 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fe0:	f000 f882 	bl	80010e8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000fe4:	f000 f8c0 	bl	8001168 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000fe8:	f000 f9f2 	bl	80013d0 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000fec:	f000 f8fa 	bl	80011e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ff0:	f000 f972 	bl	80012d8 <MX_TIM3_Init>

//  // initialise the gyros
//  BSP_GYRO_Init();

  // start the timers
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4809      	ldr	r0, [pc, #36]	@ (800101c <main+0x4c>)
 8000ff8:	f002 ffdc 	bl	8003fb4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000ffc:	210c      	movs	r1, #12
 8000ffe:	4807      	ldr	r0, [pc, #28]	@ (800101c <main+0x4c>)
 8001000:	f002 ffd8 	bl	8003fb4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001004:	2100      	movs	r1, #0
 8001006:	4806      	ldr	r0, [pc, #24]	@ (8001020 <main+0x50>)
 8001008:	f002 ffd4 	bl	8003fb4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800100c:	2104      	movs	r1, #4
 800100e:	4804      	ldr	r0, [pc, #16]	@ (8001020 <main+0x50>)
 8001010:	f002 ffd0 	bl	8003fb4 <HAL_TIM_PWM_Start>

  // init the adc module
  setup_adc();
 8001014:	f7ff ff82 	bl	8000f1c <setup_adc>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <main+0x48>
 800101c:	2000043c 	.word	0x2000043c
 8001020:	20000488 	.word	0x20000488

08001024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b09e      	sub	sp, #120	@ 0x78
 8001028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800102e:	2228      	movs	r2, #40	@ 0x28
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f004 fdab 	bl	8005b8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001038:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001048:	463b      	mov	r3, r7
 800104a:	223c      	movs	r2, #60	@ 0x3c
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f004 fd9d 	bl	8005b8e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001054:	2303      	movs	r3, #3
 8001056:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001058:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800105c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001062:	2301      	movs	r3, #1
 8001064:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001066:	2310      	movs	r3, #16
 8001068:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106a:	2302      	movs	r3, #2
 800106c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800106e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001072:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001074:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001078:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800107e:	4618      	mov	r0, r3
 8001080:	f001 fac2 	bl	8002608 <HAL_RCC_OscConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800108a:	f000 fa41 	bl	8001510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108e:	230f      	movs	r3, #15
 8001090:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001092:	2302      	movs	r3, #2
 8001094:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800109a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800109e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010a4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80010a8:	2101      	movs	r1, #1
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 faea 	bl	8003684 <HAL_RCC_ClockConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010b6:	f000 fa2b 	bl	8001510 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80010ba:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <SystemClock_Config+0xc0>)
 80010bc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80010c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	4618      	mov	r0, r3
 80010cc:	f002 fcc0 	bl	8003a50 <HAL_RCCEx_PeriphCLKConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80010d6:	f000 fa1b 	bl	8001510 <Error_Handler>
  }
}
 80010da:	bf00      	nop
 80010dc:	3778      	adds	r7, #120	@ 0x78
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	00020020 	.word	0x00020020

080010e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <MX_I2C1_Init+0x74>)
 80010ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001160 <MX_I2C1_Init+0x78>)
 80010f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80010f2:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <MX_I2C1_Init+0x74>)
 80010f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001164 <MX_I2C1_Init+0x7c>)
 80010f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010f8:	4b18      	ldr	r3, [pc, #96]	@ (800115c <MX_I2C1_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010fe:	4b17      	ldr	r3, [pc, #92]	@ (800115c <MX_I2C1_Init+0x74>)
 8001100:	2201      	movs	r2, #1
 8001102:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001104:	4b15      	ldr	r3, [pc, #84]	@ (800115c <MX_I2C1_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800110a:	4b14      	ldr	r3, [pc, #80]	@ (800115c <MX_I2C1_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <MX_I2C1_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <MX_I2C1_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800111c:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <MX_I2C1_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001122:	480e      	ldr	r0, [pc, #56]	@ (800115c <MX_I2C1_Init+0x74>)
 8001124:	f001 f878 	bl	8002218 <HAL_I2C_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800112e:	f000 f9ef 	bl	8001510 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001132:	2100      	movs	r1, #0
 8001134:	4809      	ldr	r0, [pc, #36]	@ (800115c <MX_I2C1_Init+0x74>)
 8001136:	f001 f8fe 	bl	8002336 <HAL_I2CEx_ConfigAnalogFilter>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001140:	f000 f9e6 	bl	8001510 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001144:	2100      	movs	r1, #0
 8001146:	4805      	ldr	r0, [pc, #20]	@ (800115c <MX_I2C1_Init+0x74>)
 8001148:	f001 f940 	bl	80023cc <HAL_I2CEx_ConfigDigitalFilter>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001152:	f000 f9dd 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000384 	.word	0x20000384
 8001160:	40005400 	.word	0x40005400
 8001164:	2000090e 	.word	0x2000090e

08001168 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800116c:	4b1b      	ldr	r3, [pc, #108]	@ (80011dc <MX_SPI1_Init+0x74>)
 800116e:	4a1c      	ldr	r2, [pc, #112]	@ (80011e0 <MX_SPI1_Init+0x78>)
 8001170:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001172:	4b1a      	ldr	r3, [pc, #104]	@ (80011dc <MX_SPI1_Init+0x74>)
 8001174:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001178:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800117a:	4b18      	ldr	r3, [pc, #96]	@ (80011dc <MX_SPI1_Init+0x74>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001180:	4b16      	ldr	r3, [pc, #88]	@ (80011dc <MX_SPI1_Init+0x74>)
 8001182:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001186:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001188:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <MX_SPI1_Init+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800118e:	4b13      	ldr	r3, [pc, #76]	@ (80011dc <MX_SPI1_Init+0x74>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_SPI1_Init+0x74>)
 8001196:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800119a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800119c:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <MX_SPI1_Init+0x74>)
 800119e:	2208      	movs	r2, #8
 80011a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_SPI1_Init+0x74>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_SPI1_Init+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <MX_SPI1_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_SPI1_Init+0x74>)
 80011b6:	2207      	movs	r2, #7
 80011b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <MX_SPI1_Init+0x74>)
 80011bc:	2200      	movs	r2, #0
 80011be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <MX_SPI1_Init+0x74>)
 80011c2:	2208      	movs	r2, #8
 80011c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	@ (80011dc <MX_SPI1_Init+0x74>)
 80011c8:	f002 fdf2 	bl	8003db0 <HAL_SPI_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80011d2:	f000 f99d 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200003d8 	.word	0x200003d8
 80011e0:	40013000 	.word	0x40013000

080011e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	@ 0x28
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f6:	463b      	mov	r3, r7
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
 8001204:	615a      	str	r2, [r3, #20]
 8001206:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001208:	4b32      	ldr	r3, [pc, #200]	@ (80012d4 <MX_TIM2_Init+0xf0>)
 800120a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800120e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001210:	4b30      	ldr	r3, [pc, #192]	@ (80012d4 <MX_TIM2_Init+0xf0>)
 8001212:	222f      	movs	r2, #47	@ 0x2f
 8001214:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001216:	4b2f      	ldr	r3, [pc, #188]	@ (80012d4 <MX_TIM2_Init+0xf0>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 800121c:	4b2d      	ldr	r3, [pc, #180]	@ (80012d4 <MX_TIM2_Init+0xf0>)
 800121e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001222:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001224:	4b2b      	ldr	r3, [pc, #172]	@ (80012d4 <MX_TIM2_Init+0xf0>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122a:	4b2a      	ldr	r3, [pc, #168]	@ (80012d4 <MX_TIM2_Init+0xf0>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001230:	4828      	ldr	r0, [pc, #160]	@ (80012d4 <MX_TIM2_Init+0xf0>)
 8001232:	f002 fe68 	bl	8003f06 <HAL_TIM_PWM_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800123c:	f000 f968 	bl	8001510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4619      	mov	r1, r3
 800124e:	4821      	ldr	r0, [pc, #132]	@ (80012d4 <MX_TIM2_Init+0xf0>)
 8001250:	f003 fc50 	bl	8004af4 <HAL_TIMEx_MasterConfigSynchronization>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800125a:	f000 f959 	bl	8001510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800125e:	2360      	movs	r3, #96	@ 0x60
 8001260:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800126e:	463b      	mov	r3, r7
 8001270:	2200      	movs	r2, #0
 8001272:	4619      	mov	r1, r3
 8001274:	4817      	ldr	r0, [pc, #92]	@ (80012d4 <MX_TIM2_Init+0xf0>)
 8001276:	f002 ff9d 	bl	80041b4 <HAL_TIM_PWM_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001280:	f000 f946 	bl	8001510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	2204      	movs	r2, #4
 8001288:	4619      	mov	r1, r3
 800128a:	4812      	ldr	r0, [pc, #72]	@ (80012d4 <MX_TIM2_Init+0xf0>)
 800128c:	f002 ff92 	bl	80041b4 <HAL_TIM_PWM_ConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001296:	f000 f93b 	bl	8001510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800129a:	463b      	mov	r3, r7
 800129c:	2208      	movs	r2, #8
 800129e:	4619      	mov	r1, r3
 80012a0:	480c      	ldr	r0, [pc, #48]	@ (80012d4 <MX_TIM2_Init+0xf0>)
 80012a2:	f002 ff87 	bl	80041b4 <HAL_TIM_PWM_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80012ac:	f000 f930 	bl	8001510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012b0:	463b      	mov	r3, r7
 80012b2:	220c      	movs	r2, #12
 80012b4:	4619      	mov	r1, r3
 80012b6:	4807      	ldr	r0, [pc, #28]	@ (80012d4 <MX_TIM2_Init+0xf0>)
 80012b8:	f002 ff7c 	bl	80041b4 <HAL_TIM_PWM_ConfigChannel>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 80012c2:	f000 f925 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012c6:	4803      	ldr	r0, [pc, #12]	@ (80012d4 <MX_TIM2_Init+0xf0>)
 80012c8:	f000 fa66 	bl	8001798 <HAL_TIM_MspPostInit>

}
 80012cc:	bf00      	nop
 80012ce:	3728      	adds	r7, #40	@ 0x28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000043c 	.word	0x2000043c

080012d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	@ 0x28
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ea:	463b      	mov	r3, r7
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
 80012f8:	615a      	str	r2, [r3, #20]
 80012fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012fc:	4b32      	ldr	r3, [pc, #200]	@ (80013c8 <MX_TIM3_Init+0xf0>)
 80012fe:	4a33      	ldr	r2, [pc, #204]	@ (80013cc <MX_TIM3_Init+0xf4>)
 8001300:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 8001302:	4b31      	ldr	r3, [pc, #196]	@ (80013c8 <MX_TIM3_Init+0xf0>)
 8001304:	222f      	movs	r2, #47	@ 0x2f
 8001306:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001308:	4b2f      	ldr	r3, [pc, #188]	@ (80013c8 <MX_TIM3_Init+0xf0>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 800130e:	4b2e      	ldr	r3, [pc, #184]	@ (80013c8 <MX_TIM3_Init+0xf0>)
 8001310:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001314:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001316:	4b2c      	ldr	r3, [pc, #176]	@ (80013c8 <MX_TIM3_Init+0xf0>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131c:	4b2a      	ldr	r3, [pc, #168]	@ (80013c8 <MX_TIM3_Init+0xf0>)
 800131e:	2200      	movs	r2, #0
 8001320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001322:	4829      	ldr	r0, [pc, #164]	@ (80013c8 <MX_TIM3_Init+0xf0>)
 8001324:	f002 fdef 	bl	8003f06 <HAL_TIM_PWM_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800132e:	f000 f8ef 	bl	8001510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	4821      	ldr	r0, [pc, #132]	@ (80013c8 <MX_TIM3_Init+0xf0>)
 8001342:	f003 fbd7 	bl	8004af4 <HAL_TIMEx_MasterConfigSynchronization>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800134c:	f000 f8e0 	bl	8001510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001350:	2360      	movs	r3, #96	@ 0x60
 8001352:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001358:	2300      	movs	r3, #0
 800135a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001360:	463b      	mov	r3, r7
 8001362:	2200      	movs	r2, #0
 8001364:	4619      	mov	r1, r3
 8001366:	4818      	ldr	r0, [pc, #96]	@ (80013c8 <MX_TIM3_Init+0xf0>)
 8001368:	f002 ff24 	bl	80041b4 <HAL_TIM_PWM_ConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001372:	f000 f8cd 	bl	8001510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001376:	463b      	mov	r3, r7
 8001378:	2204      	movs	r2, #4
 800137a:	4619      	mov	r1, r3
 800137c:	4812      	ldr	r0, [pc, #72]	@ (80013c8 <MX_TIM3_Init+0xf0>)
 800137e:	f002 ff19 	bl	80041b4 <HAL_TIM_PWM_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001388:	f000 f8c2 	bl	8001510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800138c:	463b      	mov	r3, r7
 800138e:	2208      	movs	r2, #8
 8001390:	4619      	mov	r1, r3
 8001392:	480d      	ldr	r0, [pc, #52]	@ (80013c8 <MX_TIM3_Init+0xf0>)
 8001394:	f002 ff0e 	bl	80041b4 <HAL_TIM_PWM_ConfigChannel>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 800139e:	f000 f8b7 	bl	8001510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013a2:	463b      	mov	r3, r7
 80013a4:	220c      	movs	r2, #12
 80013a6:	4619      	mov	r1, r3
 80013a8:	4807      	ldr	r0, [pc, #28]	@ (80013c8 <MX_TIM3_Init+0xf0>)
 80013aa:	f002 ff03 	bl	80041b4 <HAL_TIM_PWM_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80013b4:	f000 f8ac 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013b8:	4803      	ldr	r0, [pc, #12]	@ (80013c8 <MX_TIM3_Init+0xf0>)
 80013ba:	f000 f9ed 	bl	8001798 <HAL_TIM_MspPostInit>

}
 80013be:	bf00      	nop
 80013c0:	3728      	adds	r7, #40	@ 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000488 	.word	0x20000488
 80013cc:	40000400 	.word	0x40000400

080013d0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80013d4:	4b0d      	ldr	r3, [pc, #52]	@ (800140c <MX_USB_PCD_Init+0x3c>)
 80013d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001410 <MX_USB_PCD_Init+0x40>)
 80013d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80013da:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <MX_USB_PCD_Init+0x3c>)
 80013dc:	2208      	movs	r2, #8
 80013de:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80013e0:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <MX_USB_PCD_Init+0x3c>)
 80013e2:	2202      	movs	r2, #2
 80013e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013e6:	4b09      	ldr	r3, [pc, #36]	@ (800140c <MX_USB_PCD_Init+0x3c>)
 80013e8:	2202      	movs	r2, #2
 80013ea:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80013ec:	4b07      	ldr	r3, [pc, #28]	@ (800140c <MX_USB_PCD_Init+0x3c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80013f2:	4b06      	ldr	r3, [pc, #24]	@ (800140c <MX_USB_PCD_Init+0x3c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80013f8:	4804      	ldr	r0, [pc, #16]	@ (800140c <MX_USB_PCD_Init+0x3c>)
 80013fa:	f001 f833 	bl	8002464 <HAL_PCD_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001404:	f000 f884 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200004d4 	.word	0x200004d4
 8001410:	40005c00 	.word	0x40005c00

08001414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	@ 0x28
 8001418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800142a:	4b37      	ldr	r3, [pc, #220]	@ (8001508 <MX_GPIO_Init+0xf4>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	4a36      	ldr	r2, [pc, #216]	@ (8001508 <MX_GPIO_Init+0xf4>)
 8001430:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001434:	6153      	str	r3, [r2, #20]
 8001436:	4b34      	ldr	r3, [pc, #208]	@ (8001508 <MX_GPIO_Init+0xf4>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	4b31      	ldr	r3, [pc, #196]	@ (8001508 <MX_GPIO_Init+0xf4>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	4a30      	ldr	r2, [pc, #192]	@ (8001508 <MX_GPIO_Init+0xf4>)
 8001448:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800144c:	6153      	str	r3, [r2, #20]
 800144e:	4b2e      	ldr	r3, [pc, #184]	@ (8001508 <MX_GPIO_Init+0xf4>)
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800145a:	4b2b      	ldr	r3, [pc, #172]	@ (8001508 <MX_GPIO_Init+0xf4>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	4a2a      	ldr	r2, [pc, #168]	@ (8001508 <MX_GPIO_Init+0xf4>)
 8001460:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001464:	6153      	str	r3, [r2, #20]
 8001466:	4b28      	ldr	r3, [pc, #160]	@ (8001508 <MX_GPIO_Init+0xf4>)
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	4b25      	ldr	r3, [pc, #148]	@ (8001508 <MX_GPIO_Init+0xf4>)
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	4a24      	ldr	r2, [pc, #144]	@ (8001508 <MX_GPIO_Init+0xf4>)
 8001478:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800147c:	6153      	str	r3, [r2, #20]
 800147e:	4b22      	ldr	r3, [pc, #136]	@ (8001508 <MX_GPIO_Init+0xf4>)
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <MX_GPIO_Init+0xf4>)
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	4a1e      	ldr	r2, [pc, #120]	@ (8001508 <MX_GPIO_Init+0xf4>)
 8001490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001494:	6153      	str	r3, [r2, #20]
 8001496:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <MX_GPIO_Init+0xf4>)
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80014a2:	2200      	movs	r2, #0
 80014a4:	f64f 7108 	movw	r1, #65288	@ 0xff08
 80014a8:	4818      	ldr	r0, [pc, #96]	@ (800150c <MX_GPIO_Init+0xf8>)
 80014aa:	f000 fe9d 	bl	80021e8 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80014ae:	2337      	movs	r3, #55	@ 0x37
 80014b0:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014b2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	4812      	ldr	r0, [pc, #72]	@ (800150c <MX_GPIO_Init+0xf8>)
 80014c4:	f000 fd16 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80014c8:	f64f 7308 	movw	r3, #65288	@ 0xff08
 80014cc:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	480a      	ldr	r0, [pc, #40]	@ (800150c <MX_GPIO_Init+0xf8>)
 80014e2:	f000 fd07 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014e6:	2301      	movs	r3, #1
 80014e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014fc:	f000 fcfa 	bl	8001ef4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001500:	bf00      	nop
 8001502:	3728      	adds	r7, #40	@ 0x28
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40021000 	.word	0x40021000
 800150c:	48001000 	.word	0x48001000

08001510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001514:	b672      	cpsid	i
}
 8001516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <Error_Handler+0x8>

0800151c <servoGoToFractionalPosition>:

// a function to make servo move to a point in its range of motion
// Inputs:
// - Servo*: address of the servo struct being used
// - frac: the fraction of the servos range to go to (0 to 1)
void servoGoToFractionalPosition(Servo *servo, float frac) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	ed87 0a00 	vstr	s0, [r7]
	uint32_t max = servo->max_pwm;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	61fb      	str	r3, [r7, #28]
	uint32_t min = servo->min_pwm;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001532:	61bb      	str	r3, [r7, #24]
	float range = (float)(max - min);
 8001534:	69fa      	ldr	r2, [r7, #28]
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001542:	edc7 7a05 	vstr	s15, [r7, #20]

	// map to pwm range
	float pwm = (float)min + range*frac;
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	ee07 3a90 	vmov	s15, r3
 800154c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001550:	edd7 6a05 	vldr	s13, [r7, #20]
 8001554:	edd7 7a00 	vldr	s15, [r7]
 8001558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800155c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001560:	edc7 7a04 	vstr	s15, [r7, #16]
	uint32_t pwm_int = (uint32_t)pwm;
 8001564:	edd7 7a04 	vldr	s15, [r7, #16]
 8001568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800156c:	ee17 3a90 	vmov	r3, s15
 8001570:	60fb      	str	r3, [r7, #12]

	// set the pwm val
	setServoPWM(servo, pwm_int);
 8001572:	68f9      	ldr	r1, [r7, #12]
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 f804 	bl	8001582 <setServoPWM>
}
 800157a:	bf00      	nop
 800157c:	3720      	adds	r7, #32
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <setServoPWM>:

void setServoPWM(Servo *servo, uint32_t pwm){
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	6039      	str	r1, [r7, #0]

	if (servo->channel == 1) {
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	791b      	ldrb	r3, [r3, #4]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d104      	bne.n	800159e <setServoPWM+0x1c>
		servo->TIMx->CCR1 = pwm;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	635a      	str	r2, [r3, #52]	@ 0x34
		servo->TIMx->CCR3 = pwm;
	}
	else if (servo->channel == 4) {
		servo->TIMx->CCR4 = pwm;
	}
}
 800159c:	e019      	b.n	80015d2 <setServoPWM+0x50>
	else if (servo->channel == 2) {
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	791b      	ldrb	r3, [r3, #4]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d104      	bne.n	80015b0 <setServoPWM+0x2e>
		servo->TIMx->CCR2 = pwm;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80015ae:	e010      	b.n	80015d2 <setServoPWM+0x50>
	else if (servo->channel == 3) {
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	791b      	ldrb	r3, [r3, #4]
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d104      	bne.n	80015c2 <setServoPWM+0x40>
		servo->TIMx->CCR3 = pwm;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80015c0:	e007      	b.n	80015d2 <setServoPWM+0x50>
	else if (servo->channel == 4) {
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	791b      	ldrb	r3, [r3, #4]
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d103      	bne.n	80015d2 <setServoPWM+0x50>
		servo->TIMx->CCR4 = pwm;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <HAL_MspInit+0x44>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001624 <HAL_MspInit+0x44>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6193      	str	r3, [r2, #24]
 80015f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <HAL_MspInit+0x44>)
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <HAL_MspInit+0x44>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	4a08      	ldr	r2, [pc, #32]	@ (8001624 <HAL_MspInit+0x44>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001608:	61d3      	str	r3, [r2, #28]
 800160a:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <HAL_MspInit+0x44>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001616:	2007      	movs	r0, #7
 8001618:	f000 fc38 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000

08001628 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	@ 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a17      	ldr	r2, [pc, #92]	@ (80016a4 <HAL_I2C_MspInit+0x7c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d127      	bne.n	800169a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	4b17      	ldr	r3, [pc, #92]	@ (80016a8 <HAL_I2C_MspInit+0x80>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	4a16      	ldr	r2, [pc, #88]	@ (80016a8 <HAL_I2C_MspInit+0x80>)
 8001650:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001654:	6153      	str	r3, [r2, #20]
 8001656:	4b14      	ldr	r3, [pc, #80]	@ (80016a8 <HAL_I2C_MspInit+0x80>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001662:	23c0      	movs	r3, #192	@ 0xc0
 8001664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001666:	2312      	movs	r3, #18
 8001668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800166a:	2301      	movs	r3, #1
 800166c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800166e:	2303      	movs	r3, #3
 8001670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001672:	2304      	movs	r3, #4
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	480b      	ldr	r0, [pc, #44]	@ (80016ac <HAL_I2C_MspInit+0x84>)
 800167e:	f000 fc39 	bl	8001ef4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001682:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <HAL_I2C_MspInit+0x80>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	4a08      	ldr	r2, [pc, #32]	@ (80016a8 <HAL_I2C_MspInit+0x80>)
 8001688:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800168c:	61d3      	str	r3, [r2, #28]
 800168e:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <HAL_I2C_MspInit+0x80>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800169a:	bf00      	nop
 800169c:	3728      	adds	r7, #40	@ 0x28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40005400 	.word	0x40005400
 80016a8:	40021000 	.word	0x40021000
 80016ac:	48000400 	.word	0x48000400

080016b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	@ 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a17      	ldr	r2, [pc, #92]	@ (800172c <HAL_SPI_MspInit+0x7c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d128      	bne.n	8001724 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016d2:	4b17      	ldr	r3, [pc, #92]	@ (8001730 <HAL_SPI_MspInit+0x80>)
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	4a16      	ldr	r2, [pc, #88]	@ (8001730 <HAL_SPI_MspInit+0x80>)
 80016d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016dc:	6193      	str	r3, [r2, #24]
 80016de:	4b14      	ldr	r3, [pc, #80]	@ (8001730 <HAL_SPI_MspInit+0x80>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <HAL_SPI_MspInit+0x80>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	4a10      	ldr	r2, [pc, #64]	@ (8001730 <HAL_SPI_MspInit+0x80>)
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f4:	6153      	str	r3, [r2, #20]
 80016f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001730 <HAL_SPI_MspInit+0x80>)
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001702:	23e0      	movs	r3, #224	@ 0xe0
 8001704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001712:	2305      	movs	r3, #5
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001720:	f000 fbe8 	bl	8001ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001724:	bf00      	nop
 8001726:	3728      	adds	r7, #40	@ 0x28
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40013000 	.word	0x40013000
 8001730:	40021000 	.word	0x40021000

08001734 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001744:	d10c      	bne.n	8001760 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001746:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <HAL_TIM_PWM_MspInit+0x5c>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	4a11      	ldr	r2, [pc, #68]	@ (8001790 <HAL_TIM_PWM_MspInit+0x5c>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	61d3      	str	r3, [r2, #28]
 8001752:	4b0f      	ldr	r3, [pc, #60]	@ (8001790 <HAL_TIM_PWM_MspInit+0x5c>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800175e:	e010      	b.n	8001782 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0b      	ldr	r2, [pc, #44]	@ (8001794 <HAL_TIM_PWM_MspInit+0x60>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d10b      	bne.n	8001782 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800176a:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <HAL_TIM_PWM_MspInit+0x5c>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	4a08      	ldr	r2, [pc, #32]	@ (8001790 <HAL_TIM_PWM_MspInit+0x5c>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	61d3      	str	r3, [r2, #28]
 8001776:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <HAL_TIM_PWM_MspInit+0x5c>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40021000 	.word	0x40021000
 8001794:	40000400 	.word	0x40000400

08001798 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08c      	sub	sp, #48	@ 0x30
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 031c 	add.w	r3, r7, #28
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017b8:	d11e      	bne.n	80017f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	4b3e      	ldr	r3, [pc, #248]	@ (80018b4 <HAL_TIM_MspPostInit+0x11c>)
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	4a3d      	ldr	r2, [pc, #244]	@ (80018b4 <HAL_TIM_MspPostInit+0x11c>)
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c4:	6153      	str	r3, [r2, #20]
 80017c6:	4b3b      	ldr	r3, [pc, #236]	@ (80018b4 <HAL_TIM_MspPostInit+0x11c>)
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ce:	61bb      	str	r3, [r7, #24]
 80017d0:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 80017d2:	f248 030e 	movw	r3, #32782	@ 0x800e
 80017d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017e4:	2301      	movs	r3, #1
 80017e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e8:	f107 031c 	add.w	r3, r7, #28
 80017ec:	4619      	mov	r1, r3
 80017ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017f2:	f000 fb7f 	bl	8001ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017f6:	e059      	b.n	80018ac <HAL_TIM_MspPostInit+0x114>
  else if(htim->Instance==TIM3)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a2e      	ldr	r2, [pc, #184]	@ (80018b8 <HAL_TIM_MspPostInit+0x120>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d154      	bne.n	80018ac <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	4b2c      	ldr	r3, [pc, #176]	@ (80018b4 <HAL_TIM_MspPostInit+0x11c>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	4a2b      	ldr	r2, [pc, #172]	@ (80018b4 <HAL_TIM_MspPostInit+0x11c>)
 8001808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800180c:	6153      	str	r3, [r2, #20]
 800180e:	4b29      	ldr	r3, [pc, #164]	@ (80018b4 <HAL_TIM_MspPostInit+0x11c>)
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	4b26      	ldr	r3, [pc, #152]	@ (80018b4 <HAL_TIM_MspPostInit+0x11c>)
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	4a25      	ldr	r2, [pc, #148]	@ (80018b4 <HAL_TIM_MspPostInit+0x11c>)
 8001820:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001824:	6153      	str	r3, [r2, #20]
 8001826:	4b23      	ldr	r3, [pc, #140]	@ (80018b4 <HAL_TIM_MspPostInit+0x11c>)
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001832:	4b20      	ldr	r3, [pc, #128]	@ (80018b4 <HAL_TIM_MspPostInit+0x11c>)
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	4a1f      	ldr	r2, [pc, #124]	@ (80018b4 <HAL_TIM_MspPostInit+0x11c>)
 8001838:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800183c:	6153      	str	r3, [r2, #20]
 800183e:	4b1d      	ldr	r3, [pc, #116]	@ (80018b4 <HAL_TIM_MspPostInit+0x11c>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800184a:	2310      	movs	r3, #16
 800184c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800185a:	2302      	movs	r3, #2
 800185c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f107 031c 	add.w	r3, r7, #28
 8001862:	4619      	mov	r1, r3
 8001864:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001868:	f000 fb44 	bl	8001ef4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800186c:	2303      	movs	r3, #3
 800186e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800187c:	2302      	movs	r3, #2
 800187e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001880:	f107 031c 	add.w	r3, r7, #28
 8001884:	4619      	mov	r1, r3
 8001886:	480d      	ldr	r0, [pc, #52]	@ (80018bc <HAL_TIM_MspPostInit+0x124>)
 8001888:	f000 fb34 	bl	8001ef4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800188c:	2340      	movs	r3, #64	@ 0x40
 800188e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800189c:	2302      	movs	r3, #2
 800189e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a0:	f107 031c 	add.w	r3, r7, #28
 80018a4:	4619      	mov	r1, r3
 80018a6:	4806      	ldr	r0, [pc, #24]	@ (80018c0 <HAL_TIM_MspPostInit+0x128>)
 80018a8:	f000 fb24 	bl	8001ef4 <HAL_GPIO_Init>
}
 80018ac:	bf00      	nop
 80018ae:	3730      	adds	r7, #48	@ 0x30
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40000400 	.word	0x40000400
 80018bc:	48000400 	.word	0x48000400
 80018c0:	48000800 	.word	0x48000800

080018c4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08a      	sub	sp, #40	@ 0x28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a18      	ldr	r2, [pc, #96]	@ (8001944 <HAL_PCD_MspInit+0x80>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d129      	bne.n	800193a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	4b18      	ldr	r3, [pc, #96]	@ (8001948 <HAL_PCD_MspInit+0x84>)
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	4a17      	ldr	r2, [pc, #92]	@ (8001948 <HAL_PCD_MspInit+0x84>)
 80018ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018f0:	6153      	str	r3, [r2, #20]
 80018f2:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <HAL_PCD_MspInit+0x84>)
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80018fe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800190c:	2303      	movs	r3, #3
 800190e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001910:	230e      	movs	r3, #14
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4619      	mov	r1, r3
 800191a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800191e:	f000 fae9 	bl	8001ef4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001922:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <HAL_PCD_MspInit+0x84>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4a08      	ldr	r2, [pc, #32]	@ (8001948 <HAL_PCD_MspInit+0x84>)
 8001928:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800192c:	61d3      	str	r3, [r2, #28]
 800192e:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <HAL_PCD_MspInit+0x84>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800193a:	bf00      	nop
 800193c:	3728      	adds	r7, #40	@ 0x28
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40005c00 	.word	0x40005c00
 8001948:	40021000 	.word	0x40021000

0800194c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <NMI_Handler+0x4>

08001954 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <HardFault_Handler+0x4>

0800195c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <MemManage_Handler+0x4>

08001964 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <BusFault_Handler+0x4>

0800196c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <UsageFault_Handler+0x4>

08001974 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a2:	f000 f9a1 	bl	8001ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}

080019aa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  return 1;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <_kill>:

int _kill(int pid, int sig)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019c4:	f004 f936 	bl	8005c34 <__errno>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2216      	movs	r2, #22
 80019cc:	601a      	str	r2, [r3, #0]
  return -1;
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <_exit>:

void _exit (int status)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019e2:	f04f 31ff 	mov.w	r1, #4294967295
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffe7 	bl	80019ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <_exit+0x12>

080019f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	e00a      	b.n	8001a18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a02:	f3af 8000 	nop.w
 8001a06:	4601      	mov	r1, r0
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	60ba      	str	r2, [r7, #8]
 8001a0e:	b2ca      	uxtb	r2, r1
 8001a10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3301      	adds	r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	dbf0      	blt.n	8001a02 <_read+0x12>
  }

  return len;
 8001a20:	687b      	ldr	r3, [r7, #4]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	e009      	b.n	8001a50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	60ba      	str	r2, [r7, #8]
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	dbf1      	blt.n	8001a3c <_write+0x12>
  }
  return len;
 8001a58:	687b      	ldr	r3, [r7, #4]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <_close>:

int _close(int file)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a8a:	605a      	str	r2, [r3, #4]
  return 0;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <_isatty>:

int _isatty(int file)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aa2:	2301      	movs	r3, #1
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad4:	4a14      	ldr	r2, [pc, #80]	@ (8001b28 <_sbrk+0x5c>)
 8001ad6:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <_sbrk+0x60>)
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae0:	4b13      	ldr	r3, [pc, #76]	@ (8001b30 <_sbrk+0x64>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d102      	bne.n	8001aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	@ (8001b30 <_sbrk+0x64>)
 8001aea:	4a12      	ldr	r2, [pc, #72]	@ (8001b34 <_sbrk+0x68>)
 8001aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aee:	4b10      	ldr	r3, [pc, #64]	@ (8001b30 <_sbrk+0x64>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d207      	bcs.n	8001b0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001afc:	f004 f89a 	bl	8005c34 <__errno>
 8001b00:	4603      	mov	r3, r0
 8001b02:	220c      	movs	r2, #12
 8001b04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0a:	e009      	b.n	8001b20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b0c:	4b08      	ldr	r3, [pc, #32]	@ (8001b30 <_sbrk+0x64>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b12:	4b07      	ldr	r3, [pc, #28]	@ (8001b30 <_sbrk+0x64>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	4a05      	ldr	r2, [pc, #20]	@ (8001b30 <_sbrk+0x64>)
 8001b1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	2000a000 	.word	0x2000a000
 8001b2c:	00000400 	.word	0x00000400
 8001b30:	200007c0 	.word	0x200007c0
 8001b34:	20000918 	.word	0x20000918

08001b38 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b3c:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <SystemInit+0x20>)
 8001b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b42:	4a05      	ldr	r2, [pc, #20]	@ (8001b58 <SystemInit+0x20>)
 8001b44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <TIM2_IRQHandler>:
    hardware_timer->timer_completion_function = completion_function;

}

// tim2 overflow handler
void TIM2_IRQHandler(void) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 8001b60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d01e      	beq.n	8001bac <TIM2_IRQHandler+0x50>
        TIM2->SR &= ~TIM_SR_UIF; // Clear the interrupt flag
 8001b6e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b78:	f023 0301 	bic.w	r3, r3, #1
 8001b7c:	6113      	str	r3, [r2, #16]

        if (TIM2_init.oneShotMode) {
 8001b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb0 <TIM2_IRQHandler+0x54>)
 8001b80:	7b1b      	ldrb	r3, [r3, #12]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00a      	beq.n	8001b9e <TIM2_IRQHandler+0x42>
            TIM2->CR1 &= ~TIM_CR1_CEN; // Stop the timer if in one-shot mode
 8001b88:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b92:	f023 0301 	bic.w	r3, r3, #1
 8001b96:	6013      	str	r3, [r2, #0]

            TIM2_init.oneShotMode = 0; // turn off the oneshot mode
 8001b98:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <TIM2_IRQHandler+0x54>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	731a      	strb	r2, [r3, #12]
        }

        if (TIM2_init.timer_completion_function != NULL) {
 8001b9e:	4b04      	ldr	r3, [pc, #16]	@ (8001bb0 <TIM2_IRQHandler+0x54>)
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <TIM2_IRQHandler+0x50>
            TIM2_init.timer_completion_function();
 8001ba6:	4b02      	ldr	r3, [pc, #8]	@ (8001bb0 <TIM2_IRQHandler+0x54>)
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001baa:	4798      	blx	r3
        }
    }
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000144 	.word	0x20000144

08001bb4 <TIM4_IRQHandler>:

// tim4 overflow handler
void TIM4_IRQHandler(void) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
    if (TIM4->SR & TIM_SR_UIF) {
 8001bb8:	4b11      	ldr	r3, [pc, #68]	@ (8001c00 <TIM4_IRQHandler+0x4c>)
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01a      	beq.n	8001bfa <TIM4_IRQHandler+0x46>
        TIM4->SR &= ~TIM_SR_UIF; // Clear the interrupt flag
 8001bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c00 <TIM4_IRQHandler+0x4c>)
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c00 <TIM4_IRQHandler+0x4c>)
 8001bca:	f023 0301 	bic.w	r3, r3, #1
 8001bce:	6113      	str	r3, [r2, #16]

        if (TIM4_init.oneShotMode) {
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <TIM4_IRQHandler+0x50>)
 8001bd2:	7b1b      	ldrb	r3, [r3, #12]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d008      	beq.n	8001bec <TIM4_IRQHandler+0x38>
            TIM4->CR1 &= ~TIM_CR1_CEN; // Stop the timer if in one-shot mode
 8001bda:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <TIM4_IRQHandler+0x4c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a08      	ldr	r2, [pc, #32]	@ (8001c00 <TIM4_IRQHandler+0x4c>)
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	6013      	str	r3, [r2, #0]

            TIM4_init.oneShotMode = 0; // turn off the oneshot mode
 8001be6:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <TIM4_IRQHandler+0x50>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	731a      	strb	r2, [r3, #12]
        }

        if (TIM4_init.timer_completion_function != NULL) {
 8001bec:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <TIM4_IRQHandler+0x50>)
 8001bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d002      	beq.n	8001bfa <TIM4_IRQHandler+0x46>
            TIM4_init.timer_completion_function();
 8001bf4:	4b03      	ldr	r3, [pc, #12]	@ (8001c04 <TIM4_IRQHandler+0x50>)
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf8:	4798      	blx	r3
        }
    }
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40000800 	.word	0x40000800
 8001c04:	2000016c 	.word	0x2000016c

08001c08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c40 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c0c:	f7ff ff94 	bl	8001b38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c10:	480c      	ldr	r0, [pc, #48]	@ (8001c44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c12:	490d      	ldr	r1, [pc, #52]	@ (8001c48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c14:	4a0d      	ldr	r2, [pc, #52]	@ (8001c4c <LoopForever+0xe>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c18:	e002      	b.n	8001c20 <LoopCopyDataInit>

08001c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1e:	3304      	adds	r3, #4

08001c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c24:	d3f9      	bcc.n	8001c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c26:	4a0a      	ldr	r2, [pc, #40]	@ (8001c50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c28:	4c0a      	ldr	r4, [pc, #40]	@ (8001c54 <LoopForever+0x16>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c2c:	e001      	b.n	8001c32 <LoopFillZerobss>

08001c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c30:	3204      	adds	r2, #4

08001c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c34:	d3fb      	bcc.n	8001c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c36:	f004 f803 	bl	8005c40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c3a:	f7ff f9c9 	bl	8000fd0 <main>

08001c3e <LoopForever>:

LoopForever:
    b LoopForever
 8001c3e:	e7fe      	b.n	8001c3e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c40:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c48:	20000364 	.word	0x20000364
  ldr r2, =_sidata
 8001c4c:	080097c8 	.word	0x080097c8
  ldr r2, =_sbss
 8001c50:	20000364 	.word	0x20000364
  ldr r4, =_ebss
 8001c54:	20000914 	.word	0x20000914

08001c58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c58:	e7fe      	b.n	8001c58 <ADC1_2_IRQHandler>
	...

08001c5c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c60:	4b08      	ldr	r3, [pc, #32]	@ (8001c84 <HAL_Init+0x28>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a07      	ldr	r2, [pc, #28]	@ (8001c84 <HAL_Init+0x28>)
 8001c66:	f043 0310 	orr.w	r3, r3, #16
 8001c6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c6c:	2003      	movs	r0, #3
 8001c6e:	f000 f90d 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c72:	2000      	movs	r0, #0
 8001c74:	f000 f808 	bl	8001c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c78:	f7ff fcb2 	bl	80015e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40022000 	.word	0x40022000

08001c88 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c90:	4b12      	ldr	r3, [pc, #72]	@ (8001cdc <HAL_InitTick+0x54>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b12      	ldr	r3, [pc, #72]	@ (8001ce0 <HAL_InitTick+0x58>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 f917 	bl	8001eda <HAL_SYSTICK_Config>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e00e      	b.n	8001cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b0f      	cmp	r3, #15
 8001cba:	d80a      	bhi.n	8001cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc4:	f000 f8ed 	bl	8001ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cc8:	4a06      	ldr	r2, [pc, #24]	@ (8001ce4 <HAL_InitTick+0x5c>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e000      	b.n	8001cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000140 	.word	0x20000140
 8001ce0:	20000198 	.word	0x20000198
 8001ce4:	20000194 	.word	0x20000194

08001ce8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cec:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <HAL_IncTick+0x20>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <HAL_IncTick+0x24>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	4a04      	ldr	r2, [pc, #16]	@ (8001d0c <HAL_IncTick+0x24>)
 8001cfa:	6013      	str	r3, [r2, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	20000198 	.word	0x20000198
 8001d0c:	200007c4 	.word	0x200007c4

08001d10 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return uwTick;  
 8001d14:	4b03      	ldr	r3, [pc, #12]	@ (8001d24 <HAL_GetTick+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	200007c4 	.word	0x200007c4

08001d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d38:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d44:	4013      	ands	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5a:	4a04      	ldr	r2, [pc, #16]	@ (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	60d3      	str	r3, [r2, #12]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d74:	4b04      	ldr	r3, [pc, #16]	@ (8001d88 <__NVIC_GetPriorityGrouping+0x18>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	0a1b      	lsrs	r3, r3, #8
 8001d7a:	f003 0307 	and.w	r3, r3, #7
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	db0a      	blt.n	8001db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	490c      	ldr	r1, [pc, #48]	@ (8001dd8 <__NVIC_SetPriority+0x4c>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	440b      	add	r3, r1
 8001db0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db4:	e00a      	b.n	8001dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4908      	ldr	r1, [pc, #32]	@ (8001ddc <__NVIC_SetPriority+0x50>)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	3b04      	subs	r3, #4
 8001dc4:	0112      	lsls	r2, r2, #4
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	440b      	add	r3, r1
 8001dca:	761a      	strb	r2, [r3, #24]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000e100 	.word	0xe000e100
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	@ 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f1c3 0307 	rsb	r3, r3, #7
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	bf28      	it	cs
 8001dfe:	2304      	movcs	r3, #4
 8001e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d902      	bls.n	8001e10 <NVIC_EncodePriority+0x30>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3b03      	subs	r3, #3
 8001e0e:	e000      	b.n	8001e12 <NVIC_EncodePriority+0x32>
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43d9      	mvns	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	4313      	orrs	r3, r2
         );
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	@ 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e58:	d301      	bcc.n	8001e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00f      	b.n	8001e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e88 <SysTick_Config+0x40>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e66:	210f      	movs	r1, #15
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f7ff ff8e 	bl	8001d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e70:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <SysTick_Config+0x40>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e76:	4b04      	ldr	r3, [pc, #16]	@ (8001e88 <SysTick_Config+0x40>)
 8001e78:	2207      	movs	r2, #7
 8001e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010

08001e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ff47 	bl	8001d28 <__NVIC_SetPriorityGrouping>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb4:	f7ff ff5c 	bl	8001d70 <__NVIC_GetPriorityGrouping>
 8001eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	6978      	ldr	r0, [r7, #20]
 8001ec0:	f7ff ff8e 	bl	8001de0 <NVIC_EncodePriority>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff5d 	bl	8001d8c <__NVIC_SetPriority>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ffb0 	bl	8001e48 <SysTick_Config>
 8001ee8:	4603      	mov	r3, r0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b087      	sub	sp, #28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f02:	e154      	b.n	80021ae <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	2101      	movs	r1, #1
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	4013      	ands	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 8146 	beq.w	80021a8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d005      	beq.n	8001f34 <HAL_GPIO_Init+0x40>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d130      	bne.n	8001f96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	2203      	movs	r2, #3
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4013      	ands	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	091b      	lsrs	r3, r3, #4
 8001f80:	f003 0201 	and.w	r2, r3, #1
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	d017      	beq.n	8001fd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	2203      	movs	r2, #3
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d123      	bne.n	8002026 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	08da      	lsrs	r2, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3208      	adds	r2, #8
 8001fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	220f      	movs	r2, #15
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4013      	ands	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	691a      	ldr	r2, [r3, #16]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	08da      	lsrs	r2, r3, #3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3208      	adds	r2, #8
 8002020:	6939      	ldr	r1, [r7, #16]
 8002022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	2203      	movs	r2, #3
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4013      	ands	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 0203 	and.w	r2, r3, #3
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 80a0 	beq.w	80021a8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002068:	4b58      	ldr	r3, [pc, #352]	@ (80021cc <HAL_GPIO_Init+0x2d8>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	4a57      	ldr	r2, [pc, #348]	@ (80021cc <HAL_GPIO_Init+0x2d8>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	6193      	str	r3, [r2, #24]
 8002074:	4b55      	ldr	r3, [pc, #340]	@ (80021cc <HAL_GPIO_Init+0x2d8>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002080:	4a53      	ldr	r2, [pc, #332]	@ (80021d0 <HAL_GPIO_Init+0x2dc>)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	3302      	adds	r3, #2
 8002088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	220f      	movs	r2, #15
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80020aa:	d019      	beq.n	80020e0 <HAL_GPIO_Init+0x1ec>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a49      	ldr	r2, [pc, #292]	@ (80021d4 <HAL_GPIO_Init+0x2e0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d013      	beq.n	80020dc <HAL_GPIO_Init+0x1e8>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a48      	ldr	r2, [pc, #288]	@ (80021d8 <HAL_GPIO_Init+0x2e4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d00d      	beq.n	80020d8 <HAL_GPIO_Init+0x1e4>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a47      	ldr	r2, [pc, #284]	@ (80021dc <HAL_GPIO_Init+0x2e8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d007      	beq.n	80020d4 <HAL_GPIO_Init+0x1e0>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a46      	ldr	r2, [pc, #280]	@ (80021e0 <HAL_GPIO_Init+0x2ec>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d101      	bne.n	80020d0 <HAL_GPIO_Init+0x1dc>
 80020cc:	2304      	movs	r3, #4
 80020ce:	e008      	b.n	80020e2 <HAL_GPIO_Init+0x1ee>
 80020d0:	2305      	movs	r3, #5
 80020d2:	e006      	b.n	80020e2 <HAL_GPIO_Init+0x1ee>
 80020d4:	2303      	movs	r3, #3
 80020d6:	e004      	b.n	80020e2 <HAL_GPIO_Init+0x1ee>
 80020d8:	2302      	movs	r3, #2
 80020da:	e002      	b.n	80020e2 <HAL_GPIO_Init+0x1ee>
 80020dc:	2301      	movs	r3, #1
 80020de:	e000      	b.n	80020e2 <HAL_GPIO_Init+0x1ee>
 80020e0:	2300      	movs	r3, #0
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	f002 0203 	and.w	r2, r2, #3
 80020e8:	0092      	lsls	r2, r2, #2
 80020ea:	4093      	lsls	r3, r2
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020f2:	4937      	ldr	r1, [pc, #220]	@ (80021d0 <HAL_GPIO_Init+0x2dc>)
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	3302      	adds	r3, #2
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002100:	4b38      	ldr	r3, [pc, #224]	@ (80021e4 <HAL_GPIO_Init+0x2f0>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	43db      	mvns	r3, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002124:	4a2f      	ldr	r2, [pc, #188]	@ (80021e4 <HAL_GPIO_Init+0x2f0>)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800212a:	4b2e      	ldr	r3, [pc, #184]	@ (80021e4 <HAL_GPIO_Init+0x2f0>)
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	43db      	mvns	r3, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4013      	ands	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4313      	orrs	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800214e:	4a25      	ldr	r2, [pc, #148]	@ (80021e4 <HAL_GPIO_Init+0x2f0>)
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002154:	4b23      	ldr	r3, [pc, #140]	@ (80021e4 <HAL_GPIO_Init+0x2f0>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	43db      	mvns	r3, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4313      	orrs	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002178:	4a1a      	ldr	r2, [pc, #104]	@ (80021e4 <HAL_GPIO_Init+0x2f0>)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800217e:	4b19      	ldr	r3, [pc, #100]	@ (80021e4 <HAL_GPIO_Init+0x2f0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	43db      	mvns	r3, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021a2:	4a10      	ldr	r2, [pc, #64]	@ (80021e4 <HAL_GPIO_Init+0x2f0>)
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	3301      	adds	r3, #1
 80021ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f47f aea3 	bne.w	8001f04 <HAL_GPIO_Init+0x10>
  }
}
 80021be:	bf00      	nop
 80021c0:	bf00      	nop
 80021c2:	371c      	adds	r7, #28
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40010000 	.word	0x40010000
 80021d4:	48000400 	.word	0x48000400
 80021d8:	48000800 	.word	0x48000800
 80021dc:	48000c00 	.word	0x48000c00
 80021e0:	48001000 	.word	0x48001000
 80021e4:	40010400 	.word	0x40010400

080021e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	807b      	strh	r3, [r7, #2]
 80021f4:	4613      	mov	r3, r2
 80021f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021f8:	787b      	ldrb	r3, [r7, #1]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021fe:	887a      	ldrh	r2, [r7, #2]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002204:	e002      	b.n	800220c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002206:	887a      	ldrh	r2, [r7, #2]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e081      	b.n	800232e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d106      	bne.n	8002244 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff f9f2 	bl	8001628 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2224      	movs	r2, #36	@ 0x24
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0201 	bic.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002268:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002278:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d107      	bne.n	8002292 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	e006      	b.n	80022a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800229e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d104      	bne.n	80022b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80022c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691a      	ldr	r2, [r3, #16]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69d9      	ldr	r1, [r3, #28]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1a      	ldr	r2, [r3, #32]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0201 	orr.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2220      	movs	r2, #32
 800231a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b20      	cmp	r3, #32
 800234a:	d138      	bne.n	80023be <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002356:	2302      	movs	r3, #2
 8002358:	e032      	b.n	80023c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2224      	movs	r2, #36	@ 0x24
 8002366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0201 	bic.w	r2, r2, #1
 8002378:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002388:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6819      	ldr	r1, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f042 0201 	orr.w	r2, r2, #1
 80023a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2220      	movs	r2, #32
 80023ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e000      	b.n	80023c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023be:	2302      	movs	r3, #2
  }
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b20      	cmp	r3, #32
 80023e0:	d139      	bne.n	8002456 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e033      	b.n	8002458 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2224      	movs	r2, #36	@ 0x24
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0201 	bic.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800241e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	021b      	lsls	r3, r3, #8
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0201 	orr.w	r2, r2, #1
 8002440:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2220      	movs	r2, #32
 8002446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	e000      	b.n	8002458 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002456:	2302      	movs	r3, #2
  }
}
 8002458:	4618      	mov	r0, r3
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002466:	b08b      	sub	sp, #44	@ 0x2c
 8002468:	af06      	add	r7, sp, #24
 800246a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e0c4      	b.n	8002600 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff fa1a 	bl	80018c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2203      	movs	r2, #3
 8002494:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f002 fba9 	bl	8004bf4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	73fb      	strb	r3, [r7, #15]
 80024a6:	e040      	b.n	800252a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	440b      	add	r3, r1
 80024b8:	3301      	adds	r3, #1
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	440b      	add	r3, r1
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	440b      	add	r3, r1
 80024e2:	3303      	adds	r3, #3
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024e8:	7bfa      	ldrb	r2, [r7, #15]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	440b      	add	r3, r1
 80024f6:	3338      	adds	r3, #56	@ 0x38
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024fc:	7bfa      	ldrb	r2, [r7, #15]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	440b      	add	r3, r1
 800250a:	333c      	adds	r3, #60	@ 0x3c
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002510:	7bfa      	ldrb	r2, [r7, #15]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	440b      	add	r3, r1
 800251e:	3340      	adds	r3, #64	@ 0x40
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	3301      	adds	r3, #1
 8002528:	73fb      	strb	r3, [r7, #15]
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	429a      	cmp	r2, r3
 8002532:	d3b9      	bcc.n	80024a8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002534:	2300      	movs	r3, #0
 8002536:	73fb      	strb	r3, [r7, #15]
 8002538:	e044      	b.n	80025c4 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800253a:	7bfa      	ldrb	r2, [r7, #15]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	440b      	add	r3, r1
 8002548:	f203 1369 	addw	r3, r3, #361	@ 0x169
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	440b      	add	r3, r1
 800255e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002562:	7bfa      	ldrb	r2, [r7, #15]
 8002564:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002566:	7bfa      	ldrb	r2, [r7, #15]
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	440b      	add	r3, r1
 8002574:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800257c:	7bfa      	ldrb	r2, [r7, #15]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	440b      	add	r3, r1
 800258a:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002592:	7bfa      	ldrb	r2, [r7, #15]
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	440b      	add	r3, r1
 80025a0:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	440b      	add	r3, r1
 80025b6:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	3301      	adds	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
 80025c4:	7bfa      	ldrb	r2, [r7, #15]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d3b5      	bcc.n	800253a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	687e      	ldr	r6, [r7, #4]
 80025d6:	466d      	mov	r5, sp
 80025d8:	f106 0410 	add.w	r4, r6, #16
 80025dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025e0:	6823      	ldr	r3, [r4, #0]
 80025e2:	602b      	str	r3, [r5, #0]
 80025e4:	1d33      	adds	r3, r6, #4
 80025e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025e8:	6838      	ldr	r0, [r7, #0]
 80025ea:	f002 fb1e 	bl	8004c2a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800260e:	af00      	add	r7, sp, #0
 8002610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002614:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002618:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800261a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d102      	bne.n	800262e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	f001 b823 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002632:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 817d 	beq.w	800293e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002644:	4bbc      	ldr	r3, [pc, #752]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b04      	cmp	r3, #4
 800264e:	d00c      	beq.n	800266a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002650:	4bb9      	ldr	r3, [pc, #740]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 030c 	and.w	r3, r3, #12
 8002658:	2b08      	cmp	r3, #8
 800265a:	d15c      	bne.n	8002716 <HAL_RCC_OscConfig+0x10e>
 800265c:	4bb6      	ldr	r3, [pc, #728]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002668:	d155      	bne.n	8002716 <HAL_RCC_OscConfig+0x10e>
 800266a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800266e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800267e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	095b      	lsrs	r3, r3, #5
 800268a:	b2db      	uxtb	r3, r3
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b01      	cmp	r3, #1
 8002694:	d102      	bne.n	800269c <HAL_RCC_OscConfig+0x94>
 8002696:	4ba8      	ldr	r3, [pc, #672]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	e015      	b.n	80026c8 <HAL_RCC_OscConfig+0xc0>
 800269c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026a0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80026a8:	fa93 f3a3 	rbit	r3, r3
 80026ac:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80026b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026b4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80026b8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80026c4:	4b9c      	ldr	r3, [pc, #624]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 80026c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80026cc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80026d0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80026d4:	fa92 f2a2 	rbit	r2, r2
 80026d8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80026dc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80026e0:	fab2 f282 	clz	r2, r2
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	f042 0220 	orr.w	r2, r2, #32
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	f002 021f 	and.w	r2, r2, #31
 80026f0:	2101      	movs	r1, #1
 80026f2:	fa01 f202 	lsl.w	r2, r1, r2
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 811f 	beq.w	800293c <HAL_RCC_OscConfig+0x334>
 80026fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002702:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	f040 8116 	bne.w	800293c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	f000 bfaf 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002716:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800271a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002726:	d106      	bne.n	8002736 <HAL_RCC_OscConfig+0x12e>
 8002728:	4b83      	ldr	r3, [pc, #524]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a82      	ldr	r2, [pc, #520]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 800272e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	e036      	b.n	80027a4 <HAL_RCC_OscConfig+0x19c>
 8002736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800273a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10c      	bne.n	8002760 <HAL_RCC_OscConfig+0x158>
 8002746:	4b7c      	ldr	r3, [pc, #496]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a7b      	ldr	r2, [pc, #492]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 800274c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	4b79      	ldr	r3, [pc, #484]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a78      	ldr	r2, [pc, #480]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 8002758:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	e021      	b.n	80027a4 <HAL_RCC_OscConfig+0x19c>
 8002760:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002764:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002770:	d10c      	bne.n	800278c <HAL_RCC_OscConfig+0x184>
 8002772:	4b71      	ldr	r3, [pc, #452]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a70      	ldr	r2, [pc, #448]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 8002778:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	4b6e      	ldr	r3, [pc, #440]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a6d      	ldr	r2, [pc, #436]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 8002784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	e00b      	b.n	80027a4 <HAL_RCC_OscConfig+0x19c>
 800278c:	4b6a      	ldr	r3, [pc, #424]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a69      	ldr	r2, [pc, #420]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 8002792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	4b67      	ldr	r3, [pc, #412]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a66      	ldr	r2, [pc, #408]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 800279e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027a2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027a4:	4b64      	ldr	r3, [pc, #400]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 80027a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a8:	f023 020f 	bic.w	r2, r3, #15
 80027ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	495f      	ldr	r1, [pc, #380]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d059      	beq.n	8002882 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ce:	f7ff fa9f 	bl	8001d10 <HAL_GetTick>
 80027d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d8:	f7ff fa9a 	bl	8001d10 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b64      	cmp	r3, #100	@ 0x64
 80027e6:	d902      	bls.n	80027ee <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	f000 bf43 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>
 80027ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027f2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002802:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	b2db      	uxtb	r3, r3
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b01      	cmp	r3, #1
 8002818:	d102      	bne.n	8002820 <HAL_RCC_OscConfig+0x218>
 800281a:	4b47      	ldr	r3, [pc, #284]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	e015      	b.n	800284c <HAL_RCC_OscConfig+0x244>
 8002820:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002824:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002834:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002838:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800283c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002848:	4b3b      	ldr	r3, [pc, #236]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 800284a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002850:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002854:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002858:	fa92 f2a2 	rbit	r2, r2
 800285c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002860:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002864:	fab2 f282 	clz	r2, r2
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	f042 0220 	orr.w	r2, r2, #32
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	f002 021f 	and.w	r2, r2, #31
 8002874:	2101      	movs	r1, #1
 8002876:	fa01 f202 	lsl.w	r2, r1, r2
 800287a:	4013      	ands	r3, r2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0ab      	beq.n	80027d8 <HAL_RCC_OscConfig+0x1d0>
 8002880:	e05d      	b.n	800293e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002882:	f7ff fa45 	bl	8001d10 <HAL_GetTick>
 8002886:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800288c:	f7ff fa40 	bl	8001d10 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b64      	cmp	r3, #100	@ 0x64
 800289a:	d902      	bls.n	80028a2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	f000 bee9 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>
 80028a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028a6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80028ae:	fa93 f3a3 	rbit	r3, r3
 80028b2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80028b6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ba:	fab3 f383 	clz	r3, r3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	095b      	lsrs	r3, r3, #5
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d102      	bne.n	80028d4 <HAL_RCC_OscConfig+0x2cc>
 80028ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	e015      	b.n	8002900 <HAL_RCC_OscConfig+0x2f8>
 80028d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028d8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80028e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028ec:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80028f0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80028fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002938 <HAL_RCC_OscConfig+0x330>)
 80028fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002900:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002904:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002908:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800290c:	fa92 f2a2 	rbit	r2, r2
 8002910:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002914:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002918:	fab2 f282 	clz	r2, r2
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	f042 0220 	orr.w	r2, r2, #32
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	f002 021f 	and.w	r2, r2, #31
 8002928:	2101      	movs	r1, #1
 800292a:	fa01 f202 	lsl.w	r2, r1, r2
 800292e:	4013      	ands	r3, r2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1ab      	bne.n	800288c <HAL_RCC_OscConfig+0x284>
 8002934:	e003      	b.n	800293e <HAL_RCC_OscConfig+0x336>
 8002936:	bf00      	nop
 8002938:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800293e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002942:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 817d 	beq.w	8002c4e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002954:	4ba6      	ldr	r3, [pc, #664]	@ (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 030c 	and.w	r3, r3, #12
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00b      	beq.n	8002978 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002960:	4ba3      	ldr	r3, [pc, #652]	@ (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 030c 	and.w	r3, r3, #12
 8002968:	2b08      	cmp	r3, #8
 800296a:	d172      	bne.n	8002a52 <HAL_RCC_OscConfig+0x44a>
 800296c:	4ba0      	ldr	r3, [pc, #640]	@ (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d16c      	bne.n	8002a52 <HAL_RCC_OscConfig+0x44a>
 8002978:	2302      	movs	r3, #2
 800297a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800298a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	b2db      	uxtb	r3, r3
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d102      	bne.n	80029a8 <HAL_RCC_OscConfig+0x3a0>
 80029a2:	4b93      	ldr	r3, [pc, #588]	@ (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	e013      	b.n	80029d0 <HAL_RCC_OscConfig+0x3c8>
 80029a8:	2302      	movs	r3, #2
 80029aa:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80029ba:	2302      	movs	r3, #2
 80029bc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80029c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80029cc:	4b88      	ldr	r3, [pc, #544]	@ (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	2202      	movs	r2, #2
 80029d2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80029d6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80029da:	fa92 f2a2 	rbit	r2, r2
 80029de:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80029e2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80029e6:	fab2 f282 	clz	r2, r2
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	f042 0220 	orr.w	r2, r2, #32
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	f002 021f 	and.w	r2, r2, #31
 80029f6:	2101      	movs	r1, #1
 80029f8:	fa01 f202 	lsl.w	r2, r1, r2
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_RCC_OscConfig+0x410>
 8002a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d002      	beq.n	8002a18 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	f000 be2e 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a18:	4b75      	ldr	r3, [pc, #468]	@ (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	21f8      	movs	r1, #248	@ 0xf8
 8002a2e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002a36:	fa91 f1a1 	rbit	r1, r1
 8002a3a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002a3e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002a42:	fab1 f181 	clz	r1, r1
 8002a46:	b2c9      	uxtb	r1, r1
 8002a48:	408b      	lsls	r3, r1
 8002a4a:	4969      	ldr	r1, [pc, #420]	@ (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a50:	e0fd      	b.n	8002c4e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 8088 	beq.w	8002b74 <HAL_RCC_OscConfig+0x56c>
 8002a64:	2301      	movs	r3, #1
 8002a66:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002a76:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a84:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a90:	f7ff f93e 	bl	8001d10 <HAL_GetTick>
 8002a94:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a98:	e00a      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a9a:	f7ff f939 	bl	8001d10 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d902      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	f000 bde2 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002aba:	fa93 f3a3 	rbit	r3, r3
 8002abe:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002ac2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	095b      	lsrs	r3, r3, #5
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d102      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x4d8>
 8002ada:	4b45      	ldr	r3, [pc, #276]	@ (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	e013      	b.n	8002b08 <HAL_RCC_OscConfig+0x500>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002af2:	2302      	movs	r3, #2
 8002af4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002af8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002afc:	fa93 f3a3 	rbit	r3, r3
 8002b00:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002b04:	4b3a      	ldr	r3, [pc, #232]	@ (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b08:	2202      	movs	r2, #2
 8002b0a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002b0e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002b12:	fa92 f2a2 	rbit	r2, r2
 8002b16:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002b1a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002b1e:	fab2 f282 	clz	r2, r2
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	f042 0220 	orr.w	r2, r2, #32
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	f002 021f 	and.w	r2, r2, #31
 8002b2e:	2101      	movs	r1, #1
 8002b30:	fa01 f202 	lsl.w	r2, r1, r2
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0af      	beq.n	8002a9a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	21f8      	movs	r1, #248	@ 0xf8
 8002b50:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002b58:	fa91 f1a1 	rbit	r1, r1
 8002b5c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002b60:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002b64:	fab1 f181 	clz	r1, r1
 8002b68:	b2c9      	uxtb	r1, r1
 8002b6a:	408b      	lsls	r3, r1
 8002b6c:	4920      	ldr	r1, [pc, #128]	@ (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	600b      	str	r3, [r1, #0]
 8002b72:	e06c      	b.n	8002c4e <HAL_RCC_OscConfig+0x646>
 8002b74:	2301      	movs	r3, #1
 8002b76:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002b7e:	fa93 f3a3 	rbit	r3, r3
 8002b82:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002b86:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b8a:	fab3 f383 	clz	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b94:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7ff f8b6 	bl	8001d10 <HAL_GetTick>
 8002ba4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba8:	e00a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002baa:	f7ff f8b1 	bl	8001d10 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d902      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	f000 bd5a 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	095b      	lsrs	r3, r3, #5
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d104      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x5ec>
 8002bea:	4b01      	ldr	r3, [pc, #4]	@ (8002bf0 <HAL_RCC_OscConfig+0x5e8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	e015      	b.n	8002c1c <HAL_RCC_OscConfig+0x614>
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002c06:	2302      	movs	r3, #2
 8002c08:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002c0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002c10:	fa93 f3a3 	rbit	r3, r3
 8002c14:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002c18:	4bc8      	ldr	r3, [pc, #800]	@ (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002c22:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002c26:	fa92 f2a2 	rbit	r2, r2
 8002c2a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002c2e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002c32:	fab2 f282 	clz	r2, r2
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	f042 0220 	orr.w	r2, r2, #32
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	f002 021f 	and.w	r2, r2, #31
 8002c42:	2101      	movs	r1, #1
 8002c44:	fa01 f202 	lsl.w	r2, r1, r2
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1ad      	bne.n	8002baa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 8110 	beq.w	8002e84 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d079      	beq.n	8002d68 <HAL_RCC_OscConfig+0x760>
 8002c74:	2301      	movs	r3, #1
 8002c76:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c7e:	fa93 f3a3 	rbit	r3, r3
 8002c82:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	4bab      	ldr	r3, [pc, #684]	@ (8002f40 <HAL_RCC_OscConfig+0x938>)
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9e:	f7ff f837 	bl	8001d10 <HAL_GetTick>
 8002ca2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca6:	e00a      	b.n	8002cbe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ca8:	f7ff f832 	bl	8001d10 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d902      	bls.n	8002cbe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	f000 bcdb 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002cd8:	2202      	movs	r2, #2
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	fa93 f2a3 	rbit	r2, r3
 8002cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	fa93 f2a3 	rbit	r2, r3
 8002d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d12:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002d16:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d18:	4b88      	ldr	r3, [pc, #544]	@ (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002d1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d20:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d24:	2102      	movs	r1, #2
 8002d26:	6019      	str	r1, [r3, #0]
 8002d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	fa93 f1a3 	rbit	r1, r3
 8002d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002d3e:	6019      	str	r1, [r3, #0]
  return result;
 8002d40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d44:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0a0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x6a0>
 8002d66:	e08d      	b.n	8002e84 <HAL_RCC_OscConfig+0x87c>
 8002d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d6c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002d70:	2201      	movs	r2, #1
 8002d72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d78:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	fa93 f2a3 	rbit	r2, r3
 8002d82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d86:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d8a:	601a      	str	r2, [r3, #0]
  return result;
 8002d8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d90:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d94:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4b68      	ldr	r3, [pc, #416]	@ (8002f40 <HAL_RCC_OscConfig+0x938>)
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	461a      	mov	r2, r3
 8002da6:	2300      	movs	r3, #0
 8002da8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002daa:	f7fe ffb1 	bl	8001d10 <HAL_GetTick>
 8002dae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db2:	e00a      	b.n	8002dca <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db4:	f7fe ffac 	bl	8001d10 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d902      	bls.n	8002dca <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	f000 bc55 	b.w	8003674 <HAL_RCC_OscConfig+0x106c>
 8002dca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dda:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	fa93 f2a3 	rbit	r2, r3
 8002de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002df6:	2202      	movs	r2, #2
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	fa93 f2a3 	rbit	r2, r3
 8002e08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e0c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e16:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e22:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	fa93 f2a3 	rbit	r2, r3
 8002e2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e30:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002e34:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e36:	4b41      	ldr	r3, [pc, #260]	@ (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002e38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002e42:	2102      	movs	r1, #2
 8002e44:	6019      	str	r1, [r3, #0]
 8002e46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e4a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	fa93 f1a3 	rbit	r1, r3
 8002e54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e58:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e5c:	6019      	str	r1, [r3, #0]
  return result;
 8002e5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e62:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	fab3 f383 	clz	r3, r3
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	2101      	movs	r1, #1
 8002e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d197      	bne.n	8002db4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e88:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 81a1 	beq.w	80031dc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea0:	4b26      	ldr	r3, [pc, #152]	@ (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d116      	bne.n	8002eda <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eac:	4b23      	ldr	r3, [pc, #140]	@ (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	4a22      	ldr	r2, [pc, #136]	@ (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002eb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eb6:	61d3      	str	r3, [r2, #28]
 8002eb8:	4b20      	ldr	r3, [pc, #128]	@ (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002ec0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ece:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002ed2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eda:	4b1a      	ldr	r3, [pc, #104]	@ (8002f44 <HAL_RCC_OscConfig+0x93c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d11a      	bne.n	8002f1c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ee6:	4b17      	ldr	r3, [pc, #92]	@ (8002f44 <HAL_RCC_OscConfig+0x93c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a16      	ldr	r2, [pc, #88]	@ (8002f44 <HAL_RCC_OscConfig+0x93c>)
 8002eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ef0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef2:	f7fe ff0d 	bl	8001d10 <HAL_GetTick>
 8002ef6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efa:	e009      	b.n	8002f10 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efc:	f7fe ff08 	bl	8001d10 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b64      	cmp	r3, #100	@ 0x64
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e3b1      	b.n	8003674 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f10:	4b0c      	ldr	r3, [pc, #48]	@ (8002f44 <HAL_RCC_OscConfig+0x93c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0ef      	beq.n	8002efc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d10d      	bne.n	8002f48 <HAL_RCC_OscConfig+0x940>
 8002f2c:	4b03      	ldr	r3, [pc, #12]	@ (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	4a02      	ldr	r2, [pc, #8]	@ (8002f3c <HAL_RCC_OscConfig+0x934>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	6213      	str	r3, [r2, #32]
 8002f38:	e03c      	b.n	8002fb4 <HAL_RCC_OscConfig+0x9ac>
 8002f3a:	bf00      	nop
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	10908120 	.word	0x10908120
 8002f44:	40007000 	.word	0x40007000
 8002f48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10c      	bne.n	8002f72 <HAL_RCC_OscConfig+0x96a>
 8002f58:	4bc1      	ldr	r3, [pc, #772]	@ (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	4ac0      	ldr	r2, [pc, #768]	@ (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f5e:	f023 0301 	bic.w	r3, r3, #1
 8002f62:	6213      	str	r3, [r2, #32]
 8002f64:	4bbe      	ldr	r3, [pc, #760]	@ (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	4abd      	ldr	r2, [pc, #756]	@ (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f6a:	f023 0304 	bic.w	r3, r3, #4
 8002f6e:	6213      	str	r3, [r2, #32]
 8002f70:	e020      	b.n	8002fb4 <HAL_RCC_OscConfig+0x9ac>
 8002f72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2b05      	cmp	r3, #5
 8002f80:	d10c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x994>
 8002f82:	4bb7      	ldr	r3, [pc, #732]	@ (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	4ab6      	ldr	r2, [pc, #728]	@ (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f88:	f043 0304 	orr.w	r3, r3, #4
 8002f8c:	6213      	str	r3, [r2, #32]
 8002f8e:	4bb4      	ldr	r3, [pc, #720]	@ (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	4ab3      	ldr	r2, [pc, #716]	@ (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	6213      	str	r3, [r2, #32]
 8002f9a:	e00b      	b.n	8002fb4 <HAL_RCC_OscConfig+0x9ac>
 8002f9c:	4bb0      	ldr	r3, [pc, #704]	@ (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	4aaf      	ldr	r2, [pc, #700]	@ (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002fa2:	f023 0301 	bic.w	r3, r3, #1
 8002fa6:	6213      	str	r3, [r2, #32]
 8002fa8:	4bad      	ldr	r3, [pc, #692]	@ (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	4aac      	ldr	r2, [pc, #688]	@ (8003260 <HAL_RCC_OscConfig+0xc58>)
 8002fae:	f023 0304 	bic.w	r3, r3, #4
 8002fb2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 8081 	beq.w	80030c8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc6:	f7fe fea3 	bl	8001d10 <HAL_GetTick>
 8002fca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fce:	e00b      	b.n	8002fe8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd0:	f7fe fe9e 	bl	8001d10 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e345      	b.n	8003674 <HAL_RCC_OscConfig+0x106c>
 8002fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fec:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	fa93 f2a3 	rbit	r2, r3
 8003002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003006:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003010:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003014:	2202      	movs	r2, #2
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	fa93 f2a3 	rbit	r2, r3
 8003026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800302a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800302e:	601a      	str	r2, [r3, #0]
  return result;
 8003030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003034:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003038:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303a:	fab3 f383 	clz	r3, r3
 800303e:	b2db      	uxtb	r3, r3
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	b2db      	uxtb	r3, r3
 8003044:	f043 0302 	orr.w	r3, r3, #2
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d102      	bne.n	8003054 <HAL_RCC_OscConfig+0xa4c>
 800304e:	4b84      	ldr	r3, [pc, #528]	@ (8003260 <HAL_RCC_OscConfig+0xc58>)
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	e013      	b.n	800307c <HAL_RCC_OscConfig+0xa74>
 8003054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003058:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800305c:	2202      	movs	r2, #2
 800305e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003060:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003064:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	fa93 f2a3 	rbit	r2, r3
 800306e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003072:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	4b79      	ldr	r3, [pc, #484]	@ (8003260 <HAL_RCC_OscConfig+0xc58>)
 800307a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003080:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003084:	2102      	movs	r1, #2
 8003086:	6011      	str	r1, [r2, #0]
 8003088:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800308c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	fa92 f1a2 	rbit	r1, r2
 8003096:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800309a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800309e:	6011      	str	r1, [r2, #0]
  return result;
 80030a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030a4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	fab2 f282 	clz	r2, r2
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	f002 021f 	and.w	r2, r2, #31
 80030ba:	2101      	movs	r1, #1
 80030bc:	fa01 f202 	lsl.w	r2, r1, r2
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d084      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x9c8>
 80030c6:	e07f      	b.n	80031c8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c8:	f7fe fe22 	bl	8001d10 <HAL_GetTick>
 80030cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d0:	e00b      	b.n	80030ea <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d2:	f7fe fe1d 	bl	8001d10 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e2c4      	b.n	8003674 <HAL_RCC_OscConfig+0x106c>
 80030ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ee:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80030f2:	2202      	movs	r2, #2
 80030f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fa:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	fa93 f2a3 	rbit	r2, r3
 8003104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003108:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003112:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003116:	2202      	movs	r2, #2
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800311e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	fa93 f2a3 	rbit	r2, r3
 8003128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003130:	601a      	str	r2, [r3, #0]
  return result;
 8003132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003136:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800313a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800313c:	fab3 f383 	clz	r3, r3
 8003140:	b2db      	uxtb	r3, r3
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	b2db      	uxtb	r3, r3
 8003146:	f043 0302 	orr.w	r3, r3, #2
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d102      	bne.n	8003156 <HAL_RCC_OscConfig+0xb4e>
 8003150:	4b43      	ldr	r3, [pc, #268]	@ (8003260 <HAL_RCC_OscConfig+0xc58>)
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	e013      	b.n	800317e <HAL_RCC_OscConfig+0xb76>
 8003156:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800315a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800315e:	2202      	movs	r2, #2
 8003160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003166:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	fa93 f2a3 	rbit	r2, r3
 8003170:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003174:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	4b39      	ldr	r3, [pc, #228]	@ (8003260 <HAL_RCC_OscConfig+0xc58>)
 800317c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003182:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003186:	2102      	movs	r1, #2
 8003188:	6011      	str	r1, [r2, #0]
 800318a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800318e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	fa92 f1a2 	rbit	r1, r2
 8003198:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800319c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80031a0:	6011      	str	r1, [r2, #0]
  return result;
 80031a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031a6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	fab2 f282 	clz	r2, r2
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	f002 021f 	and.w	r2, r2, #31
 80031bc:	2101      	movs	r1, #1
 80031be:	fa01 f202 	lsl.w	r2, r1, r2
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d184      	bne.n	80030d2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031c8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d105      	bne.n	80031dc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d0:	4b23      	ldr	r3, [pc, #140]	@ (8003260 <HAL_RCC_OscConfig+0xc58>)
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	4a22      	ldr	r2, [pc, #136]	@ (8003260 <HAL_RCC_OscConfig+0xc58>)
 80031d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031da:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 8242 	beq.w	8003672 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003260 <HAL_RCC_OscConfig+0xc58>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	f000 8213 	beq.w	8003622 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003200:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	2b02      	cmp	r3, #2
 800320a:	f040 8162 	bne.w	80034d2 <HAL_RCC_OscConfig+0xeca>
 800320e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003212:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003216:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800321a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003220:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	fa93 f2a3 	rbit	r2, r3
 800322a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800322e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003232:	601a      	str	r2, [r3, #0]
  return result;
 8003234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003238:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800323c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800323e:	fab3 f383 	clz	r3, r3
 8003242:	b2db      	uxtb	r3, r3
 8003244:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003248:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	461a      	mov	r2, r3
 8003250:	2300      	movs	r3, #0
 8003252:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003254:	f7fe fd5c 	bl	8001d10 <HAL_GetTick>
 8003258:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800325c:	e00c      	b.n	8003278 <HAL_RCC_OscConfig+0xc70>
 800325e:	bf00      	nop
 8003260:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003264:	f7fe fd54 	bl	8001d10 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e1fd      	b.n	8003674 <HAL_RCC_OscConfig+0x106c>
 8003278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003280:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003284:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800328a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	fa93 f2a3 	rbit	r2, r3
 8003294:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003298:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800329c:	601a      	str	r2, [r3, #0]
  return result;
 800329e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80032a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a8:	fab3 f383 	clz	r3, r3
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d102      	bne.n	80032c2 <HAL_RCC_OscConfig+0xcba>
 80032bc:	4bb0      	ldr	r3, [pc, #704]	@ (8003580 <HAL_RCC_OscConfig+0xf78>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	e027      	b.n	8003312 <HAL_RCC_OscConfig+0xd0a>
 80032c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80032ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	fa93 f2a3 	rbit	r2, r3
 80032de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ec:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80032f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032fa:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	fa93 f2a3 	rbit	r2, r3
 8003304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003308:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	4b9c      	ldr	r3, [pc, #624]	@ (8003580 <HAL_RCC_OscConfig+0xf78>)
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003312:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003316:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800331a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800331e:	6011      	str	r1, [r2, #0]
 8003320:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003324:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	fa92 f1a2 	rbit	r1, r2
 800332e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003332:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003336:	6011      	str	r1, [r2, #0]
  return result;
 8003338:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800333c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003340:	6812      	ldr	r2, [r2, #0]
 8003342:	fab2 f282 	clz	r2, r2
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	f042 0220 	orr.w	r2, r2, #32
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	f002 021f 	and.w	r2, r2, #31
 8003352:	2101      	movs	r1, #1
 8003354:	fa01 f202 	lsl.w	r2, r1, r2
 8003358:	4013      	ands	r3, r2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d182      	bne.n	8003264 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800335e:	4b88      	ldr	r3, [pc, #544]	@ (8003580 <HAL_RCC_OscConfig+0xf78>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003366:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800336a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003376:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	430b      	orrs	r3, r1
 8003380:	497f      	ldr	r1, [pc, #508]	@ (8003580 <HAL_RCC_OscConfig+0xf78>)
 8003382:	4313      	orrs	r3, r2
 8003384:	604b      	str	r3, [r1, #4]
 8003386:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800338a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800338e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003392:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003398:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	fa93 f2a3 	rbit	r2, r3
 80033a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80033aa:	601a      	str	r2, [r3, #0]
  return result;
 80033ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80033b4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b6:	fab3 f383 	clz	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80033c0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	461a      	mov	r2, r3
 80033c8:	2301      	movs	r3, #1
 80033ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033cc:	f7fe fca0 	bl	8001d10 <HAL_GetTick>
 80033d0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033d4:	e009      	b.n	80033ea <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d6:	f7fe fc9b 	bl	8001d10 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e144      	b.n	8003674 <HAL_RCC_OscConfig+0x106c>
 80033ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ee:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80033f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033fc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	fa93 f2a3 	rbit	r2, r3
 8003406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800340a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800340e:	601a      	str	r2, [r3, #0]
  return result;
 8003410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003414:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003418:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800341a:	fab3 f383 	clz	r3, r3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	095b      	lsrs	r3, r3, #5
 8003422:	b2db      	uxtb	r3, r3
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b01      	cmp	r3, #1
 800342c:	d102      	bne.n	8003434 <HAL_RCC_OscConfig+0xe2c>
 800342e:	4b54      	ldr	r3, [pc, #336]	@ (8003580 <HAL_RCC_OscConfig+0xf78>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	e027      	b.n	8003484 <HAL_RCC_OscConfig+0xe7c>
 8003434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003438:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800343c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003440:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003446:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	fa93 f2a3 	rbit	r2, r3
 8003450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003454:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800345e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003462:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800346c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	fa93 f2a3 	rbit	r2, r3
 8003476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800347a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	4b3f      	ldr	r3, [pc, #252]	@ (8003580 <HAL_RCC_OscConfig+0xf78>)
 8003482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003484:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003488:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800348c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003490:	6011      	str	r1, [r2, #0]
 8003492:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003496:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800349a:	6812      	ldr	r2, [r2, #0]
 800349c:	fa92 f1a2 	rbit	r1, r2
 80034a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034a4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80034a8:	6011      	str	r1, [r2, #0]
  return result;
 80034aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034ae:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	fab2 f282 	clz	r2, r2
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	f042 0220 	orr.w	r2, r2, #32
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	f002 021f 	and.w	r2, r2, #31
 80034c4:	2101      	movs	r1, #1
 80034c6:	fa01 f202 	lsl.w	r2, r1, r2
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d082      	beq.n	80033d6 <HAL_RCC_OscConfig+0xdce>
 80034d0:	e0cf      	b.n	8003672 <HAL_RCC_OscConfig+0x106a>
 80034d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80034da:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	fa93 f2a3 	rbit	r2, r3
 80034ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80034f6:	601a      	str	r2, [r3, #0]
  return result;
 80034f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034fc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003500:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003502:	fab3 f383 	clz	r3, r3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800350c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	461a      	mov	r2, r3
 8003514:	2300      	movs	r3, #0
 8003516:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7fe fbfa 	bl	8001d10 <HAL_GetTick>
 800351c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003520:	e009      	b.n	8003536 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003522:	f7fe fbf5 	bl	8001d10 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e09e      	b.n	8003674 <HAL_RCC_OscConfig+0x106c>
 8003536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800353a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800353e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003544:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003548:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	fa93 f2a3 	rbit	r2, r3
 8003552:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003556:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800355a:	601a      	str	r2, [r3, #0]
  return result;
 800355c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003560:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003564:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	095b      	lsrs	r3, r3, #5
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b01      	cmp	r3, #1
 8003578:	d104      	bne.n	8003584 <HAL_RCC_OscConfig+0xf7c>
 800357a:	4b01      	ldr	r3, [pc, #4]	@ (8003580 <HAL_RCC_OscConfig+0xf78>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	e029      	b.n	80035d4 <HAL_RCC_OscConfig+0xfcc>
 8003580:	40021000 	.word	0x40021000
 8003584:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003588:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800358c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003596:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	fa93 f2a3 	rbit	r2, r3
 80035a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ae:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80035b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035bc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	fa93 f2a3 	rbit	r2, r3
 80035c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ca:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003680 <HAL_RCC_OscConfig+0x1078>)
 80035d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035d8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80035dc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80035e0:	6011      	str	r1, [r2, #0]
 80035e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035e6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80035ea:	6812      	ldr	r2, [r2, #0]
 80035ec:	fa92 f1a2 	rbit	r1, r2
 80035f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035f4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80035f8:	6011      	str	r1, [r2, #0]
  return result;
 80035fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035fe:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	fab2 f282 	clz	r2, r2
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	f042 0220 	orr.w	r2, r2, #32
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	f002 021f 	and.w	r2, r2, #31
 8003614:	2101      	movs	r1, #1
 8003616:	fa01 f202 	lsl.w	r2, r1, r2
 800361a:	4013      	ands	r3, r2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d180      	bne.n	8003522 <HAL_RCC_OscConfig+0xf1a>
 8003620:	e027      	b.n	8003672 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003626:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e01e      	b.n	8003674 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003636:	4b12      	ldr	r3, [pc, #72]	@ (8003680 <HAL_RCC_OscConfig+0x1078>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800363e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003642:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800364a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	429a      	cmp	r2, r3
 8003654:	d10b      	bne.n	800366e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003656:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800365a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800365e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003662:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800366a:	429a      	cmp	r2, r3
 800366c:	d001      	beq.n	8003672 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40021000 	.word	0x40021000

08003684 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b09e      	sub	sp, #120	@ 0x78
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e162      	b.n	8003962 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800369c:	4b90      	ldr	r3, [pc, #576]	@ (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d910      	bls.n	80036cc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036aa:	4b8d      	ldr	r3, [pc, #564]	@ (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 0207 	bic.w	r2, r3, #7
 80036b2:	498b      	ldr	r1, [pc, #556]	@ (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ba:	4b89      	ldr	r3, [pc, #548]	@ (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e14a      	b.n	8003962 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d8:	4b82      	ldr	r3, [pc, #520]	@ (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	497f      	ldr	r1, [pc, #508]	@ (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 80dc 	beq.w	80038b0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d13c      	bne.n	800377a <HAL_RCC_ClockConfig+0xf6>
 8003700:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003704:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003706:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003708:	fa93 f3a3 	rbit	r3, r3
 800370c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800370e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003710:	fab3 f383 	clz	r3, r3
 8003714:	b2db      	uxtb	r3, r3
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f043 0301 	orr.w	r3, r3, #1
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d102      	bne.n	800372a <HAL_RCC_ClockConfig+0xa6>
 8003724:	4b6f      	ldr	r3, [pc, #444]	@ (80038e4 <HAL_RCC_ClockConfig+0x260>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	e00f      	b.n	800374a <HAL_RCC_ClockConfig+0xc6>
 800372a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800372e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003730:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003732:	fa93 f3a3 	rbit	r3, r3
 8003736:	667b      	str	r3, [r7, #100]	@ 0x64
 8003738:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800373c:	663b      	str	r3, [r7, #96]	@ 0x60
 800373e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003740:	fa93 f3a3 	rbit	r3, r3
 8003744:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003746:	4b67      	ldr	r3, [pc, #412]	@ (80038e4 <HAL_RCC_ClockConfig+0x260>)
 8003748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800374e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003750:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003752:	fa92 f2a2 	rbit	r2, r2
 8003756:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003758:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800375a:	fab2 f282 	clz	r2, r2
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	f042 0220 	orr.w	r2, r2, #32
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	f002 021f 	and.w	r2, r2, #31
 800376a:	2101      	movs	r1, #1
 800376c:	fa01 f202 	lsl.w	r2, r1, r2
 8003770:	4013      	ands	r3, r2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d17b      	bne.n	800386e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e0f3      	b.n	8003962 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d13c      	bne.n	80037fc <HAL_RCC_ClockConfig+0x178>
 8003782:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003786:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003788:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800378a:	fa93 f3a3 	rbit	r3, r3
 800378e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003790:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003792:	fab3 f383 	clz	r3, r3
 8003796:	b2db      	uxtb	r3, r3
 8003798:	095b      	lsrs	r3, r3, #5
 800379a:	b2db      	uxtb	r3, r3
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d102      	bne.n	80037ac <HAL_RCC_ClockConfig+0x128>
 80037a6:	4b4f      	ldr	r3, [pc, #316]	@ (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	e00f      	b.n	80037cc <HAL_RCC_ClockConfig+0x148>
 80037ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037b4:	fa93 f3a3 	rbit	r3, r3
 80037b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80037ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037be:	643b      	str	r3, [r7, #64]	@ 0x40
 80037c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037c2:	fa93 f3a3 	rbit	r3, r3
 80037c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037c8:	4b46      	ldr	r3, [pc, #280]	@ (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037d0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80037d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80037d4:	fa92 f2a2 	rbit	r2, r2
 80037d8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80037da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037dc:	fab2 f282 	clz	r2, r2
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	f042 0220 	orr.w	r2, r2, #32
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	f002 021f 	and.w	r2, r2, #31
 80037ec:	2101      	movs	r1, #1
 80037ee:	fa01 f202 	lsl.w	r2, r1, r2
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d13a      	bne.n	800386e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0b2      	b.n	8003962 <HAL_RCC_ClockConfig+0x2de>
 80037fc:	2302      	movs	r3, #2
 80037fe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003802:	fa93 f3a3 	rbit	r3, r3
 8003806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380a:	fab3 f383 	clz	r3, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	095b      	lsrs	r3, r3, #5
 8003812:	b2db      	uxtb	r3, r3
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b01      	cmp	r3, #1
 800381c:	d102      	bne.n	8003824 <HAL_RCC_ClockConfig+0x1a0>
 800381e:	4b31      	ldr	r3, [pc, #196]	@ (80038e4 <HAL_RCC_ClockConfig+0x260>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	e00d      	b.n	8003840 <HAL_RCC_ClockConfig+0x1bc>
 8003824:	2302      	movs	r3, #2
 8003826:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800382a:	fa93 f3a3 	rbit	r3, r3
 800382e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003830:	2302      	movs	r3, #2
 8003832:	623b      	str	r3, [r7, #32]
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	fa93 f3a3 	rbit	r3, r3
 800383a:	61fb      	str	r3, [r7, #28]
 800383c:	4b29      	ldr	r3, [pc, #164]	@ (80038e4 <HAL_RCC_ClockConfig+0x260>)
 800383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003840:	2202      	movs	r2, #2
 8003842:	61ba      	str	r2, [r7, #24]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	fa92 f2a2 	rbit	r2, r2
 800384a:	617a      	str	r2, [r7, #20]
  return result;
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	fab2 f282 	clz	r2, r2
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	f042 0220 	orr.w	r2, r2, #32
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	f002 021f 	and.w	r2, r2, #31
 800385e:	2101      	movs	r1, #1
 8003860:	fa01 f202 	lsl.w	r2, r1, r2
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e079      	b.n	8003962 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800386e:	4b1d      	ldr	r3, [pc, #116]	@ (80038e4 <HAL_RCC_ClockConfig+0x260>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f023 0203 	bic.w	r2, r3, #3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	491a      	ldr	r1, [pc, #104]	@ (80038e4 <HAL_RCC_ClockConfig+0x260>)
 800387c:	4313      	orrs	r3, r2
 800387e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003880:	f7fe fa46 	bl	8001d10 <HAL_GetTick>
 8003884:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003886:	e00a      	b.n	800389e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003888:	f7fe fa42 	bl	8001d10 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003896:	4293      	cmp	r3, r2
 8003898:	d901      	bls.n	800389e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e061      	b.n	8003962 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389e:	4b11      	ldr	r3, [pc, #68]	@ (80038e4 <HAL_RCC_ClockConfig+0x260>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 020c 	and.w	r2, r3, #12
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d1eb      	bne.n	8003888 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038b0:	4b0b      	ldr	r3, [pc, #44]	@ (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d214      	bcs.n	80038e8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038be:	4b08      	ldr	r3, [pc, #32]	@ (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f023 0207 	bic.w	r2, r3, #7
 80038c6:	4906      	ldr	r1, [pc, #24]	@ (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ce:	4b04      	ldr	r3, [pc, #16]	@ (80038e0 <HAL_RCC_ClockConfig+0x25c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e040      	b.n	8003962 <HAL_RCC_ClockConfig+0x2de>
 80038e0:	40022000 	.word	0x40022000
 80038e4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038f4:	4b1d      	ldr	r3, [pc, #116]	@ (800396c <HAL_RCC_ClockConfig+0x2e8>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	491a      	ldr	r1, [pc, #104]	@ (800396c <HAL_RCC_ClockConfig+0x2e8>)
 8003902:	4313      	orrs	r3, r2
 8003904:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d009      	beq.n	8003926 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003912:	4b16      	ldr	r3, [pc, #88]	@ (800396c <HAL_RCC_ClockConfig+0x2e8>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4912      	ldr	r1, [pc, #72]	@ (800396c <HAL_RCC_ClockConfig+0x2e8>)
 8003922:	4313      	orrs	r3, r2
 8003924:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003926:	f000 f829 	bl	800397c <HAL_RCC_GetSysClockFreq>
 800392a:	4601      	mov	r1, r0
 800392c:	4b0f      	ldr	r3, [pc, #60]	@ (800396c <HAL_RCC_ClockConfig+0x2e8>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003934:	22f0      	movs	r2, #240	@ 0xf0
 8003936:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	fa92 f2a2 	rbit	r2, r2
 800393e:	60fa      	str	r2, [r7, #12]
  return result;
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	fab2 f282 	clz	r2, r2
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	40d3      	lsrs	r3, r2
 800394a:	4a09      	ldr	r2, [pc, #36]	@ (8003970 <HAL_RCC_ClockConfig+0x2ec>)
 800394c:	5cd3      	ldrb	r3, [r2, r3]
 800394e:	fa21 f303 	lsr.w	r3, r1, r3
 8003952:	4a08      	ldr	r2, [pc, #32]	@ (8003974 <HAL_RCC_ClockConfig+0x2f0>)
 8003954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003956:	4b08      	ldr	r3, [pc, #32]	@ (8003978 <HAL_RCC_ClockConfig+0x2f4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7fe f994 	bl	8001c88 <HAL_InitTick>
  
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3778      	adds	r7, #120	@ 0x78
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000
 8003970:	08009358 	.word	0x08009358
 8003974:	20000140 	.word	0x20000140
 8003978:	20000194 	.word	0x20000194

0800397c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800397c:	b480      	push	{r7}
 800397e:	b08b      	sub	sp, #44	@ 0x2c
 8003980:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	61fb      	str	r3, [r7, #28]
 8003986:	2300      	movs	r3, #0
 8003988:	61bb      	str	r3, [r7, #24]
 800398a:	2300      	movs	r3, #0
 800398c:	627b      	str	r3, [r7, #36]	@ 0x24
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003996:	4b29      	ldr	r3, [pc, #164]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f003 030c 	and.w	r3, r3, #12
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d002      	beq.n	80039ac <HAL_RCC_GetSysClockFreq+0x30>
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	d003      	beq.n	80039b2 <HAL_RCC_GetSysClockFreq+0x36>
 80039aa:	e03c      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039ac:	4b24      	ldr	r3, [pc, #144]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0xc4>)
 80039ae:	623b      	str	r3, [r7, #32]
      break;
 80039b0:	e03c      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80039b8:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80039bc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	fa92 f2a2 	rbit	r2, r2
 80039c4:	607a      	str	r2, [r7, #4]
  return result;
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	fab2 f282 	clz	r2, r2
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	40d3      	lsrs	r3, r2
 80039d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0xc8>)
 80039d2:	5cd3      	ldrb	r3, [r2, r3]
 80039d4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80039d6:	4b19      	ldr	r3, [pc, #100]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0xc0>)
 80039d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	220f      	movs	r2, #15
 80039e0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	fa92 f2a2 	rbit	r2, r2
 80039e8:	60fa      	str	r2, [r7, #12]
  return result;
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	fab2 f282 	clz	r2, r2
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	40d3      	lsrs	r3, r2
 80039f4:	4a14      	ldr	r2, [pc, #80]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0xcc>)
 80039f6:	5cd3      	ldrb	r3, [r2, r3]
 80039f8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d008      	beq.n	8003a16 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a04:	4a0e      	ldr	r2, [pc, #56]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	fb02 f303 	mul.w	r3, r2, r3
 8003a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a14:	e004      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	4a0c      	ldr	r2, [pc, #48]	@ (8003a4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a1a:	fb02 f303 	mul.w	r3, r2, r3
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a22:	623b      	str	r3, [r7, #32]
      break;
 8003a24:	e002      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a26:	4b06      	ldr	r3, [pc, #24]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a28:	623b      	str	r3, [r7, #32]
      break;
 8003a2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	372c      	adds	r7, #44	@ 0x2c
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	007a1200 	.word	0x007a1200
 8003a44:	08009368 	.word	0x08009368
 8003a48:	08009378 	.word	0x08009378
 8003a4c:	003d0900 	.word	0x003d0900

08003a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b092      	sub	sp, #72	@ 0x48
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003a60:	2300      	movs	r3, #0
 8003a62:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 80d4 	beq.w	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a74:	4b4e      	ldr	r3, [pc, #312]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10e      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a80:	4b4b      	ldr	r3, [pc, #300]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	4a4a      	ldr	r2, [pc, #296]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a8a:	61d3      	str	r3, [r2, #28]
 8003a8c:	4b48      	ldr	r3, [pc, #288]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9e:	4b45      	ldr	r3, [pc, #276]	@ (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d118      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aaa:	4b42      	ldr	r3, [pc, #264]	@ (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a41      	ldr	r2, [pc, #260]	@ (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ab4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab6:	f7fe f92b 	bl	8001d10 <HAL_GetTick>
 8003aba:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003abc:	e008      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003abe:	f7fe f927 	bl	8001d10 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b64      	cmp	r3, #100	@ 0x64
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e169      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad0:	4b38      	ldr	r3, [pc, #224]	@ (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f0      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003adc:	4b34      	ldr	r3, [pc, #208]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8084 	beq.w	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003af6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d07c      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003afc:	4b2c      	ldr	r3, [pc, #176]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b0a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0e:	fa93 f3a3 	rbit	r3, r3
 8003b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b16:	fab3 f383 	clz	r3, r3
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4b26      	ldr	r3, [pc, #152]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	461a      	mov	r2, r3
 8003b26:	2301      	movs	r3, #1
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b3a:	fab3 f383 	clz	r3, r3
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	4b1d      	ldr	r3, [pc, #116]	@ (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b4e:	4a18      	ldr	r2, [pc, #96]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b52:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d04b      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5e:	f7fe f8d7 	bl	8001d10 <HAL_GetTick>
 8003b62:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b64:	e00a      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b66:	f7fe f8d3 	bl	8001d10 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e113      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b82:	fa93 f3a3 	rbit	r3, r3
 8003b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b88:	2302      	movs	r3, #2
 8003b8a:	623b      	str	r3, [r7, #32]
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	fa93 f3a3 	rbit	r3, r3
 8003b92:	61fb      	str	r3, [r7, #28]
  return result;
 8003b94:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	f043 0302 	orr.w	r3, r3, #2
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d108      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003baa:	4b01      	ldr	r3, [pc, #4]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	e00d      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	40007000 	.word	0x40007000
 8003bb8:	10908100 	.word	0x10908100
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	fa93 f3a3 	rbit	r3, r3
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	4b78      	ldr	r3, [pc, #480]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bcc:	2202      	movs	r2, #2
 8003bce:	613a      	str	r2, [r7, #16]
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	fa92 f2a2 	rbit	r2, r2
 8003bd6:	60fa      	str	r2, [r7, #12]
  return result;
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	fab2 f282 	clz	r2, r2
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	f002 021f 	and.w	r2, r2, #31
 8003bea:	2101      	movs	r1, #1
 8003bec:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0b7      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003bf6:	4b6d      	ldr	r3, [pc, #436]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	496a      	ldr	r1, [pc, #424]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c08:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d105      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c10:	4b66      	ldr	r3, [pc, #408]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	4a65      	ldr	r2, [pc, #404]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c28:	4b60      	ldr	r3, [pc, #384]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2c:	f023 0203 	bic.w	r2, r3, #3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	495d      	ldr	r1, [pc, #372]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d008      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c46:	4b59      	ldr	r3, [pc, #356]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	4956      	ldr	r1, [pc, #344]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d008      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c64:	4b51      	ldr	r3, [pc, #324]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c68:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	494e      	ldr	r1, [pc, #312]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d008      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c82:	4b4a      	ldr	r3, [pc, #296]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c86:	f023 0210 	bic.w	r2, r3, #16
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	4947      	ldr	r1, [pc, #284]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003ca0:	4b42      	ldr	r3, [pc, #264]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cac:	493f      	ldr	r1, [pc, #252]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc2:	f023 0220 	bic.w	r2, r3, #32
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	4938      	ldr	r1, [pc, #224]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cdc:	4b33      	ldr	r3, [pc, #204]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	4930      	ldr	r1, [pc, #192]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0310 	and.w	r3, r3, #16
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d008      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	4929      	ldr	r1, [pc, #164]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d18:	4b24      	ldr	r3, [pc, #144]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d24:	4921      	ldr	r1, [pc, #132]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d008      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d36:	4b1d      	ldr	r3, [pc, #116]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d42:	491a      	ldr	r1, [pc, #104]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003d54:	4b15      	ldr	r3, [pc, #84]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d58:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d60:	4912      	ldr	r1, [pc, #72]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d008      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d72:	4b0e      	ldr	r3, [pc, #56]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d76:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7e:	490b      	ldr	r1, [pc, #44]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003d90:	4b06      	ldr	r3, [pc, #24]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d94:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d9c:	4903      	ldr	r1, [pc, #12]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3748      	adds	r7, #72	@ 0x48
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40021000 	.word	0x40021000

08003db0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e09d      	b.n	8003efe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d108      	bne.n	8003ddc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dd2:	d009      	beq.n	8003de8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	61da      	str	r2, [r3, #28]
 8003dda:	e005      	b.n	8003de8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7fd fc54 	bl	80016b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e28:	d902      	bls.n	8003e30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	e002      	b.n	8003e36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003e3e:	d007      	beq.n	8003e50 <HAL_SPI_Init+0xa0>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e48:	d002      	beq.n	8003e50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e92:	ea42 0103 	orr.w	r1, r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e9a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	0c1b      	lsrs	r3, r3, #16
 8003eac:	f003 0204 	and.w	r2, r3, #4
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	f003 0310 	and.w	r3, r3, #16
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003ecc:	ea42 0103 	orr.w	r1, r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69da      	ldr	r2, [r3, #28]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003eec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b082      	sub	sp, #8
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e049      	b.n	8003fac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d106      	bne.n	8003f32 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7fd fc01 	bl	8001734 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2202      	movs	r2, #2
 8003f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3304      	adds	r3, #4
 8003f42:	4619      	mov	r1, r3
 8003f44:	4610      	mov	r0, r2
 8003f46:	f000 fa49 	bl	80043dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d109      	bne.n	8003fd8 <HAL_TIM_PWM_Start+0x24>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	bf14      	ite	ne
 8003fd0:	2301      	movne	r3, #1
 8003fd2:	2300      	moveq	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	e03c      	b.n	8004052 <HAL_TIM_PWM_Start+0x9e>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d109      	bne.n	8003ff2 <HAL_TIM_PWM_Start+0x3e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	bf14      	ite	ne
 8003fea:	2301      	movne	r3, #1
 8003fec:	2300      	moveq	r3, #0
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	e02f      	b.n	8004052 <HAL_TIM_PWM_Start+0x9e>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d109      	bne.n	800400c <HAL_TIM_PWM_Start+0x58>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	bf14      	ite	ne
 8004004:	2301      	movne	r3, #1
 8004006:	2300      	moveq	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	e022      	b.n	8004052 <HAL_TIM_PWM_Start+0x9e>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2b0c      	cmp	r3, #12
 8004010:	d109      	bne.n	8004026 <HAL_TIM_PWM_Start+0x72>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b01      	cmp	r3, #1
 800401c:	bf14      	ite	ne
 800401e:	2301      	movne	r3, #1
 8004020:	2300      	moveq	r3, #0
 8004022:	b2db      	uxtb	r3, r3
 8004024:	e015      	b.n	8004052 <HAL_TIM_PWM_Start+0x9e>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b10      	cmp	r3, #16
 800402a:	d109      	bne.n	8004040 <HAL_TIM_PWM_Start+0x8c>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b01      	cmp	r3, #1
 8004036:	bf14      	ite	ne
 8004038:	2301      	movne	r3, #1
 800403a:	2300      	moveq	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	e008      	b.n	8004052 <HAL_TIM_PWM_Start+0x9e>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b01      	cmp	r3, #1
 800404a:	bf14      	ite	ne
 800404c:	2301      	movne	r3, #1
 800404e:	2300      	moveq	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e097      	b.n	800418a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d104      	bne.n	800406a <HAL_TIM_PWM_Start+0xb6>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004068:	e023      	b.n	80040b2 <HAL_TIM_PWM_Start+0xfe>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b04      	cmp	r3, #4
 800406e:	d104      	bne.n	800407a <HAL_TIM_PWM_Start+0xc6>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004078:	e01b      	b.n	80040b2 <HAL_TIM_PWM_Start+0xfe>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b08      	cmp	r3, #8
 800407e:	d104      	bne.n	800408a <HAL_TIM_PWM_Start+0xd6>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004088:	e013      	b.n	80040b2 <HAL_TIM_PWM_Start+0xfe>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b0c      	cmp	r3, #12
 800408e:	d104      	bne.n	800409a <HAL_TIM_PWM_Start+0xe6>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004098:	e00b      	b.n	80040b2 <HAL_TIM_PWM_Start+0xfe>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b10      	cmp	r3, #16
 800409e:	d104      	bne.n	80040aa <HAL_TIM_PWM_Start+0xf6>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040a8:	e003      	b.n	80040b2 <HAL_TIM_PWM_Start+0xfe>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2202      	movs	r2, #2
 80040ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2201      	movs	r2, #1
 80040b8:	6839      	ldr	r1, [r7, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fcf4 	bl	8004aa8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a33      	ldr	r2, [pc, #204]	@ (8004194 <HAL_TIM_PWM_Start+0x1e0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d013      	beq.n	80040f2 <HAL_TIM_PWM_Start+0x13e>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a32      	ldr	r2, [pc, #200]	@ (8004198 <HAL_TIM_PWM_Start+0x1e4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00e      	beq.n	80040f2 <HAL_TIM_PWM_Start+0x13e>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a30      	ldr	r2, [pc, #192]	@ (800419c <HAL_TIM_PWM_Start+0x1e8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d009      	beq.n	80040f2 <HAL_TIM_PWM_Start+0x13e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a2f      	ldr	r2, [pc, #188]	@ (80041a0 <HAL_TIM_PWM_Start+0x1ec>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d004      	beq.n	80040f2 <HAL_TIM_PWM_Start+0x13e>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a2d      	ldr	r2, [pc, #180]	@ (80041a4 <HAL_TIM_PWM_Start+0x1f0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d101      	bne.n	80040f6 <HAL_TIM_PWM_Start+0x142>
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <HAL_TIM_PWM_Start+0x144>
 80040f6:	2300      	movs	r3, #0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d007      	beq.n	800410c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800410a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a20      	ldr	r2, [pc, #128]	@ (8004194 <HAL_TIM_PWM_Start+0x1e0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d018      	beq.n	8004148 <HAL_TIM_PWM_Start+0x194>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800411e:	d013      	beq.n	8004148 <HAL_TIM_PWM_Start+0x194>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a20      	ldr	r2, [pc, #128]	@ (80041a8 <HAL_TIM_PWM_Start+0x1f4>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d00e      	beq.n	8004148 <HAL_TIM_PWM_Start+0x194>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1f      	ldr	r2, [pc, #124]	@ (80041ac <HAL_TIM_PWM_Start+0x1f8>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d009      	beq.n	8004148 <HAL_TIM_PWM_Start+0x194>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a17      	ldr	r2, [pc, #92]	@ (8004198 <HAL_TIM_PWM_Start+0x1e4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d004      	beq.n	8004148 <HAL_TIM_PWM_Start+0x194>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a16      	ldr	r2, [pc, #88]	@ (800419c <HAL_TIM_PWM_Start+0x1e8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d115      	bne.n	8004174 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	4b18      	ldr	r3, [pc, #96]	@ (80041b0 <HAL_TIM_PWM_Start+0x1fc>)
 8004150:	4013      	ands	r3, r2
 8004152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b06      	cmp	r3, #6
 8004158:	d015      	beq.n	8004186 <HAL_TIM_PWM_Start+0x1d2>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004160:	d011      	beq.n	8004186 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 0201 	orr.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004172:	e008      	b.n	8004186 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0201 	orr.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	e000      	b.n	8004188 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004186:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40012c00 	.word	0x40012c00
 8004198:	40013400 	.word	0x40013400
 800419c:	40014000 	.word	0x40014000
 80041a0:	40014400 	.word	0x40014400
 80041a4:	40014800 	.word	0x40014800
 80041a8:	40000400 	.word	0x40000400
 80041ac:	40000800 	.word	0x40000800
 80041b0:	00010007 	.word	0x00010007

080041b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041c0:	2300      	movs	r3, #0
 80041c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e0ff      	b.n	80043d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b14      	cmp	r3, #20
 80041de:	f200 80f0 	bhi.w	80043c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80041e2:	a201      	add	r2, pc, #4	@ (adr r2, 80041e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e8:	0800423d 	.word	0x0800423d
 80041ec:	080043c3 	.word	0x080043c3
 80041f0:	080043c3 	.word	0x080043c3
 80041f4:	080043c3 	.word	0x080043c3
 80041f8:	0800427d 	.word	0x0800427d
 80041fc:	080043c3 	.word	0x080043c3
 8004200:	080043c3 	.word	0x080043c3
 8004204:	080043c3 	.word	0x080043c3
 8004208:	080042bf 	.word	0x080042bf
 800420c:	080043c3 	.word	0x080043c3
 8004210:	080043c3 	.word	0x080043c3
 8004214:	080043c3 	.word	0x080043c3
 8004218:	080042ff 	.word	0x080042ff
 800421c:	080043c3 	.word	0x080043c3
 8004220:	080043c3 	.word	0x080043c3
 8004224:	080043c3 	.word	0x080043c3
 8004228:	08004341 	.word	0x08004341
 800422c:	080043c3 	.word	0x080043c3
 8004230:	080043c3 	.word	0x080043c3
 8004234:	080043c3 	.word	0x080043c3
 8004238:	08004381 	.word	0x08004381
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68b9      	ldr	r1, [r7, #8]
 8004242:	4618      	mov	r0, r3
 8004244:	f000 f95a 	bl	80044fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0208 	orr.w	r2, r2, #8
 8004256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699a      	ldr	r2, [r3, #24]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0204 	bic.w	r2, r2, #4
 8004266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6999      	ldr	r1, [r3, #24]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	619a      	str	r2, [r3, #24]
      break;
 800427a:	e0a5      	b.n	80043c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	4618      	mov	r0, r3
 8004284:	f000 f9ca 	bl	800461c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699a      	ldr	r2, [r3, #24]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699a      	ldr	r2, [r3, #24]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6999      	ldr	r1, [r3, #24]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	021a      	lsls	r2, r3, #8
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	619a      	str	r2, [r3, #24]
      break;
 80042bc:	e084      	b.n	80043c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68b9      	ldr	r1, [r7, #8]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 fa33 	bl	8004730 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	69da      	ldr	r2, [r3, #28]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f042 0208 	orr.w	r2, r2, #8
 80042d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69da      	ldr	r2, [r3, #28]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0204 	bic.w	r2, r2, #4
 80042e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69d9      	ldr	r1, [r3, #28]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	61da      	str	r2, [r3, #28]
      break;
 80042fc:	e064      	b.n	80043c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68b9      	ldr	r1, [r7, #8]
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fa9b 	bl	8004840 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69da      	ldr	r2, [r3, #28]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004318:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69da      	ldr	r2, [r3, #28]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69d9      	ldr	r1, [r3, #28]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	021a      	lsls	r2, r3, #8
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	61da      	str	r2, [r3, #28]
      break;
 800433e:	e043      	b.n	80043c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68b9      	ldr	r1, [r7, #8]
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fae4 	bl	8004914 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0208 	orr.w	r2, r2, #8
 800435a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0204 	bic.w	r2, r2, #4
 800436a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	691a      	ldr	r2, [r3, #16]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800437e:	e023      	b.n	80043c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	4618      	mov	r0, r3
 8004388:	f000 fb28 	bl	80049dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800439a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043aa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	021a      	lsls	r2, r3, #8
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80043c0:	e002      	b.n	80043c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	75fb      	strb	r3, [r7, #23]
      break;
 80043c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop

080043dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a3c      	ldr	r2, [pc, #240]	@ (80044e0 <TIM_Base_SetConfig+0x104>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d00f      	beq.n	8004414 <TIM_Base_SetConfig+0x38>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043fa:	d00b      	beq.n	8004414 <TIM_Base_SetConfig+0x38>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a39      	ldr	r2, [pc, #228]	@ (80044e4 <TIM_Base_SetConfig+0x108>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d007      	beq.n	8004414 <TIM_Base_SetConfig+0x38>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a38      	ldr	r2, [pc, #224]	@ (80044e8 <TIM_Base_SetConfig+0x10c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d003      	beq.n	8004414 <TIM_Base_SetConfig+0x38>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a37      	ldr	r2, [pc, #220]	@ (80044ec <TIM_Base_SetConfig+0x110>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d108      	bne.n	8004426 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800441a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a2d      	ldr	r2, [pc, #180]	@ (80044e0 <TIM_Base_SetConfig+0x104>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d01b      	beq.n	8004466 <TIM_Base_SetConfig+0x8a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004434:	d017      	beq.n	8004466 <TIM_Base_SetConfig+0x8a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a2a      	ldr	r2, [pc, #168]	@ (80044e4 <TIM_Base_SetConfig+0x108>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d013      	beq.n	8004466 <TIM_Base_SetConfig+0x8a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a29      	ldr	r2, [pc, #164]	@ (80044e8 <TIM_Base_SetConfig+0x10c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d00f      	beq.n	8004466 <TIM_Base_SetConfig+0x8a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a28      	ldr	r2, [pc, #160]	@ (80044ec <TIM_Base_SetConfig+0x110>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00b      	beq.n	8004466 <TIM_Base_SetConfig+0x8a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a27      	ldr	r2, [pc, #156]	@ (80044f0 <TIM_Base_SetConfig+0x114>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d007      	beq.n	8004466 <TIM_Base_SetConfig+0x8a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a26      	ldr	r2, [pc, #152]	@ (80044f4 <TIM_Base_SetConfig+0x118>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d003      	beq.n	8004466 <TIM_Base_SetConfig+0x8a>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a25      	ldr	r2, [pc, #148]	@ (80044f8 <TIM_Base_SetConfig+0x11c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d108      	bne.n	8004478 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800446c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4313      	orrs	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a10      	ldr	r2, [pc, #64]	@ (80044e0 <TIM_Base_SetConfig+0x104>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00f      	beq.n	80044c4 <TIM_Base_SetConfig+0xe8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a11      	ldr	r2, [pc, #68]	@ (80044ec <TIM_Base_SetConfig+0x110>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00b      	beq.n	80044c4 <TIM_Base_SetConfig+0xe8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a10      	ldr	r2, [pc, #64]	@ (80044f0 <TIM_Base_SetConfig+0x114>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d007      	beq.n	80044c4 <TIM_Base_SetConfig+0xe8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a0f      	ldr	r2, [pc, #60]	@ (80044f4 <TIM_Base_SetConfig+0x118>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d003      	beq.n	80044c4 <TIM_Base_SetConfig+0xe8>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a0e      	ldr	r2, [pc, #56]	@ (80044f8 <TIM_Base_SetConfig+0x11c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d103      	bne.n	80044cc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	691a      	ldr	r2, [r3, #16]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	615a      	str	r2, [r3, #20]
}
 80044d2:	bf00      	nop
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40012c00 	.word	0x40012c00
 80044e4:	40000400 	.word	0x40000400
 80044e8:	40000800 	.word	0x40000800
 80044ec:	40013400 	.word	0x40013400
 80044f0:	40014000 	.word	0x40014000
 80044f4:	40014400 	.word	0x40014400
 80044f8:	40014800 	.word	0x40014800

080044fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	f023 0201 	bic.w	r2, r3, #1
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800452a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800452e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0303 	bic.w	r3, r3, #3
 8004536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	4313      	orrs	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f023 0302 	bic.w	r3, r3, #2
 8004548:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a2c      	ldr	r2, [pc, #176]	@ (8004608 <TIM_OC1_SetConfig+0x10c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00f      	beq.n	800457c <TIM_OC1_SetConfig+0x80>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a2b      	ldr	r2, [pc, #172]	@ (800460c <TIM_OC1_SetConfig+0x110>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d00b      	beq.n	800457c <TIM_OC1_SetConfig+0x80>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a2a      	ldr	r2, [pc, #168]	@ (8004610 <TIM_OC1_SetConfig+0x114>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d007      	beq.n	800457c <TIM_OC1_SetConfig+0x80>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a29      	ldr	r2, [pc, #164]	@ (8004614 <TIM_OC1_SetConfig+0x118>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d003      	beq.n	800457c <TIM_OC1_SetConfig+0x80>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a28      	ldr	r2, [pc, #160]	@ (8004618 <TIM_OC1_SetConfig+0x11c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d10c      	bne.n	8004596 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f023 0308 	bic.w	r3, r3, #8
 8004582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f023 0304 	bic.w	r3, r3, #4
 8004594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a1b      	ldr	r2, [pc, #108]	@ (8004608 <TIM_OC1_SetConfig+0x10c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00f      	beq.n	80045be <TIM_OC1_SetConfig+0xc2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a1a      	ldr	r2, [pc, #104]	@ (800460c <TIM_OC1_SetConfig+0x110>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00b      	beq.n	80045be <TIM_OC1_SetConfig+0xc2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a19      	ldr	r2, [pc, #100]	@ (8004610 <TIM_OC1_SetConfig+0x114>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d007      	beq.n	80045be <TIM_OC1_SetConfig+0xc2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a18      	ldr	r2, [pc, #96]	@ (8004614 <TIM_OC1_SetConfig+0x118>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d003      	beq.n	80045be <TIM_OC1_SetConfig+0xc2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a17      	ldr	r2, [pc, #92]	@ (8004618 <TIM_OC1_SetConfig+0x11c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d111      	bne.n	80045e2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	621a      	str	r2, [r3, #32]
}
 80045fc:	bf00      	nop
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	40012c00 	.word	0x40012c00
 800460c:	40013400 	.word	0x40013400
 8004610:	40014000 	.word	0x40014000
 8004614:	40014400 	.word	0x40014400
 8004618:	40014800 	.word	0x40014800

0800461c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	f023 0210 	bic.w	r2, r3, #16
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800464a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800464e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4313      	orrs	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f023 0320 	bic.w	r3, r3, #32
 800466a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a28      	ldr	r2, [pc, #160]	@ (800471c <TIM_OC2_SetConfig+0x100>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d003      	beq.n	8004688 <TIM_OC2_SetConfig+0x6c>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a27      	ldr	r2, [pc, #156]	@ (8004720 <TIM_OC2_SetConfig+0x104>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d10d      	bne.n	80046a4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800468e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a1d      	ldr	r2, [pc, #116]	@ (800471c <TIM_OC2_SetConfig+0x100>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00f      	beq.n	80046cc <TIM_OC2_SetConfig+0xb0>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004720 <TIM_OC2_SetConfig+0x104>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00b      	beq.n	80046cc <TIM_OC2_SetConfig+0xb0>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004724 <TIM_OC2_SetConfig+0x108>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d007      	beq.n	80046cc <TIM_OC2_SetConfig+0xb0>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a1a      	ldr	r2, [pc, #104]	@ (8004728 <TIM_OC2_SetConfig+0x10c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d003      	beq.n	80046cc <TIM_OC2_SetConfig+0xb0>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a19      	ldr	r2, [pc, #100]	@ (800472c <TIM_OC2_SetConfig+0x110>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d113      	bne.n	80046f4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046d2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046da:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	621a      	str	r2, [r3, #32]
}
 800470e:	bf00      	nop
 8004710:	371c      	adds	r7, #28
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40012c00 	.word	0x40012c00
 8004720:	40013400 	.word	0x40013400
 8004724:	40014000 	.word	0x40014000
 8004728:	40014400 	.word	0x40014400
 800472c:	40014800 	.word	0x40014800

08004730 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800475e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0303 	bic.w	r3, r3, #3
 800476a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800477c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	4313      	orrs	r3, r2
 8004788:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a27      	ldr	r2, [pc, #156]	@ (800482c <TIM_OC3_SetConfig+0xfc>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d003      	beq.n	800479a <TIM_OC3_SetConfig+0x6a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a26      	ldr	r2, [pc, #152]	@ (8004830 <TIM_OC3_SetConfig+0x100>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d10d      	bne.n	80047b6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	021b      	lsls	r3, r3, #8
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047b4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a1c      	ldr	r2, [pc, #112]	@ (800482c <TIM_OC3_SetConfig+0xfc>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00f      	beq.n	80047de <TIM_OC3_SetConfig+0xae>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004830 <TIM_OC3_SetConfig+0x100>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d00b      	beq.n	80047de <TIM_OC3_SetConfig+0xae>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004834 <TIM_OC3_SetConfig+0x104>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d007      	beq.n	80047de <TIM_OC3_SetConfig+0xae>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a19      	ldr	r2, [pc, #100]	@ (8004838 <TIM_OC3_SetConfig+0x108>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d003      	beq.n	80047de <TIM_OC3_SetConfig+0xae>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a18      	ldr	r2, [pc, #96]	@ (800483c <TIM_OC3_SetConfig+0x10c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d113      	bne.n	8004806 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	4313      	orrs	r3, r2
 8004804:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	621a      	str	r2, [r3, #32]
}
 8004820:	bf00      	nop
 8004822:	371c      	adds	r7, #28
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	40012c00 	.word	0x40012c00
 8004830:	40013400 	.word	0x40013400
 8004834:	40014000 	.word	0x40014000
 8004838:	40014400 	.word	0x40014400
 800483c:	40014800 	.word	0x40014800

08004840 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800486e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800487a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	021b      	lsls	r3, r3, #8
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800488e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	031b      	lsls	r3, r3, #12
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a18      	ldr	r2, [pc, #96]	@ (8004900 <TIM_OC4_SetConfig+0xc0>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d00f      	beq.n	80048c4 <TIM_OC4_SetConfig+0x84>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a17      	ldr	r2, [pc, #92]	@ (8004904 <TIM_OC4_SetConfig+0xc4>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00b      	beq.n	80048c4 <TIM_OC4_SetConfig+0x84>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a16      	ldr	r2, [pc, #88]	@ (8004908 <TIM_OC4_SetConfig+0xc8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d007      	beq.n	80048c4 <TIM_OC4_SetConfig+0x84>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a15      	ldr	r2, [pc, #84]	@ (800490c <TIM_OC4_SetConfig+0xcc>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d003      	beq.n	80048c4 <TIM_OC4_SetConfig+0x84>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a14      	ldr	r2, [pc, #80]	@ (8004910 <TIM_OC4_SetConfig+0xd0>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d109      	bne.n	80048d8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	019b      	lsls	r3, r3, #6
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	621a      	str	r2, [r3, #32]
}
 80048f2:	bf00      	nop
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	40012c00 	.word	0x40012c00
 8004904:	40013400 	.word	0x40013400
 8004908:	40014000 	.word	0x40014000
 800490c:	40014400 	.word	0x40014400
 8004910:	40014800 	.word	0x40014800

08004914 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800493a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004958:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	041b      	lsls	r3, r3, #16
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	4313      	orrs	r3, r2
 8004964:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a17      	ldr	r2, [pc, #92]	@ (80049c8 <TIM_OC5_SetConfig+0xb4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00f      	beq.n	800498e <TIM_OC5_SetConfig+0x7a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a16      	ldr	r2, [pc, #88]	@ (80049cc <TIM_OC5_SetConfig+0xb8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d00b      	beq.n	800498e <TIM_OC5_SetConfig+0x7a>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a15      	ldr	r2, [pc, #84]	@ (80049d0 <TIM_OC5_SetConfig+0xbc>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d007      	beq.n	800498e <TIM_OC5_SetConfig+0x7a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a14      	ldr	r2, [pc, #80]	@ (80049d4 <TIM_OC5_SetConfig+0xc0>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d003      	beq.n	800498e <TIM_OC5_SetConfig+0x7a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a13      	ldr	r2, [pc, #76]	@ (80049d8 <TIM_OC5_SetConfig+0xc4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d109      	bne.n	80049a2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004994:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	021b      	lsls	r3, r3, #8
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	621a      	str	r2, [r3, #32]
}
 80049bc:	bf00      	nop
 80049be:	371c      	adds	r7, #28
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	40012c00 	.word	0x40012c00
 80049cc:	40013400 	.word	0x40013400
 80049d0:	40014000 	.word	0x40014000
 80049d4:	40014400 	.word	0x40014400
 80049d8:	40014800 	.word	0x40014800

080049dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	021b      	lsls	r3, r3, #8
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	051b      	lsls	r3, r3, #20
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a18      	ldr	r2, [pc, #96]	@ (8004a94 <TIM_OC6_SetConfig+0xb8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00f      	beq.n	8004a58 <TIM_OC6_SetConfig+0x7c>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a17      	ldr	r2, [pc, #92]	@ (8004a98 <TIM_OC6_SetConfig+0xbc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00b      	beq.n	8004a58 <TIM_OC6_SetConfig+0x7c>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a16      	ldr	r2, [pc, #88]	@ (8004a9c <TIM_OC6_SetConfig+0xc0>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d007      	beq.n	8004a58 <TIM_OC6_SetConfig+0x7c>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a15      	ldr	r2, [pc, #84]	@ (8004aa0 <TIM_OC6_SetConfig+0xc4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <TIM_OC6_SetConfig+0x7c>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a14      	ldr	r2, [pc, #80]	@ (8004aa4 <TIM_OC6_SetConfig+0xc8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d109      	bne.n	8004a6c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	029b      	lsls	r3, r3, #10
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	621a      	str	r2, [r3, #32]
}
 8004a86:	bf00      	nop
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	40012c00 	.word	0x40012c00
 8004a98:	40013400 	.word	0x40013400
 8004a9c:	40014000 	.word	0x40014000
 8004aa0:	40014400 	.word	0x40014400
 8004aa4:	40014800 	.word	0x40014800

08004aa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f003 031f 	and.w	r3, r3, #31
 8004aba:	2201      	movs	r2, #1
 8004abc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a1a      	ldr	r2, [r3, #32]
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	401a      	ands	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a1a      	ldr	r2, [r3, #32]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f003 031f 	and.w	r3, r3, #31
 8004ada:	6879      	ldr	r1, [r7, #4]
 8004adc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	621a      	str	r2, [r3, #32]
}
 8004ae6:	bf00      	nop
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
	...

08004af4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d101      	bne.n	8004b0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b08:	2302      	movs	r3, #2
 8004b0a:	e063      	b.n	8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a2b      	ldr	r2, [pc, #172]	@ (8004be0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d004      	beq.n	8004b40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a2a      	ldr	r2, [pc, #168]	@ (8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d108      	bne.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004b46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a1b      	ldr	r2, [pc, #108]	@ (8004be0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d018      	beq.n	8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b7e:	d013      	beq.n	8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a18      	ldr	r2, [pc, #96]	@ (8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00e      	beq.n	8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a17      	ldr	r2, [pc, #92]	@ (8004bec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d009      	beq.n	8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a12      	ldr	r2, [pc, #72]	@ (8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d004      	beq.n	8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a13      	ldr	r2, [pc, #76]	@ (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d10c      	bne.n	8004bc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	40012c00 	.word	0x40012c00
 8004be4:	40013400 	.word	0x40013400
 8004be8:	40000400 	.word	0x40000400
 8004bec:	40000800 	.word	0x40000800
 8004bf0:	40014000 	.word	0x40014000

08004bf4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004bfc:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004c00:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	43db      	mvns	r3, r3
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	4013      	ands	r3, r2
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	f107 0014 	add.w	r0, r7, #20
 8004c38:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	b004      	add	sp, #16
 8004c6a:	4770      	bx	lr

08004c6c <__cvt>:
 8004c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c70:	ec57 6b10 	vmov	r6, r7, d0
 8004c74:	2f00      	cmp	r7, #0
 8004c76:	460c      	mov	r4, r1
 8004c78:	4619      	mov	r1, r3
 8004c7a:	463b      	mov	r3, r7
 8004c7c:	bfbb      	ittet	lt
 8004c7e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004c82:	461f      	movlt	r7, r3
 8004c84:	2300      	movge	r3, #0
 8004c86:	232d      	movlt	r3, #45	@ 0x2d
 8004c88:	700b      	strb	r3, [r1, #0]
 8004c8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c8c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004c90:	4691      	mov	r9, r2
 8004c92:	f023 0820 	bic.w	r8, r3, #32
 8004c96:	bfbc      	itt	lt
 8004c98:	4632      	movlt	r2, r6
 8004c9a:	4616      	movlt	r6, r2
 8004c9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004ca0:	d005      	beq.n	8004cae <__cvt+0x42>
 8004ca2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004ca6:	d100      	bne.n	8004caa <__cvt+0x3e>
 8004ca8:	3401      	adds	r4, #1
 8004caa:	2102      	movs	r1, #2
 8004cac:	e000      	b.n	8004cb0 <__cvt+0x44>
 8004cae:	2103      	movs	r1, #3
 8004cb0:	ab03      	add	r3, sp, #12
 8004cb2:	9301      	str	r3, [sp, #4]
 8004cb4:	ab02      	add	r3, sp, #8
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	ec47 6b10 	vmov	d0, r6, r7
 8004cbc:	4653      	mov	r3, sl
 8004cbe:	4622      	mov	r2, r4
 8004cc0:	f001 f876 	bl	8005db0 <_dtoa_r>
 8004cc4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004cc8:	4605      	mov	r5, r0
 8004cca:	d119      	bne.n	8004d00 <__cvt+0x94>
 8004ccc:	f019 0f01 	tst.w	r9, #1
 8004cd0:	d00e      	beq.n	8004cf0 <__cvt+0x84>
 8004cd2:	eb00 0904 	add.w	r9, r0, r4
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	2300      	movs	r3, #0
 8004cda:	4630      	mov	r0, r6
 8004cdc:	4639      	mov	r1, r7
 8004cde:	f7fb fef3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ce2:	b108      	cbz	r0, 8004ce8 <__cvt+0x7c>
 8004ce4:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ce8:	2230      	movs	r2, #48	@ 0x30
 8004cea:	9b03      	ldr	r3, [sp, #12]
 8004cec:	454b      	cmp	r3, r9
 8004cee:	d31e      	bcc.n	8004d2e <__cvt+0xc2>
 8004cf0:	9b03      	ldr	r3, [sp, #12]
 8004cf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004cf4:	1b5b      	subs	r3, r3, r5
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	b004      	add	sp, #16
 8004cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004d04:	eb00 0904 	add.w	r9, r0, r4
 8004d08:	d1e5      	bne.n	8004cd6 <__cvt+0x6a>
 8004d0a:	7803      	ldrb	r3, [r0, #0]
 8004d0c:	2b30      	cmp	r3, #48	@ 0x30
 8004d0e:	d10a      	bne.n	8004d26 <__cvt+0xba>
 8004d10:	2200      	movs	r2, #0
 8004d12:	2300      	movs	r3, #0
 8004d14:	4630      	mov	r0, r6
 8004d16:	4639      	mov	r1, r7
 8004d18:	f7fb fed6 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d1c:	b918      	cbnz	r0, 8004d26 <__cvt+0xba>
 8004d1e:	f1c4 0401 	rsb	r4, r4, #1
 8004d22:	f8ca 4000 	str.w	r4, [sl]
 8004d26:	f8da 3000 	ldr.w	r3, [sl]
 8004d2a:	4499      	add	r9, r3
 8004d2c:	e7d3      	b.n	8004cd6 <__cvt+0x6a>
 8004d2e:	1c59      	adds	r1, r3, #1
 8004d30:	9103      	str	r1, [sp, #12]
 8004d32:	701a      	strb	r2, [r3, #0]
 8004d34:	e7d9      	b.n	8004cea <__cvt+0x7e>

08004d36 <__exponent>:
 8004d36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d38:	2900      	cmp	r1, #0
 8004d3a:	bfba      	itte	lt
 8004d3c:	4249      	neglt	r1, r1
 8004d3e:	232d      	movlt	r3, #45	@ 0x2d
 8004d40:	232b      	movge	r3, #43	@ 0x2b
 8004d42:	2909      	cmp	r1, #9
 8004d44:	7002      	strb	r2, [r0, #0]
 8004d46:	7043      	strb	r3, [r0, #1]
 8004d48:	dd29      	ble.n	8004d9e <__exponent+0x68>
 8004d4a:	f10d 0307 	add.w	r3, sp, #7
 8004d4e:	461d      	mov	r5, r3
 8004d50:	270a      	movs	r7, #10
 8004d52:	461a      	mov	r2, r3
 8004d54:	fbb1 f6f7 	udiv	r6, r1, r7
 8004d58:	fb07 1416 	mls	r4, r7, r6, r1
 8004d5c:	3430      	adds	r4, #48	@ 0x30
 8004d5e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004d62:	460c      	mov	r4, r1
 8004d64:	2c63      	cmp	r4, #99	@ 0x63
 8004d66:	f103 33ff 	add.w	r3, r3, #4294967295
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	dcf1      	bgt.n	8004d52 <__exponent+0x1c>
 8004d6e:	3130      	adds	r1, #48	@ 0x30
 8004d70:	1e94      	subs	r4, r2, #2
 8004d72:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004d76:	1c41      	adds	r1, r0, #1
 8004d78:	4623      	mov	r3, r4
 8004d7a:	42ab      	cmp	r3, r5
 8004d7c:	d30a      	bcc.n	8004d94 <__exponent+0x5e>
 8004d7e:	f10d 0309 	add.w	r3, sp, #9
 8004d82:	1a9b      	subs	r3, r3, r2
 8004d84:	42ac      	cmp	r4, r5
 8004d86:	bf88      	it	hi
 8004d88:	2300      	movhi	r3, #0
 8004d8a:	3302      	adds	r3, #2
 8004d8c:	4403      	add	r3, r0
 8004d8e:	1a18      	subs	r0, r3, r0
 8004d90:	b003      	add	sp, #12
 8004d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d94:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004d98:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004d9c:	e7ed      	b.n	8004d7a <__exponent+0x44>
 8004d9e:	2330      	movs	r3, #48	@ 0x30
 8004da0:	3130      	adds	r1, #48	@ 0x30
 8004da2:	7083      	strb	r3, [r0, #2]
 8004da4:	70c1      	strb	r1, [r0, #3]
 8004da6:	1d03      	adds	r3, r0, #4
 8004da8:	e7f1      	b.n	8004d8e <__exponent+0x58>
	...

08004dac <_printf_float>:
 8004dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db0:	b08d      	sub	sp, #52	@ 0x34
 8004db2:	460c      	mov	r4, r1
 8004db4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004db8:	4616      	mov	r6, r2
 8004dba:	461f      	mov	r7, r3
 8004dbc:	4605      	mov	r5, r0
 8004dbe:	f000 feef 	bl	8005ba0 <_localeconv_r>
 8004dc2:	6803      	ldr	r3, [r0, #0]
 8004dc4:	9304      	str	r3, [sp, #16]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fb fa52 	bl	8000270 <strlen>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	930a      	str	r3, [sp, #40]	@ 0x28
 8004dd0:	f8d8 3000 	ldr.w	r3, [r8]
 8004dd4:	9005      	str	r0, [sp, #20]
 8004dd6:	3307      	adds	r3, #7
 8004dd8:	f023 0307 	bic.w	r3, r3, #7
 8004ddc:	f103 0208 	add.w	r2, r3, #8
 8004de0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004de4:	f8d4 b000 	ldr.w	fp, [r4]
 8004de8:	f8c8 2000 	str.w	r2, [r8]
 8004dec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004df0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004df4:	9307      	str	r3, [sp, #28]
 8004df6:	f8cd 8018 	str.w	r8, [sp, #24]
 8004dfa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004dfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e02:	4b9c      	ldr	r3, [pc, #624]	@ (8005074 <_printf_float+0x2c8>)
 8004e04:	f04f 32ff 	mov.w	r2, #4294967295
 8004e08:	f7fb fe90 	bl	8000b2c <__aeabi_dcmpun>
 8004e0c:	bb70      	cbnz	r0, 8004e6c <_printf_float+0xc0>
 8004e0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e12:	4b98      	ldr	r3, [pc, #608]	@ (8005074 <_printf_float+0x2c8>)
 8004e14:	f04f 32ff 	mov.w	r2, #4294967295
 8004e18:	f7fb fe6a 	bl	8000af0 <__aeabi_dcmple>
 8004e1c:	bb30      	cbnz	r0, 8004e6c <_printf_float+0xc0>
 8004e1e:	2200      	movs	r2, #0
 8004e20:	2300      	movs	r3, #0
 8004e22:	4640      	mov	r0, r8
 8004e24:	4649      	mov	r1, r9
 8004e26:	f7fb fe59 	bl	8000adc <__aeabi_dcmplt>
 8004e2a:	b110      	cbz	r0, 8004e32 <_printf_float+0x86>
 8004e2c:	232d      	movs	r3, #45	@ 0x2d
 8004e2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e32:	4a91      	ldr	r2, [pc, #580]	@ (8005078 <_printf_float+0x2cc>)
 8004e34:	4b91      	ldr	r3, [pc, #580]	@ (800507c <_printf_float+0x2d0>)
 8004e36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004e3a:	bf94      	ite	ls
 8004e3c:	4690      	movls	r8, r2
 8004e3e:	4698      	movhi	r8, r3
 8004e40:	2303      	movs	r3, #3
 8004e42:	6123      	str	r3, [r4, #16]
 8004e44:	f02b 0304 	bic.w	r3, fp, #4
 8004e48:	6023      	str	r3, [r4, #0]
 8004e4a:	f04f 0900 	mov.w	r9, #0
 8004e4e:	9700      	str	r7, [sp, #0]
 8004e50:	4633      	mov	r3, r6
 8004e52:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004e54:	4621      	mov	r1, r4
 8004e56:	4628      	mov	r0, r5
 8004e58:	f000 f9d2 	bl	8005200 <_printf_common>
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	f040 808d 	bne.w	8004f7c <_printf_float+0x1d0>
 8004e62:	f04f 30ff 	mov.w	r0, #4294967295
 8004e66:	b00d      	add	sp, #52	@ 0x34
 8004e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e6c:	4642      	mov	r2, r8
 8004e6e:	464b      	mov	r3, r9
 8004e70:	4640      	mov	r0, r8
 8004e72:	4649      	mov	r1, r9
 8004e74:	f7fb fe5a 	bl	8000b2c <__aeabi_dcmpun>
 8004e78:	b140      	cbz	r0, 8004e8c <_printf_float+0xe0>
 8004e7a:	464b      	mov	r3, r9
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	bfbc      	itt	lt
 8004e80:	232d      	movlt	r3, #45	@ 0x2d
 8004e82:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004e86:	4a7e      	ldr	r2, [pc, #504]	@ (8005080 <_printf_float+0x2d4>)
 8004e88:	4b7e      	ldr	r3, [pc, #504]	@ (8005084 <_printf_float+0x2d8>)
 8004e8a:	e7d4      	b.n	8004e36 <_printf_float+0x8a>
 8004e8c:	6863      	ldr	r3, [r4, #4]
 8004e8e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004e92:	9206      	str	r2, [sp, #24]
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	d13b      	bne.n	8004f10 <_printf_float+0x164>
 8004e98:	2306      	movs	r3, #6
 8004e9a:	6063      	str	r3, [r4, #4]
 8004e9c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	6022      	str	r2, [r4, #0]
 8004ea4:	9303      	str	r3, [sp, #12]
 8004ea6:	ab0a      	add	r3, sp, #40	@ 0x28
 8004ea8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004eac:	ab09      	add	r3, sp, #36	@ 0x24
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	6861      	ldr	r1, [r4, #4]
 8004eb2:	ec49 8b10 	vmov	d0, r8, r9
 8004eb6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004eba:	4628      	mov	r0, r5
 8004ebc:	f7ff fed6 	bl	8004c6c <__cvt>
 8004ec0:	9b06      	ldr	r3, [sp, #24]
 8004ec2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004ec4:	2b47      	cmp	r3, #71	@ 0x47
 8004ec6:	4680      	mov	r8, r0
 8004ec8:	d129      	bne.n	8004f1e <_printf_float+0x172>
 8004eca:	1cc8      	adds	r0, r1, #3
 8004ecc:	db02      	blt.n	8004ed4 <_printf_float+0x128>
 8004ece:	6863      	ldr	r3, [r4, #4]
 8004ed0:	4299      	cmp	r1, r3
 8004ed2:	dd41      	ble.n	8004f58 <_printf_float+0x1ac>
 8004ed4:	f1aa 0a02 	sub.w	sl, sl, #2
 8004ed8:	fa5f fa8a 	uxtb.w	sl, sl
 8004edc:	3901      	subs	r1, #1
 8004ede:	4652      	mov	r2, sl
 8004ee0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004ee4:	9109      	str	r1, [sp, #36]	@ 0x24
 8004ee6:	f7ff ff26 	bl	8004d36 <__exponent>
 8004eea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004eec:	1813      	adds	r3, r2, r0
 8004eee:	2a01      	cmp	r2, #1
 8004ef0:	4681      	mov	r9, r0
 8004ef2:	6123      	str	r3, [r4, #16]
 8004ef4:	dc02      	bgt.n	8004efc <_printf_float+0x150>
 8004ef6:	6822      	ldr	r2, [r4, #0]
 8004ef8:	07d2      	lsls	r2, r2, #31
 8004efa:	d501      	bpl.n	8004f00 <_printf_float+0x154>
 8004efc:	3301      	adds	r3, #1
 8004efe:	6123      	str	r3, [r4, #16]
 8004f00:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0a2      	beq.n	8004e4e <_printf_float+0xa2>
 8004f08:	232d      	movs	r3, #45	@ 0x2d
 8004f0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f0e:	e79e      	b.n	8004e4e <_printf_float+0xa2>
 8004f10:	9a06      	ldr	r2, [sp, #24]
 8004f12:	2a47      	cmp	r2, #71	@ 0x47
 8004f14:	d1c2      	bne.n	8004e9c <_printf_float+0xf0>
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1c0      	bne.n	8004e9c <_printf_float+0xf0>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e7bd      	b.n	8004e9a <_printf_float+0xee>
 8004f1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004f22:	d9db      	bls.n	8004edc <_printf_float+0x130>
 8004f24:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004f28:	d118      	bne.n	8004f5c <_printf_float+0x1b0>
 8004f2a:	2900      	cmp	r1, #0
 8004f2c:	6863      	ldr	r3, [r4, #4]
 8004f2e:	dd0b      	ble.n	8004f48 <_printf_float+0x19c>
 8004f30:	6121      	str	r1, [r4, #16]
 8004f32:	b913      	cbnz	r3, 8004f3a <_printf_float+0x18e>
 8004f34:	6822      	ldr	r2, [r4, #0]
 8004f36:	07d0      	lsls	r0, r2, #31
 8004f38:	d502      	bpl.n	8004f40 <_printf_float+0x194>
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	440b      	add	r3, r1
 8004f3e:	6123      	str	r3, [r4, #16]
 8004f40:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004f42:	f04f 0900 	mov.w	r9, #0
 8004f46:	e7db      	b.n	8004f00 <_printf_float+0x154>
 8004f48:	b913      	cbnz	r3, 8004f50 <_printf_float+0x1a4>
 8004f4a:	6822      	ldr	r2, [r4, #0]
 8004f4c:	07d2      	lsls	r2, r2, #31
 8004f4e:	d501      	bpl.n	8004f54 <_printf_float+0x1a8>
 8004f50:	3302      	adds	r3, #2
 8004f52:	e7f4      	b.n	8004f3e <_printf_float+0x192>
 8004f54:	2301      	movs	r3, #1
 8004f56:	e7f2      	b.n	8004f3e <_printf_float+0x192>
 8004f58:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004f5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f5e:	4299      	cmp	r1, r3
 8004f60:	db05      	blt.n	8004f6e <_printf_float+0x1c2>
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	6121      	str	r1, [r4, #16]
 8004f66:	07d8      	lsls	r0, r3, #31
 8004f68:	d5ea      	bpl.n	8004f40 <_printf_float+0x194>
 8004f6a:	1c4b      	adds	r3, r1, #1
 8004f6c:	e7e7      	b.n	8004f3e <_printf_float+0x192>
 8004f6e:	2900      	cmp	r1, #0
 8004f70:	bfd4      	ite	le
 8004f72:	f1c1 0202 	rsble	r2, r1, #2
 8004f76:	2201      	movgt	r2, #1
 8004f78:	4413      	add	r3, r2
 8004f7a:	e7e0      	b.n	8004f3e <_printf_float+0x192>
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	055a      	lsls	r2, r3, #21
 8004f80:	d407      	bmi.n	8004f92 <_printf_float+0x1e6>
 8004f82:	6923      	ldr	r3, [r4, #16]
 8004f84:	4642      	mov	r2, r8
 8004f86:	4631      	mov	r1, r6
 8004f88:	4628      	mov	r0, r5
 8004f8a:	47b8      	blx	r7
 8004f8c:	3001      	adds	r0, #1
 8004f8e:	d12b      	bne.n	8004fe8 <_printf_float+0x23c>
 8004f90:	e767      	b.n	8004e62 <_printf_float+0xb6>
 8004f92:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004f96:	f240 80dd 	bls.w	8005154 <_printf_float+0x3a8>
 8004f9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	f7fb fd91 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	d033      	beq.n	8005012 <_printf_float+0x266>
 8004faa:	4a37      	ldr	r2, [pc, #220]	@ (8005088 <_printf_float+0x2dc>)
 8004fac:	2301      	movs	r3, #1
 8004fae:	4631      	mov	r1, r6
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	47b8      	blx	r7
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	f43f af54 	beq.w	8004e62 <_printf_float+0xb6>
 8004fba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004fbe:	4543      	cmp	r3, r8
 8004fc0:	db02      	blt.n	8004fc8 <_printf_float+0x21c>
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	07d8      	lsls	r0, r3, #31
 8004fc6:	d50f      	bpl.n	8004fe8 <_printf_float+0x23c>
 8004fc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fcc:	4631      	mov	r1, r6
 8004fce:	4628      	mov	r0, r5
 8004fd0:	47b8      	blx	r7
 8004fd2:	3001      	adds	r0, #1
 8004fd4:	f43f af45 	beq.w	8004e62 <_printf_float+0xb6>
 8004fd8:	f04f 0900 	mov.w	r9, #0
 8004fdc:	f108 38ff 	add.w	r8, r8, #4294967295
 8004fe0:	f104 0a1a 	add.w	sl, r4, #26
 8004fe4:	45c8      	cmp	r8, r9
 8004fe6:	dc09      	bgt.n	8004ffc <_printf_float+0x250>
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	079b      	lsls	r3, r3, #30
 8004fec:	f100 8103 	bmi.w	80051f6 <_printf_float+0x44a>
 8004ff0:	68e0      	ldr	r0, [r4, #12]
 8004ff2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ff4:	4298      	cmp	r0, r3
 8004ff6:	bfb8      	it	lt
 8004ff8:	4618      	movlt	r0, r3
 8004ffa:	e734      	b.n	8004e66 <_printf_float+0xba>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	4652      	mov	r2, sl
 8005000:	4631      	mov	r1, r6
 8005002:	4628      	mov	r0, r5
 8005004:	47b8      	blx	r7
 8005006:	3001      	adds	r0, #1
 8005008:	f43f af2b 	beq.w	8004e62 <_printf_float+0xb6>
 800500c:	f109 0901 	add.w	r9, r9, #1
 8005010:	e7e8      	b.n	8004fe4 <_printf_float+0x238>
 8005012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005014:	2b00      	cmp	r3, #0
 8005016:	dc39      	bgt.n	800508c <_printf_float+0x2e0>
 8005018:	4a1b      	ldr	r2, [pc, #108]	@ (8005088 <_printf_float+0x2dc>)
 800501a:	2301      	movs	r3, #1
 800501c:	4631      	mov	r1, r6
 800501e:	4628      	mov	r0, r5
 8005020:	47b8      	blx	r7
 8005022:	3001      	adds	r0, #1
 8005024:	f43f af1d 	beq.w	8004e62 <_printf_float+0xb6>
 8005028:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800502c:	ea59 0303 	orrs.w	r3, r9, r3
 8005030:	d102      	bne.n	8005038 <_printf_float+0x28c>
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	07d9      	lsls	r1, r3, #31
 8005036:	d5d7      	bpl.n	8004fe8 <_printf_float+0x23c>
 8005038:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800503c:	4631      	mov	r1, r6
 800503e:	4628      	mov	r0, r5
 8005040:	47b8      	blx	r7
 8005042:	3001      	adds	r0, #1
 8005044:	f43f af0d 	beq.w	8004e62 <_printf_float+0xb6>
 8005048:	f04f 0a00 	mov.w	sl, #0
 800504c:	f104 0b1a 	add.w	fp, r4, #26
 8005050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005052:	425b      	negs	r3, r3
 8005054:	4553      	cmp	r3, sl
 8005056:	dc01      	bgt.n	800505c <_printf_float+0x2b0>
 8005058:	464b      	mov	r3, r9
 800505a:	e793      	b.n	8004f84 <_printf_float+0x1d8>
 800505c:	2301      	movs	r3, #1
 800505e:	465a      	mov	r2, fp
 8005060:	4631      	mov	r1, r6
 8005062:	4628      	mov	r0, r5
 8005064:	47b8      	blx	r7
 8005066:	3001      	adds	r0, #1
 8005068:	f43f aefb 	beq.w	8004e62 <_printf_float+0xb6>
 800506c:	f10a 0a01 	add.w	sl, sl, #1
 8005070:	e7ee      	b.n	8005050 <_printf_float+0x2a4>
 8005072:	bf00      	nop
 8005074:	7fefffff 	.word	0x7fefffff
 8005078:	08009388 	.word	0x08009388
 800507c:	0800938c 	.word	0x0800938c
 8005080:	08009390 	.word	0x08009390
 8005084:	08009394 	.word	0x08009394
 8005088:	08009398 	.word	0x08009398
 800508c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800508e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005092:	4553      	cmp	r3, sl
 8005094:	bfa8      	it	ge
 8005096:	4653      	movge	r3, sl
 8005098:	2b00      	cmp	r3, #0
 800509a:	4699      	mov	r9, r3
 800509c:	dc36      	bgt.n	800510c <_printf_float+0x360>
 800509e:	f04f 0b00 	mov.w	fp, #0
 80050a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050a6:	f104 021a 	add.w	r2, r4, #26
 80050aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80050ac:	9306      	str	r3, [sp, #24]
 80050ae:	eba3 0309 	sub.w	r3, r3, r9
 80050b2:	455b      	cmp	r3, fp
 80050b4:	dc31      	bgt.n	800511a <_printf_float+0x36e>
 80050b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050b8:	459a      	cmp	sl, r3
 80050ba:	dc3a      	bgt.n	8005132 <_printf_float+0x386>
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	07da      	lsls	r2, r3, #31
 80050c0:	d437      	bmi.n	8005132 <_printf_float+0x386>
 80050c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050c4:	ebaa 0903 	sub.w	r9, sl, r3
 80050c8:	9b06      	ldr	r3, [sp, #24]
 80050ca:	ebaa 0303 	sub.w	r3, sl, r3
 80050ce:	4599      	cmp	r9, r3
 80050d0:	bfa8      	it	ge
 80050d2:	4699      	movge	r9, r3
 80050d4:	f1b9 0f00 	cmp.w	r9, #0
 80050d8:	dc33      	bgt.n	8005142 <_printf_float+0x396>
 80050da:	f04f 0800 	mov.w	r8, #0
 80050de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050e2:	f104 0b1a 	add.w	fp, r4, #26
 80050e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050e8:	ebaa 0303 	sub.w	r3, sl, r3
 80050ec:	eba3 0309 	sub.w	r3, r3, r9
 80050f0:	4543      	cmp	r3, r8
 80050f2:	f77f af79 	ble.w	8004fe8 <_printf_float+0x23c>
 80050f6:	2301      	movs	r3, #1
 80050f8:	465a      	mov	r2, fp
 80050fa:	4631      	mov	r1, r6
 80050fc:	4628      	mov	r0, r5
 80050fe:	47b8      	blx	r7
 8005100:	3001      	adds	r0, #1
 8005102:	f43f aeae 	beq.w	8004e62 <_printf_float+0xb6>
 8005106:	f108 0801 	add.w	r8, r8, #1
 800510a:	e7ec      	b.n	80050e6 <_printf_float+0x33a>
 800510c:	4642      	mov	r2, r8
 800510e:	4631      	mov	r1, r6
 8005110:	4628      	mov	r0, r5
 8005112:	47b8      	blx	r7
 8005114:	3001      	adds	r0, #1
 8005116:	d1c2      	bne.n	800509e <_printf_float+0x2f2>
 8005118:	e6a3      	b.n	8004e62 <_printf_float+0xb6>
 800511a:	2301      	movs	r3, #1
 800511c:	4631      	mov	r1, r6
 800511e:	4628      	mov	r0, r5
 8005120:	9206      	str	r2, [sp, #24]
 8005122:	47b8      	blx	r7
 8005124:	3001      	adds	r0, #1
 8005126:	f43f ae9c 	beq.w	8004e62 <_printf_float+0xb6>
 800512a:	9a06      	ldr	r2, [sp, #24]
 800512c:	f10b 0b01 	add.w	fp, fp, #1
 8005130:	e7bb      	b.n	80050aa <_printf_float+0x2fe>
 8005132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005136:	4631      	mov	r1, r6
 8005138:	4628      	mov	r0, r5
 800513a:	47b8      	blx	r7
 800513c:	3001      	adds	r0, #1
 800513e:	d1c0      	bne.n	80050c2 <_printf_float+0x316>
 8005140:	e68f      	b.n	8004e62 <_printf_float+0xb6>
 8005142:	9a06      	ldr	r2, [sp, #24]
 8005144:	464b      	mov	r3, r9
 8005146:	4442      	add	r2, r8
 8005148:	4631      	mov	r1, r6
 800514a:	4628      	mov	r0, r5
 800514c:	47b8      	blx	r7
 800514e:	3001      	adds	r0, #1
 8005150:	d1c3      	bne.n	80050da <_printf_float+0x32e>
 8005152:	e686      	b.n	8004e62 <_printf_float+0xb6>
 8005154:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005158:	f1ba 0f01 	cmp.w	sl, #1
 800515c:	dc01      	bgt.n	8005162 <_printf_float+0x3b6>
 800515e:	07db      	lsls	r3, r3, #31
 8005160:	d536      	bpl.n	80051d0 <_printf_float+0x424>
 8005162:	2301      	movs	r3, #1
 8005164:	4642      	mov	r2, r8
 8005166:	4631      	mov	r1, r6
 8005168:	4628      	mov	r0, r5
 800516a:	47b8      	blx	r7
 800516c:	3001      	adds	r0, #1
 800516e:	f43f ae78 	beq.w	8004e62 <_printf_float+0xb6>
 8005172:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005176:	4631      	mov	r1, r6
 8005178:	4628      	mov	r0, r5
 800517a:	47b8      	blx	r7
 800517c:	3001      	adds	r0, #1
 800517e:	f43f ae70 	beq.w	8004e62 <_printf_float+0xb6>
 8005182:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005186:	2200      	movs	r2, #0
 8005188:	2300      	movs	r3, #0
 800518a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800518e:	f7fb fc9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005192:	b9c0      	cbnz	r0, 80051c6 <_printf_float+0x41a>
 8005194:	4653      	mov	r3, sl
 8005196:	f108 0201 	add.w	r2, r8, #1
 800519a:	4631      	mov	r1, r6
 800519c:	4628      	mov	r0, r5
 800519e:	47b8      	blx	r7
 80051a0:	3001      	adds	r0, #1
 80051a2:	d10c      	bne.n	80051be <_printf_float+0x412>
 80051a4:	e65d      	b.n	8004e62 <_printf_float+0xb6>
 80051a6:	2301      	movs	r3, #1
 80051a8:	465a      	mov	r2, fp
 80051aa:	4631      	mov	r1, r6
 80051ac:	4628      	mov	r0, r5
 80051ae:	47b8      	blx	r7
 80051b0:	3001      	adds	r0, #1
 80051b2:	f43f ae56 	beq.w	8004e62 <_printf_float+0xb6>
 80051b6:	f108 0801 	add.w	r8, r8, #1
 80051ba:	45d0      	cmp	r8, sl
 80051bc:	dbf3      	blt.n	80051a6 <_printf_float+0x3fa>
 80051be:	464b      	mov	r3, r9
 80051c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80051c4:	e6df      	b.n	8004f86 <_printf_float+0x1da>
 80051c6:	f04f 0800 	mov.w	r8, #0
 80051ca:	f104 0b1a 	add.w	fp, r4, #26
 80051ce:	e7f4      	b.n	80051ba <_printf_float+0x40e>
 80051d0:	2301      	movs	r3, #1
 80051d2:	4642      	mov	r2, r8
 80051d4:	e7e1      	b.n	800519a <_printf_float+0x3ee>
 80051d6:	2301      	movs	r3, #1
 80051d8:	464a      	mov	r2, r9
 80051da:	4631      	mov	r1, r6
 80051dc:	4628      	mov	r0, r5
 80051de:	47b8      	blx	r7
 80051e0:	3001      	adds	r0, #1
 80051e2:	f43f ae3e 	beq.w	8004e62 <_printf_float+0xb6>
 80051e6:	f108 0801 	add.w	r8, r8, #1
 80051ea:	68e3      	ldr	r3, [r4, #12]
 80051ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80051ee:	1a5b      	subs	r3, r3, r1
 80051f0:	4543      	cmp	r3, r8
 80051f2:	dcf0      	bgt.n	80051d6 <_printf_float+0x42a>
 80051f4:	e6fc      	b.n	8004ff0 <_printf_float+0x244>
 80051f6:	f04f 0800 	mov.w	r8, #0
 80051fa:	f104 0919 	add.w	r9, r4, #25
 80051fe:	e7f4      	b.n	80051ea <_printf_float+0x43e>

08005200 <_printf_common>:
 8005200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005204:	4616      	mov	r6, r2
 8005206:	4698      	mov	r8, r3
 8005208:	688a      	ldr	r2, [r1, #8]
 800520a:	690b      	ldr	r3, [r1, #16]
 800520c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005210:	4293      	cmp	r3, r2
 8005212:	bfb8      	it	lt
 8005214:	4613      	movlt	r3, r2
 8005216:	6033      	str	r3, [r6, #0]
 8005218:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800521c:	4607      	mov	r7, r0
 800521e:	460c      	mov	r4, r1
 8005220:	b10a      	cbz	r2, 8005226 <_printf_common+0x26>
 8005222:	3301      	adds	r3, #1
 8005224:	6033      	str	r3, [r6, #0]
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	0699      	lsls	r1, r3, #26
 800522a:	bf42      	ittt	mi
 800522c:	6833      	ldrmi	r3, [r6, #0]
 800522e:	3302      	addmi	r3, #2
 8005230:	6033      	strmi	r3, [r6, #0]
 8005232:	6825      	ldr	r5, [r4, #0]
 8005234:	f015 0506 	ands.w	r5, r5, #6
 8005238:	d106      	bne.n	8005248 <_printf_common+0x48>
 800523a:	f104 0a19 	add.w	sl, r4, #25
 800523e:	68e3      	ldr	r3, [r4, #12]
 8005240:	6832      	ldr	r2, [r6, #0]
 8005242:	1a9b      	subs	r3, r3, r2
 8005244:	42ab      	cmp	r3, r5
 8005246:	dc26      	bgt.n	8005296 <_printf_common+0x96>
 8005248:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800524c:	6822      	ldr	r2, [r4, #0]
 800524e:	3b00      	subs	r3, #0
 8005250:	bf18      	it	ne
 8005252:	2301      	movne	r3, #1
 8005254:	0692      	lsls	r2, r2, #26
 8005256:	d42b      	bmi.n	80052b0 <_printf_common+0xb0>
 8005258:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800525c:	4641      	mov	r1, r8
 800525e:	4638      	mov	r0, r7
 8005260:	47c8      	blx	r9
 8005262:	3001      	adds	r0, #1
 8005264:	d01e      	beq.n	80052a4 <_printf_common+0xa4>
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	6922      	ldr	r2, [r4, #16]
 800526a:	f003 0306 	and.w	r3, r3, #6
 800526e:	2b04      	cmp	r3, #4
 8005270:	bf02      	ittt	eq
 8005272:	68e5      	ldreq	r5, [r4, #12]
 8005274:	6833      	ldreq	r3, [r6, #0]
 8005276:	1aed      	subeq	r5, r5, r3
 8005278:	68a3      	ldr	r3, [r4, #8]
 800527a:	bf0c      	ite	eq
 800527c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005280:	2500      	movne	r5, #0
 8005282:	4293      	cmp	r3, r2
 8005284:	bfc4      	itt	gt
 8005286:	1a9b      	subgt	r3, r3, r2
 8005288:	18ed      	addgt	r5, r5, r3
 800528a:	2600      	movs	r6, #0
 800528c:	341a      	adds	r4, #26
 800528e:	42b5      	cmp	r5, r6
 8005290:	d11a      	bne.n	80052c8 <_printf_common+0xc8>
 8005292:	2000      	movs	r0, #0
 8005294:	e008      	b.n	80052a8 <_printf_common+0xa8>
 8005296:	2301      	movs	r3, #1
 8005298:	4652      	mov	r2, sl
 800529a:	4641      	mov	r1, r8
 800529c:	4638      	mov	r0, r7
 800529e:	47c8      	blx	r9
 80052a0:	3001      	adds	r0, #1
 80052a2:	d103      	bne.n	80052ac <_printf_common+0xac>
 80052a4:	f04f 30ff 	mov.w	r0, #4294967295
 80052a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ac:	3501      	adds	r5, #1
 80052ae:	e7c6      	b.n	800523e <_printf_common+0x3e>
 80052b0:	18e1      	adds	r1, r4, r3
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	2030      	movs	r0, #48	@ 0x30
 80052b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052ba:	4422      	add	r2, r4
 80052bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052c4:	3302      	adds	r3, #2
 80052c6:	e7c7      	b.n	8005258 <_printf_common+0x58>
 80052c8:	2301      	movs	r3, #1
 80052ca:	4622      	mov	r2, r4
 80052cc:	4641      	mov	r1, r8
 80052ce:	4638      	mov	r0, r7
 80052d0:	47c8      	blx	r9
 80052d2:	3001      	adds	r0, #1
 80052d4:	d0e6      	beq.n	80052a4 <_printf_common+0xa4>
 80052d6:	3601      	adds	r6, #1
 80052d8:	e7d9      	b.n	800528e <_printf_common+0x8e>
	...

080052dc <_printf_i>:
 80052dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052e0:	7e0f      	ldrb	r7, [r1, #24]
 80052e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052e4:	2f78      	cmp	r7, #120	@ 0x78
 80052e6:	4691      	mov	r9, r2
 80052e8:	4680      	mov	r8, r0
 80052ea:	460c      	mov	r4, r1
 80052ec:	469a      	mov	sl, r3
 80052ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052f2:	d807      	bhi.n	8005304 <_printf_i+0x28>
 80052f4:	2f62      	cmp	r7, #98	@ 0x62
 80052f6:	d80a      	bhi.n	800530e <_printf_i+0x32>
 80052f8:	2f00      	cmp	r7, #0
 80052fa:	f000 80d2 	beq.w	80054a2 <_printf_i+0x1c6>
 80052fe:	2f58      	cmp	r7, #88	@ 0x58
 8005300:	f000 80b9 	beq.w	8005476 <_printf_i+0x19a>
 8005304:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005308:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800530c:	e03a      	b.n	8005384 <_printf_i+0xa8>
 800530e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005312:	2b15      	cmp	r3, #21
 8005314:	d8f6      	bhi.n	8005304 <_printf_i+0x28>
 8005316:	a101      	add	r1, pc, #4	@ (adr r1, 800531c <_printf_i+0x40>)
 8005318:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800531c:	08005375 	.word	0x08005375
 8005320:	08005389 	.word	0x08005389
 8005324:	08005305 	.word	0x08005305
 8005328:	08005305 	.word	0x08005305
 800532c:	08005305 	.word	0x08005305
 8005330:	08005305 	.word	0x08005305
 8005334:	08005389 	.word	0x08005389
 8005338:	08005305 	.word	0x08005305
 800533c:	08005305 	.word	0x08005305
 8005340:	08005305 	.word	0x08005305
 8005344:	08005305 	.word	0x08005305
 8005348:	08005489 	.word	0x08005489
 800534c:	080053b3 	.word	0x080053b3
 8005350:	08005443 	.word	0x08005443
 8005354:	08005305 	.word	0x08005305
 8005358:	08005305 	.word	0x08005305
 800535c:	080054ab 	.word	0x080054ab
 8005360:	08005305 	.word	0x08005305
 8005364:	080053b3 	.word	0x080053b3
 8005368:	08005305 	.word	0x08005305
 800536c:	08005305 	.word	0x08005305
 8005370:	0800544b 	.word	0x0800544b
 8005374:	6833      	ldr	r3, [r6, #0]
 8005376:	1d1a      	adds	r2, r3, #4
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6032      	str	r2, [r6, #0]
 800537c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005380:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005384:	2301      	movs	r3, #1
 8005386:	e09d      	b.n	80054c4 <_printf_i+0x1e8>
 8005388:	6833      	ldr	r3, [r6, #0]
 800538a:	6820      	ldr	r0, [r4, #0]
 800538c:	1d19      	adds	r1, r3, #4
 800538e:	6031      	str	r1, [r6, #0]
 8005390:	0606      	lsls	r6, r0, #24
 8005392:	d501      	bpl.n	8005398 <_printf_i+0xbc>
 8005394:	681d      	ldr	r5, [r3, #0]
 8005396:	e003      	b.n	80053a0 <_printf_i+0xc4>
 8005398:	0645      	lsls	r5, r0, #25
 800539a:	d5fb      	bpl.n	8005394 <_printf_i+0xb8>
 800539c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053a0:	2d00      	cmp	r5, #0
 80053a2:	da03      	bge.n	80053ac <_printf_i+0xd0>
 80053a4:	232d      	movs	r3, #45	@ 0x2d
 80053a6:	426d      	negs	r5, r5
 80053a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053ac:	4859      	ldr	r0, [pc, #356]	@ (8005514 <_printf_i+0x238>)
 80053ae:	230a      	movs	r3, #10
 80053b0:	e011      	b.n	80053d6 <_printf_i+0xfa>
 80053b2:	6821      	ldr	r1, [r4, #0]
 80053b4:	6833      	ldr	r3, [r6, #0]
 80053b6:	0608      	lsls	r0, r1, #24
 80053b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80053bc:	d402      	bmi.n	80053c4 <_printf_i+0xe8>
 80053be:	0649      	lsls	r1, r1, #25
 80053c0:	bf48      	it	mi
 80053c2:	b2ad      	uxthmi	r5, r5
 80053c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80053c6:	4853      	ldr	r0, [pc, #332]	@ (8005514 <_printf_i+0x238>)
 80053c8:	6033      	str	r3, [r6, #0]
 80053ca:	bf14      	ite	ne
 80053cc:	230a      	movne	r3, #10
 80053ce:	2308      	moveq	r3, #8
 80053d0:	2100      	movs	r1, #0
 80053d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053d6:	6866      	ldr	r6, [r4, #4]
 80053d8:	60a6      	str	r6, [r4, #8]
 80053da:	2e00      	cmp	r6, #0
 80053dc:	bfa2      	ittt	ge
 80053de:	6821      	ldrge	r1, [r4, #0]
 80053e0:	f021 0104 	bicge.w	r1, r1, #4
 80053e4:	6021      	strge	r1, [r4, #0]
 80053e6:	b90d      	cbnz	r5, 80053ec <_printf_i+0x110>
 80053e8:	2e00      	cmp	r6, #0
 80053ea:	d04b      	beq.n	8005484 <_printf_i+0x1a8>
 80053ec:	4616      	mov	r6, r2
 80053ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80053f2:	fb03 5711 	mls	r7, r3, r1, r5
 80053f6:	5dc7      	ldrb	r7, [r0, r7]
 80053f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053fc:	462f      	mov	r7, r5
 80053fe:	42bb      	cmp	r3, r7
 8005400:	460d      	mov	r5, r1
 8005402:	d9f4      	bls.n	80053ee <_printf_i+0x112>
 8005404:	2b08      	cmp	r3, #8
 8005406:	d10b      	bne.n	8005420 <_printf_i+0x144>
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	07df      	lsls	r7, r3, #31
 800540c:	d508      	bpl.n	8005420 <_printf_i+0x144>
 800540e:	6923      	ldr	r3, [r4, #16]
 8005410:	6861      	ldr	r1, [r4, #4]
 8005412:	4299      	cmp	r1, r3
 8005414:	bfde      	ittt	le
 8005416:	2330      	movle	r3, #48	@ 0x30
 8005418:	f806 3c01 	strble.w	r3, [r6, #-1]
 800541c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005420:	1b92      	subs	r2, r2, r6
 8005422:	6122      	str	r2, [r4, #16]
 8005424:	f8cd a000 	str.w	sl, [sp]
 8005428:	464b      	mov	r3, r9
 800542a:	aa03      	add	r2, sp, #12
 800542c:	4621      	mov	r1, r4
 800542e:	4640      	mov	r0, r8
 8005430:	f7ff fee6 	bl	8005200 <_printf_common>
 8005434:	3001      	adds	r0, #1
 8005436:	d14a      	bne.n	80054ce <_printf_i+0x1f2>
 8005438:	f04f 30ff 	mov.w	r0, #4294967295
 800543c:	b004      	add	sp, #16
 800543e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	f043 0320 	orr.w	r3, r3, #32
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	4833      	ldr	r0, [pc, #204]	@ (8005518 <_printf_i+0x23c>)
 800544c:	2778      	movs	r7, #120	@ 0x78
 800544e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	6831      	ldr	r1, [r6, #0]
 8005456:	061f      	lsls	r7, r3, #24
 8005458:	f851 5b04 	ldr.w	r5, [r1], #4
 800545c:	d402      	bmi.n	8005464 <_printf_i+0x188>
 800545e:	065f      	lsls	r7, r3, #25
 8005460:	bf48      	it	mi
 8005462:	b2ad      	uxthmi	r5, r5
 8005464:	6031      	str	r1, [r6, #0]
 8005466:	07d9      	lsls	r1, r3, #31
 8005468:	bf44      	itt	mi
 800546a:	f043 0320 	orrmi.w	r3, r3, #32
 800546e:	6023      	strmi	r3, [r4, #0]
 8005470:	b11d      	cbz	r5, 800547a <_printf_i+0x19e>
 8005472:	2310      	movs	r3, #16
 8005474:	e7ac      	b.n	80053d0 <_printf_i+0xf4>
 8005476:	4827      	ldr	r0, [pc, #156]	@ (8005514 <_printf_i+0x238>)
 8005478:	e7e9      	b.n	800544e <_printf_i+0x172>
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	f023 0320 	bic.w	r3, r3, #32
 8005480:	6023      	str	r3, [r4, #0]
 8005482:	e7f6      	b.n	8005472 <_printf_i+0x196>
 8005484:	4616      	mov	r6, r2
 8005486:	e7bd      	b.n	8005404 <_printf_i+0x128>
 8005488:	6833      	ldr	r3, [r6, #0]
 800548a:	6825      	ldr	r5, [r4, #0]
 800548c:	6961      	ldr	r1, [r4, #20]
 800548e:	1d18      	adds	r0, r3, #4
 8005490:	6030      	str	r0, [r6, #0]
 8005492:	062e      	lsls	r6, r5, #24
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	d501      	bpl.n	800549c <_printf_i+0x1c0>
 8005498:	6019      	str	r1, [r3, #0]
 800549a:	e002      	b.n	80054a2 <_printf_i+0x1c6>
 800549c:	0668      	lsls	r0, r5, #25
 800549e:	d5fb      	bpl.n	8005498 <_printf_i+0x1bc>
 80054a0:	8019      	strh	r1, [r3, #0]
 80054a2:	2300      	movs	r3, #0
 80054a4:	6123      	str	r3, [r4, #16]
 80054a6:	4616      	mov	r6, r2
 80054a8:	e7bc      	b.n	8005424 <_printf_i+0x148>
 80054aa:	6833      	ldr	r3, [r6, #0]
 80054ac:	1d1a      	adds	r2, r3, #4
 80054ae:	6032      	str	r2, [r6, #0]
 80054b0:	681e      	ldr	r6, [r3, #0]
 80054b2:	6862      	ldr	r2, [r4, #4]
 80054b4:	2100      	movs	r1, #0
 80054b6:	4630      	mov	r0, r6
 80054b8:	f7fa fe8a 	bl	80001d0 <memchr>
 80054bc:	b108      	cbz	r0, 80054c2 <_printf_i+0x1e6>
 80054be:	1b80      	subs	r0, r0, r6
 80054c0:	6060      	str	r0, [r4, #4]
 80054c2:	6863      	ldr	r3, [r4, #4]
 80054c4:	6123      	str	r3, [r4, #16]
 80054c6:	2300      	movs	r3, #0
 80054c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054cc:	e7aa      	b.n	8005424 <_printf_i+0x148>
 80054ce:	6923      	ldr	r3, [r4, #16]
 80054d0:	4632      	mov	r2, r6
 80054d2:	4649      	mov	r1, r9
 80054d4:	4640      	mov	r0, r8
 80054d6:	47d0      	blx	sl
 80054d8:	3001      	adds	r0, #1
 80054da:	d0ad      	beq.n	8005438 <_printf_i+0x15c>
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	079b      	lsls	r3, r3, #30
 80054e0:	d413      	bmi.n	800550a <_printf_i+0x22e>
 80054e2:	68e0      	ldr	r0, [r4, #12]
 80054e4:	9b03      	ldr	r3, [sp, #12]
 80054e6:	4298      	cmp	r0, r3
 80054e8:	bfb8      	it	lt
 80054ea:	4618      	movlt	r0, r3
 80054ec:	e7a6      	b.n	800543c <_printf_i+0x160>
 80054ee:	2301      	movs	r3, #1
 80054f0:	4632      	mov	r2, r6
 80054f2:	4649      	mov	r1, r9
 80054f4:	4640      	mov	r0, r8
 80054f6:	47d0      	blx	sl
 80054f8:	3001      	adds	r0, #1
 80054fa:	d09d      	beq.n	8005438 <_printf_i+0x15c>
 80054fc:	3501      	adds	r5, #1
 80054fe:	68e3      	ldr	r3, [r4, #12]
 8005500:	9903      	ldr	r1, [sp, #12]
 8005502:	1a5b      	subs	r3, r3, r1
 8005504:	42ab      	cmp	r3, r5
 8005506:	dcf2      	bgt.n	80054ee <_printf_i+0x212>
 8005508:	e7eb      	b.n	80054e2 <_printf_i+0x206>
 800550a:	2500      	movs	r5, #0
 800550c:	f104 0619 	add.w	r6, r4, #25
 8005510:	e7f5      	b.n	80054fe <_printf_i+0x222>
 8005512:	bf00      	nop
 8005514:	0800939a 	.word	0x0800939a
 8005518:	080093ab 	.word	0x080093ab

0800551c <_scanf_float>:
 800551c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005520:	b087      	sub	sp, #28
 8005522:	4617      	mov	r7, r2
 8005524:	9303      	str	r3, [sp, #12]
 8005526:	688b      	ldr	r3, [r1, #8]
 8005528:	1e5a      	subs	r2, r3, #1
 800552a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800552e:	bf81      	itttt	hi
 8005530:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005534:	eb03 0b05 	addhi.w	fp, r3, r5
 8005538:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800553c:	608b      	strhi	r3, [r1, #8]
 800553e:	680b      	ldr	r3, [r1, #0]
 8005540:	460a      	mov	r2, r1
 8005542:	f04f 0500 	mov.w	r5, #0
 8005546:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800554a:	f842 3b1c 	str.w	r3, [r2], #28
 800554e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005552:	4680      	mov	r8, r0
 8005554:	460c      	mov	r4, r1
 8005556:	bf98      	it	ls
 8005558:	f04f 0b00 	movls.w	fp, #0
 800555c:	9201      	str	r2, [sp, #4]
 800555e:	4616      	mov	r6, r2
 8005560:	46aa      	mov	sl, r5
 8005562:	46a9      	mov	r9, r5
 8005564:	9502      	str	r5, [sp, #8]
 8005566:	68a2      	ldr	r2, [r4, #8]
 8005568:	b152      	cbz	r2, 8005580 <_scanf_float+0x64>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b4e      	cmp	r3, #78	@ 0x4e
 8005570:	d864      	bhi.n	800563c <_scanf_float+0x120>
 8005572:	2b40      	cmp	r3, #64	@ 0x40
 8005574:	d83c      	bhi.n	80055f0 <_scanf_float+0xd4>
 8005576:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800557a:	b2c8      	uxtb	r0, r1
 800557c:	280e      	cmp	r0, #14
 800557e:	d93a      	bls.n	80055f6 <_scanf_float+0xda>
 8005580:	f1b9 0f00 	cmp.w	r9, #0
 8005584:	d003      	beq.n	800558e <_scanf_float+0x72>
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800558c:	6023      	str	r3, [r4, #0]
 800558e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005592:	f1ba 0f01 	cmp.w	sl, #1
 8005596:	f200 8117 	bhi.w	80057c8 <_scanf_float+0x2ac>
 800559a:	9b01      	ldr	r3, [sp, #4]
 800559c:	429e      	cmp	r6, r3
 800559e:	f200 8108 	bhi.w	80057b2 <_scanf_float+0x296>
 80055a2:	2001      	movs	r0, #1
 80055a4:	b007      	add	sp, #28
 80055a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055aa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80055ae:	2a0d      	cmp	r2, #13
 80055b0:	d8e6      	bhi.n	8005580 <_scanf_float+0x64>
 80055b2:	a101      	add	r1, pc, #4	@ (adr r1, 80055b8 <_scanf_float+0x9c>)
 80055b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80055b8:	080056ff 	.word	0x080056ff
 80055bc:	08005581 	.word	0x08005581
 80055c0:	08005581 	.word	0x08005581
 80055c4:	08005581 	.word	0x08005581
 80055c8:	0800575f 	.word	0x0800575f
 80055cc:	08005737 	.word	0x08005737
 80055d0:	08005581 	.word	0x08005581
 80055d4:	08005581 	.word	0x08005581
 80055d8:	0800570d 	.word	0x0800570d
 80055dc:	08005581 	.word	0x08005581
 80055e0:	08005581 	.word	0x08005581
 80055e4:	08005581 	.word	0x08005581
 80055e8:	08005581 	.word	0x08005581
 80055ec:	080056c5 	.word	0x080056c5
 80055f0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80055f4:	e7db      	b.n	80055ae <_scanf_float+0x92>
 80055f6:	290e      	cmp	r1, #14
 80055f8:	d8c2      	bhi.n	8005580 <_scanf_float+0x64>
 80055fa:	a001      	add	r0, pc, #4	@ (adr r0, 8005600 <_scanf_float+0xe4>)
 80055fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005600:	080056b5 	.word	0x080056b5
 8005604:	08005581 	.word	0x08005581
 8005608:	080056b5 	.word	0x080056b5
 800560c:	0800574b 	.word	0x0800574b
 8005610:	08005581 	.word	0x08005581
 8005614:	0800565d 	.word	0x0800565d
 8005618:	0800569b 	.word	0x0800569b
 800561c:	0800569b 	.word	0x0800569b
 8005620:	0800569b 	.word	0x0800569b
 8005624:	0800569b 	.word	0x0800569b
 8005628:	0800569b 	.word	0x0800569b
 800562c:	0800569b 	.word	0x0800569b
 8005630:	0800569b 	.word	0x0800569b
 8005634:	0800569b 	.word	0x0800569b
 8005638:	0800569b 	.word	0x0800569b
 800563c:	2b6e      	cmp	r3, #110	@ 0x6e
 800563e:	d809      	bhi.n	8005654 <_scanf_float+0x138>
 8005640:	2b60      	cmp	r3, #96	@ 0x60
 8005642:	d8b2      	bhi.n	80055aa <_scanf_float+0x8e>
 8005644:	2b54      	cmp	r3, #84	@ 0x54
 8005646:	d07b      	beq.n	8005740 <_scanf_float+0x224>
 8005648:	2b59      	cmp	r3, #89	@ 0x59
 800564a:	d199      	bne.n	8005580 <_scanf_float+0x64>
 800564c:	2d07      	cmp	r5, #7
 800564e:	d197      	bne.n	8005580 <_scanf_float+0x64>
 8005650:	2508      	movs	r5, #8
 8005652:	e02c      	b.n	80056ae <_scanf_float+0x192>
 8005654:	2b74      	cmp	r3, #116	@ 0x74
 8005656:	d073      	beq.n	8005740 <_scanf_float+0x224>
 8005658:	2b79      	cmp	r3, #121	@ 0x79
 800565a:	e7f6      	b.n	800564a <_scanf_float+0x12e>
 800565c:	6821      	ldr	r1, [r4, #0]
 800565e:	05c8      	lsls	r0, r1, #23
 8005660:	d51b      	bpl.n	800569a <_scanf_float+0x17e>
 8005662:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005666:	6021      	str	r1, [r4, #0]
 8005668:	f109 0901 	add.w	r9, r9, #1
 800566c:	f1bb 0f00 	cmp.w	fp, #0
 8005670:	d003      	beq.n	800567a <_scanf_float+0x15e>
 8005672:	3201      	adds	r2, #1
 8005674:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005678:	60a2      	str	r2, [r4, #8]
 800567a:	68a3      	ldr	r3, [r4, #8]
 800567c:	3b01      	subs	r3, #1
 800567e:	60a3      	str	r3, [r4, #8]
 8005680:	6923      	ldr	r3, [r4, #16]
 8005682:	3301      	adds	r3, #1
 8005684:	6123      	str	r3, [r4, #16]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	3b01      	subs	r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	607b      	str	r3, [r7, #4]
 800568e:	f340 8087 	ble.w	80057a0 <_scanf_float+0x284>
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	3301      	adds	r3, #1
 8005696:	603b      	str	r3, [r7, #0]
 8005698:	e765      	b.n	8005566 <_scanf_float+0x4a>
 800569a:	eb1a 0105 	adds.w	r1, sl, r5
 800569e:	f47f af6f 	bne.w	8005580 <_scanf_float+0x64>
 80056a2:	6822      	ldr	r2, [r4, #0]
 80056a4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80056a8:	6022      	str	r2, [r4, #0]
 80056aa:	460d      	mov	r5, r1
 80056ac:	468a      	mov	sl, r1
 80056ae:	f806 3b01 	strb.w	r3, [r6], #1
 80056b2:	e7e2      	b.n	800567a <_scanf_float+0x15e>
 80056b4:	6822      	ldr	r2, [r4, #0]
 80056b6:	0610      	lsls	r0, r2, #24
 80056b8:	f57f af62 	bpl.w	8005580 <_scanf_float+0x64>
 80056bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056c0:	6022      	str	r2, [r4, #0]
 80056c2:	e7f4      	b.n	80056ae <_scanf_float+0x192>
 80056c4:	f1ba 0f00 	cmp.w	sl, #0
 80056c8:	d10e      	bne.n	80056e8 <_scanf_float+0x1cc>
 80056ca:	f1b9 0f00 	cmp.w	r9, #0
 80056ce:	d10e      	bne.n	80056ee <_scanf_float+0x1d2>
 80056d0:	6822      	ldr	r2, [r4, #0]
 80056d2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80056d6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80056da:	d108      	bne.n	80056ee <_scanf_float+0x1d2>
 80056dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80056e0:	6022      	str	r2, [r4, #0]
 80056e2:	f04f 0a01 	mov.w	sl, #1
 80056e6:	e7e2      	b.n	80056ae <_scanf_float+0x192>
 80056e8:	f1ba 0f02 	cmp.w	sl, #2
 80056ec:	d055      	beq.n	800579a <_scanf_float+0x27e>
 80056ee:	2d01      	cmp	r5, #1
 80056f0:	d002      	beq.n	80056f8 <_scanf_float+0x1dc>
 80056f2:	2d04      	cmp	r5, #4
 80056f4:	f47f af44 	bne.w	8005580 <_scanf_float+0x64>
 80056f8:	3501      	adds	r5, #1
 80056fa:	b2ed      	uxtb	r5, r5
 80056fc:	e7d7      	b.n	80056ae <_scanf_float+0x192>
 80056fe:	f1ba 0f01 	cmp.w	sl, #1
 8005702:	f47f af3d 	bne.w	8005580 <_scanf_float+0x64>
 8005706:	f04f 0a02 	mov.w	sl, #2
 800570a:	e7d0      	b.n	80056ae <_scanf_float+0x192>
 800570c:	b97d      	cbnz	r5, 800572e <_scanf_float+0x212>
 800570e:	f1b9 0f00 	cmp.w	r9, #0
 8005712:	f47f af38 	bne.w	8005586 <_scanf_float+0x6a>
 8005716:	6822      	ldr	r2, [r4, #0]
 8005718:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800571c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005720:	f040 8108 	bne.w	8005934 <_scanf_float+0x418>
 8005724:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005728:	6022      	str	r2, [r4, #0]
 800572a:	2501      	movs	r5, #1
 800572c:	e7bf      	b.n	80056ae <_scanf_float+0x192>
 800572e:	2d03      	cmp	r5, #3
 8005730:	d0e2      	beq.n	80056f8 <_scanf_float+0x1dc>
 8005732:	2d05      	cmp	r5, #5
 8005734:	e7de      	b.n	80056f4 <_scanf_float+0x1d8>
 8005736:	2d02      	cmp	r5, #2
 8005738:	f47f af22 	bne.w	8005580 <_scanf_float+0x64>
 800573c:	2503      	movs	r5, #3
 800573e:	e7b6      	b.n	80056ae <_scanf_float+0x192>
 8005740:	2d06      	cmp	r5, #6
 8005742:	f47f af1d 	bne.w	8005580 <_scanf_float+0x64>
 8005746:	2507      	movs	r5, #7
 8005748:	e7b1      	b.n	80056ae <_scanf_float+0x192>
 800574a:	6822      	ldr	r2, [r4, #0]
 800574c:	0591      	lsls	r1, r2, #22
 800574e:	f57f af17 	bpl.w	8005580 <_scanf_float+0x64>
 8005752:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005756:	6022      	str	r2, [r4, #0]
 8005758:	f8cd 9008 	str.w	r9, [sp, #8]
 800575c:	e7a7      	b.n	80056ae <_scanf_float+0x192>
 800575e:	6822      	ldr	r2, [r4, #0]
 8005760:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005764:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005768:	d006      	beq.n	8005778 <_scanf_float+0x25c>
 800576a:	0550      	lsls	r0, r2, #21
 800576c:	f57f af08 	bpl.w	8005580 <_scanf_float+0x64>
 8005770:	f1b9 0f00 	cmp.w	r9, #0
 8005774:	f000 80de 	beq.w	8005934 <_scanf_float+0x418>
 8005778:	0591      	lsls	r1, r2, #22
 800577a:	bf58      	it	pl
 800577c:	9902      	ldrpl	r1, [sp, #8]
 800577e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005782:	bf58      	it	pl
 8005784:	eba9 0101 	subpl.w	r1, r9, r1
 8005788:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800578c:	bf58      	it	pl
 800578e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005792:	6022      	str	r2, [r4, #0]
 8005794:	f04f 0900 	mov.w	r9, #0
 8005798:	e789      	b.n	80056ae <_scanf_float+0x192>
 800579a:	f04f 0a03 	mov.w	sl, #3
 800579e:	e786      	b.n	80056ae <_scanf_float+0x192>
 80057a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80057a4:	4639      	mov	r1, r7
 80057a6:	4640      	mov	r0, r8
 80057a8:	4798      	blx	r3
 80057aa:	2800      	cmp	r0, #0
 80057ac:	f43f aedb 	beq.w	8005566 <_scanf_float+0x4a>
 80057b0:	e6e6      	b.n	8005580 <_scanf_float+0x64>
 80057b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80057b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80057ba:	463a      	mov	r2, r7
 80057bc:	4640      	mov	r0, r8
 80057be:	4798      	blx	r3
 80057c0:	6923      	ldr	r3, [r4, #16]
 80057c2:	3b01      	subs	r3, #1
 80057c4:	6123      	str	r3, [r4, #16]
 80057c6:	e6e8      	b.n	800559a <_scanf_float+0x7e>
 80057c8:	1e6b      	subs	r3, r5, #1
 80057ca:	2b06      	cmp	r3, #6
 80057cc:	d824      	bhi.n	8005818 <_scanf_float+0x2fc>
 80057ce:	2d02      	cmp	r5, #2
 80057d0:	d836      	bhi.n	8005840 <_scanf_float+0x324>
 80057d2:	9b01      	ldr	r3, [sp, #4]
 80057d4:	429e      	cmp	r6, r3
 80057d6:	f67f aee4 	bls.w	80055a2 <_scanf_float+0x86>
 80057da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80057de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80057e2:	463a      	mov	r2, r7
 80057e4:	4640      	mov	r0, r8
 80057e6:	4798      	blx	r3
 80057e8:	6923      	ldr	r3, [r4, #16]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	6123      	str	r3, [r4, #16]
 80057ee:	e7f0      	b.n	80057d2 <_scanf_float+0x2b6>
 80057f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80057f4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80057f8:	463a      	mov	r2, r7
 80057fa:	4640      	mov	r0, r8
 80057fc:	4798      	blx	r3
 80057fe:	6923      	ldr	r3, [r4, #16]
 8005800:	3b01      	subs	r3, #1
 8005802:	6123      	str	r3, [r4, #16]
 8005804:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005808:	fa5f fa8a 	uxtb.w	sl, sl
 800580c:	f1ba 0f02 	cmp.w	sl, #2
 8005810:	d1ee      	bne.n	80057f0 <_scanf_float+0x2d4>
 8005812:	3d03      	subs	r5, #3
 8005814:	b2ed      	uxtb	r5, r5
 8005816:	1b76      	subs	r6, r6, r5
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	05da      	lsls	r2, r3, #23
 800581c:	d530      	bpl.n	8005880 <_scanf_float+0x364>
 800581e:	055b      	lsls	r3, r3, #21
 8005820:	d511      	bpl.n	8005846 <_scanf_float+0x32a>
 8005822:	9b01      	ldr	r3, [sp, #4]
 8005824:	429e      	cmp	r6, r3
 8005826:	f67f aebc 	bls.w	80055a2 <_scanf_float+0x86>
 800582a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800582e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005832:	463a      	mov	r2, r7
 8005834:	4640      	mov	r0, r8
 8005836:	4798      	blx	r3
 8005838:	6923      	ldr	r3, [r4, #16]
 800583a:	3b01      	subs	r3, #1
 800583c:	6123      	str	r3, [r4, #16]
 800583e:	e7f0      	b.n	8005822 <_scanf_float+0x306>
 8005840:	46aa      	mov	sl, r5
 8005842:	46b3      	mov	fp, r6
 8005844:	e7de      	b.n	8005804 <_scanf_float+0x2e8>
 8005846:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800584a:	6923      	ldr	r3, [r4, #16]
 800584c:	2965      	cmp	r1, #101	@ 0x65
 800584e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005852:	f106 35ff 	add.w	r5, r6, #4294967295
 8005856:	6123      	str	r3, [r4, #16]
 8005858:	d00c      	beq.n	8005874 <_scanf_float+0x358>
 800585a:	2945      	cmp	r1, #69	@ 0x45
 800585c:	d00a      	beq.n	8005874 <_scanf_float+0x358>
 800585e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005862:	463a      	mov	r2, r7
 8005864:	4640      	mov	r0, r8
 8005866:	4798      	blx	r3
 8005868:	6923      	ldr	r3, [r4, #16]
 800586a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800586e:	3b01      	subs	r3, #1
 8005870:	1eb5      	subs	r5, r6, #2
 8005872:	6123      	str	r3, [r4, #16]
 8005874:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005878:	463a      	mov	r2, r7
 800587a:	4640      	mov	r0, r8
 800587c:	4798      	blx	r3
 800587e:	462e      	mov	r6, r5
 8005880:	6822      	ldr	r2, [r4, #0]
 8005882:	f012 0210 	ands.w	r2, r2, #16
 8005886:	d001      	beq.n	800588c <_scanf_float+0x370>
 8005888:	2000      	movs	r0, #0
 800588a:	e68b      	b.n	80055a4 <_scanf_float+0x88>
 800588c:	7032      	strb	r2, [r6, #0]
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005898:	d11c      	bne.n	80058d4 <_scanf_float+0x3b8>
 800589a:	9b02      	ldr	r3, [sp, #8]
 800589c:	454b      	cmp	r3, r9
 800589e:	eba3 0209 	sub.w	r2, r3, r9
 80058a2:	d123      	bne.n	80058ec <_scanf_float+0x3d0>
 80058a4:	9901      	ldr	r1, [sp, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	4640      	mov	r0, r8
 80058aa:	f002 fbf9 	bl	80080a0 <_strtod_r>
 80058ae:	9b03      	ldr	r3, [sp, #12]
 80058b0:	6821      	ldr	r1, [r4, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f011 0f02 	tst.w	r1, #2
 80058b8:	ec57 6b10 	vmov	r6, r7, d0
 80058bc:	f103 0204 	add.w	r2, r3, #4
 80058c0:	d01f      	beq.n	8005902 <_scanf_float+0x3e6>
 80058c2:	9903      	ldr	r1, [sp, #12]
 80058c4:	600a      	str	r2, [r1, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	e9c3 6700 	strd	r6, r7, [r3]
 80058cc:	68e3      	ldr	r3, [r4, #12]
 80058ce:	3301      	adds	r3, #1
 80058d0:	60e3      	str	r3, [r4, #12]
 80058d2:	e7d9      	b.n	8005888 <_scanf_float+0x36c>
 80058d4:	9b04      	ldr	r3, [sp, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0e4      	beq.n	80058a4 <_scanf_float+0x388>
 80058da:	9905      	ldr	r1, [sp, #20]
 80058dc:	230a      	movs	r3, #10
 80058de:	3101      	adds	r1, #1
 80058e0:	4640      	mov	r0, r8
 80058e2:	f002 fc5d 	bl	80081a0 <_strtol_r>
 80058e6:	9b04      	ldr	r3, [sp, #16]
 80058e8:	9e05      	ldr	r6, [sp, #20]
 80058ea:	1ac2      	subs	r2, r0, r3
 80058ec:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80058f0:	429e      	cmp	r6, r3
 80058f2:	bf28      	it	cs
 80058f4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80058f8:	4910      	ldr	r1, [pc, #64]	@ (800593c <_scanf_float+0x420>)
 80058fa:	4630      	mov	r0, r6
 80058fc:	f000 f8e4 	bl	8005ac8 <siprintf>
 8005900:	e7d0      	b.n	80058a4 <_scanf_float+0x388>
 8005902:	f011 0f04 	tst.w	r1, #4
 8005906:	9903      	ldr	r1, [sp, #12]
 8005908:	600a      	str	r2, [r1, #0]
 800590a:	d1dc      	bne.n	80058c6 <_scanf_float+0x3aa>
 800590c:	681d      	ldr	r5, [r3, #0]
 800590e:	4632      	mov	r2, r6
 8005910:	463b      	mov	r3, r7
 8005912:	4630      	mov	r0, r6
 8005914:	4639      	mov	r1, r7
 8005916:	f7fb f909 	bl	8000b2c <__aeabi_dcmpun>
 800591a:	b128      	cbz	r0, 8005928 <_scanf_float+0x40c>
 800591c:	4808      	ldr	r0, [pc, #32]	@ (8005940 <_scanf_float+0x424>)
 800591e:	f000 f9b7 	bl	8005c90 <nanf>
 8005922:	ed85 0a00 	vstr	s0, [r5]
 8005926:	e7d1      	b.n	80058cc <_scanf_float+0x3b0>
 8005928:	4630      	mov	r0, r6
 800592a:	4639      	mov	r1, r7
 800592c:	f7fb f95c 	bl	8000be8 <__aeabi_d2f>
 8005930:	6028      	str	r0, [r5, #0]
 8005932:	e7cb      	b.n	80058cc <_scanf_float+0x3b0>
 8005934:	f04f 0900 	mov.w	r9, #0
 8005938:	e629      	b.n	800558e <_scanf_float+0x72>
 800593a:	bf00      	nop
 800593c:	080093bc 	.word	0x080093bc
 8005940:	08009755 	.word	0x08009755

08005944 <std>:
 8005944:	2300      	movs	r3, #0
 8005946:	b510      	push	{r4, lr}
 8005948:	4604      	mov	r4, r0
 800594a:	e9c0 3300 	strd	r3, r3, [r0]
 800594e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005952:	6083      	str	r3, [r0, #8]
 8005954:	8181      	strh	r1, [r0, #12]
 8005956:	6643      	str	r3, [r0, #100]	@ 0x64
 8005958:	81c2      	strh	r2, [r0, #14]
 800595a:	6183      	str	r3, [r0, #24]
 800595c:	4619      	mov	r1, r3
 800595e:	2208      	movs	r2, #8
 8005960:	305c      	adds	r0, #92	@ 0x5c
 8005962:	f000 f914 	bl	8005b8e <memset>
 8005966:	4b0d      	ldr	r3, [pc, #52]	@ (800599c <std+0x58>)
 8005968:	6263      	str	r3, [r4, #36]	@ 0x24
 800596a:	4b0d      	ldr	r3, [pc, #52]	@ (80059a0 <std+0x5c>)
 800596c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800596e:	4b0d      	ldr	r3, [pc, #52]	@ (80059a4 <std+0x60>)
 8005970:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005972:	4b0d      	ldr	r3, [pc, #52]	@ (80059a8 <std+0x64>)
 8005974:	6323      	str	r3, [r4, #48]	@ 0x30
 8005976:	4b0d      	ldr	r3, [pc, #52]	@ (80059ac <std+0x68>)
 8005978:	6224      	str	r4, [r4, #32]
 800597a:	429c      	cmp	r4, r3
 800597c:	d006      	beq.n	800598c <std+0x48>
 800597e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005982:	4294      	cmp	r4, r2
 8005984:	d002      	beq.n	800598c <std+0x48>
 8005986:	33d0      	adds	r3, #208	@ 0xd0
 8005988:	429c      	cmp	r4, r3
 800598a:	d105      	bne.n	8005998 <std+0x54>
 800598c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005994:	f000 b978 	b.w	8005c88 <__retarget_lock_init_recursive>
 8005998:	bd10      	pop	{r4, pc}
 800599a:	bf00      	nop
 800599c:	08005b09 	.word	0x08005b09
 80059a0:	08005b2b 	.word	0x08005b2b
 80059a4:	08005b63 	.word	0x08005b63
 80059a8:	08005b87 	.word	0x08005b87
 80059ac:	200007c8 	.word	0x200007c8

080059b0 <stdio_exit_handler>:
 80059b0:	4a02      	ldr	r2, [pc, #8]	@ (80059bc <stdio_exit_handler+0xc>)
 80059b2:	4903      	ldr	r1, [pc, #12]	@ (80059c0 <stdio_exit_handler+0x10>)
 80059b4:	4803      	ldr	r0, [pc, #12]	@ (80059c4 <stdio_exit_handler+0x14>)
 80059b6:	f000 b869 	b.w	8005a8c <_fwalk_sglue>
 80059ba:	bf00      	nop
 80059bc:	2000019c 	.word	0x2000019c
 80059c0:	0800855d 	.word	0x0800855d
 80059c4:	200001ac 	.word	0x200001ac

080059c8 <cleanup_stdio>:
 80059c8:	6841      	ldr	r1, [r0, #4]
 80059ca:	4b0c      	ldr	r3, [pc, #48]	@ (80059fc <cleanup_stdio+0x34>)
 80059cc:	4299      	cmp	r1, r3
 80059ce:	b510      	push	{r4, lr}
 80059d0:	4604      	mov	r4, r0
 80059d2:	d001      	beq.n	80059d8 <cleanup_stdio+0x10>
 80059d4:	f002 fdc2 	bl	800855c <_fflush_r>
 80059d8:	68a1      	ldr	r1, [r4, #8]
 80059da:	4b09      	ldr	r3, [pc, #36]	@ (8005a00 <cleanup_stdio+0x38>)
 80059dc:	4299      	cmp	r1, r3
 80059de:	d002      	beq.n	80059e6 <cleanup_stdio+0x1e>
 80059e0:	4620      	mov	r0, r4
 80059e2:	f002 fdbb 	bl	800855c <_fflush_r>
 80059e6:	68e1      	ldr	r1, [r4, #12]
 80059e8:	4b06      	ldr	r3, [pc, #24]	@ (8005a04 <cleanup_stdio+0x3c>)
 80059ea:	4299      	cmp	r1, r3
 80059ec:	d004      	beq.n	80059f8 <cleanup_stdio+0x30>
 80059ee:	4620      	mov	r0, r4
 80059f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059f4:	f002 bdb2 	b.w	800855c <_fflush_r>
 80059f8:	bd10      	pop	{r4, pc}
 80059fa:	bf00      	nop
 80059fc:	200007c8 	.word	0x200007c8
 8005a00:	20000830 	.word	0x20000830
 8005a04:	20000898 	.word	0x20000898

08005a08 <global_stdio_init.part.0>:
 8005a08:	b510      	push	{r4, lr}
 8005a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a38 <global_stdio_init.part.0+0x30>)
 8005a0c:	4c0b      	ldr	r4, [pc, #44]	@ (8005a3c <global_stdio_init.part.0+0x34>)
 8005a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8005a40 <global_stdio_init.part.0+0x38>)
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	4620      	mov	r0, r4
 8005a14:	2200      	movs	r2, #0
 8005a16:	2104      	movs	r1, #4
 8005a18:	f7ff ff94 	bl	8005944 <std>
 8005a1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a20:	2201      	movs	r2, #1
 8005a22:	2109      	movs	r1, #9
 8005a24:	f7ff ff8e 	bl	8005944 <std>
 8005a28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a32:	2112      	movs	r1, #18
 8005a34:	f7ff bf86 	b.w	8005944 <std>
 8005a38:	20000900 	.word	0x20000900
 8005a3c:	200007c8 	.word	0x200007c8
 8005a40:	080059b1 	.word	0x080059b1

08005a44 <__sfp_lock_acquire>:
 8005a44:	4801      	ldr	r0, [pc, #4]	@ (8005a4c <__sfp_lock_acquire+0x8>)
 8005a46:	f000 b920 	b.w	8005c8a <__retarget_lock_acquire_recursive>
 8005a4a:	bf00      	nop
 8005a4c:	20000909 	.word	0x20000909

08005a50 <__sfp_lock_release>:
 8005a50:	4801      	ldr	r0, [pc, #4]	@ (8005a58 <__sfp_lock_release+0x8>)
 8005a52:	f000 b91b 	b.w	8005c8c <__retarget_lock_release_recursive>
 8005a56:	bf00      	nop
 8005a58:	20000909 	.word	0x20000909

08005a5c <__sinit>:
 8005a5c:	b510      	push	{r4, lr}
 8005a5e:	4604      	mov	r4, r0
 8005a60:	f7ff fff0 	bl	8005a44 <__sfp_lock_acquire>
 8005a64:	6a23      	ldr	r3, [r4, #32]
 8005a66:	b11b      	cbz	r3, 8005a70 <__sinit+0x14>
 8005a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a6c:	f7ff bff0 	b.w	8005a50 <__sfp_lock_release>
 8005a70:	4b04      	ldr	r3, [pc, #16]	@ (8005a84 <__sinit+0x28>)
 8005a72:	6223      	str	r3, [r4, #32]
 8005a74:	4b04      	ldr	r3, [pc, #16]	@ (8005a88 <__sinit+0x2c>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1f5      	bne.n	8005a68 <__sinit+0xc>
 8005a7c:	f7ff ffc4 	bl	8005a08 <global_stdio_init.part.0>
 8005a80:	e7f2      	b.n	8005a68 <__sinit+0xc>
 8005a82:	bf00      	nop
 8005a84:	080059c9 	.word	0x080059c9
 8005a88:	20000900 	.word	0x20000900

08005a8c <_fwalk_sglue>:
 8005a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a90:	4607      	mov	r7, r0
 8005a92:	4688      	mov	r8, r1
 8005a94:	4614      	mov	r4, r2
 8005a96:	2600      	movs	r6, #0
 8005a98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a9c:	f1b9 0901 	subs.w	r9, r9, #1
 8005aa0:	d505      	bpl.n	8005aae <_fwalk_sglue+0x22>
 8005aa2:	6824      	ldr	r4, [r4, #0]
 8005aa4:	2c00      	cmp	r4, #0
 8005aa6:	d1f7      	bne.n	8005a98 <_fwalk_sglue+0xc>
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aae:	89ab      	ldrh	r3, [r5, #12]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d907      	bls.n	8005ac4 <_fwalk_sglue+0x38>
 8005ab4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	d003      	beq.n	8005ac4 <_fwalk_sglue+0x38>
 8005abc:	4629      	mov	r1, r5
 8005abe:	4638      	mov	r0, r7
 8005ac0:	47c0      	blx	r8
 8005ac2:	4306      	orrs	r6, r0
 8005ac4:	3568      	adds	r5, #104	@ 0x68
 8005ac6:	e7e9      	b.n	8005a9c <_fwalk_sglue+0x10>

08005ac8 <siprintf>:
 8005ac8:	b40e      	push	{r1, r2, r3}
 8005aca:	b500      	push	{lr}
 8005acc:	b09c      	sub	sp, #112	@ 0x70
 8005ace:	ab1d      	add	r3, sp, #116	@ 0x74
 8005ad0:	9002      	str	r0, [sp, #8]
 8005ad2:	9006      	str	r0, [sp, #24]
 8005ad4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005ad8:	4809      	ldr	r0, [pc, #36]	@ (8005b00 <siprintf+0x38>)
 8005ada:	9107      	str	r1, [sp, #28]
 8005adc:	9104      	str	r1, [sp, #16]
 8005ade:	4909      	ldr	r1, [pc, #36]	@ (8005b04 <siprintf+0x3c>)
 8005ae0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ae4:	9105      	str	r1, [sp, #20]
 8005ae6:	6800      	ldr	r0, [r0, #0]
 8005ae8:	9301      	str	r3, [sp, #4]
 8005aea:	a902      	add	r1, sp, #8
 8005aec:	f002 fbb6 	bl	800825c <_svfiprintf_r>
 8005af0:	9b02      	ldr	r3, [sp, #8]
 8005af2:	2200      	movs	r2, #0
 8005af4:	701a      	strb	r2, [r3, #0]
 8005af6:	b01c      	add	sp, #112	@ 0x70
 8005af8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005afc:	b003      	add	sp, #12
 8005afe:	4770      	bx	lr
 8005b00:	200001a8 	.word	0x200001a8
 8005b04:	ffff0208 	.word	0xffff0208

08005b08 <__sread>:
 8005b08:	b510      	push	{r4, lr}
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b10:	f000 f86c 	bl	8005bec <_read_r>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	bfab      	itete	ge
 8005b18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b1a:	89a3      	ldrhlt	r3, [r4, #12]
 8005b1c:	181b      	addge	r3, r3, r0
 8005b1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b22:	bfac      	ite	ge
 8005b24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b26:	81a3      	strhlt	r3, [r4, #12]
 8005b28:	bd10      	pop	{r4, pc}

08005b2a <__swrite>:
 8005b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b2e:	461f      	mov	r7, r3
 8005b30:	898b      	ldrh	r3, [r1, #12]
 8005b32:	05db      	lsls	r3, r3, #23
 8005b34:	4605      	mov	r5, r0
 8005b36:	460c      	mov	r4, r1
 8005b38:	4616      	mov	r6, r2
 8005b3a:	d505      	bpl.n	8005b48 <__swrite+0x1e>
 8005b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b40:	2302      	movs	r3, #2
 8005b42:	2200      	movs	r2, #0
 8005b44:	f000 f840 	bl	8005bc8 <_lseek_r>
 8005b48:	89a3      	ldrh	r3, [r4, #12]
 8005b4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b52:	81a3      	strh	r3, [r4, #12]
 8005b54:	4632      	mov	r2, r6
 8005b56:	463b      	mov	r3, r7
 8005b58:	4628      	mov	r0, r5
 8005b5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b5e:	f000 b857 	b.w	8005c10 <_write_r>

08005b62 <__sseek>:
 8005b62:	b510      	push	{r4, lr}
 8005b64:	460c      	mov	r4, r1
 8005b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b6a:	f000 f82d 	bl	8005bc8 <_lseek_r>
 8005b6e:	1c43      	adds	r3, r0, #1
 8005b70:	89a3      	ldrh	r3, [r4, #12]
 8005b72:	bf15      	itete	ne
 8005b74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005b7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b7e:	81a3      	strheq	r3, [r4, #12]
 8005b80:	bf18      	it	ne
 8005b82:	81a3      	strhne	r3, [r4, #12]
 8005b84:	bd10      	pop	{r4, pc}

08005b86 <__sclose>:
 8005b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b8a:	f000 b80d 	b.w	8005ba8 <_close_r>

08005b8e <memset>:
 8005b8e:	4402      	add	r2, r0
 8005b90:	4603      	mov	r3, r0
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d100      	bne.n	8005b98 <memset+0xa>
 8005b96:	4770      	bx	lr
 8005b98:	f803 1b01 	strb.w	r1, [r3], #1
 8005b9c:	e7f9      	b.n	8005b92 <memset+0x4>
	...

08005ba0 <_localeconv_r>:
 8005ba0:	4800      	ldr	r0, [pc, #0]	@ (8005ba4 <_localeconv_r+0x4>)
 8005ba2:	4770      	bx	lr
 8005ba4:	200002e8 	.word	0x200002e8

08005ba8 <_close_r>:
 8005ba8:	b538      	push	{r3, r4, r5, lr}
 8005baa:	4d06      	ldr	r5, [pc, #24]	@ (8005bc4 <_close_r+0x1c>)
 8005bac:	2300      	movs	r3, #0
 8005bae:	4604      	mov	r4, r0
 8005bb0:	4608      	mov	r0, r1
 8005bb2:	602b      	str	r3, [r5, #0]
 8005bb4:	f7fb ff55 	bl	8001a62 <_close>
 8005bb8:	1c43      	adds	r3, r0, #1
 8005bba:	d102      	bne.n	8005bc2 <_close_r+0x1a>
 8005bbc:	682b      	ldr	r3, [r5, #0]
 8005bbe:	b103      	cbz	r3, 8005bc2 <_close_r+0x1a>
 8005bc0:	6023      	str	r3, [r4, #0]
 8005bc2:	bd38      	pop	{r3, r4, r5, pc}
 8005bc4:	20000904 	.word	0x20000904

08005bc8 <_lseek_r>:
 8005bc8:	b538      	push	{r3, r4, r5, lr}
 8005bca:	4d07      	ldr	r5, [pc, #28]	@ (8005be8 <_lseek_r+0x20>)
 8005bcc:	4604      	mov	r4, r0
 8005bce:	4608      	mov	r0, r1
 8005bd0:	4611      	mov	r1, r2
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	602a      	str	r2, [r5, #0]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	f7fb ff6a 	bl	8001ab0 <_lseek>
 8005bdc:	1c43      	adds	r3, r0, #1
 8005bde:	d102      	bne.n	8005be6 <_lseek_r+0x1e>
 8005be0:	682b      	ldr	r3, [r5, #0]
 8005be2:	b103      	cbz	r3, 8005be6 <_lseek_r+0x1e>
 8005be4:	6023      	str	r3, [r4, #0]
 8005be6:	bd38      	pop	{r3, r4, r5, pc}
 8005be8:	20000904 	.word	0x20000904

08005bec <_read_r>:
 8005bec:	b538      	push	{r3, r4, r5, lr}
 8005bee:	4d07      	ldr	r5, [pc, #28]	@ (8005c0c <_read_r+0x20>)
 8005bf0:	4604      	mov	r4, r0
 8005bf2:	4608      	mov	r0, r1
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	602a      	str	r2, [r5, #0]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f7fb fef8 	bl	80019f0 <_read>
 8005c00:	1c43      	adds	r3, r0, #1
 8005c02:	d102      	bne.n	8005c0a <_read_r+0x1e>
 8005c04:	682b      	ldr	r3, [r5, #0]
 8005c06:	b103      	cbz	r3, 8005c0a <_read_r+0x1e>
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	bd38      	pop	{r3, r4, r5, pc}
 8005c0c:	20000904 	.word	0x20000904

08005c10 <_write_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	4d07      	ldr	r5, [pc, #28]	@ (8005c30 <_write_r+0x20>)
 8005c14:	4604      	mov	r4, r0
 8005c16:	4608      	mov	r0, r1
 8005c18:	4611      	mov	r1, r2
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	602a      	str	r2, [r5, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	f7fb ff03 	bl	8001a2a <_write>
 8005c24:	1c43      	adds	r3, r0, #1
 8005c26:	d102      	bne.n	8005c2e <_write_r+0x1e>
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	b103      	cbz	r3, 8005c2e <_write_r+0x1e>
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}
 8005c30:	20000904 	.word	0x20000904

08005c34 <__errno>:
 8005c34:	4b01      	ldr	r3, [pc, #4]	@ (8005c3c <__errno+0x8>)
 8005c36:	6818      	ldr	r0, [r3, #0]
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	200001a8 	.word	0x200001a8

08005c40 <__libc_init_array>:
 8005c40:	b570      	push	{r4, r5, r6, lr}
 8005c42:	4d0d      	ldr	r5, [pc, #52]	@ (8005c78 <__libc_init_array+0x38>)
 8005c44:	4c0d      	ldr	r4, [pc, #52]	@ (8005c7c <__libc_init_array+0x3c>)
 8005c46:	1b64      	subs	r4, r4, r5
 8005c48:	10a4      	asrs	r4, r4, #2
 8005c4a:	2600      	movs	r6, #0
 8005c4c:	42a6      	cmp	r6, r4
 8005c4e:	d109      	bne.n	8005c64 <__libc_init_array+0x24>
 8005c50:	4d0b      	ldr	r5, [pc, #44]	@ (8005c80 <__libc_init_array+0x40>)
 8005c52:	4c0c      	ldr	r4, [pc, #48]	@ (8005c84 <__libc_init_array+0x44>)
 8005c54:	f003 fb72 	bl	800933c <_init>
 8005c58:	1b64      	subs	r4, r4, r5
 8005c5a:	10a4      	asrs	r4, r4, #2
 8005c5c:	2600      	movs	r6, #0
 8005c5e:	42a6      	cmp	r6, r4
 8005c60:	d105      	bne.n	8005c6e <__libc_init_array+0x2e>
 8005c62:	bd70      	pop	{r4, r5, r6, pc}
 8005c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c68:	4798      	blx	r3
 8005c6a:	3601      	adds	r6, #1
 8005c6c:	e7ee      	b.n	8005c4c <__libc_init_array+0xc>
 8005c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c72:	4798      	blx	r3
 8005c74:	3601      	adds	r6, #1
 8005c76:	e7f2      	b.n	8005c5e <__libc_init_array+0x1e>
 8005c78:	080097c0 	.word	0x080097c0
 8005c7c:	080097c0 	.word	0x080097c0
 8005c80:	080097c0 	.word	0x080097c0
 8005c84:	080097c4 	.word	0x080097c4

08005c88 <__retarget_lock_init_recursive>:
 8005c88:	4770      	bx	lr

08005c8a <__retarget_lock_acquire_recursive>:
 8005c8a:	4770      	bx	lr

08005c8c <__retarget_lock_release_recursive>:
 8005c8c:	4770      	bx	lr
	...

08005c90 <nanf>:
 8005c90:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005c98 <nanf+0x8>
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	7fc00000 	.word	0x7fc00000

08005c9c <quorem>:
 8005c9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca0:	6903      	ldr	r3, [r0, #16]
 8005ca2:	690c      	ldr	r4, [r1, #16]
 8005ca4:	42a3      	cmp	r3, r4
 8005ca6:	4607      	mov	r7, r0
 8005ca8:	db7e      	blt.n	8005da8 <quorem+0x10c>
 8005caa:	3c01      	subs	r4, #1
 8005cac:	f101 0814 	add.w	r8, r1, #20
 8005cb0:	00a3      	lsls	r3, r4, #2
 8005cb2:	f100 0514 	add.w	r5, r0, #20
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cbc:	9301      	str	r3, [sp, #4]
 8005cbe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005cce:	fbb2 f6f3 	udiv	r6, r2, r3
 8005cd2:	d32e      	bcc.n	8005d32 <quorem+0x96>
 8005cd4:	f04f 0a00 	mov.w	sl, #0
 8005cd8:	46c4      	mov	ip, r8
 8005cda:	46ae      	mov	lr, r5
 8005cdc:	46d3      	mov	fp, sl
 8005cde:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005ce2:	b298      	uxth	r0, r3
 8005ce4:	fb06 a000 	mla	r0, r6, r0, sl
 8005ce8:	0c02      	lsrs	r2, r0, #16
 8005cea:	0c1b      	lsrs	r3, r3, #16
 8005cec:	fb06 2303 	mla	r3, r6, r3, r2
 8005cf0:	f8de 2000 	ldr.w	r2, [lr]
 8005cf4:	b280      	uxth	r0, r0
 8005cf6:	b292      	uxth	r2, r2
 8005cf8:	1a12      	subs	r2, r2, r0
 8005cfa:	445a      	add	r2, fp
 8005cfc:	f8de 0000 	ldr.w	r0, [lr]
 8005d00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005d0a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005d0e:	b292      	uxth	r2, r2
 8005d10:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005d14:	45e1      	cmp	r9, ip
 8005d16:	f84e 2b04 	str.w	r2, [lr], #4
 8005d1a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005d1e:	d2de      	bcs.n	8005cde <quorem+0x42>
 8005d20:	9b00      	ldr	r3, [sp, #0]
 8005d22:	58eb      	ldr	r3, [r5, r3]
 8005d24:	b92b      	cbnz	r3, 8005d32 <quorem+0x96>
 8005d26:	9b01      	ldr	r3, [sp, #4]
 8005d28:	3b04      	subs	r3, #4
 8005d2a:	429d      	cmp	r5, r3
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	d32f      	bcc.n	8005d90 <quorem+0xf4>
 8005d30:	613c      	str	r4, [r7, #16]
 8005d32:	4638      	mov	r0, r7
 8005d34:	f001 f9c4 	bl	80070c0 <__mcmp>
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	db25      	blt.n	8005d88 <quorem+0xec>
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	2000      	movs	r0, #0
 8005d40:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d44:	f8d1 c000 	ldr.w	ip, [r1]
 8005d48:	fa1f fe82 	uxth.w	lr, r2
 8005d4c:	fa1f f38c 	uxth.w	r3, ip
 8005d50:	eba3 030e 	sub.w	r3, r3, lr
 8005d54:	4403      	add	r3, r0
 8005d56:	0c12      	lsrs	r2, r2, #16
 8005d58:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005d5c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d66:	45c1      	cmp	r9, r8
 8005d68:	f841 3b04 	str.w	r3, [r1], #4
 8005d6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005d70:	d2e6      	bcs.n	8005d40 <quorem+0xa4>
 8005d72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d7a:	b922      	cbnz	r2, 8005d86 <quorem+0xea>
 8005d7c:	3b04      	subs	r3, #4
 8005d7e:	429d      	cmp	r5, r3
 8005d80:	461a      	mov	r2, r3
 8005d82:	d30b      	bcc.n	8005d9c <quorem+0x100>
 8005d84:	613c      	str	r4, [r7, #16]
 8005d86:	3601      	adds	r6, #1
 8005d88:	4630      	mov	r0, r6
 8005d8a:	b003      	add	sp, #12
 8005d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d90:	6812      	ldr	r2, [r2, #0]
 8005d92:	3b04      	subs	r3, #4
 8005d94:	2a00      	cmp	r2, #0
 8005d96:	d1cb      	bne.n	8005d30 <quorem+0x94>
 8005d98:	3c01      	subs	r4, #1
 8005d9a:	e7c6      	b.n	8005d2a <quorem+0x8e>
 8005d9c:	6812      	ldr	r2, [r2, #0]
 8005d9e:	3b04      	subs	r3, #4
 8005da0:	2a00      	cmp	r2, #0
 8005da2:	d1ef      	bne.n	8005d84 <quorem+0xe8>
 8005da4:	3c01      	subs	r4, #1
 8005da6:	e7ea      	b.n	8005d7e <quorem+0xe2>
 8005da8:	2000      	movs	r0, #0
 8005daa:	e7ee      	b.n	8005d8a <quorem+0xee>
 8005dac:	0000      	movs	r0, r0
	...

08005db0 <_dtoa_r>:
 8005db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db4:	69c7      	ldr	r7, [r0, #28]
 8005db6:	b099      	sub	sp, #100	@ 0x64
 8005db8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005dbc:	ec55 4b10 	vmov	r4, r5, d0
 8005dc0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005dc2:	9109      	str	r1, [sp, #36]	@ 0x24
 8005dc4:	4683      	mov	fp, r0
 8005dc6:	920e      	str	r2, [sp, #56]	@ 0x38
 8005dc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005dca:	b97f      	cbnz	r7, 8005dec <_dtoa_r+0x3c>
 8005dcc:	2010      	movs	r0, #16
 8005dce:	f000 fdfd 	bl	80069cc <malloc>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	f8cb 001c 	str.w	r0, [fp, #28]
 8005dd8:	b920      	cbnz	r0, 8005de4 <_dtoa_r+0x34>
 8005dda:	4ba7      	ldr	r3, [pc, #668]	@ (8006078 <_dtoa_r+0x2c8>)
 8005ddc:	21ef      	movs	r1, #239	@ 0xef
 8005dde:	48a7      	ldr	r0, [pc, #668]	@ (800607c <_dtoa_r+0x2cc>)
 8005de0:	f002 fc36 	bl	8008650 <__assert_func>
 8005de4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005de8:	6007      	str	r7, [r0, #0]
 8005dea:	60c7      	str	r7, [r0, #12]
 8005dec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005df0:	6819      	ldr	r1, [r3, #0]
 8005df2:	b159      	cbz	r1, 8005e0c <_dtoa_r+0x5c>
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	604a      	str	r2, [r1, #4]
 8005df8:	2301      	movs	r3, #1
 8005dfa:	4093      	lsls	r3, r2
 8005dfc:	608b      	str	r3, [r1, #8]
 8005dfe:	4658      	mov	r0, fp
 8005e00:	f000 feda 	bl	8006bb8 <_Bfree>
 8005e04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	1e2b      	subs	r3, r5, #0
 8005e0e:	bfb9      	ittee	lt
 8005e10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005e14:	9303      	strlt	r3, [sp, #12]
 8005e16:	2300      	movge	r3, #0
 8005e18:	6033      	strge	r3, [r6, #0]
 8005e1a:	9f03      	ldr	r7, [sp, #12]
 8005e1c:	4b98      	ldr	r3, [pc, #608]	@ (8006080 <_dtoa_r+0x2d0>)
 8005e1e:	bfbc      	itt	lt
 8005e20:	2201      	movlt	r2, #1
 8005e22:	6032      	strlt	r2, [r6, #0]
 8005e24:	43bb      	bics	r3, r7
 8005e26:	d112      	bne.n	8005e4e <_dtoa_r+0x9e>
 8005e28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005e2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005e34:	4323      	orrs	r3, r4
 8005e36:	f000 854d 	beq.w	80068d4 <_dtoa_r+0xb24>
 8005e3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005e3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006094 <_dtoa_r+0x2e4>
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 854f 	beq.w	80068e4 <_dtoa_r+0xb34>
 8005e46:	f10a 0303 	add.w	r3, sl, #3
 8005e4a:	f000 bd49 	b.w	80068e0 <_dtoa_r+0xb30>
 8005e4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e52:	2200      	movs	r2, #0
 8005e54:	ec51 0b17 	vmov	r0, r1, d7
 8005e58:	2300      	movs	r3, #0
 8005e5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005e5e:	f7fa fe33 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e62:	4680      	mov	r8, r0
 8005e64:	b158      	cbz	r0, 8005e7e <_dtoa_r+0xce>
 8005e66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005e68:	2301      	movs	r3, #1
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005e6e:	b113      	cbz	r3, 8005e76 <_dtoa_r+0xc6>
 8005e70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005e72:	4b84      	ldr	r3, [pc, #528]	@ (8006084 <_dtoa_r+0x2d4>)
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006098 <_dtoa_r+0x2e8>
 8005e7a:	f000 bd33 	b.w	80068e4 <_dtoa_r+0xb34>
 8005e7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005e82:	aa16      	add	r2, sp, #88	@ 0x58
 8005e84:	a917      	add	r1, sp, #92	@ 0x5c
 8005e86:	4658      	mov	r0, fp
 8005e88:	f001 fa3a 	bl	8007300 <__d2b>
 8005e8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005e90:	4681      	mov	r9, r0
 8005e92:	2e00      	cmp	r6, #0
 8005e94:	d077      	beq.n	8005f86 <_dtoa_r+0x1d6>
 8005e96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ea0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ea4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005ea8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005eac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	4b74      	ldr	r3, [pc, #464]	@ (8006088 <_dtoa_r+0x2d8>)
 8005eb6:	f7fa f9e7 	bl	8000288 <__aeabi_dsub>
 8005eba:	a369      	add	r3, pc, #420	@ (adr r3, 8006060 <_dtoa_r+0x2b0>)
 8005ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec0:	f7fa fb9a 	bl	80005f8 <__aeabi_dmul>
 8005ec4:	a368      	add	r3, pc, #416	@ (adr r3, 8006068 <_dtoa_r+0x2b8>)
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f7fa f9df 	bl	800028c <__adddf3>
 8005ece:	4604      	mov	r4, r0
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	460d      	mov	r5, r1
 8005ed4:	f7fa fb26 	bl	8000524 <__aeabi_i2d>
 8005ed8:	a365      	add	r3, pc, #404	@ (adr r3, 8006070 <_dtoa_r+0x2c0>)
 8005eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ede:	f7fa fb8b 	bl	80005f8 <__aeabi_dmul>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	4629      	mov	r1, r5
 8005eea:	f7fa f9cf 	bl	800028c <__adddf3>
 8005eee:	4604      	mov	r4, r0
 8005ef0:	460d      	mov	r5, r1
 8005ef2:	f7fa fe31 	bl	8000b58 <__aeabi_d2iz>
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	4607      	mov	r7, r0
 8005efa:	2300      	movs	r3, #0
 8005efc:	4620      	mov	r0, r4
 8005efe:	4629      	mov	r1, r5
 8005f00:	f7fa fdec 	bl	8000adc <__aeabi_dcmplt>
 8005f04:	b140      	cbz	r0, 8005f18 <_dtoa_r+0x168>
 8005f06:	4638      	mov	r0, r7
 8005f08:	f7fa fb0c 	bl	8000524 <__aeabi_i2d>
 8005f0c:	4622      	mov	r2, r4
 8005f0e:	462b      	mov	r3, r5
 8005f10:	f7fa fdda 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f14:	b900      	cbnz	r0, 8005f18 <_dtoa_r+0x168>
 8005f16:	3f01      	subs	r7, #1
 8005f18:	2f16      	cmp	r7, #22
 8005f1a:	d851      	bhi.n	8005fc0 <_dtoa_r+0x210>
 8005f1c:	4b5b      	ldr	r3, [pc, #364]	@ (800608c <_dtoa_r+0x2dc>)
 8005f1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f2a:	f7fa fdd7 	bl	8000adc <__aeabi_dcmplt>
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	d048      	beq.n	8005fc4 <_dtoa_r+0x214>
 8005f32:	3f01      	subs	r7, #1
 8005f34:	2300      	movs	r3, #0
 8005f36:	9312      	str	r3, [sp, #72]	@ 0x48
 8005f38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005f3a:	1b9b      	subs	r3, r3, r6
 8005f3c:	1e5a      	subs	r2, r3, #1
 8005f3e:	bf44      	itt	mi
 8005f40:	f1c3 0801 	rsbmi	r8, r3, #1
 8005f44:	2300      	movmi	r3, #0
 8005f46:	9208      	str	r2, [sp, #32]
 8005f48:	bf54      	ite	pl
 8005f4a:	f04f 0800 	movpl.w	r8, #0
 8005f4e:	9308      	strmi	r3, [sp, #32]
 8005f50:	2f00      	cmp	r7, #0
 8005f52:	db39      	blt.n	8005fc8 <_dtoa_r+0x218>
 8005f54:	9b08      	ldr	r3, [sp, #32]
 8005f56:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005f58:	443b      	add	r3, r7
 8005f5a:	9308      	str	r3, [sp, #32]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f62:	2b09      	cmp	r3, #9
 8005f64:	d864      	bhi.n	8006030 <_dtoa_r+0x280>
 8005f66:	2b05      	cmp	r3, #5
 8005f68:	bfc4      	itt	gt
 8005f6a:	3b04      	subgt	r3, #4
 8005f6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f70:	f1a3 0302 	sub.w	r3, r3, #2
 8005f74:	bfcc      	ite	gt
 8005f76:	2400      	movgt	r4, #0
 8005f78:	2401      	movle	r4, #1
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d863      	bhi.n	8006046 <_dtoa_r+0x296>
 8005f7e:	e8df f003 	tbb	[pc, r3]
 8005f82:	372a      	.short	0x372a
 8005f84:	5535      	.short	0x5535
 8005f86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005f8a:	441e      	add	r6, r3
 8005f8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005f90:	2b20      	cmp	r3, #32
 8005f92:	bfc1      	itttt	gt
 8005f94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005f98:	409f      	lslgt	r7, r3
 8005f9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005f9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005fa2:	bfd6      	itet	le
 8005fa4:	f1c3 0320 	rsble	r3, r3, #32
 8005fa8:	ea47 0003 	orrgt.w	r0, r7, r3
 8005fac:	fa04 f003 	lslle.w	r0, r4, r3
 8005fb0:	f7fa faa8 	bl	8000504 <__aeabi_ui2d>
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005fba:	3e01      	subs	r6, #1
 8005fbc:	9214      	str	r2, [sp, #80]	@ 0x50
 8005fbe:	e777      	b.n	8005eb0 <_dtoa_r+0x100>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e7b8      	b.n	8005f36 <_dtoa_r+0x186>
 8005fc4:	9012      	str	r0, [sp, #72]	@ 0x48
 8005fc6:	e7b7      	b.n	8005f38 <_dtoa_r+0x188>
 8005fc8:	427b      	negs	r3, r7
 8005fca:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fcc:	2300      	movs	r3, #0
 8005fce:	eba8 0807 	sub.w	r8, r8, r7
 8005fd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005fd4:	e7c4      	b.n	8005f60 <_dtoa_r+0x1b0>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	dc35      	bgt.n	800604c <_dtoa_r+0x29c>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	9307      	str	r3, [sp, #28]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	920e      	str	r2, [sp, #56]	@ 0x38
 8005fea:	e00b      	b.n	8006004 <_dtoa_r+0x254>
 8005fec:	2301      	movs	r3, #1
 8005fee:	e7f3      	b.n	8005fd8 <_dtoa_r+0x228>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ff4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ff6:	18fb      	adds	r3, r7, r3
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	9307      	str	r3, [sp, #28]
 8006000:	bfb8      	it	lt
 8006002:	2301      	movlt	r3, #1
 8006004:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006008:	2100      	movs	r1, #0
 800600a:	2204      	movs	r2, #4
 800600c:	f102 0514 	add.w	r5, r2, #20
 8006010:	429d      	cmp	r5, r3
 8006012:	d91f      	bls.n	8006054 <_dtoa_r+0x2a4>
 8006014:	6041      	str	r1, [r0, #4]
 8006016:	4658      	mov	r0, fp
 8006018:	f000 fd8e 	bl	8006b38 <_Balloc>
 800601c:	4682      	mov	sl, r0
 800601e:	2800      	cmp	r0, #0
 8006020:	d13c      	bne.n	800609c <_dtoa_r+0x2ec>
 8006022:	4b1b      	ldr	r3, [pc, #108]	@ (8006090 <_dtoa_r+0x2e0>)
 8006024:	4602      	mov	r2, r0
 8006026:	f240 11af 	movw	r1, #431	@ 0x1af
 800602a:	e6d8      	b.n	8005dde <_dtoa_r+0x2e>
 800602c:	2301      	movs	r3, #1
 800602e:	e7e0      	b.n	8005ff2 <_dtoa_r+0x242>
 8006030:	2401      	movs	r4, #1
 8006032:	2300      	movs	r3, #0
 8006034:	9309      	str	r3, [sp, #36]	@ 0x24
 8006036:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006038:	f04f 33ff 	mov.w	r3, #4294967295
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	9307      	str	r3, [sp, #28]
 8006040:	2200      	movs	r2, #0
 8006042:	2312      	movs	r3, #18
 8006044:	e7d0      	b.n	8005fe8 <_dtoa_r+0x238>
 8006046:	2301      	movs	r3, #1
 8006048:	930b      	str	r3, [sp, #44]	@ 0x2c
 800604a:	e7f5      	b.n	8006038 <_dtoa_r+0x288>
 800604c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	9307      	str	r3, [sp, #28]
 8006052:	e7d7      	b.n	8006004 <_dtoa_r+0x254>
 8006054:	3101      	adds	r1, #1
 8006056:	0052      	lsls	r2, r2, #1
 8006058:	e7d8      	b.n	800600c <_dtoa_r+0x25c>
 800605a:	bf00      	nop
 800605c:	f3af 8000 	nop.w
 8006060:	636f4361 	.word	0x636f4361
 8006064:	3fd287a7 	.word	0x3fd287a7
 8006068:	8b60c8b3 	.word	0x8b60c8b3
 800606c:	3fc68a28 	.word	0x3fc68a28
 8006070:	509f79fb 	.word	0x509f79fb
 8006074:	3fd34413 	.word	0x3fd34413
 8006078:	080093ce 	.word	0x080093ce
 800607c:	080093e5 	.word	0x080093e5
 8006080:	7ff00000 	.word	0x7ff00000
 8006084:	08009399 	.word	0x08009399
 8006088:	3ff80000 	.word	0x3ff80000
 800608c:	080094e0 	.word	0x080094e0
 8006090:	0800943d 	.word	0x0800943d
 8006094:	080093ca 	.word	0x080093ca
 8006098:	08009398 	.word	0x08009398
 800609c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80060a0:	6018      	str	r0, [r3, #0]
 80060a2:	9b07      	ldr	r3, [sp, #28]
 80060a4:	2b0e      	cmp	r3, #14
 80060a6:	f200 80a4 	bhi.w	80061f2 <_dtoa_r+0x442>
 80060aa:	2c00      	cmp	r4, #0
 80060ac:	f000 80a1 	beq.w	80061f2 <_dtoa_r+0x442>
 80060b0:	2f00      	cmp	r7, #0
 80060b2:	dd33      	ble.n	800611c <_dtoa_r+0x36c>
 80060b4:	4bad      	ldr	r3, [pc, #692]	@ (800636c <_dtoa_r+0x5bc>)
 80060b6:	f007 020f 	and.w	r2, r7, #15
 80060ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060be:	ed93 7b00 	vldr	d7, [r3]
 80060c2:	05f8      	lsls	r0, r7, #23
 80060c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80060c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80060cc:	d516      	bpl.n	80060fc <_dtoa_r+0x34c>
 80060ce:	4ba8      	ldr	r3, [pc, #672]	@ (8006370 <_dtoa_r+0x5c0>)
 80060d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060d8:	f7fa fbb8 	bl	800084c <__aeabi_ddiv>
 80060dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060e0:	f004 040f 	and.w	r4, r4, #15
 80060e4:	2603      	movs	r6, #3
 80060e6:	4da2      	ldr	r5, [pc, #648]	@ (8006370 <_dtoa_r+0x5c0>)
 80060e8:	b954      	cbnz	r4, 8006100 <_dtoa_r+0x350>
 80060ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060f2:	f7fa fbab 	bl	800084c <__aeabi_ddiv>
 80060f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060fa:	e028      	b.n	800614e <_dtoa_r+0x39e>
 80060fc:	2602      	movs	r6, #2
 80060fe:	e7f2      	b.n	80060e6 <_dtoa_r+0x336>
 8006100:	07e1      	lsls	r1, r4, #31
 8006102:	d508      	bpl.n	8006116 <_dtoa_r+0x366>
 8006104:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006108:	e9d5 2300 	ldrd	r2, r3, [r5]
 800610c:	f7fa fa74 	bl	80005f8 <__aeabi_dmul>
 8006110:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006114:	3601      	adds	r6, #1
 8006116:	1064      	asrs	r4, r4, #1
 8006118:	3508      	adds	r5, #8
 800611a:	e7e5      	b.n	80060e8 <_dtoa_r+0x338>
 800611c:	f000 80d2 	beq.w	80062c4 <_dtoa_r+0x514>
 8006120:	427c      	negs	r4, r7
 8006122:	4b92      	ldr	r3, [pc, #584]	@ (800636c <_dtoa_r+0x5bc>)
 8006124:	4d92      	ldr	r5, [pc, #584]	@ (8006370 <_dtoa_r+0x5c0>)
 8006126:	f004 020f 	and.w	r2, r4, #15
 800612a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800612e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006132:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006136:	f7fa fa5f 	bl	80005f8 <__aeabi_dmul>
 800613a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800613e:	1124      	asrs	r4, r4, #4
 8006140:	2300      	movs	r3, #0
 8006142:	2602      	movs	r6, #2
 8006144:	2c00      	cmp	r4, #0
 8006146:	f040 80b2 	bne.w	80062ae <_dtoa_r+0x4fe>
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1d3      	bne.n	80060f6 <_dtoa_r+0x346>
 800614e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006150:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 80b7 	beq.w	80062c8 <_dtoa_r+0x518>
 800615a:	4b86      	ldr	r3, [pc, #536]	@ (8006374 <_dtoa_r+0x5c4>)
 800615c:	2200      	movs	r2, #0
 800615e:	4620      	mov	r0, r4
 8006160:	4629      	mov	r1, r5
 8006162:	f7fa fcbb 	bl	8000adc <__aeabi_dcmplt>
 8006166:	2800      	cmp	r0, #0
 8006168:	f000 80ae 	beq.w	80062c8 <_dtoa_r+0x518>
 800616c:	9b07      	ldr	r3, [sp, #28]
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 80aa 	beq.w	80062c8 <_dtoa_r+0x518>
 8006174:	9b00      	ldr	r3, [sp, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	dd37      	ble.n	80061ea <_dtoa_r+0x43a>
 800617a:	1e7b      	subs	r3, r7, #1
 800617c:	9304      	str	r3, [sp, #16]
 800617e:	4620      	mov	r0, r4
 8006180:	4b7d      	ldr	r3, [pc, #500]	@ (8006378 <_dtoa_r+0x5c8>)
 8006182:	2200      	movs	r2, #0
 8006184:	4629      	mov	r1, r5
 8006186:	f7fa fa37 	bl	80005f8 <__aeabi_dmul>
 800618a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800618e:	9c00      	ldr	r4, [sp, #0]
 8006190:	3601      	adds	r6, #1
 8006192:	4630      	mov	r0, r6
 8006194:	f7fa f9c6 	bl	8000524 <__aeabi_i2d>
 8006198:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800619c:	f7fa fa2c 	bl	80005f8 <__aeabi_dmul>
 80061a0:	4b76      	ldr	r3, [pc, #472]	@ (800637c <_dtoa_r+0x5cc>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	f7fa f872 	bl	800028c <__adddf3>
 80061a8:	4605      	mov	r5, r0
 80061aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80061ae:	2c00      	cmp	r4, #0
 80061b0:	f040 808d 	bne.w	80062ce <_dtoa_r+0x51e>
 80061b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061b8:	4b71      	ldr	r3, [pc, #452]	@ (8006380 <_dtoa_r+0x5d0>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	f7fa f864 	bl	8000288 <__aeabi_dsub>
 80061c0:	4602      	mov	r2, r0
 80061c2:	460b      	mov	r3, r1
 80061c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061c8:	462a      	mov	r2, r5
 80061ca:	4633      	mov	r3, r6
 80061cc:	f7fa fca4 	bl	8000b18 <__aeabi_dcmpgt>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	f040 828b 	bne.w	80066ec <_dtoa_r+0x93c>
 80061d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061da:	462a      	mov	r2, r5
 80061dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80061e0:	f7fa fc7c 	bl	8000adc <__aeabi_dcmplt>
 80061e4:	2800      	cmp	r0, #0
 80061e6:	f040 8128 	bne.w	800643a <_dtoa_r+0x68a>
 80061ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80061ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80061f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f2c0 815a 	blt.w	80064ae <_dtoa_r+0x6fe>
 80061fa:	2f0e      	cmp	r7, #14
 80061fc:	f300 8157 	bgt.w	80064ae <_dtoa_r+0x6fe>
 8006200:	4b5a      	ldr	r3, [pc, #360]	@ (800636c <_dtoa_r+0x5bc>)
 8006202:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006206:	ed93 7b00 	vldr	d7, [r3]
 800620a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800620c:	2b00      	cmp	r3, #0
 800620e:	ed8d 7b00 	vstr	d7, [sp]
 8006212:	da03      	bge.n	800621c <_dtoa_r+0x46c>
 8006214:	9b07      	ldr	r3, [sp, #28]
 8006216:	2b00      	cmp	r3, #0
 8006218:	f340 8101 	ble.w	800641e <_dtoa_r+0x66e>
 800621c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006220:	4656      	mov	r6, sl
 8006222:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006226:	4620      	mov	r0, r4
 8006228:	4629      	mov	r1, r5
 800622a:	f7fa fb0f 	bl	800084c <__aeabi_ddiv>
 800622e:	f7fa fc93 	bl	8000b58 <__aeabi_d2iz>
 8006232:	4680      	mov	r8, r0
 8006234:	f7fa f976 	bl	8000524 <__aeabi_i2d>
 8006238:	e9dd 2300 	ldrd	r2, r3, [sp]
 800623c:	f7fa f9dc 	bl	80005f8 <__aeabi_dmul>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	4620      	mov	r0, r4
 8006246:	4629      	mov	r1, r5
 8006248:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800624c:	f7fa f81c 	bl	8000288 <__aeabi_dsub>
 8006250:	f806 4b01 	strb.w	r4, [r6], #1
 8006254:	9d07      	ldr	r5, [sp, #28]
 8006256:	eba6 040a 	sub.w	r4, r6, sl
 800625a:	42a5      	cmp	r5, r4
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	f040 8117 	bne.w	8006492 <_dtoa_r+0x6e2>
 8006264:	f7fa f812 	bl	800028c <__adddf3>
 8006268:	e9dd 2300 	ldrd	r2, r3, [sp]
 800626c:	4604      	mov	r4, r0
 800626e:	460d      	mov	r5, r1
 8006270:	f7fa fc52 	bl	8000b18 <__aeabi_dcmpgt>
 8006274:	2800      	cmp	r0, #0
 8006276:	f040 80f9 	bne.w	800646c <_dtoa_r+0x6bc>
 800627a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800627e:	4620      	mov	r0, r4
 8006280:	4629      	mov	r1, r5
 8006282:	f7fa fc21 	bl	8000ac8 <__aeabi_dcmpeq>
 8006286:	b118      	cbz	r0, 8006290 <_dtoa_r+0x4e0>
 8006288:	f018 0f01 	tst.w	r8, #1
 800628c:	f040 80ee 	bne.w	800646c <_dtoa_r+0x6bc>
 8006290:	4649      	mov	r1, r9
 8006292:	4658      	mov	r0, fp
 8006294:	f000 fc90 	bl	8006bb8 <_Bfree>
 8006298:	2300      	movs	r3, #0
 800629a:	7033      	strb	r3, [r6, #0]
 800629c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800629e:	3701      	adds	r7, #1
 80062a0:	601f      	str	r7, [r3, #0]
 80062a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 831d 	beq.w	80068e4 <_dtoa_r+0xb34>
 80062aa:	601e      	str	r6, [r3, #0]
 80062ac:	e31a      	b.n	80068e4 <_dtoa_r+0xb34>
 80062ae:	07e2      	lsls	r2, r4, #31
 80062b0:	d505      	bpl.n	80062be <_dtoa_r+0x50e>
 80062b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80062b6:	f7fa f99f 	bl	80005f8 <__aeabi_dmul>
 80062ba:	3601      	adds	r6, #1
 80062bc:	2301      	movs	r3, #1
 80062be:	1064      	asrs	r4, r4, #1
 80062c0:	3508      	adds	r5, #8
 80062c2:	e73f      	b.n	8006144 <_dtoa_r+0x394>
 80062c4:	2602      	movs	r6, #2
 80062c6:	e742      	b.n	800614e <_dtoa_r+0x39e>
 80062c8:	9c07      	ldr	r4, [sp, #28]
 80062ca:	9704      	str	r7, [sp, #16]
 80062cc:	e761      	b.n	8006192 <_dtoa_r+0x3e2>
 80062ce:	4b27      	ldr	r3, [pc, #156]	@ (800636c <_dtoa_r+0x5bc>)
 80062d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80062d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80062d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80062da:	4454      	add	r4, sl
 80062dc:	2900      	cmp	r1, #0
 80062de:	d053      	beq.n	8006388 <_dtoa_r+0x5d8>
 80062e0:	4928      	ldr	r1, [pc, #160]	@ (8006384 <_dtoa_r+0x5d4>)
 80062e2:	2000      	movs	r0, #0
 80062e4:	f7fa fab2 	bl	800084c <__aeabi_ddiv>
 80062e8:	4633      	mov	r3, r6
 80062ea:	462a      	mov	r2, r5
 80062ec:	f7f9 ffcc 	bl	8000288 <__aeabi_dsub>
 80062f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80062f4:	4656      	mov	r6, sl
 80062f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062fa:	f7fa fc2d 	bl	8000b58 <__aeabi_d2iz>
 80062fe:	4605      	mov	r5, r0
 8006300:	f7fa f910 	bl	8000524 <__aeabi_i2d>
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800630c:	f7f9 ffbc 	bl	8000288 <__aeabi_dsub>
 8006310:	3530      	adds	r5, #48	@ 0x30
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
 8006316:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800631a:	f806 5b01 	strb.w	r5, [r6], #1
 800631e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006322:	f7fa fbdb 	bl	8000adc <__aeabi_dcmplt>
 8006326:	2800      	cmp	r0, #0
 8006328:	d171      	bne.n	800640e <_dtoa_r+0x65e>
 800632a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800632e:	4911      	ldr	r1, [pc, #68]	@ (8006374 <_dtoa_r+0x5c4>)
 8006330:	2000      	movs	r0, #0
 8006332:	f7f9 ffa9 	bl	8000288 <__aeabi_dsub>
 8006336:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800633a:	f7fa fbcf 	bl	8000adc <__aeabi_dcmplt>
 800633e:	2800      	cmp	r0, #0
 8006340:	f040 8095 	bne.w	800646e <_dtoa_r+0x6be>
 8006344:	42a6      	cmp	r6, r4
 8006346:	f43f af50 	beq.w	80061ea <_dtoa_r+0x43a>
 800634a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800634e:	4b0a      	ldr	r3, [pc, #40]	@ (8006378 <_dtoa_r+0x5c8>)
 8006350:	2200      	movs	r2, #0
 8006352:	f7fa f951 	bl	80005f8 <__aeabi_dmul>
 8006356:	4b08      	ldr	r3, [pc, #32]	@ (8006378 <_dtoa_r+0x5c8>)
 8006358:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800635c:	2200      	movs	r2, #0
 800635e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006362:	f7fa f949 	bl	80005f8 <__aeabi_dmul>
 8006366:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800636a:	e7c4      	b.n	80062f6 <_dtoa_r+0x546>
 800636c:	080094e0 	.word	0x080094e0
 8006370:	080094b8 	.word	0x080094b8
 8006374:	3ff00000 	.word	0x3ff00000
 8006378:	40240000 	.word	0x40240000
 800637c:	401c0000 	.word	0x401c0000
 8006380:	40140000 	.word	0x40140000
 8006384:	3fe00000 	.word	0x3fe00000
 8006388:	4631      	mov	r1, r6
 800638a:	4628      	mov	r0, r5
 800638c:	f7fa f934 	bl	80005f8 <__aeabi_dmul>
 8006390:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006394:	9415      	str	r4, [sp, #84]	@ 0x54
 8006396:	4656      	mov	r6, sl
 8006398:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800639c:	f7fa fbdc 	bl	8000b58 <__aeabi_d2iz>
 80063a0:	4605      	mov	r5, r0
 80063a2:	f7fa f8bf 	bl	8000524 <__aeabi_i2d>
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063ae:	f7f9 ff6b 	bl	8000288 <__aeabi_dsub>
 80063b2:	3530      	adds	r5, #48	@ 0x30
 80063b4:	f806 5b01 	strb.w	r5, [r6], #1
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	42a6      	cmp	r6, r4
 80063be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063c2:	f04f 0200 	mov.w	r2, #0
 80063c6:	d124      	bne.n	8006412 <_dtoa_r+0x662>
 80063c8:	4bac      	ldr	r3, [pc, #688]	@ (800667c <_dtoa_r+0x8cc>)
 80063ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80063ce:	f7f9 ff5d 	bl	800028c <__adddf3>
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063da:	f7fa fb9d 	bl	8000b18 <__aeabi_dcmpgt>
 80063de:	2800      	cmp	r0, #0
 80063e0:	d145      	bne.n	800646e <_dtoa_r+0x6be>
 80063e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80063e6:	49a5      	ldr	r1, [pc, #660]	@ (800667c <_dtoa_r+0x8cc>)
 80063e8:	2000      	movs	r0, #0
 80063ea:	f7f9 ff4d 	bl	8000288 <__aeabi_dsub>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063f6:	f7fa fb71 	bl	8000adc <__aeabi_dcmplt>
 80063fa:	2800      	cmp	r0, #0
 80063fc:	f43f aef5 	beq.w	80061ea <_dtoa_r+0x43a>
 8006400:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006402:	1e73      	subs	r3, r6, #1
 8006404:	9315      	str	r3, [sp, #84]	@ 0x54
 8006406:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800640a:	2b30      	cmp	r3, #48	@ 0x30
 800640c:	d0f8      	beq.n	8006400 <_dtoa_r+0x650>
 800640e:	9f04      	ldr	r7, [sp, #16]
 8006410:	e73e      	b.n	8006290 <_dtoa_r+0x4e0>
 8006412:	4b9b      	ldr	r3, [pc, #620]	@ (8006680 <_dtoa_r+0x8d0>)
 8006414:	f7fa f8f0 	bl	80005f8 <__aeabi_dmul>
 8006418:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800641c:	e7bc      	b.n	8006398 <_dtoa_r+0x5e8>
 800641e:	d10c      	bne.n	800643a <_dtoa_r+0x68a>
 8006420:	4b98      	ldr	r3, [pc, #608]	@ (8006684 <_dtoa_r+0x8d4>)
 8006422:	2200      	movs	r2, #0
 8006424:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006428:	f7fa f8e6 	bl	80005f8 <__aeabi_dmul>
 800642c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006430:	f7fa fb68 	bl	8000b04 <__aeabi_dcmpge>
 8006434:	2800      	cmp	r0, #0
 8006436:	f000 8157 	beq.w	80066e8 <_dtoa_r+0x938>
 800643a:	2400      	movs	r4, #0
 800643c:	4625      	mov	r5, r4
 800643e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006440:	43db      	mvns	r3, r3
 8006442:	9304      	str	r3, [sp, #16]
 8006444:	4656      	mov	r6, sl
 8006446:	2700      	movs	r7, #0
 8006448:	4621      	mov	r1, r4
 800644a:	4658      	mov	r0, fp
 800644c:	f000 fbb4 	bl	8006bb8 <_Bfree>
 8006450:	2d00      	cmp	r5, #0
 8006452:	d0dc      	beq.n	800640e <_dtoa_r+0x65e>
 8006454:	b12f      	cbz	r7, 8006462 <_dtoa_r+0x6b2>
 8006456:	42af      	cmp	r7, r5
 8006458:	d003      	beq.n	8006462 <_dtoa_r+0x6b2>
 800645a:	4639      	mov	r1, r7
 800645c:	4658      	mov	r0, fp
 800645e:	f000 fbab 	bl	8006bb8 <_Bfree>
 8006462:	4629      	mov	r1, r5
 8006464:	4658      	mov	r0, fp
 8006466:	f000 fba7 	bl	8006bb8 <_Bfree>
 800646a:	e7d0      	b.n	800640e <_dtoa_r+0x65e>
 800646c:	9704      	str	r7, [sp, #16]
 800646e:	4633      	mov	r3, r6
 8006470:	461e      	mov	r6, r3
 8006472:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006476:	2a39      	cmp	r2, #57	@ 0x39
 8006478:	d107      	bne.n	800648a <_dtoa_r+0x6da>
 800647a:	459a      	cmp	sl, r3
 800647c:	d1f8      	bne.n	8006470 <_dtoa_r+0x6c0>
 800647e:	9a04      	ldr	r2, [sp, #16]
 8006480:	3201      	adds	r2, #1
 8006482:	9204      	str	r2, [sp, #16]
 8006484:	2230      	movs	r2, #48	@ 0x30
 8006486:	f88a 2000 	strb.w	r2, [sl]
 800648a:	781a      	ldrb	r2, [r3, #0]
 800648c:	3201      	adds	r2, #1
 800648e:	701a      	strb	r2, [r3, #0]
 8006490:	e7bd      	b.n	800640e <_dtoa_r+0x65e>
 8006492:	4b7b      	ldr	r3, [pc, #492]	@ (8006680 <_dtoa_r+0x8d0>)
 8006494:	2200      	movs	r2, #0
 8006496:	f7fa f8af 	bl	80005f8 <__aeabi_dmul>
 800649a:	2200      	movs	r2, #0
 800649c:	2300      	movs	r3, #0
 800649e:	4604      	mov	r4, r0
 80064a0:	460d      	mov	r5, r1
 80064a2:	f7fa fb11 	bl	8000ac8 <__aeabi_dcmpeq>
 80064a6:	2800      	cmp	r0, #0
 80064a8:	f43f aebb 	beq.w	8006222 <_dtoa_r+0x472>
 80064ac:	e6f0      	b.n	8006290 <_dtoa_r+0x4e0>
 80064ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80064b0:	2a00      	cmp	r2, #0
 80064b2:	f000 80db 	beq.w	800666c <_dtoa_r+0x8bc>
 80064b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064b8:	2a01      	cmp	r2, #1
 80064ba:	f300 80bf 	bgt.w	800663c <_dtoa_r+0x88c>
 80064be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80064c0:	2a00      	cmp	r2, #0
 80064c2:	f000 80b7 	beq.w	8006634 <_dtoa_r+0x884>
 80064c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80064ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80064cc:	4646      	mov	r6, r8
 80064ce:	9a08      	ldr	r2, [sp, #32]
 80064d0:	2101      	movs	r1, #1
 80064d2:	441a      	add	r2, r3
 80064d4:	4658      	mov	r0, fp
 80064d6:	4498      	add	r8, r3
 80064d8:	9208      	str	r2, [sp, #32]
 80064da:	f000 fc6b 	bl	8006db4 <__i2b>
 80064de:	4605      	mov	r5, r0
 80064e0:	b15e      	cbz	r6, 80064fa <_dtoa_r+0x74a>
 80064e2:	9b08      	ldr	r3, [sp, #32]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	dd08      	ble.n	80064fa <_dtoa_r+0x74a>
 80064e8:	42b3      	cmp	r3, r6
 80064ea:	9a08      	ldr	r2, [sp, #32]
 80064ec:	bfa8      	it	ge
 80064ee:	4633      	movge	r3, r6
 80064f0:	eba8 0803 	sub.w	r8, r8, r3
 80064f4:	1af6      	subs	r6, r6, r3
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	9308      	str	r3, [sp, #32]
 80064fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064fc:	b1f3      	cbz	r3, 800653c <_dtoa_r+0x78c>
 80064fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006500:	2b00      	cmp	r3, #0
 8006502:	f000 80b7 	beq.w	8006674 <_dtoa_r+0x8c4>
 8006506:	b18c      	cbz	r4, 800652c <_dtoa_r+0x77c>
 8006508:	4629      	mov	r1, r5
 800650a:	4622      	mov	r2, r4
 800650c:	4658      	mov	r0, fp
 800650e:	f000 fd11 	bl	8006f34 <__pow5mult>
 8006512:	464a      	mov	r2, r9
 8006514:	4601      	mov	r1, r0
 8006516:	4605      	mov	r5, r0
 8006518:	4658      	mov	r0, fp
 800651a:	f000 fc61 	bl	8006de0 <__multiply>
 800651e:	4649      	mov	r1, r9
 8006520:	9004      	str	r0, [sp, #16]
 8006522:	4658      	mov	r0, fp
 8006524:	f000 fb48 	bl	8006bb8 <_Bfree>
 8006528:	9b04      	ldr	r3, [sp, #16]
 800652a:	4699      	mov	r9, r3
 800652c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800652e:	1b1a      	subs	r2, r3, r4
 8006530:	d004      	beq.n	800653c <_dtoa_r+0x78c>
 8006532:	4649      	mov	r1, r9
 8006534:	4658      	mov	r0, fp
 8006536:	f000 fcfd 	bl	8006f34 <__pow5mult>
 800653a:	4681      	mov	r9, r0
 800653c:	2101      	movs	r1, #1
 800653e:	4658      	mov	r0, fp
 8006540:	f000 fc38 	bl	8006db4 <__i2b>
 8006544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006546:	4604      	mov	r4, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 81cf 	beq.w	80068ec <_dtoa_r+0xb3c>
 800654e:	461a      	mov	r2, r3
 8006550:	4601      	mov	r1, r0
 8006552:	4658      	mov	r0, fp
 8006554:	f000 fcee 	bl	8006f34 <__pow5mult>
 8006558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800655a:	2b01      	cmp	r3, #1
 800655c:	4604      	mov	r4, r0
 800655e:	f300 8095 	bgt.w	800668c <_dtoa_r+0x8dc>
 8006562:	9b02      	ldr	r3, [sp, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	f040 8087 	bne.w	8006678 <_dtoa_r+0x8c8>
 800656a:	9b03      	ldr	r3, [sp, #12]
 800656c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006570:	2b00      	cmp	r3, #0
 8006572:	f040 8089 	bne.w	8006688 <_dtoa_r+0x8d8>
 8006576:	9b03      	ldr	r3, [sp, #12]
 8006578:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800657c:	0d1b      	lsrs	r3, r3, #20
 800657e:	051b      	lsls	r3, r3, #20
 8006580:	b12b      	cbz	r3, 800658e <_dtoa_r+0x7de>
 8006582:	9b08      	ldr	r3, [sp, #32]
 8006584:	3301      	adds	r3, #1
 8006586:	9308      	str	r3, [sp, #32]
 8006588:	f108 0801 	add.w	r8, r8, #1
 800658c:	2301      	movs	r3, #1
 800658e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006590:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 81b0 	beq.w	80068f8 <_dtoa_r+0xb48>
 8006598:	6923      	ldr	r3, [r4, #16]
 800659a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800659e:	6918      	ldr	r0, [r3, #16]
 80065a0:	f000 fbbc 	bl	8006d1c <__hi0bits>
 80065a4:	f1c0 0020 	rsb	r0, r0, #32
 80065a8:	9b08      	ldr	r3, [sp, #32]
 80065aa:	4418      	add	r0, r3
 80065ac:	f010 001f 	ands.w	r0, r0, #31
 80065b0:	d077      	beq.n	80066a2 <_dtoa_r+0x8f2>
 80065b2:	f1c0 0320 	rsb	r3, r0, #32
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	dd6b      	ble.n	8006692 <_dtoa_r+0x8e2>
 80065ba:	9b08      	ldr	r3, [sp, #32]
 80065bc:	f1c0 001c 	rsb	r0, r0, #28
 80065c0:	4403      	add	r3, r0
 80065c2:	4480      	add	r8, r0
 80065c4:	4406      	add	r6, r0
 80065c6:	9308      	str	r3, [sp, #32]
 80065c8:	f1b8 0f00 	cmp.w	r8, #0
 80065cc:	dd05      	ble.n	80065da <_dtoa_r+0x82a>
 80065ce:	4649      	mov	r1, r9
 80065d0:	4642      	mov	r2, r8
 80065d2:	4658      	mov	r0, fp
 80065d4:	f000 fd08 	bl	8006fe8 <__lshift>
 80065d8:	4681      	mov	r9, r0
 80065da:	9b08      	ldr	r3, [sp, #32]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	dd05      	ble.n	80065ec <_dtoa_r+0x83c>
 80065e0:	4621      	mov	r1, r4
 80065e2:	461a      	mov	r2, r3
 80065e4:	4658      	mov	r0, fp
 80065e6:	f000 fcff 	bl	8006fe8 <__lshift>
 80065ea:	4604      	mov	r4, r0
 80065ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d059      	beq.n	80066a6 <_dtoa_r+0x8f6>
 80065f2:	4621      	mov	r1, r4
 80065f4:	4648      	mov	r0, r9
 80065f6:	f000 fd63 	bl	80070c0 <__mcmp>
 80065fa:	2800      	cmp	r0, #0
 80065fc:	da53      	bge.n	80066a6 <_dtoa_r+0x8f6>
 80065fe:	1e7b      	subs	r3, r7, #1
 8006600:	9304      	str	r3, [sp, #16]
 8006602:	4649      	mov	r1, r9
 8006604:	2300      	movs	r3, #0
 8006606:	220a      	movs	r2, #10
 8006608:	4658      	mov	r0, fp
 800660a:	f000 faf7 	bl	8006bfc <__multadd>
 800660e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006610:	4681      	mov	r9, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 8172 	beq.w	80068fc <_dtoa_r+0xb4c>
 8006618:	2300      	movs	r3, #0
 800661a:	4629      	mov	r1, r5
 800661c:	220a      	movs	r2, #10
 800661e:	4658      	mov	r0, fp
 8006620:	f000 faec 	bl	8006bfc <__multadd>
 8006624:	9b00      	ldr	r3, [sp, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	4605      	mov	r5, r0
 800662a:	dc67      	bgt.n	80066fc <_dtoa_r+0x94c>
 800662c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800662e:	2b02      	cmp	r3, #2
 8006630:	dc41      	bgt.n	80066b6 <_dtoa_r+0x906>
 8006632:	e063      	b.n	80066fc <_dtoa_r+0x94c>
 8006634:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006636:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800663a:	e746      	b.n	80064ca <_dtoa_r+0x71a>
 800663c:	9b07      	ldr	r3, [sp, #28]
 800663e:	1e5c      	subs	r4, r3, #1
 8006640:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006642:	42a3      	cmp	r3, r4
 8006644:	bfbf      	itttt	lt
 8006646:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006648:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800664a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800664c:	1ae3      	sublt	r3, r4, r3
 800664e:	bfb4      	ite	lt
 8006650:	18d2      	addlt	r2, r2, r3
 8006652:	1b1c      	subge	r4, r3, r4
 8006654:	9b07      	ldr	r3, [sp, #28]
 8006656:	bfbc      	itt	lt
 8006658:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800665a:	2400      	movlt	r4, #0
 800665c:	2b00      	cmp	r3, #0
 800665e:	bfb5      	itete	lt
 8006660:	eba8 0603 	sublt.w	r6, r8, r3
 8006664:	9b07      	ldrge	r3, [sp, #28]
 8006666:	2300      	movlt	r3, #0
 8006668:	4646      	movge	r6, r8
 800666a:	e730      	b.n	80064ce <_dtoa_r+0x71e>
 800666c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800666e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006670:	4646      	mov	r6, r8
 8006672:	e735      	b.n	80064e0 <_dtoa_r+0x730>
 8006674:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006676:	e75c      	b.n	8006532 <_dtoa_r+0x782>
 8006678:	2300      	movs	r3, #0
 800667a:	e788      	b.n	800658e <_dtoa_r+0x7de>
 800667c:	3fe00000 	.word	0x3fe00000
 8006680:	40240000 	.word	0x40240000
 8006684:	40140000 	.word	0x40140000
 8006688:	9b02      	ldr	r3, [sp, #8]
 800668a:	e780      	b.n	800658e <_dtoa_r+0x7de>
 800668c:	2300      	movs	r3, #0
 800668e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006690:	e782      	b.n	8006598 <_dtoa_r+0x7e8>
 8006692:	d099      	beq.n	80065c8 <_dtoa_r+0x818>
 8006694:	9a08      	ldr	r2, [sp, #32]
 8006696:	331c      	adds	r3, #28
 8006698:	441a      	add	r2, r3
 800669a:	4498      	add	r8, r3
 800669c:	441e      	add	r6, r3
 800669e:	9208      	str	r2, [sp, #32]
 80066a0:	e792      	b.n	80065c8 <_dtoa_r+0x818>
 80066a2:	4603      	mov	r3, r0
 80066a4:	e7f6      	b.n	8006694 <_dtoa_r+0x8e4>
 80066a6:	9b07      	ldr	r3, [sp, #28]
 80066a8:	9704      	str	r7, [sp, #16]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	dc20      	bgt.n	80066f0 <_dtoa_r+0x940>
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	dd1e      	ble.n	80066f4 <_dtoa_r+0x944>
 80066b6:	9b00      	ldr	r3, [sp, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f47f aec0 	bne.w	800643e <_dtoa_r+0x68e>
 80066be:	4621      	mov	r1, r4
 80066c0:	2205      	movs	r2, #5
 80066c2:	4658      	mov	r0, fp
 80066c4:	f000 fa9a 	bl	8006bfc <__multadd>
 80066c8:	4601      	mov	r1, r0
 80066ca:	4604      	mov	r4, r0
 80066cc:	4648      	mov	r0, r9
 80066ce:	f000 fcf7 	bl	80070c0 <__mcmp>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	f77f aeb3 	ble.w	800643e <_dtoa_r+0x68e>
 80066d8:	4656      	mov	r6, sl
 80066da:	2331      	movs	r3, #49	@ 0x31
 80066dc:	f806 3b01 	strb.w	r3, [r6], #1
 80066e0:	9b04      	ldr	r3, [sp, #16]
 80066e2:	3301      	adds	r3, #1
 80066e4:	9304      	str	r3, [sp, #16]
 80066e6:	e6ae      	b.n	8006446 <_dtoa_r+0x696>
 80066e8:	9c07      	ldr	r4, [sp, #28]
 80066ea:	9704      	str	r7, [sp, #16]
 80066ec:	4625      	mov	r5, r4
 80066ee:	e7f3      	b.n	80066d8 <_dtoa_r+0x928>
 80066f0:	9b07      	ldr	r3, [sp, #28]
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f000 8104 	beq.w	8006904 <_dtoa_r+0xb54>
 80066fc:	2e00      	cmp	r6, #0
 80066fe:	dd05      	ble.n	800670c <_dtoa_r+0x95c>
 8006700:	4629      	mov	r1, r5
 8006702:	4632      	mov	r2, r6
 8006704:	4658      	mov	r0, fp
 8006706:	f000 fc6f 	bl	8006fe8 <__lshift>
 800670a:	4605      	mov	r5, r0
 800670c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800670e:	2b00      	cmp	r3, #0
 8006710:	d05a      	beq.n	80067c8 <_dtoa_r+0xa18>
 8006712:	6869      	ldr	r1, [r5, #4]
 8006714:	4658      	mov	r0, fp
 8006716:	f000 fa0f 	bl	8006b38 <_Balloc>
 800671a:	4606      	mov	r6, r0
 800671c:	b928      	cbnz	r0, 800672a <_dtoa_r+0x97a>
 800671e:	4b84      	ldr	r3, [pc, #528]	@ (8006930 <_dtoa_r+0xb80>)
 8006720:	4602      	mov	r2, r0
 8006722:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006726:	f7ff bb5a 	b.w	8005dde <_dtoa_r+0x2e>
 800672a:	692a      	ldr	r2, [r5, #16]
 800672c:	3202      	adds	r2, #2
 800672e:	0092      	lsls	r2, r2, #2
 8006730:	f105 010c 	add.w	r1, r5, #12
 8006734:	300c      	adds	r0, #12
 8006736:	f001 ff75 	bl	8008624 <memcpy>
 800673a:	2201      	movs	r2, #1
 800673c:	4631      	mov	r1, r6
 800673e:	4658      	mov	r0, fp
 8006740:	f000 fc52 	bl	8006fe8 <__lshift>
 8006744:	f10a 0301 	add.w	r3, sl, #1
 8006748:	9307      	str	r3, [sp, #28]
 800674a:	9b00      	ldr	r3, [sp, #0]
 800674c:	4453      	add	r3, sl
 800674e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006750:	9b02      	ldr	r3, [sp, #8]
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	462f      	mov	r7, r5
 8006758:	930a      	str	r3, [sp, #40]	@ 0x28
 800675a:	4605      	mov	r5, r0
 800675c:	9b07      	ldr	r3, [sp, #28]
 800675e:	4621      	mov	r1, r4
 8006760:	3b01      	subs	r3, #1
 8006762:	4648      	mov	r0, r9
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	f7ff fa99 	bl	8005c9c <quorem>
 800676a:	4639      	mov	r1, r7
 800676c:	9002      	str	r0, [sp, #8]
 800676e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006772:	4648      	mov	r0, r9
 8006774:	f000 fca4 	bl	80070c0 <__mcmp>
 8006778:	462a      	mov	r2, r5
 800677a:	9008      	str	r0, [sp, #32]
 800677c:	4621      	mov	r1, r4
 800677e:	4658      	mov	r0, fp
 8006780:	f000 fcba 	bl	80070f8 <__mdiff>
 8006784:	68c2      	ldr	r2, [r0, #12]
 8006786:	4606      	mov	r6, r0
 8006788:	bb02      	cbnz	r2, 80067cc <_dtoa_r+0xa1c>
 800678a:	4601      	mov	r1, r0
 800678c:	4648      	mov	r0, r9
 800678e:	f000 fc97 	bl	80070c0 <__mcmp>
 8006792:	4602      	mov	r2, r0
 8006794:	4631      	mov	r1, r6
 8006796:	4658      	mov	r0, fp
 8006798:	920e      	str	r2, [sp, #56]	@ 0x38
 800679a:	f000 fa0d 	bl	8006bb8 <_Bfree>
 800679e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067a2:	9e07      	ldr	r6, [sp, #28]
 80067a4:	ea43 0102 	orr.w	r1, r3, r2
 80067a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067aa:	4319      	orrs	r1, r3
 80067ac:	d110      	bne.n	80067d0 <_dtoa_r+0xa20>
 80067ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80067b2:	d029      	beq.n	8006808 <_dtoa_r+0xa58>
 80067b4:	9b08      	ldr	r3, [sp, #32]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	dd02      	ble.n	80067c0 <_dtoa_r+0xa10>
 80067ba:	9b02      	ldr	r3, [sp, #8]
 80067bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80067c0:	9b00      	ldr	r3, [sp, #0]
 80067c2:	f883 8000 	strb.w	r8, [r3]
 80067c6:	e63f      	b.n	8006448 <_dtoa_r+0x698>
 80067c8:	4628      	mov	r0, r5
 80067ca:	e7bb      	b.n	8006744 <_dtoa_r+0x994>
 80067cc:	2201      	movs	r2, #1
 80067ce:	e7e1      	b.n	8006794 <_dtoa_r+0x9e4>
 80067d0:	9b08      	ldr	r3, [sp, #32]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	db04      	blt.n	80067e0 <_dtoa_r+0xa30>
 80067d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80067d8:	430b      	orrs	r3, r1
 80067da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80067dc:	430b      	orrs	r3, r1
 80067de:	d120      	bne.n	8006822 <_dtoa_r+0xa72>
 80067e0:	2a00      	cmp	r2, #0
 80067e2:	dded      	ble.n	80067c0 <_dtoa_r+0xa10>
 80067e4:	4649      	mov	r1, r9
 80067e6:	2201      	movs	r2, #1
 80067e8:	4658      	mov	r0, fp
 80067ea:	f000 fbfd 	bl	8006fe8 <__lshift>
 80067ee:	4621      	mov	r1, r4
 80067f0:	4681      	mov	r9, r0
 80067f2:	f000 fc65 	bl	80070c0 <__mcmp>
 80067f6:	2800      	cmp	r0, #0
 80067f8:	dc03      	bgt.n	8006802 <_dtoa_r+0xa52>
 80067fa:	d1e1      	bne.n	80067c0 <_dtoa_r+0xa10>
 80067fc:	f018 0f01 	tst.w	r8, #1
 8006800:	d0de      	beq.n	80067c0 <_dtoa_r+0xa10>
 8006802:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006806:	d1d8      	bne.n	80067ba <_dtoa_r+0xa0a>
 8006808:	9a00      	ldr	r2, [sp, #0]
 800680a:	2339      	movs	r3, #57	@ 0x39
 800680c:	7013      	strb	r3, [r2, #0]
 800680e:	4633      	mov	r3, r6
 8006810:	461e      	mov	r6, r3
 8006812:	3b01      	subs	r3, #1
 8006814:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006818:	2a39      	cmp	r2, #57	@ 0x39
 800681a:	d052      	beq.n	80068c2 <_dtoa_r+0xb12>
 800681c:	3201      	adds	r2, #1
 800681e:	701a      	strb	r2, [r3, #0]
 8006820:	e612      	b.n	8006448 <_dtoa_r+0x698>
 8006822:	2a00      	cmp	r2, #0
 8006824:	dd07      	ble.n	8006836 <_dtoa_r+0xa86>
 8006826:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800682a:	d0ed      	beq.n	8006808 <_dtoa_r+0xa58>
 800682c:	9a00      	ldr	r2, [sp, #0]
 800682e:	f108 0301 	add.w	r3, r8, #1
 8006832:	7013      	strb	r3, [r2, #0]
 8006834:	e608      	b.n	8006448 <_dtoa_r+0x698>
 8006836:	9b07      	ldr	r3, [sp, #28]
 8006838:	9a07      	ldr	r2, [sp, #28]
 800683a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800683e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006840:	4293      	cmp	r3, r2
 8006842:	d028      	beq.n	8006896 <_dtoa_r+0xae6>
 8006844:	4649      	mov	r1, r9
 8006846:	2300      	movs	r3, #0
 8006848:	220a      	movs	r2, #10
 800684a:	4658      	mov	r0, fp
 800684c:	f000 f9d6 	bl	8006bfc <__multadd>
 8006850:	42af      	cmp	r7, r5
 8006852:	4681      	mov	r9, r0
 8006854:	f04f 0300 	mov.w	r3, #0
 8006858:	f04f 020a 	mov.w	r2, #10
 800685c:	4639      	mov	r1, r7
 800685e:	4658      	mov	r0, fp
 8006860:	d107      	bne.n	8006872 <_dtoa_r+0xac2>
 8006862:	f000 f9cb 	bl	8006bfc <__multadd>
 8006866:	4607      	mov	r7, r0
 8006868:	4605      	mov	r5, r0
 800686a:	9b07      	ldr	r3, [sp, #28]
 800686c:	3301      	adds	r3, #1
 800686e:	9307      	str	r3, [sp, #28]
 8006870:	e774      	b.n	800675c <_dtoa_r+0x9ac>
 8006872:	f000 f9c3 	bl	8006bfc <__multadd>
 8006876:	4629      	mov	r1, r5
 8006878:	4607      	mov	r7, r0
 800687a:	2300      	movs	r3, #0
 800687c:	220a      	movs	r2, #10
 800687e:	4658      	mov	r0, fp
 8006880:	f000 f9bc 	bl	8006bfc <__multadd>
 8006884:	4605      	mov	r5, r0
 8006886:	e7f0      	b.n	800686a <_dtoa_r+0xaba>
 8006888:	9b00      	ldr	r3, [sp, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	bfcc      	ite	gt
 800688e:	461e      	movgt	r6, r3
 8006890:	2601      	movle	r6, #1
 8006892:	4456      	add	r6, sl
 8006894:	2700      	movs	r7, #0
 8006896:	4649      	mov	r1, r9
 8006898:	2201      	movs	r2, #1
 800689a:	4658      	mov	r0, fp
 800689c:	f000 fba4 	bl	8006fe8 <__lshift>
 80068a0:	4621      	mov	r1, r4
 80068a2:	4681      	mov	r9, r0
 80068a4:	f000 fc0c 	bl	80070c0 <__mcmp>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	dcb0      	bgt.n	800680e <_dtoa_r+0xa5e>
 80068ac:	d102      	bne.n	80068b4 <_dtoa_r+0xb04>
 80068ae:	f018 0f01 	tst.w	r8, #1
 80068b2:	d1ac      	bne.n	800680e <_dtoa_r+0xa5e>
 80068b4:	4633      	mov	r3, r6
 80068b6:	461e      	mov	r6, r3
 80068b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068bc:	2a30      	cmp	r2, #48	@ 0x30
 80068be:	d0fa      	beq.n	80068b6 <_dtoa_r+0xb06>
 80068c0:	e5c2      	b.n	8006448 <_dtoa_r+0x698>
 80068c2:	459a      	cmp	sl, r3
 80068c4:	d1a4      	bne.n	8006810 <_dtoa_r+0xa60>
 80068c6:	9b04      	ldr	r3, [sp, #16]
 80068c8:	3301      	adds	r3, #1
 80068ca:	9304      	str	r3, [sp, #16]
 80068cc:	2331      	movs	r3, #49	@ 0x31
 80068ce:	f88a 3000 	strb.w	r3, [sl]
 80068d2:	e5b9      	b.n	8006448 <_dtoa_r+0x698>
 80068d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80068d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006934 <_dtoa_r+0xb84>
 80068da:	b11b      	cbz	r3, 80068e4 <_dtoa_r+0xb34>
 80068dc:	f10a 0308 	add.w	r3, sl, #8
 80068e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80068e2:	6013      	str	r3, [r2, #0]
 80068e4:	4650      	mov	r0, sl
 80068e6:	b019      	add	sp, #100	@ 0x64
 80068e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	f77f ae37 	ble.w	8006562 <_dtoa_r+0x7b2>
 80068f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80068f8:	2001      	movs	r0, #1
 80068fa:	e655      	b.n	80065a8 <_dtoa_r+0x7f8>
 80068fc:	9b00      	ldr	r3, [sp, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f77f aed6 	ble.w	80066b0 <_dtoa_r+0x900>
 8006904:	4656      	mov	r6, sl
 8006906:	4621      	mov	r1, r4
 8006908:	4648      	mov	r0, r9
 800690a:	f7ff f9c7 	bl	8005c9c <quorem>
 800690e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006912:	f806 8b01 	strb.w	r8, [r6], #1
 8006916:	9b00      	ldr	r3, [sp, #0]
 8006918:	eba6 020a 	sub.w	r2, r6, sl
 800691c:	4293      	cmp	r3, r2
 800691e:	ddb3      	ble.n	8006888 <_dtoa_r+0xad8>
 8006920:	4649      	mov	r1, r9
 8006922:	2300      	movs	r3, #0
 8006924:	220a      	movs	r2, #10
 8006926:	4658      	mov	r0, fp
 8006928:	f000 f968 	bl	8006bfc <__multadd>
 800692c:	4681      	mov	r9, r0
 800692e:	e7ea      	b.n	8006906 <_dtoa_r+0xb56>
 8006930:	0800943d 	.word	0x0800943d
 8006934:	080093c1 	.word	0x080093c1

08006938 <_free_r>:
 8006938:	b538      	push	{r3, r4, r5, lr}
 800693a:	4605      	mov	r5, r0
 800693c:	2900      	cmp	r1, #0
 800693e:	d041      	beq.n	80069c4 <_free_r+0x8c>
 8006940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006944:	1f0c      	subs	r4, r1, #4
 8006946:	2b00      	cmp	r3, #0
 8006948:	bfb8      	it	lt
 800694a:	18e4      	addlt	r4, r4, r3
 800694c:	f000 f8e8 	bl	8006b20 <__malloc_lock>
 8006950:	4a1d      	ldr	r2, [pc, #116]	@ (80069c8 <_free_r+0x90>)
 8006952:	6813      	ldr	r3, [r2, #0]
 8006954:	b933      	cbnz	r3, 8006964 <_free_r+0x2c>
 8006956:	6063      	str	r3, [r4, #4]
 8006958:	6014      	str	r4, [r2, #0]
 800695a:	4628      	mov	r0, r5
 800695c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006960:	f000 b8e4 	b.w	8006b2c <__malloc_unlock>
 8006964:	42a3      	cmp	r3, r4
 8006966:	d908      	bls.n	800697a <_free_r+0x42>
 8006968:	6820      	ldr	r0, [r4, #0]
 800696a:	1821      	adds	r1, r4, r0
 800696c:	428b      	cmp	r3, r1
 800696e:	bf01      	itttt	eq
 8006970:	6819      	ldreq	r1, [r3, #0]
 8006972:	685b      	ldreq	r3, [r3, #4]
 8006974:	1809      	addeq	r1, r1, r0
 8006976:	6021      	streq	r1, [r4, #0]
 8006978:	e7ed      	b.n	8006956 <_free_r+0x1e>
 800697a:	461a      	mov	r2, r3
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	b10b      	cbz	r3, 8006984 <_free_r+0x4c>
 8006980:	42a3      	cmp	r3, r4
 8006982:	d9fa      	bls.n	800697a <_free_r+0x42>
 8006984:	6811      	ldr	r1, [r2, #0]
 8006986:	1850      	adds	r0, r2, r1
 8006988:	42a0      	cmp	r0, r4
 800698a:	d10b      	bne.n	80069a4 <_free_r+0x6c>
 800698c:	6820      	ldr	r0, [r4, #0]
 800698e:	4401      	add	r1, r0
 8006990:	1850      	adds	r0, r2, r1
 8006992:	4283      	cmp	r3, r0
 8006994:	6011      	str	r1, [r2, #0]
 8006996:	d1e0      	bne.n	800695a <_free_r+0x22>
 8006998:	6818      	ldr	r0, [r3, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	6053      	str	r3, [r2, #4]
 800699e:	4408      	add	r0, r1
 80069a0:	6010      	str	r0, [r2, #0]
 80069a2:	e7da      	b.n	800695a <_free_r+0x22>
 80069a4:	d902      	bls.n	80069ac <_free_r+0x74>
 80069a6:	230c      	movs	r3, #12
 80069a8:	602b      	str	r3, [r5, #0]
 80069aa:	e7d6      	b.n	800695a <_free_r+0x22>
 80069ac:	6820      	ldr	r0, [r4, #0]
 80069ae:	1821      	adds	r1, r4, r0
 80069b0:	428b      	cmp	r3, r1
 80069b2:	bf04      	itt	eq
 80069b4:	6819      	ldreq	r1, [r3, #0]
 80069b6:	685b      	ldreq	r3, [r3, #4]
 80069b8:	6063      	str	r3, [r4, #4]
 80069ba:	bf04      	itt	eq
 80069bc:	1809      	addeq	r1, r1, r0
 80069be:	6021      	streq	r1, [r4, #0]
 80069c0:	6054      	str	r4, [r2, #4]
 80069c2:	e7ca      	b.n	800695a <_free_r+0x22>
 80069c4:	bd38      	pop	{r3, r4, r5, pc}
 80069c6:	bf00      	nop
 80069c8:	20000910 	.word	0x20000910

080069cc <malloc>:
 80069cc:	4b02      	ldr	r3, [pc, #8]	@ (80069d8 <malloc+0xc>)
 80069ce:	4601      	mov	r1, r0
 80069d0:	6818      	ldr	r0, [r3, #0]
 80069d2:	f000 b825 	b.w	8006a20 <_malloc_r>
 80069d6:	bf00      	nop
 80069d8:	200001a8 	.word	0x200001a8

080069dc <sbrk_aligned>:
 80069dc:	b570      	push	{r4, r5, r6, lr}
 80069de:	4e0f      	ldr	r6, [pc, #60]	@ (8006a1c <sbrk_aligned+0x40>)
 80069e0:	460c      	mov	r4, r1
 80069e2:	6831      	ldr	r1, [r6, #0]
 80069e4:	4605      	mov	r5, r0
 80069e6:	b911      	cbnz	r1, 80069ee <sbrk_aligned+0x12>
 80069e8:	f001 fe0c 	bl	8008604 <_sbrk_r>
 80069ec:	6030      	str	r0, [r6, #0]
 80069ee:	4621      	mov	r1, r4
 80069f0:	4628      	mov	r0, r5
 80069f2:	f001 fe07 	bl	8008604 <_sbrk_r>
 80069f6:	1c43      	adds	r3, r0, #1
 80069f8:	d103      	bne.n	8006a02 <sbrk_aligned+0x26>
 80069fa:	f04f 34ff 	mov.w	r4, #4294967295
 80069fe:	4620      	mov	r0, r4
 8006a00:	bd70      	pop	{r4, r5, r6, pc}
 8006a02:	1cc4      	adds	r4, r0, #3
 8006a04:	f024 0403 	bic.w	r4, r4, #3
 8006a08:	42a0      	cmp	r0, r4
 8006a0a:	d0f8      	beq.n	80069fe <sbrk_aligned+0x22>
 8006a0c:	1a21      	subs	r1, r4, r0
 8006a0e:	4628      	mov	r0, r5
 8006a10:	f001 fdf8 	bl	8008604 <_sbrk_r>
 8006a14:	3001      	adds	r0, #1
 8006a16:	d1f2      	bne.n	80069fe <sbrk_aligned+0x22>
 8006a18:	e7ef      	b.n	80069fa <sbrk_aligned+0x1e>
 8006a1a:	bf00      	nop
 8006a1c:	2000090c 	.word	0x2000090c

08006a20 <_malloc_r>:
 8006a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a24:	1ccd      	adds	r5, r1, #3
 8006a26:	f025 0503 	bic.w	r5, r5, #3
 8006a2a:	3508      	adds	r5, #8
 8006a2c:	2d0c      	cmp	r5, #12
 8006a2e:	bf38      	it	cc
 8006a30:	250c      	movcc	r5, #12
 8006a32:	2d00      	cmp	r5, #0
 8006a34:	4606      	mov	r6, r0
 8006a36:	db01      	blt.n	8006a3c <_malloc_r+0x1c>
 8006a38:	42a9      	cmp	r1, r5
 8006a3a:	d904      	bls.n	8006a46 <_malloc_r+0x26>
 8006a3c:	230c      	movs	r3, #12
 8006a3e:	6033      	str	r3, [r6, #0]
 8006a40:	2000      	movs	r0, #0
 8006a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b1c <_malloc_r+0xfc>
 8006a4a:	f000 f869 	bl	8006b20 <__malloc_lock>
 8006a4e:	f8d8 3000 	ldr.w	r3, [r8]
 8006a52:	461c      	mov	r4, r3
 8006a54:	bb44      	cbnz	r4, 8006aa8 <_malloc_r+0x88>
 8006a56:	4629      	mov	r1, r5
 8006a58:	4630      	mov	r0, r6
 8006a5a:	f7ff ffbf 	bl	80069dc <sbrk_aligned>
 8006a5e:	1c43      	adds	r3, r0, #1
 8006a60:	4604      	mov	r4, r0
 8006a62:	d158      	bne.n	8006b16 <_malloc_r+0xf6>
 8006a64:	f8d8 4000 	ldr.w	r4, [r8]
 8006a68:	4627      	mov	r7, r4
 8006a6a:	2f00      	cmp	r7, #0
 8006a6c:	d143      	bne.n	8006af6 <_malloc_r+0xd6>
 8006a6e:	2c00      	cmp	r4, #0
 8006a70:	d04b      	beq.n	8006b0a <_malloc_r+0xea>
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	4639      	mov	r1, r7
 8006a76:	4630      	mov	r0, r6
 8006a78:	eb04 0903 	add.w	r9, r4, r3
 8006a7c:	f001 fdc2 	bl	8008604 <_sbrk_r>
 8006a80:	4581      	cmp	r9, r0
 8006a82:	d142      	bne.n	8006b0a <_malloc_r+0xea>
 8006a84:	6821      	ldr	r1, [r4, #0]
 8006a86:	1a6d      	subs	r5, r5, r1
 8006a88:	4629      	mov	r1, r5
 8006a8a:	4630      	mov	r0, r6
 8006a8c:	f7ff ffa6 	bl	80069dc <sbrk_aligned>
 8006a90:	3001      	adds	r0, #1
 8006a92:	d03a      	beq.n	8006b0a <_malloc_r+0xea>
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	442b      	add	r3, r5
 8006a98:	6023      	str	r3, [r4, #0]
 8006a9a:	f8d8 3000 	ldr.w	r3, [r8]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	bb62      	cbnz	r2, 8006afc <_malloc_r+0xdc>
 8006aa2:	f8c8 7000 	str.w	r7, [r8]
 8006aa6:	e00f      	b.n	8006ac8 <_malloc_r+0xa8>
 8006aa8:	6822      	ldr	r2, [r4, #0]
 8006aaa:	1b52      	subs	r2, r2, r5
 8006aac:	d420      	bmi.n	8006af0 <_malloc_r+0xd0>
 8006aae:	2a0b      	cmp	r2, #11
 8006ab0:	d917      	bls.n	8006ae2 <_malloc_r+0xc2>
 8006ab2:	1961      	adds	r1, r4, r5
 8006ab4:	42a3      	cmp	r3, r4
 8006ab6:	6025      	str	r5, [r4, #0]
 8006ab8:	bf18      	it	ne
 8006aba:	6059      	strne	r1, [r3, #4]
 8006abc:	6863      	ldr	r3, [r4, #4]
 8006abe:	bf08      	it	eq
 8006ac0:	f8c8 1000 	streq.w	r1, [r8]
 8006ac4:	5162      	str	r2, [r4, r5]
 8006ac6:	604b      	str	r3, [r1, #4]
 8006ac8:	4630      	mov	r0, r6
 8006aca:	f000 f82f 	bl	8006b2c <__malloc_unlock>
 8006ace:	f104 000b 	add.w	r0, r4, #11
 8006ad2:	1d23      	adds	r3, r4, #4
 8006ad4:	f020 0007 	bic.w	r0, r0, #7
 8006ad8:	1ac2      	subs	r2, r0, r3
 8006ada:	bf1c      	itt	ne
 8006adc:	1a1b      	subne	r3, r3, r0
 8006ade:	50a3      	strne	r3, [r4, r2]
 8006ae0:	e7af      	b.n	8006a42 <_malloc_r+0x22>
 8006ae2:	6862      	ldr	r2, [r4, #4]
 8006ae4:	42a3      	cmp	r3, r4
 8006ae6:	bf0c      	ite	eq
 8006ae8:	f8c8 2000 	streq.w	r2, [r8]
 8006aec:	605a      	strne	r2, [r3, #4]
 8006aee:	e7eb      	b.n	8006ac8 <_malloc_r+0xa8>
 8006af0:	4623      	mov	r3, r4
 8006af2:	6864      	ldr	r4, [r4, #4]
 8006af4:	e7ae      	b.n	8006a54 <_malloc_r+0x34>
 8006af6:	463c      	mov	r4, r7
 8006af8:	687f      	ldr	r7, [r7, #4]
 8006afa:	e7b6      	b.n	8006a6a <_malloc_r+0x4a>
 8006afc:	461a      	mov	r2, r3
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	42a3      	cmp	r3, r4
 8006b02:	d1fb      	bne.n	8006afc <_malloc_r+0xdc>
 8006b04:	2300      	movs	r3, #0
 8006b06:	6053      	str	r3, [r2, #4]
 8006b08:	e7de      	b.n	8006ac8 <_malloc_r+0xa8>
 8006b0a:	230c      	movs	r3, #12
 8006b0c:	6033      	str	r3, [r6, #0]
 8006b0e:	4630      	mov	r0, r6
 8006b10:	f000 f80c 	bl	8006b2c <__malloc_unlock>
 8006b14:	e794      	b.n	8006a40 <_malloc_r+0x20>
 8006b16:	6005      	str	r5, [r0, #0]
 8006b18:	e7d6      	b.n	8006ac8 <_malloc_r+0xa8>
 8006b1a:	bf00      	nop
 8006b1c:	20000910 	.word	0x20000910

08006b20 <__malloc_lock>:
 8006b20:	4801      	ldr	r0, [pc, #4]	@ (8006b28 <__malloc_lock+0x8>)
 8006b22:	f7ff b8b2 	b.w	8005c8a <__retarget_lock_acquire_recursive>
 8006b26:	bf00      	nop
 8006b28:	20000908 	.word	0x20000908

08006b2c <__malloc_unlock>:
 8006b2c:	4801      	ldr	r0, [pc, #4]	@ (8006b34 <__malloc_unlock+0x8>)
 8006b2e:	f7ff b8ad 	b.w	8005c8c <__retarget_lock_release_recursive>
 8006b32:	bf00      	nop
 8006b34:	20000908 	.word	0x20000908

08006b38 <_Balloc>:
 8006b38:	b570      	push	{r4, r5, r6, lr}
 8006b3a:	69c6      	ldr	r6, [r0, #28]
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	460d      	mov	r5, r1
 8006b40:	b976      	cbnz	r6, 8006b60 <_Balloc+0x28>
 8006b42:	2010      	movs	r0, #16
 8006b44:	f7ff ff42 	bl	80069cc <malloc>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	61e0      	str	r0, [r4, #28]
 8006b4c:	b920      	cbnz	r0, 8006b58 <_Balloc+0x20>
 8006b4e:	4b18      	ldr	r3, [pc, #96]	@ (8006bb0 <_Balloc+0x78>)
 8006b50:	4818      	ldr	r0, [pc, #96]	@ (8006bb4 <_Balloc+0x7c>)
 8006b52:	216b      	movs	r1, #107	@ 0x6b
 8006b54:	f001 fd7c 	bl	8008650 <__assert_func>
 8006b58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b5c:	6006      	str	r6, [r0, #0]
 8006b5e:	60c6      	str	r6, [r0, #12]
 8006b60:	69e6      	ldr	r6, [r4, #28]
 8006b62:	68f3      	ldr	r3, [r6, #12]
 8006b64:	b183      	cbz	r3, 8006b88 <_Balloc+0x50>
 8006b66:	69e3      	ldr	r3, [r4, #28]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b6e:	b9b8      	cbnz	r0, 8006ba0 <_Balloc+0x68>
 8006b70:	2101      	movs	r1, #1
 8006b72:	fa01 f605 	lsl.w	r6, r1, r5
 8006b76:	1d72      	adds	r2, r6, #5
 8006b78:	0092      	lsls	r2, r2, #2
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f001 fd86 	bl	800868c <_calloc_r>
 8006b80:	b160      	cbz	r0, 8006b9c <_Balloc+0x64>
 8006b82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b86:	e00e      	b.n	8006ba6 <_Balloc+0x6e>
 8006b88:	2221      	movs	r2, #33	@ 0x21
 8006b8a:	2104      	movs	r1, #4
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f001 fd7d 	bl	800868c <_calloc_r>
 8006b92:	69e3      	ldr	r3, [r4, #28]
 8006b94:	60f0      	str	r0, [r6, #12]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1e4      	bne.n	8006b66 <_Balloc+0x2e>
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ba0:	6802      	ldr	r2, [r0, #0]
 8006ba2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006bac:	e7f7      	b.n	8006b9e <_Balloc+0x66>
 8006bae:	bf00      	nop
 8006bb0:	080093ce 	.word	0x080093ce
 8006bb4:	0800944e 	.word	0x0800944e

08006bb8 <_Bfree>:
 8006bb8:	b570      	push	{r4, r5, r6, lr}
 8006bba:	69c6      	ldr	r6, [r0, #28]
 8006bbc:	4605      	mov	r5, r0
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	b976      	cbnz	r6, 8006be0 <_Bfree+0x28>
 8006bc2:	2010      	movs	r0, #16
 8006bc4:	f7ff ff02 	bl	80069cc <malloc>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	61e8      	str	r0, [r5, #28]
 8006bcc:	b920      	cbnz	r0, 8006bd8 <_Bfree+0x20>
 8006bce:	4b09      	ldr	r3, [pc, #36]	@ (8006bf4 <_Bfree+0x3c>)
 8006bd0:	4809      	ldr	r0, [pc, #36]	@ (8006bf8 <_Bfree+0x40>)
 8006bd2:	218f      	movs	r1, #143	@ 0x8f
 8006bd4:	f001 fd3c 	bl	8008650 <__assert_func>
 8006bd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bdc:	6006      	str	r6, [r0, #0]
 8006bde:	60c6      	str	r6, [r0, #12]
 8006be0:	b13c      	cbz	r4, 8006bf2 <_Bfree+0x3a>
 8006be2:	69eb      	ldr	r3, [r5, #28]
 8006be4:	6862      	ldr	r2, [r4, #4]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006bec:	6021      	str	r1, [r4, #0]
 8006bee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006bf2:	bd70      	pop	{r4, r5, r6, pc}
 8006bf4:	080093ce 	.word	0x080093ce
 8006bf8:	0800944e 	.word	0x0800944e

08006bfc <__multadd>:
 8006bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c00:	690d      	ldr	r5, [r1, #16]
 8006c02:	4607      	mov	r7, r0
 8006c04:	460c      	mov	r4, r1
 8006c06:	461e      	mov	r6, r3
 8006c08:	f101 0c14 	add.w	ip, r1, #20
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	f8dc 3000 	ldr.w	r3, [ip]
 8006c12:	b299      	uxth	r1, r3
 8006c14:	fb02 6101 	mla	r1, r2, r1, r6
 8006c18:	0c1e      	lsrs	r6, r3, #16
 8006c1a:	0c0b      	lsrs	r3, r1, #16
 8006c1c:	fb02 3306 	mla	r3, r2, r6, r3
 8006c20:	b289      	uxth	r1, r1
 8006c22:	3001      	adds	r0, #1
 8006c24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c28:	4285      	cmp	r5, r0
 8006c2a:	f84c 1b04 	str.w	r1, [ip], #4
 8006c2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c32:	dcec      	bgt.n	8006c0e <__multadd+0x12>
 8006c34:	b30e      	cbz	r6, 8006c7a <__multadd+0x7e>
 8006c36:	68a3      	ldr	r3, [r4, #8]
 8006c38:	42ab      	cmp	r3, r5
 8006c3a:	dc19      	bgt.n	8006c70 <__multadd+0x74>
 8006c3c:	6861      	ldr	r1, [r4, #4]
 8006c3e:	4638      	mov	r0, r7
 8006c40:	3101      	adds	r1, #1
 8006c42:	f7ff ff79 	bl	8006b38 <_Balloc>
 8006c46:	4680      	mov	r8, r0
 8006c48:	b928      	cbnz	r0, 8006c56 <__multadd+0x5a>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8006c80 <__multadd+0x84>)
 8006c4e:	480d      	ldr	r0, [pc, #52]	@ (8006c84 <__multadd+0x88>)
 8006c50:	21ba      	movs	r1, #186	@ 0xba
 8006c52:	f001 fcfd 	bl	8008650 <__assert_func>
 8006c56:	6922      	ldr	r2, [r4, #16]
 8006c58:	3202      	adds	r2, #2
 8006c5a:	f104 010c 	add.w	r1, r4, #12
 8006c5e:	0092      	lsls	r2, r2, #2
 8006c60:	300c      	adds	r0, #12
 8006c62:	f001 fcdf 	bl	8008624 <memcpy>
 8006c66:	4621      	mov	r1, r4
 8006c68:	4638      	mov	r0, r7
 8006c6a:	f7ff ffa5 	bl	8006bb8 <_Bfree>
 8006c6e:	4644      	mov	r4, r8
 8006c70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c74:	3501      	adds	r5, #1
 8006c76:	615e      	str	r6, [r3, #20]
 8006c78:	6125      	str	r5, [r4, #16]
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c80:	0800943d 	.word	0x0800943d
 8006c84:	0800944e 	.word	0x0800944e

08006c88 <__s2b>:
 8006c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c8c:	460c      	mov	r4, r1
 8006c8e:	4615      	mov	r5, r2
 8006c90:	461f      	mov	r7, r3
 8006c92:	2209      	movs	r2, #9
 8006c94:	3308      	adds	r3, #8
 8006c96:	4606      	mov	r6, r0
 8006c98:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	db09      	blt.n	8006cb8 <__s2b+0x30>
 8006ca4:	4630      	mov	r0, r6
 8006ca6:	f7ff ff47 	bl	8006b38 <_Balloc>
 8006caa:	b940      	cbnz	r0, 8006cbe <__s2b+0x36>
 8006cac:	4602      	mov	r2, r0
 8006cae:	4b19      	ldr	r3, [pc, #100]	@ (8006d14 <__s2b+0x8c>)
 8006cb0:	4819      	ldr	r0, [pc, #100]	@ (8006d18 <__s2b+0x90>)
 8006cb2:	21d3      	movs	r1, #211	@ 0xd3
 8006cb4:	f001 fccc 	bl	8008650 <__assert_func>
 8006cb8:	0052      	lsls	r2, r2, #1
 8006cba:	3101      	adds	r1, #1
 8006cbc:	e7f0      	b.n	8006ca0 <__s2b+0x18>
 8006cbe:	9b08      	ldr	r3, [sp, #32]
 8006cc0:	6143      	str	r3, [r0, #20]
 8006cc2:	2d09      	cmp	r5, #9
 8006cc4:	f04f 0301 	mov.w	r3, #1
 8006cc8:	6103      	str	r3, [r0, #16]
 8006cca:	dd16      	ble.n	8006cfa <__s2b+0x72>
 8006ccc:	f104 0909 	add.w	r9, r4, #9
 8006cd0:	46c8      	mov	r8, r9
 8006cd2:	442c      	add	r4, r5
 8006cd4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006cd8:	4601      	mov	r1, r0
 8006cda:	3b30      	subs	r3, #48	@ 0x30
 8006cdc:	220a      	movs	r2, #10
 8006cde:	4630      	mov	r0, r6
 8006ce0:	f7ff ff8c 	bl	8006bfc <__multadd>
 8006ce4:	45a0      	cmp	r8, r4
 8006ce6:	d1f5      	bne.n	8006cd4 <__s2b+0x4c>
 8006ce8:	f1a5 0408 	sub.w	r4, r5, #8
 8006cec:	444c      	add	r4, r9
 8006cee:	1b2d      	subs	r5, r5, r4
 8006cf0:	1963      	adds	r3, r4, r5
 8006cf2:	42bb      	cmp	r3, r7
 8006cf4:	db04      	blt.n	8006d00 <__s2b+0x78>
 8006cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cfa:	340a      	adds	r4, #10
 8006cfc:	2509      	movs	r5, #9
 8006cfe:	e7f6      	b.n	8006cee <__s2b+0x66>
 8006d00:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006d04:	4601      	mov	r1, r0
 8006d06:	3b30      	subs	r3, #48	@ 0x30
 8006d08:	220a      	movs	r2, #10
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	f7ff ff76 	bl	8006bfc <__multadd>
 8006d10:	e7ee      	b.n	8006cf0 <__s2b+0x68>
 8006d12:	bf00      	nop
 8006d14:	0800943d 	.word	0x0800943d
 8006d18:	0800944e 	.word	0x0800944e

08006d1c <__hi0bits>:
 8006d1c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006d20:	4603      	mov	r3, r0
 8006d22:	bf36      	itet	cc
 8006d24:	0403      	lslcc	r3, r0, #16
 8006d26:	2000      	movcs	r0, #0
 8006d28:	2010      	movcc	r0, #16
 8006d2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d2e:	bf3c      	itt	cc
 8006d30:	021b      	lslcc	r3, r3, #8
 8006d32:	3008      	addcc	r0, #8
 8006d34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d38:	bf3c      	itt	cc
 8006d3a:	011b      	lslcc	r3, r3, #4
 8006d3c:	3004      	addcc	r0, #4
 8006d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d42:	bf3c      	itt	cc
 8006d44:	009b      	lslcc	r3, r3, #2
 8006d46:	3002      	addcc	r0, #2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	db05      	blt.n	8006d58 <__hi0bits+0x3c>
 8006d4c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006d50:	f100 0001 	add.w	r0, r0, #1
 8006d54:	bf08      	it	eq
 8006d56:	2020      	moveq	r0, #32
 8006d58:	4770      	bx	lr

08006d5a <__lo0bits>:
 8006d5a:	6803      	ldr	r3, [r0, #0]
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	f013 0007 	ands.w	r0, r3, #7
 8006d62:	d00b      	beq.n	8006d7c <__lo0bits+0x22>
 8006d64:	07d9      	lsls	r1, r3, #31
 8006d66:	d421      	bmi.n	8006dac <__lo0bits+0x52>
 8006d68:	0798      	lsls	r0, r3, #30
 8006d6a:	bf49      	itett	mi
 8006d6c:	085b      	lsrmi	r3, r3, #1
 8006d6e:	089b      	lsrpl	r3, r3, #2
 8006d70:	2001      	movmi	r0, #1
 8006d72:	6013      	strmi	r3, [r2, #0]
 8006d74:	bf5c      	itt	pl
 8006d76:	6013      	strpl	r3, [r2, #0]
 8006d78:	2002      	movpl	r0, #2
 8006d7a:	4770      	bx	lr
 8006d7c:	b299      	uxth	r1, r3
 8006d7e:	b909      	cbnz	r1, 8006d84 <__lo0bits+0x2a>
 8006d80:	0c1b      	lsrs	r3, r3, #16
 8006d82:	2010      	movs	r0, #16
 8006d84:	b2d9      	uxtb	r1, r3
 8006d86:	b909      	cbnz	r1, 8006d8c <__lo0bits+0x32>
 8006d88:	3008      	adds	r0, #8
 8006d8a:	0a1b      	lsrs	r3, r3, #8
 8006d8c:	0719      	lsls	r1, r3, #28
 8006d8e:	bf04      	itt	eq
 8006d90:	091b      	lsreq	r3, r3, #4
 8006d92:	3004      	addeq	r0, #4
 8006d94:	0799      	lsls	r1, r3, #30
 8006d96:	bf04      	itt	eq
 8006d98:	089b      	lsreq	r3, r3, #2
 8006d9a:	3002      	addeq	r0, #2
 8006d9c:	07d9      	lsls	r1, r3, #31
 8006d9e:	d403      	bmi.n	8006da8 <__lo0bits+0x4e>
 8006da0:	085b      	lsrs	r3, r3, #1
 8006da2:	f100 0001 	add.w	r0, r0, #1
 8006da6:	d003      	beq.n	8006db0 <__lo0bits+0x56>
 8006da8:	6013      	str	r3, [r2, #0]
 8006daa:	4770      	bx	lr
 8006dac:	2000      	movs	r0, #0
 8006dae:	4770      	bx	lr
 8006db0:	2020      	movs	r0, #32
 8006db2:	4770      	bx	lr

08006db4 <__i2b>:
 8006db4:	b510      	push	{r4, lr}
 8006db6:	460c      	mov	r4, r1
 8006db8:	2101      	movs	r1, #1
 8006dba:	f7ff febd 	bl	8006b38 <_Balloc>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	b928      	cbnz	r0, 8006dce <__i2b+0x1a>
 8006dc2:	4b05      	ldr	r3, [pc, #20]	@ (8006dd8 <__i2b+0x24>)
 8006dc4:	4805      	ldr	r0, [pc, #20]	@ (8006ddc <__i2b+0x28>)
 8006dc6:	f240 1145 	movw	r1, #325	@ 0x145
 8006dca:	f001 fc41 	bl	8008650 <__assert_func>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	6144      	str	r4, [r0, #20]
 8006dd2:	6103      	str	r3, [r0, #16]
 8006dd4:	bd10      	pop	{r4, pc}
 8006dd6:	bf00      	nop
 8006dd8:	0800943d 	.word	0x0800943d
 8006ddc:	0800944e 	.word	0x0800944e

08006de0 <__multiply>:
 8006de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de4:	4614      	mov	r4, r2
 8006de6:	690a      	ldr	r2, [r1, #16]
 8006de8:	6923      	ldr	r3, [r4, #16]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	bfa8      	it	ge
 8006dee:	4623      	movge	r3, r4
 8006df0:	460f      	mov	r7, r1
 8006df2:	bfa4      	itt	ge
 8006df4:	460c      	movge	r4, r1
 8006df6:	461f      	movge	r7, r3
 8006df8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006dfc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006e00:	68a3      	ldr	r3, [r4, #8]
 8006e02:	6861      	ldr	r1, [r4, #4]
 8006e04:	eb0a 0609 	add.w	r6, sl, r9
 8006e08:	42b3      	cmp	r3, r6
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	bfb8      	it	lt
 8006e0e:	3101      	addlt	r1, #1
 8006e10:	f7ff fe92 	bl	8006b38 <_Balloc>
 8006e14:	b930      	cbnz	r0, 8006e24 <__multiply+0x44>
 8006e16:	4602      	mov	r2, r0
 8006e18:	4b44      	ldr	r3, [pc, #272]	@ (8006f2c <__multiply+0x14c>)
 8006e1a:	4845      	ldr	r0, [pc, #276]	@ (8006f30 <__multiply+0x150>)
 8006e1c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006e20:	f001 fc16 	bl	8008650 <__assert_func>
 8006e24:	f100 0514 	add.w	r5, r0, #20
 8006e28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e2c:	462b      	mov	r3, r5
 8006e2e:	2200      	movs	r2, #0
 8006e30:	4543      	cmp	r3, r8
 8006e32:	d321      	bcc.n	8006e78 <__multiply+0x98>
 8006e34:	f107 0114 	add.w	r1, r7, #20
 8006e38:	f104 0214 	add.w	r2, r4, #20
 8006e3c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006e40:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006e44:	9302      	str	r3, [sp, #8]
 8006e46:	1b13      	subs	r3, r2, r4
 8006e48:	3b15      	subs	r3, #21
 8006e4a:	f023 0303 	bic.w	r3, r3, #3
 8006e4e:	3304      	adds	r3, #4
 8006e50:	f104 0715 	add.w	r7, r4, #21
 8006e54:	42ba      	cmp	r2, r7
 8006e56:	bf38      	it	cc
 8006e58:	2304      	movcc	r3, #4
 8006e5a:	9301      	str	r3, [sp, #4]
 8006e5c:	9b02      	ldr	r3, [sp, #8]
 8006e5e:	9103      	str	r1, [sp, #12]
 8006e60:	428b      	cmp	r3, r1
 8006e62:	d80c      	bhi.n	8006e7e <__multiply+0x9e>
 8006e64:	2e00      	cmp	r6, #0
 8006e66:	dd03      	ble.n	8006e70 <__multiply+0x90>
 8006e68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d05b      	beq.n	8006f28 <__multiply+0x148>
 8006e70:	6106      	str	r6, [r0, #16]
 8006e72:	b005      	add	sp, #20
 8006e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e78:	f843 2b04 	str.w	r2, [r3], #4
 8006e7c:	e7d8      	b.n	8006e30 <__multiply+0x50>
 8006e7e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006e82:	f1ba 0f00 	cmp.w	sl, #0
 8006e86:	d024      	beq.n	8006ed2 <__multiply+0xf2>
 8006e88:	f104 0e14 	add.w	lr, r4, #20
 8006e8c:	46a9      	mov	r9, r5
 8006e8e:	f04f 0c00 	mov.w	ip, #0
 8006e92:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006e96:	f8d9 3000 	ldr.w	r3, [r9]
 8006e9a:	fa1f fb87 	uxth.w	fp, r7
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	fb0a 330b 	mla	r3, sl, fp, r3
 8006ea4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006ea8:	f8d9 7000 	ldr.w	r7, [r9]
 8006eac:	4463      	add	r3, ip
 8006eae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006eb2:	fb0a c70b 	mla	r7, sl, fp, ip
 8006eb6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006ec0:	4572      	cmp	r2, lr
 8006ec2:	f849 3b04 	str.w	r3, [r9], #4
 8006ec6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006eca:	d8e2      	bhi.n	8006e92 <__multiply+0xb2>
 8006ecc:	9b01      	ldr	r3, [sp, #4]
 8006ece:	f845 c003 	str.w	ip, [r5, r3]
 8006ed2:	9b03      	ldr	r3, [sp, #12]
 8006ed4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006ed8:	3104      	adds	r1, #4
 8006eda:	f1b9 0f00 	cmp.w	r9, #0
 8006ede:	d021      	beq.n	8006f24 <__multiply+0x144>
 8006ee0:	682b      	ldr	r3, [r5, #0]
 8006ee2:	f104 0c14 	add.w	ip, r4, #20
 8006ee6:	46ae      	mov	lr, r5
 8006ee8:	f04f 0a00 	mov.w	sl, #0
 8006eec:	f8bc b000 	ldrh.w	fp, [ip]
 8006ef0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006ef4:	fb09 770b 	mla	r7, r9, fp, r7
 8006ef8:	4457      	add	r7, sl
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006f00:	f84e 3b04 	str.w	r3, [lr], #4
 8006f04:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f0c:	f8be 3000 	ldrh.w	r3, [lr]
 8006f10:	fb09 330a 	mla	r3, r9, sl, r3
 8006f14:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006f18:	4562      	cmp	r2, ip
 8006f1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f1e:	d8e5      	bhi.n	8006eec <__multiply+0x10c>
 8006f20:	9f01      	ldr	r7, [sp, #4]
 8006f22:	51eb      	str	r3, [r5, r7]
 8006f24:	3504      	adds	r5, #4
 8006f26:	e799      	b.n	8006e5c <__multiply+0x7c>
 8006f28:	3e01      	subs	r6, #1
 8006f2a:	e79b      	b.n	8006e64 <__multiply+0x84>
 8006f2c:	0800943d 	.word	0x0800943d
 8006f30:	0800944e 	.word	0x0800944e

08006f34 <__pow5mult>:
 8006f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f38:	4615      	mov	r5, r2
 8006f3a:	f012 0203 	ands.w	r2, r2, #3
 8006f3e:	4607      	mov	r7, r0
 8006f40:	460e      	mov	r6, r1
 8006f42:	d007      	beq.n	8006f54 <__pow5mult+0x20>
 8006f44:	4c25      	ldr	r4, [pc, #148]	@ (8006fdc <__pow5mult+0xa8>)
 8006f46:	3a01      	subs	r2, #1
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f4e:	f7ff fe55 	bl	8006bfc <__multadd>
 8006f52:	4606      	mov	r6, r0
 8006f54:	10ad      	asrs	r5, r5, #2
 8006f56:	d03d      	beq.n	8006fd4 <__pow5mult+0xa0>
 8006f58:	69fc      	ldr	r4, [r7, #28]
 8006f5a:	b97c      	cbnz	r4, 8006f7c <__pow5mult+0x48>
 8006f5c:	2010      	movs	r0, #16
 8006f5e:	f7ff fd35 	bl	80069cc <malloc>
 8006f62:	4602      	mov	r2, r0
 8006f64:	61f8      	str	r0, [r7, #28]
 8006f66:	b928      	cbnz	r0, 8006f74 <__pow5mult+0x40>
 8006f68:	4b1d      	ldr	r3, [pc, #116]	@ (8006fe0 <__pow5mult+0xac>)
 8006f6a:	481e      	ldr	r0, [pc, #120]	@ (8006fe4 <__pow5mult+0xb0>)
 8006f6c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006f70:	f001 fb6e 	bl	8008650 <__assert_func>
 8006f74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f78:	6004      	str	r4, [r0, #0]
 8006f7a:	60c4      	str	r4, [r0, #12]
 8006f7c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006f80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f84:	b94c      	cbnz	r4, 8006f9a <__pow5mult+0x66>
 8006f86:	f240 2171 	movw	r1, #625	@ 0x271
 8006f8a:	4638      	mov	r0, r7
 8006f8c:	f7ff ff12 	bl	8006db4 <__i2b>
 8006f90:	2300      	movs	r3, #0
 8006f92:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f96:	4604      	mov	r4, r0
 8006f98:	6003      	str	r3, [r0, #0]
 8006f9a:	f04f 0900 	mov.w	r9, #0
 8006f9e:	07eb      	lsls	r3, r5, #31
 8006fa0:	d50a      	bpl.n	8006fb8 <__pow5mult+0x84>
 8006fa2:	4631      	mov	r1, r6
 8006fa4:	4622      	mov	r2, r4
 8006fa6:	4638      	mov	r0, r7
 8006fa8:	f7ff ff1a 	bl	8006de0 <__multiply>
 8006fac:	4631      	mov	r1, r6
 8006fae:	4680      	mov	r8, r0
 8006fb0:	4638      	mov	r0, r7
 8006fb2:	f7ff fe01 	bl	8006bb8 <_Bfree>
 8006fb6:	4646      	mov	r6, r8
 8006fb8:	106d      	asrs	r5, r5, #1
 8006fba:	d00b      	beq.n	8006fd4 <__pow5mult+0xa0>
 8006fbc:	6820      	ldr	r0, [r4, #0]
 8006fbe:	b938      	cbnz	r0, 8006fd0 <__pow5mult+0x9c>
 8006fc0:	4622      	mov	r2, r4
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	4638      	mov	r0, r7
 8006fc6:	f7ff ff0b 	bl	8006de0 <__multiply>
 8006fca:	6020      	str	r0, [r4, #0]
 8006fcc:	f8c0 9000 	str.w	r9, [r0]
 8006fd0:	4604      	mov	r4, r0
 8006fd2:	e7e4      	b.n	8006f9e <__pow5mult+0x6a>
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fda:	bf00      	nop
 8006fdc:	080094a8 	.word	0x080094a8
 8006fe0:	080093ce 	.word	0x080093ce
 8006fe4:	0800944e 	.word	0x0800944e

08006fe8 <__lshift>:
 8006fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fec:	460c      	mov	r4, r1
 8006fee:	6849      	ldr	r1, [r1, #4]
 8006ff0:	6923      	ldr	r3, [r4, #16]
 8006ff2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ff6:	68a3      	ldr	r3, [r4, #8]
 8006ff8:	4607      	mov	r7, r0
 8006ffa:	4691      	mov	r9, r2
 8006ffc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007000:	f108 0601 	add.w	r6, r8, #1
 8007004:	42b3      	cmp	r3, r6
 8007006:	db0b      	blt.n	8007020 <__lshift+0x38>
 8007008:	4638      	mov	r0, r7
 800700a:	f7ff fd95 	bl	8006b38 <_Balloc>
 800700e:	4605      	mov	r5, r0
 8007010:	b948      	cbnz	r0, 8007026 <__lshift+0x3e>
 8007012:	4602      	mov	r2, r0
 8007014:	4b28      	ldr	r3, [pc, #160]	@ (80070b8 <__lshift+0xd0>)
 8007016:	4829      	ldr	r0, [pc, #164]	@ (80070bc <__lshift+0xd4>)
 8007018:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800701c:	f001 fb18 	bl	8008650 <__assert_func>
 8007020:	3101      	adds	r1, #1
 8007022:	005b      	lsls	r3, r3, #1
 8007024:	e7ee      	b.n	8007004 <__lshift+0x1c>
 8007026:	2300      	movs	r3, #0
 8007028:	f100 0114 	add.w	r1, r0, #20
 800702c:	f100 0210 	add.w	r2, r0, #16
 8007030:	4618      	mov	r0, r3
 8007032:	4553      	cmp	r3, sl
 8007034:	db33      	blt.n	800709e <__lshift+0xb6>
 8007036:	6920      	ldr	r0, [r4, #16]
 8007038:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800703c:	f104 0314 	add.w	r3, r4, #20
 8007040:	f019 091f 	ands.w	r9, r9, #31
 8007044:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007048:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800704c:	d02b      	beq.n	80070a6 <__lshift+0xbe>
 800704e:	f1c9 0e20 	rsb	lr, r9, #32
 8007052:	468a      	mov	sl, r1
 8007054:	2200      	movs	r2, #0
 8007056:	6818      	ldr	r0, [r3, #0]
 8007058:	fa00 f009 	lsl.w	r0, r0, r9
 800705c:	4310      	orrs	r0, r2
 800705e:	f84a 0b04 	str.w	r0, [sl], #4
 8007062:	f853 2b04 	ldr.w	r2, [r3], #4
 8007066:	459c      	cmp	ip, r3
 8007068:	fa22 f20e 	lsr.w	r2, r2, lr
 800706c:	d8f3      	bhi.n	8007056 <__lshift+0x6e>
 800706e:	ebac 0304 	sub.w	r3, ip, r4
 8007072:	3b15      	subs	r3, #21
 8007074:	f023 0303 	bic.w	r3, r3, #3
 8007078:	3304      	adds	r3, #4
 800707a:	f104 0015 	add.w	r0, r4, #21
 800707e:	4584      	cmp	ip, r0
 8007080:	bf38      	it	cc
 8007082:	2304      	movcc	r3, #4
 8007084:	50ca      	str	r2, [r1, r3]
 8007086:	b10a      	cbz	r2, 800708c <__lshift+0xa4>
 8007088:	f108 0602 	add.w	r6, r8, #2
 800708c:	3e01      	subs	r6, #1
 800708e:	4638      	mov	r0, r7
 8007090:	612e      	str	r6, [r5, #16]
 8007092:	4621      	mov	r1, r4
 8007094:	f7ff fd90 	bl	8006bb8 <_Bfree>
 8007098:	4628      	mov	r0, r5
 800709a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800709e:	f842 0f04 	str.w	r0, [r2, #4]!
 80070a2:	3301      	adds	r3, #1
 80070a4:	e7c5      	b.n	8007032 <__lshift+0x4a>
 80070a6:	3904      	subs	r1, #4
 80070a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80070ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80070b0:	459c      	cmp	ip, r3
 80070b2:	d8f9      	bhi.n	80070a8 <__lshift+0xc0>
 80070b4:	e7ea      	b.n	800708c <__lshift+0xa4>
 80070b6:	bf00      	nop
 80070b8:	0800943d 	.word	0x0800943d
 80070bc:	0800944e 	.word	0x0800944e

080070c0 <__mcmp>:
 80070c0:	690a      	ldr	r2, [r1, #16]
 80070c2:	4603      	mov	r3, r0
 80070c4:	6900      	ldr	r0, [r0, #16]
 80070c6:	1a80      	subs	r0, r0, r2
 80070c8:	b530      	push	{r4, r5, lr}
 80070ca:	d10e      	bne.n	80070ea <__mcmp+0x2a>
 80070cc:	3314      	adds	r3, #20
 80070ce:	3114      	adds	r1, #20
 80070d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80070d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80070d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80070dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80070e0:	4295      	cmp	r5, r2
 80070e2:	d003      	beq.n	80070ec <__mcmp+0x2c>
 80070e4:	d205      	bcs.n	80070f2 <__mcmp+0x32>
 80070e6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ea:	bd30      	pop	{r4, r5, pc}
 80070ec:	42a3      	cmp	r3, r4
 80070ee:	d3f3      	bcc.n	80070d8 <__mcmp+0x18>
 80070f0:	e7fb      	b.n	80070ea <__mcmp+0x2a>
 80070f2:	2001      	movs	r0, #1
 80070f4:	e7f9      	b.n	80070ea <__mcmp+0x2a>
	...

080070f8 <__mdiff>:
 80070f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fc:	4689      	mov	r9, r1
 80070fe:	4606      	mov	r6, r0
 8007100:	4611      	mov	r1, r2
 8007102:	4648      	mov	r0, r9
 8007104:	4614      	mov	r4, r2
 8007106:	f7ff ffdb 	bl	80070c0 <__mcmp>
 800710a:	1e05      	subs	r5, r0, #0
 800710c:	d112      	bne.n	8007134 <__mdiff+0x3c>
 800710e:	4629      	mov	r1, r5
 8007110:	4630      	mov	r0, r6
 8007112:	f7ff fd11 	bl	8006b38 <_Balloc>
 8007116:	4602      	mov	r2, r0
 8007118:	b928      	cbnz	r0, 8007126 <__mdiff+0x2e>
 800711a:	4b3f      	ldr	r3, [pc, #252]	@ (8007218 <__mdiff+0x120>)
 800711c:	f240 2137 	movw	r1, #567	@ 0x237
 8007120:	483e      	ldr	r0, [pc, #248]	@ (800721c <__mdiff+0x124>)
 8007122:	f001 fa95 	bl	8008650 <__assert_func>
 8007126:	2301      	movs	r3, #1
 8007128:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800712c:	4610      	mov	r0, r2
 800712e:	b003      	add	sp, #12
 8007130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007134:	bfbc      	itt	lt
 8007136:	464b      	movlt	r3, r9
 8007138:	46a1      	movlt	r9, r4
 800713a:	4630      	mov	r0, r6
 800713c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007140:	bfba      	itte	lt
 8007142:	461c      	movlt	r4, r3
 8007144:	2501      	movlt	r5, #1
 8007146:	2500      	movge	r5, #0
 8007148:	f7ff fcf6 	bl	8006b38 <_Balloc>
 800714c:	4602      	mov	r2, r0
 800714e:	b918      	cbnz	r0, 8007158 <__mdiff+0x60>
 8007150:	4b31      	ldr	r3, [pc, #196]	@ (8007218 <__mdiff+0x120>)
 8007152:	f240 2145 	movw	r1, #581	@ 0x245
 8007156:	e7e3      	b.n	8007120 <__mdiff+0x28>
 8007158:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800715c:	6926      	ldr	r6, [r4, #16]
 800715e:	60c5      	str	r5, [r0, #12]
 8007160:	f109 0310 	add.w	r3, r9, #16
 8007164:	f109 0514 	add.w	r5, r9, #20
 8007168:	f104 0e14 	add.w	lr, r4, #20
 800716c:	f100 0b14 	add.w	fp, r0, #20
 8007170:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007174:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007178:	9301      	str	r3, [sp, #4]
 800717a:	46d9      	mov	r9, fp
 800717c:	f04f 0c00 	mov.w	ip, #0
 8007180:	9b01      	ldr	r3, [sp, #4]
 8007182:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007186:	f853 af04 	ldr.w	sl, [r3, #4]!
 800718a:	9301      	str	r3, [sp, #4]
 800718c:	fa1f f38a 	uxth.w	r3, sl
 8007190:	4619      	mov	r1, r3
 8007192:	b283      	uxth	r3, r0
 8007194:	1acb      	subs	r3, r1, r3
 8007196:	0c00      	lsrs	r0, r0, #16
 8007198:	4463      	add	r3, ip
 800719a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800719e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80071a8:	4576      	cmp	r6, lr
 80071aa:	f849 3b04 	str.w	r3, [r9], #4
 80071ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80071b2:	d8e5      	bhi.n	8007180 <__mdiff+0x88>
 80071b4:	1b33      	subs	r3, r6, r4
 80071b6:	3b15      	subs	r3, #21
 80071b8:	f023 0303 	bic.w	r3, r3, #3
 80071bc:	3415      	adds	r4, #21
 80071be:	3304      	adds	r3, #4
 80071c0:	42a6      	cmp	r6, r4
 80071c2:	bf38      	it	cc
 80071c4:	2304      	movcc	r3, #4
 80071c6:	441d      	add	r5, r3
 80071c8:	445b      	add	r3, fp
 80071ca:	461e      	mov	r6, r3
 80071cc:	462c      	mov	r4, r5
 80071ce:	4544      	cmp	r4, r8
 80071d0:	d30e      	bcc.n	80071f0 <__mdiff+0xf8>
 80071d2:	f108 0103 	add.w	r1, r8, #3
 80071d6:	1b49      	subs	r1, r1, r5
 80071d8:	f021 0103 	bic.w	r1, r1, #3
 80071dc:	3d03      	subs	r5, #3
 80071de:	45a8      	cmp	r8, r5
 80071e0:	bf38      	it	cc
 80071e2:	2100      	movcc	r1, #0
 80071e4:	440b      	add	r3, r1
 80071e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80071ea:	b191      	cbz	r1, 8007212 <__mdiff+0x11a>
 80071ec:	6117      	str	r7, [r2, #16]
 80071ee:	e79d      	b.n	800712c <__mdiff+0x34>
 80071f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80071f4:	46e6      	mov	lr, ip
 80071f6:	0c08      	lsrs	r0, r1, #16
 80071f8:	fa1c fc81 	uxtah	ip, ip, r1
 80071fc:	4471      	add	r1, lr
 80071fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007202:	b289      	uxth	r1, r1
 8007204:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007208:	f846 1b04 	str.w	r1, [r6], #4
 800720c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007210:	e7dd      	b.n	80071ce <__mdiff+0xd6>
 8007212:	3f01      	subs	r7, #1
 8007214:	e7e7      	b.n	80071e6 <__mdiff+0xee>
 8007216:	bf00      	nop
 8007218:	0800943d 	.word	0x0800943d
 800721c:	0800944e 	.word	0x0800944e

08007220 <__ulp>:
 8007220:	b082      	sub	sp, #8
 8007222:	ed8d 0b00 	vstr	d0, [sp]
 8007226:	9a01      	ldr	r2, [sp, #4]
 8007228:	4b0f      	ldr	r3, [pc, #60]	@ (8007268 <__ulp+0x48>)
 800722a:	4013      	ands	r3, r2
 800722c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007230:	2b00      	cmp	r3, #0
 8007232:	dc08      	bgt.n	8007246 <__ulp+0x26>
 8007234:	425b      	negs	r3, r3
 8007236:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800723a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800723e:	da04      	bge.n	800724a <__ulp+0x2a>
 8007240:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007244:	4113      	asrs	r3, r2
 8007246:	2200      	movs	r2, #0
 8007248:	e008      	b.n	800725c <__ulp+0x3c>
 800724a:	f1a2 0314 	sub.w	r3, r2, #20
 800724e:	2b1e      	cmp	r3, #30
 8007250:	bfda      	itte	le
 8007252:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007256:	40da      	lsrle	r2, r3
 8007258:	2201      	movgt	r2, #1
 800725a:	2300      	movs	r3, #0
 800725c:	4619      	mov	r1, r3
 800725e:	4610      	mov	r0, r2
 8007260:	ec41 0b10 	vmov	d0, r0, r1
 8007264:	b002      	add	sp, #8
 8007266:	4770      	bx	lr
 8007268:	7ff00000 	.word	0x7ff00000

0800726c <__b2d>:
 800726c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007270:	6906      	ldr	r6, [r0, #16]
 8007272:	f100 0814 	add.w	r8, r0, #20
 8007276:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800727a:	1f37      	subs	r7, r6, #4
 800727c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007280:	4610      	mov	r0, r2
 8007282:	f7ff fd4b 	bl	8006d1c <__hi0bits>
 8007286:	f1c0 0320 	rsb	r3, r0, #32
 800728a:	280a      	cmp	r0, #10
 800728c:	600b      	str	r3, [r1, #0]
 800728e:	491b      	ldr	r1, [pc, #108]	@ (80072fc <__b2d+0x90>)
 8007290:	dc15      	bgt.n	80072be <__b2d+0x52>
 8007292:	f1c0 0c0b 	rsb	ip, r0, #11
 8007296:	fa22 f30c 	lsr.w	r3, r2, ip
 800729a:	45b8      	cmp	r8, r7
 800729c:	ea43 0501 	orr.w	r5, r3, r1
 80072a0:	bf34      	ite	cc
 80072a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80072a6:	2300      	movcs	r3, #0
 80072a8:	3015      	adds	r0, #21
 80072aa:	fa02 f000 	lsl.w	r0, r2, r0
 80072ae:	fa23 f30c 	lsr.w	r3, r3, ip
 80072b2:	4303      	orrs	r3, r0
 80072b4:	461c      	mov	r4, r3
 80072b6:	ec45 4b10 	vmov	d0, r4, r5
 80072ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072be:	45b8      	cmp	r8, r7
 80072c0:	bf3a      	itte	cc
 80072c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80072c6:	f1a6 0708 	subcc.w	r7, r6, #8
 80072ca:	2300      	movcs	r3, #0
 80072cc:	380b      	subs	r0, #11
 80072ce:	d012      	beq.n	80072f6 <__b2d+0x8a>
 80072d0:	f1c0 0120 	rsb	r1, r0, #32
 80072d4:	fa23 f401 	lsr.w	r4, r3, r1
 80072d8:	4082      	lsls	r2, r0
 80072da:	4322      	orrs	r2, r4
 80072dc:	4547      	cmp	r7, r8
 80072de:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80072e2:	bf8c      	ite	hi
 80072e4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80072e8:	2200      	movls	r2, #0
 80072ea:	4083      	lsls	r3, r0
 80072ec:	40ca      	lsrs	r2, r1
 80072ee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80072f2:	4313      	orrs	r3, r2
 80072f4:	e7de      	b.n	80072b4 <__b2d+0x48>
 80072f6:	ea42 0501 	orr.w	r5, r2, r1
 80072fa:	e7db      	b.n	80072b4 <__b2d+0x48>
 80072fc:	3ff00000 	.word	0x3ff00000

08007300 <__d2b>:
 8007300:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007304:	460f      	mov	r7, r1
 8007306:	2101      	movs	r1, #1
 8007308:	ec59 8b10 	vmov	r8, r9, d0
 800730c:	4616      	mov	r6, r2
 800730e:	f7ff fc13 	bl	8006b38 <_Balloc>
 8007312:	4604      	mov	r4, r0
 8007314:	b930      	cbnz	r0, 8007324 <__d2b+0x24>
 8007316:	4602      	mov	r2, r0
 8007318:	4b23      	ldr	r3, [pc, #140]	@ (80073a8 <__d2b+0xa8>)
 800731a:	4824      	ldr	r0, [pc, #144]	@ (80073ac <__d2b+0xac>)
 800731c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007320:	f001 f996 	bl	8008650 <__assert_func>
 8007324:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007328:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800732c:	b10d      	cbz	r5, 8007332 <__d2b+0x32>
 800732e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007332:	9301      	str	r3, [sp, #4]
 8007334:	f1b8 0300 	subs.w	r3, r8, #0
 8007338:	d023      	beq.n	8007382 <__d2b+0x82>
 800733a:	4668      	mov	r0, sp
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	f7ff fd0c 	bl	8006d5a <__lo0bits>
 8007342:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007346:	b1d0      	cbz	r0, 800737e <__d2b+0x7e>
 8007348:	f1c0 0320 	rsb	r3, r0, #32
 800734c:	fa02 f303 	lsl.w	r3, r2, r3
 8007350:	430b      	orrs	r3, r1
 8007352:	40c2      	lsrs	r2, r0
 8007354:	6163      	str	r3, [r4, #20]
 8007356:	9201      	str	r2, [sp, #4]
 8007358:	9b01      	ldr	r3, [sp, #4]
 800735a:	61a3      	str	r3, [r4, #24]
 800735c:	2b00      	cmp	r3, #0
 800735e:	bf0c      	ite	eq
 8007360:	2201      	moveq	r2, #1
 8007362:	2202      	movne	r2, #2
 8007364:	6122      	str	r2, [r4, #16]
 8007366:	b1a5      	cbz	r5, 8007392 <__d2b+0x92>
 8007368:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800736c:	4405      	add	r5, r0
 800736e:	603d      	str	r5, [r7, #0]
 8007370:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007374:	6030      	str	r0, [r6, #0]
 8007376:	4620      	mov	r0, r4
 8007378:	b003      	add	sp, #12
 800737a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800737e:	6161      	str	r1, [r4, #20]
 8007380:	e7ea      	b.n	8007358 <__d2b+0x58>
 8007382:	a801      	add	r0, sp, #4
 8007384:	f7ff fce9 	bl	8006d5a <__lo0bits>
 8007388:	9b01      	ldr	r3, [sp, #4]
 800738a:	6163      	str	r3, [r4, #20]
 800738c:	3020      	adds	r0, #32
 800738e:	2201      	movs	r2, #1
 8007390:	e7e8      	b.n	8007364 <__d2b+0x64>
 8007392:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007396:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800739a:	6038      	str	r0, [r7, #0]
 800739c:	6918      	ldr	r0, [r3, #16]
 800739e:	f7ff fcbd 	bl	8006d1c <__hi0bits>
 80073a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80073a6:	e7e5      	b.n	8007374 <__d2b+0x74>
 80073a8:	0800943d 	.word	0x0800943d
 80073ac:	0800944e 	.word	0x0800944e

080073b0 <__ratio>:
 80073b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b4:	b085      	sub	sp, #20
 80073b6:	e9cd 1000 	strd	r1, r0, [sp]
 80073ba:	a902      	add	r1, sp, #8
 80073bc:	f7ff ff56 	bl	800726c <__b2d>
 80073c0:	9800      	ldr	r0, [sp, #0]
 80073c2:	a903      	add	r1, sp, #12
 80073c4:	ec55 4b10 	vmov	r4, r5, d0
 80073c8:	f7ff ff50 	bl	800726c <__b2d>
 80073cc:	9b01      	ldr	r3, [sp, #4]
 80073ce:	6919      	ldr	r1, [r3, #16]
 80073d0:	9b00      	ldr	r3, [sp, #0]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	1ac9      	subs	r1, r1, r3
 80073d6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80073da:	1a9b      	subs	r3, r3, r2
 80073dc:	ec5b ab10 	vmov	sl, fp, d0
 80073e0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	bfce      	itee	gt
 80073e8:	462a      	movgt	r2, r5
 80073ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80073ee:	465a      	movle	r2, fp
 80073f0:	462f      	mov	r7, r5
 80073f2:	46d9      	mov	r9, fp
 80073f4:	bfcc      	ite	gt
 80073f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80073fa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80073fe:	464b      	mov	r3, r9
 8007400:	4652      	mov	r2, sl
 8007402:	4620      	mov	r0, r4
 8007404:	4639      	mov	r1, r7
 8007406:	f7f9 fa21 	bl	800084c <__aeabi_ddiv>
 800740a:	ec41 0b10 	vmov	d0, r0, r1
 800740e:	b005      	add	sp, #20
 8007410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007414 <__copybits>:
 8007414:	3901      	subs	r1, #1
 8007416:	b570      	push	{r4, r5, r6, lr}
 8007418:	1149      	asrs	r1, r1, #5
 800741a:	6914      	ldr	r4, [r2, #16]
 800741c:	3101      	adds	r1, #1
 800741e:	f102 0314 	add.w	r3, r2, #20
 8007422:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007426:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800742a:	1f05      	subs	r5, r0, #4
 800742c:	42a3      	cmp	r3, r4
 800742e:	d30c      	bcc.n	800744a <__copybits+0x36>
 8007430:	1aa3      	subs	r3, r4, r2
 8007432:	3b11      	subs	r3, #17
 8007434:	f023 0303 	bic.w	r3, r3, #3
 8007438:	3211      	adds	r2, #17
 800743a:	42a2      	cmp	r2, r4
 800743c:	bf88      	it	hi
 800743e:	2300      	movhi	r3, #0
 8007440:	4418      	add	r0, r3
 8007442:	2300      	movs	r3, #0
 8007444:	4288      	cmp	r0, r1
 8007446:	d305      	bcc.n	8007454 <__copybits+0x40>
 8007448:	bd70      	pop	{r4, r5, r6, pc}
 800744a:	f853 6b04 	ldr.w	r6, [r3], #4
 800744e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007452:	e7eb      	b.n	800742c <__copybits+0x18>
 8007454:	f840 3b04 	str.w	r3, [r0], #4
 8007458:	e7f4      	b.n	8007444 <__copybits+0x30>

0800745a <__any_on>:
 800745a:	f100 0214 	add.w	r2, r0, #20
 800745e:	6900      	ldr	r0, [r0, #16]
 8007460:	114b      	asrs	r3, r1, #5
 8007462:	4298      	cmp	r0, r3
 8007464:	b510      	push	{r4, lr}
 8007466:	db11      	blt.n	800748c <__any_on+0x32>
 8007468:	dd0a      	ble.n	8007480 <__any_on+0x26>
 800746a:	f011 011f 	ands.w	r1, r1, #31
 800746e:	d007      	beq.n	8007480 <__any_on+0x26>
 8007470:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007474:	fa24 f001 	lsr.w	r0, r4, r1
 8007478:	fa00 f101 	lsl.w	r1, r0, r1
 800747c:	428c      	cmp	r4, r1
 800747e:	d10b      	bne.n	8007498 <__any_on+0x3e>
 8007480:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007484:	4293      	cmp	r3, r2
 8007486:	d803      	bhi.n	8007490 <__any_on+0x36>
 8007488:	2000      	movs	r0, #0
 800748a:	bd10      	pop	{r4, pc}
 800748c:	4603      	mov	r3, r0
 800748e:	e7f7      	b.n	8007480 <__any_on+0x26>
 8007490:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007494:	2900      	cmp	r1, #0
 8007496:	d0f5      	beq.n	8007484 <__any_on+0x2a>
 8007498:	2001      	movs	r0, #1
 800749a:	e7f6      	b.n	800748a <__any_on+0x30>

0800749c <sulp>:
 800749c:	b570      	push	{r4, r5, r6, lr}
 800749e:	4604      	mov	r4, r0
 80074a0:	460d      	mov	r5, r1
 80074a2:	ec45 4b10 	vmov	d0, r4, r5
 80074a6:	4616      	mov	r6, r2
 80074a8:	f7ff feba 	bl	8007220 <__ulp>
 80074ac:	ec51 0b10 	vmov	r0, r1, d0
 80074b0:	b17e      	cbz	r6, 80074d2 <sulp+0x36>
 80074b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80074b6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	dd09      	ble.n	80074d2 <sulp+0x36>
 80074be:	051b      	lsls	r3, r3, #20
 80074c0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80074c4:	2400      	movs	r4, #0
 80074c6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80074ca:	4622      	mov	r2, r4
 80074cc:	462b      	mov	r3, r5
 80074ce:	f7f9 f893 	bl	80005f8 <__aeabi_dmul>
 80074d2:	ec41 0b10 	vmov	d0, r0, r1
 80074d6:	bd70      	pop	{r4, r5, r6, pc}

080074d8 <_strtod_l>:
 80074d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074dc:	b09f      	sub	sp, #124	@ 0x7c
 80074de:	460c      	mov	r4, r1
 80074e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80074e2:	2200      	movs	r2, #0
 80074e4:	921a      	str	r2, [sp, #104]	@ 0x68
 80074e6:	9005      	str	r0, [sp, #20]
 80074e8:	f04f 0a00 	mov.w	sl, #0
 80074ec:	f04f 0b00 	mov.w	fp, #0
 80074f0:	460a      	mov	r2, r1
 80074f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80074f4:	7811      	ldrb	r1, [r2, #0]
 80074f6:	292b      	cmp	r1, #43	@ 0x2b
 80074f8:	d04a      	beq.n	8007590 <_strtod_l+0xb8>
 80074fa:	d838      	bhi.n	800756e <_strtod_l+0x96>
 80074fc:	290d      	cmp	r1, #13
 80074fe:	d832      	bhi.n	8007566 <_strtod_l+0x8e>
 8007500:	2908      	cmp	r1, #8
 8007502:	d832      	bhi.n	800756a <_strtod_l+0x92>
 8007504:	2900      	cmp	r1, #0
 8007506:	d03b      	beq.n	8007580 <_strtod_l+0xa8>
 8007508:	2200      	movs	r2, #0
 800750a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800750c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800750e:	782a      	ldrb	r2, [r5, #0]
 8007510:	2a30      	cmp	r2, #48	@ 0x30
 8007512:	f040 80b3 	bne.w	800767c <_strtod_l+0x1a4>
 8007516:	786a      	ldrb	r2, [r5, #1]
 8007518:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800751c:	2a58      	cmp	r2, #88	@ 0x58
 800751e:	d16e      	bne.n	80075fe <_strtod_l+0x126>
 8007520:	9302      	str	r3, [sp, #8]
 8007522:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007524:	9301      	str	r3, [sp, #4]
 8007526:	ab1a      	add	r3, sp, #104	@ 0x68
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	4a8e      	ldr	r2, [pc, #568]	@ (8007764 <_strtod_l+0x28c>)
 800752c:	9805      	ldr	r0, [sp, #20]
 800752e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007530:	a919      	add	r1, sp, #100	@ 0x64
 8007532:	f001 f927 	bl	8008784 <__gethex>
 8007536:	f010 060f 	ands.w	r6, r0, #15
 800753a:	4604      	mov	r4, r0
 800753c:	d005      	beq.n	800754a <_strtod_l+0x72>
 800753e:	2e06      	cmp	r6, #6
 8007540:	d128      	bne.n	8007594 <_strtod_l+0xbc>
 8007542:	3501      	adds	r5, #1
 8007544:	2300      	movs	r3, #0
 8007546:	9519      	str	r5, [sp, #100]	@ 0x64
 8007548:	930b      	str	r3, [sp, #44]	@ 0x2c
 800754a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800754c:	2b00      	cmp	r3, #0
 800754e:	f040 858e 	bne.w	800806e <_strtod_l+0xb96>
 8007552:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007554:	b1cb      	cbz	r3, 800758a <_strtod_l+0xb2>
 8007556:	4652      	mov	r2, sl
 8007558:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800755c:	ec43 2b10 	vmov	d0, r2, r3
 8007560:	b01f      	add	sp, #124	@ 0x7c
 8007562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007566:	2920      	cmp	r1, #32
 8007568:	d1ce      	bne.n	8007508 <_strtod_l+0x30>
 800756a:	3201      	adds	r2, #1
 800756c:	e7c1      	b.n	80074f2 <_strtod_l+0x1a>
 800756e:	292d      	cmp	r1, #45	@ 0x2d
 8007570:	d1ca      	bne.n	8007508 <_strtod_l+0x30>
 8007572:	2101      	movs	r1, #1
 8007574:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007576:	1c51      	adds	r1, r2, #1
 8007578:	9119      	str	r1, [sp, #100]	@ 0x64
 800757a:	7852      	ldrb	r2, [r2, #1]
 800757c:	2a00      	cmp	r2, #0
 800757e:	d1c5      	bne.n	800750c <_strtod_l+0x34>
 8007580:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007582:	9419      	str	r4, [sp, #100]	@ 0x64
 8007584:	2b00      	cmp	r3, #0
 8007586:	f040 8570 	bne.w	800806a <_strtod_l+0xb92>
 800758a:	4652      	mov	r2, sl
 800758c:	465b      	mov	r3, fp
 800758e:	e7e5      	b.n	800755c <_strtod_l+0x84>
 8007590:	2100      	movs	r1, #0
 8007592:	e7ef      	b.n	8007574 <_strtod_l+0x9c>
 8007594:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007596:	b13a      	cbz	r2, 80075a8 <_strtod_l+0xd0>
 8007598:	2135      	movs	r1, #53	@ 0x35
 800759a:	a81c      	add	r0, sp, #112	@ 0x70
 800759c:	f7ff ff3a 	bl	8007414 <__copybits>
 80075a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80075a2:	9805      	ldr	r0, [sp, #20]
 80075a4:	f7ff fb08 	bl	8006bb8 <_Bfree>
 80075a8:	3e01      	subs	r6, #1
 80075aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80075ac:	2e04      	cmp	r6, #4
 80075ae:	d806      	bhi.n	80075be <_strtod_l+0xe6>
 80075b0:	e8df f006 	tbb	[pc, r6]
 80075b4:	201d0314 	.word	0x201d0314
 80075b8:	14          	.byte	0x14
 80075b9:	00          	.byte	0x00
 80075ba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80075be:	05e1      	lsls	r1, r4, #23
 80075c0:	bf48      	it	mi
 80075c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80075c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80075ca:	0d1b      	lsrs	r3, r3, #20
 80075cc:	051b      	lsls	r3, r3, #20
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1bb      	bne.n	800754a <_strtod_l+0x72>
 80075d2:	f7fe fb2f 	bl	8005c34 <__errno>
 80075d6:	2322      	movs	r3, #34	@ 0x22
 80075d8:	6003      	str	r3, [r0, #0]
 80075da:	e7b6      	b.n	800754a <_strtod_l+0x72>
 80075dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80075e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80075e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80075e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80075ec:	e7e7      	b.n	80075be <_strtod_l+0xe6>
 80075ee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800776c <_strtod_l+0x294>
 80075f2:	e7e4      	b.n	80075be <_strtod_l+0xe6>
 80075f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80075f8:	f04f 3aff 	mov.w	sl, #4294967295
 80075fc:	e7df      	b.n	80075be <_strtod_l+0xe6>
 80075fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007600:	1c5a      	adds	r2, r3, #1
 8007602:	9219      	str	r2, [sp, #100]	@ 0x64
 8007604:	785b      	ldrb	r3, [r3, #1]
 8007606:	2b30      	cmp	r3, #48	@ 0x30
 8007608:	d0f9      	beq.n	80075fe <_strtod_l+0x126>
 800760a:	2b00      	cmp	r3, #0
 800760c:	d09d      	beq.n	800754a <_strtod_l+0x72>
 800760e:	2301      	movs	r3, #1
 8007610:	9309      	str	r3, [sp, #36]	@ 0x24
 8007612:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007614:	930c      	str	r3, [sp, #48]	@ 0x30
 8007616:	2300      	movs	r3, #0
 8007618:	9308      	str	r3, [sp, #32]
 800761a:	930a      	str	r3, [sp, #40]	@ 0x28
 800761c:	461f      	mov	r7, r3
 800761e:	220a      	movs	r2, #10
 8007620:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007622:	7805      	ldrb	r5, [r0, #0]
 8007624:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007628:	b2d9      	uxtb	r1, r3
 800762a:	2909      	cmp	r1, #9
 800762c:	d928      	bls.n	8007680 <_strtod_l+0x1a8>
 800762e:	494e      	ldr	r1, [pc, #312]	@ (8007768 <_strtod_l+0x290>)
 8007630:	2201      	movs	r2, #1
 8007632:	f000 ffd5 	bl	80085e0 <strncmp>
 8007636:	2800      	cmp	r0, #0
 8007638:	d032      	beq.n	80076a0 <_strtod_l+0x1c8>
 800763a:	2000      	movs	r0, #0
 800763c:	462a      	mov	r2, r5
 800763e:	4681      	mov	r9, r0
 8007640:	463d      	mov	r5, r7
 8007642:	4603      	mov	r3, r0
 8007644:	2a65      	cmp	r2, #101	@ 0x65
 8007646:	d001      	beq.n	800764c <_strtod_l+0x174>
 8007648:	2a45      	cmp	r2, #69	@ 0x45
 800764a:	d114      	bne.n	8007676 <_strtod_l+0x19e>
 800764c:	b91d      	cbnz	r5, 8007656 <_strtod_l+0x17e>
 800764e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007650:	4302      	orrs	r2, r0
 8007652:	d095      	beq.n	8007580 <_strtod_l+0xa8>
 8007654:	2500      	movs	r5, #0
 8007656:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007658:	1c62      	adds	r2, r4, #1
 800765a:	9219      	str	r2, [sp, #100]	@ 0x64
 800765c:	7862      	ldrb	r2, [r4, #1]
 800765e:	2a2b      	cmp	r2, #43	@ 0x2b
 8007660:	d077      	beq.n	8007752 <_strtod_l+0x27a>
 8007662:	2a2d      	cmp	r2, #45	@ 0x2d
 8007664:	d07b      	beq.n	800775e <_strtod_l+0x286>
 8007666:	f04f 0c00 	mov.w	ip, #0
 800766a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800766e:	2909      	cmp	r1, #9
 8007670:	f240 8082 	bls.w	8007778 <_strtod_l+0x2a0>
 8007674:	9419      	str	r4, [sp, #100]	@ 0x64
 8007676:	f04f 0800 	mov.w	r8, #0
 800767a:	e0a2      	b.n	80077c2 <_strtod_l+0x2ea>
 800767c:	2300      	movs	r3, #0
 800767e:	e7c7      	b.n	8007610 <_strtod_l+0x138>
 8007680:	2f08      	cmp	r7, #8
 8007682:	bfd5      	itete	le
 8007684:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007686:	9908      	ldrgt	r1, [sp, #32]
 8007688:	fb02 3301 	mlale	r3, r2, r1, r3
 800768c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007690:	f100 0001 	add.w	r0, r0, #1
 8007694:	bfd4      	ite	le
 8007696:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007698:	9308      	strgt	r3, [sp, #32]
 800769a:	3701      	adds	r7, #1
 800769c:	9019      	str	r0, [sp, #100]	@ 0x64
 800769e:	e7bf      	b.n	8007620 <_strtod_l+0x148>
 80076a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076a2:	1c5a      	adds	r2, r3, #1
 80076a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80076a6:	785a      	ldrb	r2, [r3, #1]
 80076a8:	b37f      	cbz	r7, 800770a <_strtod_l+0x232>
 80076aa:	4681      	mov	r9, r0
 80076ac:	463d      	mov	r5, r7
 80076ae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80076b2:	2b09      	cmp	r3, #9
 80076b4:	d912      	bls.n	80076dc <_strtod_l+0x204>
 80076b6:	2301      	movs	r3, #1
 80076b8:	e7c4      	b.n	8007644 <_strtod_l+0x16c>
 80076ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	9219      	str	r2, [sp, #100]	@ 0x64
 80076c0:	785a      	ldrb	r2, [r3, #1]
 80076c2:	3001      	adds	r0, #1
 80076c4:	2a30      	cmp	r2, #48	@ 0x30
 80076c6:	d0f8      	beq.n	80076ba <_strtod_l+0x1e2>
 80076c8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80076cc:	2b08      	cmp	r3, #8
 80076ce:	f200 84d3 	bhi.w	8008078 <_strtod_l+0xba0>
 80076d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80076d6:	4681      	mov	r9, r0
 80076d8:	2000      	movs	r0, #0
 80076da:	4605      	mov	r5, r0
 80076dc:	3a30      	subs	r2, #48	@ 0x30
 80076de:	f100 0301 	add.w	r3, r0, #1
 80076e2:	d02a      	beq.n	800773a <_strtod_l+0x262>
 80076e4:	4499      	add	r9, r3
 80076e6:	eb00 0c05 	add.w	ip, r0, r5
 80076ea:	462b      	mov	r3, r5
 80076ec:	210a      	movs	r1, #10
 80076ee:	4563      	cmp	r3, ip
 80076f0:	d10d      	bne.n	800770e <_strtod_l+0x236>
 80076f2:	1c69      	adds	r1, r5, #1
 80076f4:	4401      	add	r1, r0
 80076f6:	4428      	add	r0, r5
 80076f8:	2808      	cmp	r0, #8
 80076fa:	dc16      	bgt.n	800772a <_strtod_l+0x252>
 80076fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80076fe:	230a      	movs	r3, #10
 8007700:	fb03 2300 	mla	r3, r3, r0, r2
 8007704:	930a      	str	r3, [sp, #40]	@ 0x28
 8007706:	2300      	movs	r3, #0
 8007708:	e018      	b.n	800773c <_strtod_l+0x264>
 800770a:	4638      	mov	r0, r7
 800770c:	e7da      	b.n	80076c4 <_strtod_l+0x1ec>
 800770e:	2b08      	cmp	r3, #8
 8007710:	f103 0301 	add.w	r3, r3, #1
 8007714:	dc03      	bgt.n	800771e <_strtod_l+0x246>
 8007716:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007718:	434e      	muls	r6, r1
 800771a:	960a      	str	r6, [sp, #40]	@ 0x28
 800771c:	e7e7      	b.n	80076ee <_strtod_l+0x216>
 800771e:	2b10      	cmp	r3, #16
 8007720:	bfde      	ittt	le
 8007722:	9e08      	ldrle	r6, [sp, #32]
 8007724:	434e      	mulle	r6, r1
 8007726:	9608      	strle	r6, [sp, #32]
 8007728:	e7e1      	b.n	80076ee <_strtod_l+0x216>
 800772a:	280f      	cmp	r0, #15
 800772c:	dceb      	bgt.n	8007706 <_strtod_l+0x22e>
 800772e:	9808      	ldr	r0, [sp, #32]
 8007730:	230a      	movs	r3, #10
 8007732:	fb03 2300 	mla	r3, r3, r0, r2
 8007736:	9308      	str	r3, [sp, #32]
 8007738:	e7e5      	b.n	8007706 <_strtod_l+0x22e>
 800773a:	4629      	mov	r1, r5
 800773c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800773e:	1c50      	adds	r0, r2, #1
 8007740:	9019      	str	r0, [sp, #100]	@ 0x64
 8007742:	7852      	ldrb	r2, [r2, #1]
 8007744:	4618      	mov	r0, r3
 8007746:	460d      	mov	r5, r1
 8007748:	e7b1      	b.n	80076ae <_strtod_l+0x1d6>
 800774a:	f04f 0900 	mov.w	r9, #0
 800774e:	2301      	movs	r3, #1
 8007750:	e77d      	b.n	800764e <_strtod_l+0x176>
 8007752:	f04f 0c00 	mov.w	ip, #0
 8007756:	1ca2      	adds	r2, r4, #2
 8007758:	9219      	str	r2, [sp, #100]	@ 0x64
 800775a:	78a2      	ldrb	r2, [r4, #2]
 800775c:	e785      	b.n	800766a <_strtod_l+0x192>
 800775e:	f04f 0c01 	mov.w	ip, #1
 8007762:	e7f8      	b.n	8007756 <_strtod_l+0x27e>
 8007764:	080095c0 	.word	0x080095c0
 8007768:	080095a8 	.word	0x080095a8
 800776c:	7ff00000 	.word	0x7ff00000
 8007770:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007772:	1c51      	adds	r1, r2, #1
 8007774:	9119      	str	r1, [sp, #100]	@ 0x64
 8007776:	7852      	ldrb	r2, [r2, #1]
 8007778:	2a30      	cmp	r2, #48	@ 0x30
 800777a:	d0f9      	beq.n	8007770 <_strtod_l+0x298>
 800777c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007780:	2908      	cmp	r1, #8
 8007782:	f63f af78 	bhi.w	8007676 <_strtod_l+0x19e>
 8007786:	3a30      	subs	r2, #48	@ 0x30
 8007788:	920e      	str	r2, [sp, #56]	@ 0x38
 800778a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800778c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800778e:	f04f 080a 	mov.w	r8, #10
 8007792:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007794:	1c56      	adds	r6, r2, #1
 8007796:	9619      	str	r6, [sp, #100]	@ 0x64
 8007798:	7852      	ldrb	r2, [r2, #1]
 800779a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800779e:	f1be 0f09 	cmp.w	lr, #9
 80077a2:	d939      	bls.n	8007818 <_strtod_l+0x340>
 80077a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80077a6:	1a76      	subs	r6, r6, r1
 80077a8:	2e08      	cmp	r6, #8
 80077aa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80077ae:	dc03      	bgt.n	80077b8 <_strtod_l+0x2e0>
 80077b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80077b2:	4588      	cmp	r8, r1
 80077b4:	bfa8      	it	ge
 80077b6:	4688      	movge	r8, r1
 80077b8:	f1bc 0f00 	cmp.w	ip, #0
 80077bc:	d001      	beq.n	80077c2 <_strtod_l+0x2ea>
 80077be:	f1c8 0800 	rsb	r8, r8, #0
 80077c2:	2d00      	cmp	r5, #0
 80077c4:	d14e      	bne.n	8007864 <_strtod_l+0x38c>
 80077c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80077c8:	4308      	orrs	r0, r1
 80077ca:	f47f aebe 	bne.w	800754a <_strtod_l+0x72>
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f47f aed6 	bne.w	8007580 <_strtod_l+0xa8>
 80077d4:	2a69      	cmp	r2, #105	@ 0x69
 80077d6:	d028      	beq.n	800782a <_strtod_l+0x352>
 80077d8:	dc25      	bgt.n	8007826 <_strtod_l+0x34e>
 80077da:	2a49      	cmp	r2, #73	@ 0x49
 80077dc:	d025      	beq.n	800782a <_strtod_l+0x352>
 80077de:	2a4e      	cmp	r2, #78	@ 0x4e
 80077e0:	f47f aece 	bne.w	8007580 <_strtod_l+0xa8>
 80077e4:	499b      	ldr	r1, [pc, #620]	@ (8007a54 <_strtod_l+0x57c>)
 80077e6:	a819      	add	r0, sp, #100	@ 0x64
 80077e8:	f001 f9ee 	bl	8008bc8 <__match>
 80077ec:	2800      	cmp	r0, #0
 80077ee:	f43f aec7 	beq.w	8007580 <_strtod_l+0xa8>
 80077f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	2b28      	cmp	r3, #40	@ 0x28
 80077f8:	d12e      	bne.n	8007858 <_strtod_l+0x380>
 80077fa:	4997      	ldr	r1, [pc, #604]	@ (8007a58 <_strtod_l+0x580>)
 80077fc:	aa1c      	add	r2, sp, #112	@ 0x70
 80077fe:	a819      	add	r0, sp, #100	@ 0x64
 8007800:	f001 f9f6 	bl	8008bf0 <__hexnan>
 8007804:	2805      	cmp	r0, #5
 8007806:	d127      	bne.n	8007858 <_strtod_l+0x380>
 8007808:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800780a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800780e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007812:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007816:	e698      	b.n	800754a <_strtod_l+0x72>
 8007818:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800781a:	fb08 2101 	mla	r1, r8, r1, r2
 800781e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007822:	920e      	str	r2, [sp, #56]	@ 0x38
 8007824:	e7b5      	b.n	8007792 <_strtod_l+0x2ba>
 8007826:	2a6e      	cmp	r2, #110	@ 0x6e
 8007828:	e7da      	b.n	80077e0 <_strtod_l+0x308>
 800782a:	498c      	ldr	r1, [pc, #560]	@ (8007a5c <_strtod_l+0x584>)
 800782c:	a819      	add	r0, sp, #100	@ 0x64
 800782e:	f001 f9cb 	bl	8008bc8 <__match>
 8007832:	2800      	cmp	r0, #0
 8007834:	f43f aea4 	beq.w	8007580 <_strtod_l+0xa8>
 8007838:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800783a:	4989      	ldr	r1, [pc, #548]	@ (8007a60 <_strtod_l+0x588>)
 800783c:	3b01      	subs	r3, #1
 800783e:	a819      	add	r0, sp, #100	@ 0x64
 8007840:	9319      	str	r3, [sp, #100]	@ 0x64
 8007842:	f001 f9c1 	bl	8008bc8 <__match>
 8007846:	b910      	cbnz	r0, 800784e <_strtod_l+0x376>
 8007848:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800784a:	3301      	adds	r3, #1
 800784c:	9319      	str	r3, [sp, #100]	@ 0x64
 800784e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007a70 <_strtod_l+0x598>
 8007852:	f04f 0a00 	mov.w	sl, #0
 8007856:	e678      	b.n	800754a <_strtod_l+0x72>
 8007858:	4882      	ldr	r0, [pc, #520]	@ (8007a64 <_strtod_l+0x58c>)
 800785a:	f000 fef1 	bl	8008640 <nan>
 800785e:	ec5b ab10 	vmov	sl, fp, d0
 8007862:	e672      	b.n	800754a <_strtod_l+0x72>
 8007864:	eba8 0309 	sub.w	r3, r8, r9
 8007868:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800786a:	9309      	str	r3, [sp, #36]	@ 0x24
 800786c:	2f00      	cmp	r7, #0
 800786e:	bf08      	it	eq
 8007870:	462f      	moveq	r7, r5
 8007872:	2d10      	cmp	r5, #16
 8007874:	462c      	mov	r4, r5
 8007876:	bfa8      	it	ge
 8007878:	2410      	movge	r4, #16
 800787a:	f7f8 fe43 	bl	8000504 <__aeabi_ui2d>
 800787e:	2d09      	cmp	r5, #9
 8007880:	4682      	mov	sl, r0
 8007882:	468b      	mov	fp, r1
 8007884:	dc13      	bgt.n	80078ae <_strtod_l+0x3d6>
 8007886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007888:	2b00      	cmp	r3, #0
 800788a:	f43f ae5e 	beq.w	800754a <_strtod_l+0x72>
 800788e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007890:	dd78      	ble.n	8007984 <_strtod_l+0x4ac>
 8007892:	2b16      	cmp	r3, #22
 8007894:	dc5f      	bgt.n	8007956 <_strtod_l+0x47e>
 8007896:	4974      	ldr	r1, [pc, #464]	@ (8007a68 <_strtod_l+0x590>)
 8007898:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800789c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078a0:	4652      	mov	r2, sl
 80078a2:	465b      	mov	r3, fp
 80078a4:	f7f8 fea8 	bl	80005f8 <__aeabi_dmul>
 80078a8:	4682      	mov	sl, r0
 80078aa:	468b      	mov	fp, r1
 80078ac:	e64d      	b.n	800754a <_strtod_l+0x72>
 80078ae:	4b6e      	ldr	r3, [pc, #440]	@ (8007a68 <_strtod_l+0x590>)
 80078b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80078b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80078b8:	f7f8 fe9e 	bl	80005f8 <__aeabi_dmul>
 80078bc:	4682      	mov	sl, r0
 80078be:	9808      	ldr	r0, [sp, #32]
 80078c0:	468b      	mov	fp, r1
 80078c2:	f7f8 fe1f 	bl	8000504 <__aeabi_ui2d>
 80078c6:	4602      	mov	r2, r0
 80078c8:	460b      	mov	r3, r1
 80078ca:	4650      	mov	r0, sl
 80078cc:	4659      	mov	r1, fp
 80078ce:	f7f8 fcdd 	bl	800028c <__adddf3>
 80078d2:	2d0f      	cmp	r5, #15
 80078d4:	4682      	mov	sl, r0
 80078d6:	468b      	mov	fp, r1
 80078d8:	ddd5      	ble.n	8007886 <_strtod_l+0x3ae>
 80078da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078dc:	1b2c      	subs	r4, r5, r4
 80078de:	441c      	add	r4, r3
 80078e0:	2c00      	cmp	r4, #0
 80078e2:	f340 8096 	ble.w	8007a12 <_strtod_l+0x53a>
 80078e6:	f014 030f 	ands.w	r3, r4, #15
 80078ea:	d00a      	beq.n	8007902 <_strtod_l+0x42a>
 80078ec:	495e      	ldr	r1, [pc, #376]	@ (8007a68 <_strtod_l+0x590>)
 80078ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80078f2:	4652      	mov	r2, sl
 80078f4:	465b      	mov	r3, fp
 80078f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078fa:	f7f8 fe7d 	bl	80005f8 <__aeabi_dmul>
 80078fe:	4682      	mov	sl, r0
 8007900:	468b      	mov	fp, r1
 8007902:	f034 040f 	bics.w	r4, r4, #15
 8007906:	d073      	beq.n	80079f0 <_strtod_l+0x518>
 8007908:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800790c:	dd48      	ble.n	80079a0 <_strtod_l+0x4c8>
 800790e:	2400      	movs	r4, #0
 8007910:	46a0      	mov	r8, r4
 8007912:	940a      	str	r4, [sp, #40]	@ 0x28
 8007914:	46a1      	mov	r9, r4
 8007916:	9a05      	ldr	r2, [sp, #20]
 8007918:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007a70 <_strtod_l+0x598>
 800791c:	2322      	movs	r3, #34	@ 0x22
 800791e:	6013      	str	r3, [r2, #0]
 8007920:	f04f 0a00 	mov.w	sl, #0
 8007924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007926:	2b00      	cmp	r3, #0
 8007928:	f43f ae0f 	beq.w	800754a <_strtod_l+0x72>
 800792c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800792e:	9805      	ldr	r0, [sp, #20]
 8007930:	f7ff f942 	bl	8006bb8 <_Bfree>
 8007934:	9805      	ldr	r0, [sp, #20]
 8007936:	4649      	mov	r1, r9
 8007938:	f7ff f93e 	bl	8006bb8 <_Bfree>
 800793c:	9805      	ldr	r0, [sp, #20]
 800793e:	4641      	mov	r1, r8
 8007940:	f7ff f93a 	bl	8006bb8 <_Bfree>
 8007944:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007946:	9805      	ldr	r0, [sp, #20]
 8007948:	f7ff f936 	bl	8006bb8 <_Bfree>
 800794c:	9805      	ldr	r0, [sp, #20]
 800794e:	4621      	mov	r1, r4
 8007950:	f7ff f932 	bl	8006bb8 <_Bfree>
 8007954:	e5f9      	b.n	800754a <_strtod_l+0x72>
 8007956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007958:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800795c:	4293      	cmp	r3, r2
 800795e:	dbbc      	blt.n	80078da <_strtod_l+0x402>
 8007960:	4c41      	ldr	r4, [pc, #260]	@ (8007a68 <_strtod_l+0x590>)
 8007962:	f1c5 050f 	rsb	r5, r5, #15
 8007966:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800796a:	4652      	mov	r2, sl
 800796c:	465b      	mov	r3, fp
 800796e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007972:	f7f8 fe41 	bl	80005f8 <__aeabi_dmul>
 8007976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007978:	1b5d      	subs	r5, r3, r5
 800797a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800797e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007982:	e78f      	b.n	80078a4 <_strtod_l+0x3cc>
 8007984:	3316      	adds	r3, #22
 8007986:	dba8      	blt.n	80078da <_strtod_l+0x402>
 8007988:	4b37      	ldr	r3, [pc, #220]	@ (8007a68 <_strtod_l+0x590>)
 800798a:	eba9 0808 	sub.w	r8, r9, r8
 800798e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007992:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007996:	4650      	mov	r0, sl
 8007998:	4659      	mov	r1, fp
 800799a:	f7f8 ff57 	bl	800084c <__aeabi_ddiv>
 800799e:	e783      	b.n	80078a8 <_strtod_l+0x3d0>
 80079a0:	4b32      	ldr	r3, [pc, #200]	@ (8007a6c <_strtod_l+0x594>)
 80079a2:	9308      	str	r3, [sp, #32]
 80079a4:	2300      	movs	r3, #0
 80079a6:	1124      	asrs	r4, r4, #4
 80079a8:	4650      	mov	r0, sl
 80079aa:	4659      	mov	r1, fp
 80079ac:	461e      	mov	r6, r3
 80079ae:	2c01      	cmp	r4, #1
 80079b0:	dc21      	bgt.n	80079f6 <_strtod_l+0x51e>
 80079b2:	b10b      	cbz	r3, 80079b8 <_strtod_l+0x4e0>
 80079b4:	4682      	mov	sl, r0
 80079b6:	468b      	mov	fp, r1
 80079b8:	492c      	ldr	r1, [pc, #176]	@ (8007a6c <_strtod_l+0x594>)
 80079ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80079be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80079c2:	4652      	mov	r2, sl
 80079c4:	465b      	mov	r3, fp
 80079c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079ca:	f7f8 fe15 	bl	80005f8 <__aeabi_dmul>
 80079ce:	4b28      	ldr	r3, [pc, #160]	@ (8007a70 <_strtod_l+0x598>)
 80079d0:	460a      	mov	r2, r1
 80079d2:	400b      	ands	r3, r1
 80079d4:	4927      	ldr	r1, [pc, #156]	@ (8007a74 <_strtod_l+0x59c>)
 80079d6:	428b      	cmp	r3, r1
 80079d8:	4682      	mov	sl, r0
 80079da:	d898      	bhi.n	800790e <_strtod_l+0x436>
 80079dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80079e0:	428b      	cmp	r3, r1
 80079e2:	bf86      	itte	hi
 80079e4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007a78 <_strtod_l+0x5a0>
 80079e8:	f04f 3aff 	movhi.w	sl, #4294967295
 80079ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80079f0:	2300      	movs	r3, #0
 80079f2:	9308      	str	r3, [sp, #32]
 80079f4:	e07a      	b.n	8007aec <_strtod_l+0x614>
 80079f6:	07e2      	lsls	r2, r4, #31
 80079f8:	d505      	bpl.n	8007a06 <_strtod_l+0x52e>
 80079fa:	9b08      	ldr	r3, [sp, #32]
 80079fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a00:	f7f8 fdfa 	bl	80005f8 <__aeabi_dmul>
 8007a04:	2301      	movs	r3, #1
 8007a06:	9a08      	ldr	r2, [sp, #32]
 8007a08:	3208      	adds	r2, #8
 8007a0a:	3601      	adds	r6, #1
 8007a0c:	1064      	asrs	r4, r4, #1
 8007a0e:	9208      	str	r2, [sp, #32]
 8007a10:	e7cd      	b.n	80079ae <_strtod_l+0x4d6>
 8007a12:	d0ed      	beq.n	80079f0 <_strtod_l+0x518>
 8007a14:	4264      	negs	r4, r4
 8007a16:	f014 020f 	ands.w	r2, r4, #15
 8007a1a:	d00a      	beq.n	8007a32 <_strtod_l+0x55a>
 8007a1c:	4b12      	ldr	r3, [pc, #72]	@ (8007a68 <_strtod_l+0x590>)
 8007a1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a22:	4650      	mov	r0, sl
 8007a24:	4659      	mov	r1, fp
 8007a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2a:	f7f8 ff0f 	bl	800084c <__aeabi_ddiv>
 8007a2e:	4682      	mov	sl, r0
 8007a30:	468b      	mov	fp, r1
 8007a32:	1124      	asrs	r4, r4, #4
 8007a34:	d0dc      	beq.n	80079f0 <_strtod_l+0x518>
 8007a36:	2c1f      	cmp	r4, #31
 8007a38:	dd20      	ble.n	8007a7c <_strtod_l+0x5a4>
 8007a3a:	2400      	movs	r4, #0
 8007a3c:	46a0      	mov	r8, r4
 8007a3e:	940a      	str	r4, [sp, #40]	@ 0x28
 8007a40:	46a1      	mov	r9, r4
 8007a42:	9a05      	ldr	r2, [sp, #20]
 8007a44:	2322      	movs	r3, #34	@ 0x22
 8007a46:	f04f 0a00 	mov.w	sl, #0
 8007a4a:	f04f 0b00 	mov.w	fp, #0
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	e768      	b.n	8007924 <_strtod_l+0x44c>
 8007a52:	bf00      	nop
 8007a54:	08009395 	.word	0x08009395
 8007a58:	080095ac 	.word	0x080095ac
 8007a5c:	0800938d 	.word	0x0800938d
 8007a60:	080093c4 	.word	0x080093c4
 8007a64:	08009755 	.word	0x08009755
 8007a68:	080094e0 	.word	0x080094e0
 8007a6c:	080094b8 	.word	0x080094b8
 8007a70:	7ff00000 	.word	0x7ff00000
 8007a74:	7ca00000 	.word	0x7ca00000
 8007a78:	7fefffff 	.word	0x7fefffff
 8007a7c:	f014 0310 	ands.w	r3, r4, #16
 8007a80:	bf18      	it	ne
 8007a82:	236a      	movne	r3, #106	@ 0x6a
 8007a84:	4ea9      	ldr	r6, [pc, #676]	@ (8007d2c <_strtod_l+0x854>)
 8007a86:	9308      	str	r3, [sp, #32]
 8007a88:	4650      	mov	r0, sl
 8007a8a:	4659      	mov	r1, fp
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	07e2      	lsls	r2, r4, #31
 8007a90:	d504      	bpl.n	8007a9c <_strtod_l+0x5c4>
 8007a92:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a96:	f7f8 fdaf 	bl	80005f8 <__aeabi_dmul>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	1064      	asrs	r4, r4, #1
 8007a9e:	f106 0608 	add.w	r6, r6, #8
 8007aa2:	d1f4      	bne.n	8007a8e <_strtod_l+0x5b6>
 8007aa4:	b10b      	cbz	r3, 8007aaa <_strtod_l+0x5d2>
 8007aa6:	4682      	mov	sl, r0
 8007aa8:	468b      	mov	fp, r1
 8007aaa:	9b08      	ldr	r3, [sp, #32]
 8007aac:	b1b3      	cbz	r3, 8007adc <_strtod_l+0x604>
 8007aae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007ab2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	4659      	mov	r1, fp
 8007aba:	dd0f      	ble.n	8007adc <_strtod_l+0x604>
 8007abc:	2b1f      	cmp	r3, #31
 8007abe:	dd55      	ble.n	8007b6c <_strtod_l+0x694>
 8007ac0:	2b34      	cmp	r3, #52	@ 0x34
 8007ac2:	bfde      	ittt	le
 8007ac4:	f04f 33ff 	movle.w	r3, #4294967295
 8007ac8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007acc:	4093      	lslle	r3, r2
 8007ace:	f04f 0a00 	mov.w	sl, #0
 8007ad2:	bfcc      	ite	gt
 8007ad4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007ad8:	ea03 0b01 	andle.w	fp, r3, r1
 8007adc:	2200      	movs	r2, #0
 8007ade:	2300      	movs	r3, #0
 8007ae0:	4650      	mov	r0, sl
 8007ae2:	4659      	mov	r1, fp
 8007ae4:	f7f8 fff0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d1a6      	bne.n	8007a3a <_strtod_l+0x562>
 8007aec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007af2:	9805      	ldr	r0, [sp, #20]
 8007af4:	462b      	mov	r3, r5
 8007af6:	463a      	mov	r2, r7
 8007af8:	f7ff f8c6 	bl	8006c88 <__s2b>
 8007afc:	900a      	str	r0, [sp, #40]	@ 0x28
 8007afe:	2800      	cmp	r0, #0
 8007b00:	f43f af05 	beq.w	800790e <_strtod_l+0x436>
 8007b04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b06:	2a00      	cmp	r2, #0
 8007b08:	eba9 0308 	sub.w	r3, r9, r8
 8007b0c:	bfa8      	it	ge
 8007b0e:	2300      	movge	r3, #0
 8007b10:	9312      	str	r3, [sp, #72]	@ 0x48
 8007b12:	2400      	movs	r4, #0
 8007b14:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007b18:	9316      	str	r3, [sp, #88]	@ 0x58
 8007b1a:	46a0      	mov	r8, r4
 8007b1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b1e:	9805      	ldr	r0, [sp, #20]
 8007b20:	6859      	ldr	r1, [r3, #4]
 8007b22:	f7ff f809 	bl	8006b38 <_Balloc>
 8007b26:	4681      	mov	r9, r0
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	f43f aef4 	beq.w	8007916 <_strtod_l+0x43e>
 8007b2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b30:	691a      	ldr	r2, [r3, #16]
 8007b32:	3202      	adds	r2, #2
 8007b34:	f103 010c 	add.w	r1, r3, #12
 8007b38:	0092      	lsls	r2, r2, #2
 8007b3a:	300c      	adds	r0, #12
 8007b3c:	f000 fd72 	bl	8008624 <memcpy>
 8007b40:	ec4b ab10 	vmov	d0, sl, fp
 8007b44:	9805      	ldr	r0, [sp, #20]
 8007b46:	aa1c      	add	r2, sp, #112	@ 0x70
 8007b48:	a91b      	add	r1, sp, #108	@ 0x6c
 8007b4a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007b4e:	f7ff fbd7 	bl	8007300 <__d2b>
 8007b52:	901a      	str	r0, [sp, #104]	@ 0x68
 8007b54:	2800      	cmp	r0, #0
 8007b56:	f43f aede 	beq.w	8007916 <_strtod_l+0x43e>
 8007b5a:	9805      	ldr	r0, [sp, #20]
 8007b5c:	2101      	movs	r1, #1
 8007b5e:	f7ff f929 	bl	8006db4 <__i2b>
 8007b62:	4680      	mov	r8, r0
 8007b64:	b948      	cbnz	r0, 8007b7a <_strtod_l+0x6a2>
 8007b66:	f04f 0800 	mov.w	r8, #0
 8007b6a:	e6d4      	b.n	8007916 <_strtod_l+0x43e>
 8007b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b70:	fa02 f303 	lsl.w	r3, r2, r3
 8007b74:	ea03 0a0a 	and.w	sl, r3, sl
 8007b78:	e7b0      	b.n	8007adc <_strtod_l+0x604>
 8007b7a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007b7c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007b7e:	2d00      	cmp	r5, #0
 8007b80:	bfab      	itete	ge
 8007b82:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007b84:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007b86:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007b88:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007b8a:	bfac      	ite	ge
 8007b8c:	18ef      	addge	r7, r5, r3
 8007b8e:	1b5e      	sublt	r6, r3, r5
 8007b90:	9b08      	ldr	r3, [sp, #32]
 8007b92:	1aed      	subs	r5, r5, r3
 8007b94:	4415      	add	r5, r2
 8007b96:	4b66      	ldr	r3, [pc, #408]	@ (8007d30 <_strtod_l+0x858>)
 8007b98:	3d01      	subs	r5, #1
 8007b9a:	429d      	cmp	r5, r3
 8007b9c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007ba0:	da50      	bge.n	8007c44 <_strtod_l+0x76c>
 8007ba2:	1b5b      	subs	r3, r3, r5
 8007ba4:	2b1f      	cmp	r3, #31
 8007ba6:	eba2 0203 	sub.w	r2, r2, r3
 8007baa:	f04f 0101 	mov.w	r1, #1
 8007bae:	dc3d      	bgt.n	8007c2c <_strtod_l+0x754>
 8007bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8007bb4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	9310      	str	r3, [sp, #64]	@ 0x40
 8007bba:	18bd      	adds	r5, r7, r2
 8007bbc:	9b08      	ldr	r3, [sp, #32]
 8007bbe:	42af      	cmp	r7, r5
 8007bc0:	4416      	add	r6, r2
 8007bc2:	441e      	add	r6, r3
 8007bc4:	463b      	mov	r3, r7
 8007bc6:	bfa8      	it	ge
 8007bc8:	462b      	movge	r3, r5
 8007bca:	42b3      	cmp	r3, r6
 8007bcc:	bfa8      	it	ge
 8007bce:	4633      	movge	r3, r6
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	bfc2      	ittt	gt
 8007bd4:	1aed      	subgt	r5, r5, r3
 8007bd6:	1af6      	subgt	r6, r6, r3
 8007bd8:	1aff      	subgt	r7, r7, r3
 8007bda:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	dd16      	ble.n	8007c0e <_strtod_l+0x736>
 8007be0:	4641      	mov	r1, r8
 8007be2:	9805      	ldr	r0, [sp, #20]
 8007be4:	461a      	mov	r2, r3
 8007be6:	f7ff f9a5 	bl	8006f34 <__pow5mult>
 8007bea:	4680      	mov	r8, r0
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d0ba      	beq.n	8007b66 <_strtod_l+0x68e>
 8007bf0:	4601      	mov	r1, r0
 8007bf2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007bf4:	9805      	ldr	r0, [sp, #20]
 8007bf6:	f7ff f8f3 	bl	8006de0 <__multiply>
 8007bfa:	900e      	str	r0, [sp, #56]	@ 0x38
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	f43f ae8a 	beq.w	8007916 <_strtod_l+0x43e>
 8007c02:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c04:	9805      	ldr	r0, [sp, #20]
 8007c06:	f7fe ffd7 	bl	8006bb8 <_Bfree>
 8007c0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c0e:	2d00      	cmp	r5, #0
 8007c10:	dc1d      	bgt.n	8007c4e <_strtod_l+0x776>
 8007c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	dd23      	ble.n	8007c60 <_strtod_l+0x788>
 8007c18:	4649      	mov	r1, r9
 8007c1a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007c1c:	9805      	ldr	r0, [sp, #20]
 8007c1e:	f7ff f989 	bl	8006f34 <__pow5mult>
 8007c22:	4681      	mov	r9, r0
 8007c24:	b9e0      	cbnz	r0, 8007c60 <_strtod_l+0x788>
 8007c26:	f04f 0900 	mov.w	r9, #0
 8007c2a:	e674      	b.n	8007916 <_strtod_l+0x43e>
 8007c2c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007c30:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007c34:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007c38:	35e2      	adds	r5, #226	@ 0xe2
 8007c3a:	fa01 f305 	lsl.w	r3, r1, r5
 8007c3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007c40:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007c42:	e7ba      	b.n	8007bba <_strtod_l+0x6e2>
 8007c44:	2300      	movs	r3, #0
 8007c46:	9310      	str	r3, [sp, #64]	@ 0x40
 8007c48:	2301      	movs	r3, #1
 8007c4a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c4c:	e7b5      	b.n	8007bba <_strtod_l+0x6e2>
 8007c4e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c50:	9805      	ldr	r0, [sp, #20]
 8007c52:	462a      	mov	r2, r5
 8007c54:	f7ff f9c8 	bl	8006fe8 <__lshift>
 8007c58:	901a      	str	r0, [sp, #104]	@ 0x68
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	d1d9      	bne.n	8007c12 <_strtod_l+0x73a>
 8007c5e:	e65a      	b.n	8007916 <_strtod_l+0x43e>
 8007c60:	2e00      	cmp	r6, #0
 8007c62:	dd07      	ble.n	8007c74 <_strtod_l+0x79c>
 8007c64:	4649      	mov	r1, r9
 8007c66:	9805      	ldr	r0, [sp, #20]
 8007c68:	4632      	mov	r2, r6
 8007c6a:	f7ff f9bd 	bl	8006fe8 <__lshift>
 8007c6e:	4681      	mov	r9, r0
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d0d8      	beq.n	8007c26 <_strtod_l+0x74e>
 8007c74:	2f00      	cmp	r7, #0
 8007c76:	dd08      	ble.n	8007c8a <_strtod_l+0x7b2>
 8007c78:	4641      	mov	r1, r8
 8007c7a:	9805      	ldr	r0, [sp, #20]
 8007c7c:	463a      	mov	r2, r7
 8007c7e:	f7ff f9b3 	bl	8006fe8 <__lshift>
 8007c82:	4680      	mov	r8, r0
 8007c84:	2800      	cmp	r0, #0
 8007c86:	f43f ae46 	beq.w	8007916 <_strtod_l+0x43e>
 8007c8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c8c:	9805      	ldr	r0, [sp, #20]
 8007c8e:	464a      	mov	r2, r9
 8007c90:	f7ff fa32 	bl	80070f8 <__mdiff>
 8007c94:	4604      	mov	r4, r0
 8007c96:	2800      	cmp	r0, #0
 8007c98:	f43f ae3d 	beq.w	8007916 <_strtod_l+0x43e>
 8007c9c:	68c3      	ldr	r3, [r0, #12]
 8007c9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	60c3      	str	r3, [r0, #12]
 8007ca4:	4641      	mov	r1, r8
 8007ca6:	f7ff fa0b 	bl	80070c0 <__mcmp>
 8007caa:	2800      	cmp	r0, #0
 8007cac:	da46      	bge.n	8007d3c <_strtod_l+0x864>
 8007cae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cb0:	ea53 030a 	orrs.w	r3, r3, sl
 8007cb4:	d16c      	bne.n	8007d90 <_strtod_l+0x8b8>
 8007cb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d168      	bne.n	8007d90 <_strtod_l+0x8b8>
 8007cbe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007cc2:	0d1b      	lsrs	r3, r3, #20
 8007cc4:	051b      	lsls	r3, r3, #20
 8007cc6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007cca:	d961      	bls.n	8007d90 <_strtod_l+0x8b8>
 8007ccc:	6963      	ldr	r3, [r4, #20]
 8007cce:	b913      	cbnz	r3, 8007cd6 <_strtod_l+0x7fe>
 8007cd0:	6923      	ldr	r3, [r4, #16]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	dd5c      	ble.n	8007d90 <_strtod_l+0x8b8>
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	2201      	movs	r2, #1
 8007cda:	9805      	ldr	r0, [sp, #20]
 8007cdc:	f7ff f984 	bl	8006fe8 <__lshift>
 8007ce0:	4641      	mov	r1, r8
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	f7ff f9ec 	bl	80070c0 <__mcmp>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	dd51      	ble.n	8007d90 <_strtod_l+0x8b8>
 8007cec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007cf0:	9a08      	ldr	r2, [sp, #32]
 8007cf2:	0d1b      	lsrs	r3, r3, #20
 8007cf4:	051b      	lsls	r3, r3, #20
 8007cf6:	2a00      	cmp	r2, #0
 8007cf8:	d06b      	beq.n	8007dd2 <_strtod_l+0x8fa>
 8007cfa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007cfe:	d868      	bhi.n	8007dd2 <_strtod_l+0x8fa>
 8007d00:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007d04:	f67f ae9d 	bls.w	8007a42 <_strtod_l+0x56a>
 8007d08:	4b0a      	ldr	r3, [pc, #40]	@ (8007d34 <_strtod_l+0x85c>)
 8007d0a:	4650      	mov	r0, sl
 8007d0c:	4659      	mov	r1, fp
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f7f8 fc72 	bl	80005f8 <__aeabi_dmul>
 8007d14:	4b08      	ldr	r3, [pc, #32]	@ (8007d38 <_strtod_l+0x860>)
 8007d16:	400b      	ands	r3, r1
 8007d18:	4682      	mov	sl, r0
 8007d1a:	468b      	mov	fp, r1
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f47f ae05 	bne.w	800792c <_strtod_l+0x454>
 8007d22:	9a05      	ldr	r2, [sp, #20]
 8007d24:	2322      	movs	r3, #34	@ 0x22
 8007d26:	6013      	str	r3, [r2, #0]
 8007d28:	e600      	b.n	800792c <_strtod_l+0x454>
 8007d2a:	bf00      	nop
 8007d2c:	080095d8 	.word	0x080095d8
 8007d30:	fffffc02 	.word	0xfffffc02
 8007d34:	39500000 	.word	0x39500000
 8007d38:	7ff00000 	.word	0x7ff00000
 8007d3c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007d40:	d165      	bne.n	8007e0e <_strtod_l+0x936>
 8007d42:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007d44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d48:	b35a      	cbz	r2, 8007da2 <_strtod_l+0x8ca>
 8007d4a:	4a9f      	ldr	r2, [pc, #636]	@ (8007fc8 <_strtod_l+0xaf0>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d12b      	bne.n	8007da8 <_strtod_l+0x8d0>
 8007d50:	9b08      	ldr	r3, [sp, #32]
 8007d52:	4651      	mov	r1, sl
 8007d54:	b303      	cbz	r3, 8007d98 <_strtod_l+0x8c0>
 8007d56:	4b9d      	ldr	r3, [pc, #628]	@ (8007fcc <_strtod_l+0xaf4>)
 8007d58:	465a      	mov	r2, fp
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007d60:	f04f 32ff 	mov.w	r2, #4294967295
 8007d64:	d81b      	bhi.n	8007d9e <_strtod_l+0x8c6>
 8007d66:	0d1b      	lsrs	r3, r3, #20
 8007d68:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d70:	4299      	cmp	r1, r3
 8007d72:	d119      	bne.n	8007da8 <_strtod_l+0x8d0>
 8007d74:	4b96      	ldr	r3, [pc, #600]	@ (8007fd0 <_strtod_l+0xaf8>)
 8007d76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d102      	bne.n	8007d82 <_strtod_l+0x8aa>
 8007d7c:	3101      	adds	r1, #1
 8007d7e:	f43f adca 	beq.w	8007916 <_strtod_l+0x43e>
 8007d82:	4b92      	ldr	r3, [pc, #584]	@ (8007fcc <_strtod_l+0xaf4>)
 8007d84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d86:	401a      	ands	r2, r3
 8007d88:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007d8c:	f04f 0a00 	mov.w	sl, #0
 8007d90:	9b08      	ldr	r3, [sp, #32]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1b8      	bne.n	8007d08 <_strtod_l+0x830>
 8007d96:	e5c9      	b.n	800792c <_strtod_l+0x454>
 8007d98:	f04f 33ff 	mov.w	r3, #4294967295
 8007d9c:	e7e8      	b.n	8007d70 <_strtod_l+0x898>
 8007d9e:	4613      	mov	r3, r2
 8007da0:	e7e6      	b.n	8007d70 <_strtod_l+0x898>
 8007da2:	ea53 030a 	orrs.w	r3, r3, sl
 8007da6:	d0a1      	beq.n	8007cec <_strtod_l+0x814>
 8007da8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007daa:	b1db      	cbz	r3, 8007de4 <_strtod_l+0x90c>
 8007dac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007dae:	4213      	tst	r3, r2
 8007db0:	d0ee      	beq.n	8007d90 <_strtod_l+0x8b8>
 8007db2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007db4:	9a08      	ldr	r2, [sp, #32]
 8007db6:	4650      	mov	r0, sl
 8007db8:	4659      	mov	r1, fp
 8007dba:	b1bb      	cbz	r3, 8007dec <_strtod_l+0x914>
 8007dbc:	f7ff fb6e 	bl	800749c <sulp>
 8007dc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007dc4:	ec53 2b10 	vmov	r2, r3, d0
 8007dc8:	f7f8 fa60 	bl	800028c <__adddf3>
 8007dcc:	4682      	mov	sl, r0
 8007dce:	468b      	mov	fp, r1
 8007dd0:	e7de      	b.n	8007d90 <_strtod_l+0x8b8>
 8007dd2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007dd6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007dda:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007dde:	f04f 3aff 	mov.w	sl, #4294967295
 8007de2:	e7d5      	b.n	8007d90 <_strtod_l+0x8b8>
 8007de4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007de6:	ea13 0f0a 	tst.w	r3, sl
 8007dea:	e7e1      	b.n	8007db0 <_strtod_l+0x8d8>
 8007dec:	f7ff fb56 	bl	800749c <sulp>
 8007df0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007df4:	ec53 2b10 	vmov	r2, r3, d0
 8007df8:	f7f8 fa46 	bl	8000288 <__aeabi_dsub>
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	2300      	movs	r3, #0
 8007e00:	4682      	mov	sl, r0
 8007e02:	468b      	mov	fp, r1
 8007e04:	f7f8 fe60 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	d0c1      	beq.n	8007d90 <_strtod_l+0x8b8>
 8007e0c:	e619      	b.n	8007a42 <_strtod_l+0x56a>
 8007e0e:	4641      	mov	r1, r8
 8007e10:	4620      	mov	r0, r4
 8007e12:	f7ff facd 	bl	80073b0 <__ratio>
 8007e16:	ec57 6b10 	vmov	r6, r7, d0
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007e20:	4630      	mov	r0, r6
 8007e22:	4639      	mov	r1, r7
 8007e24:	f7f8 fe64 	bl	8000af0 <__aeabi_dcmple>
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	d06f      	beq.n	8007f0c <_strtod_l+0xa34>
 8007e2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d17a      	bne.n	8007f28 <_strtod_l+0xa50>
 8007e32:	f1ba 0f00 	cmp.w	sl, #0
 8007e36:	d158      	bne.n	8007eea <_strtod_l+0xa12>
 8007e38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d15a      	bne.n	8007ef8 <_strtod_l+0xa20>
 8007e42:	4b64      	ldr	r3, [pc, #400]	@ (8007fd4 <_strtod_l+0xafc>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	4630      	mov	r0, r6
 8007e48:	4639      	mov	r1, r7
 8007e4a:	f7f8 fe47 	bl	8000adc <__aeabi_dcmplt>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d159      	bne.n	8007f06 <_strtod_l+0xa2e>
 8007e52:	4630      	mov	r0, r6
 8007e54:	4639      	mov	r1, r7
 8007e56:	4b60      	ldr	r3, [pc, #384]	@ (8007fd8 <_strtod_l+0xb00>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f7f8 fbcd 	bl	80005f8 <__aeabi_dmul>
 8007e5e:	4606      	mov	r6, r0
 8007e60:	460f      	mov	r7, r1
 8007e62:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007e66:	9606      	str	r6, [sp, #24]
 8007e68:	9307      	str	r3, [sp, #28]
 8007e6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e6e:	4d57      	ldr	r5, [pc, #348]	@ (8007fcc <_strtod_l+0xaf4>)
 8007e70:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007e74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e76:	401d      	ands	r5, r3
 8007e78:	4b58      	ldr	r3, [pc, #352]	@ (8007fdc <_strtod_l+0xb04>)
 8007e7a:	429d      	cmp	r5, r3
 8007e7c:	f040 80b2 	bne.w	8007fe4 <_strtod_l+0xb0c>
 8007e80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e82:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007e86:	ec4b ab10 	vmov	d0, sl, fp
 8007e8a:	f7ff f9c9 	bl	8007220 <__ulp>
 8007e8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e92:	ec51 0b10 	vmov	r0, r1, d0
 8007e96:	f7f8 fbaf 	bl	80005f8 <__aeabi_dmul>
 8007e9a:	4652      	mov	r2, sl
 8007e9c:	465b      	mov	r3, fp
 8007e9e:	f7f8 f9f5 	bl	800028c <__adddf3>
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	4949      	ldr	r1, [pc, #292]	@ (8007fcc <_strtod_l+0xaf4>)
 8007ea6:	4a4e      	ldr	r2, [pc, #312]	@ (8007fe0 <_strtod_l+0xb08>)
 8007ea8:	4019      	ands	r1, r3
 8007eaa:	4291      	cmp	r1, r2
 8007eac:	4682      	mov	sl, r0
 8007eae:	d942      	bls.n	8007f36 <_strtod_l+0xa5e>
 8007eb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007eb2:	4b47      	ldr	r3, [pc, #284]	@ (8007fd0 <_strtod_l+0xaf8>)
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d103      	bne.n	8007ec0 <_strtod_l+0x9e8>
 8007eb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007eba:	3301      	adds	r3, #1
 8007ebc:	f43f ad2b 	beq.w	8007916 <_strtod_l+0x43e>
 8007ec0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007fd0 <_strtod_l+0xaf8>
 8007ec4:	f04f 3aff 	mov.w	sl, #4294967295
 8007ec8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007eca:	9805      	ldr	r0, [sp, #20]
 8007ecc:	f7fe fe74 	bl	8006bb8 <_Bfree>
 8007ed0:	9805      	ldr	r0, [sp, #20]
 8007ed2:	4649      	mov	r1, r9
 8007ed4:	f7fe fe70 	bl	8006bb8 <_Bfree>
 8007ed8:	9805      	ldr	r0, [sp, #20]
 8007eda:	4641      	mov	r1, r8
 8007edc:	f7fe fe6c 	bl	8006bb8 <_Bfree>
 8007ee0:	9805      	ldr	r0, [sp, #20]
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	f7fe fe68 	bl	8006bb8 <_Bfree>
 8007ee8:	e618      	b.n	8007b1c <_strtod_l+0x644>
 8007eea:	f1ba 0f01 	cmp.w	sl, #1
 8007eee:	d103      	bne.n	8007ef8 <_strtod_l+0xa20>
 8007ef0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f43f ada5 	beq.w	8007a42 <_strtod_l+0x56a>
 8007ef8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007fa8 <_strtod_l+0xad0>
 8007efc:	4f35      	ldr	r7, [pc, #212]	@ (8007fd4 <_strtod_l+0xafc>)
 8007efe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007f02:	2600      	movs	r6, #0
 8007f04:	e7b1      	b.n	8007e6a <_strtod_l+0x992>
 8007f06:	4f34      	ldr	r7, [pc, #208]	@ (8007fd8 <_strtod_l+0xb00>)
 8007f08:	2600      	movs	r6, #0
 8007f0a:	e7aa      	b.n	8007e62 <_strtod_l+0x98a>
 8007f0c:	4b32      	ldr	r3, [pc, #200]	@ (8007fd8 <_strtod_l+0xb00>)
 8007f0e:	4630      	mov	r0, r6
 8007f10:	4639      	mov	r1, r7
 8007f12:	2200      	movs	r2, #0
 8007f14:	f7f8 fb70 	bl	80005f8 <__aeabi_dmul>
 8007f18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f1a:	4606      	mov	r6, r0
 8007f1c:	460f      	mov	r7, r1
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d09f      	beq.n	8007e62 <_strtod_l+0x98a>
 8007f22:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007f26:	e7a0      	b.n	8007e6a <_strtod_l+0x992>
 8007f28:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007fb0 <_strtod_l+0xad8>
 8007f2c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007f30:	ec57 6b17 	vmov	r6, r7, d7
 8007f34:	e799      	b.n	8007e6a <_strtod_l+0x992>
 8007f36:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007f3a:	9b08      	ldr	r3, [sp, #32]
 8007f3c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1c1      	bne.n	8007ec8 <_strtod_l+0x9f0>
 8007f44:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007f48:	0d1b      	lsrs	r3, r3, #20
 8007f4a:	051b      	lsls	r3, r3, #20
 8007f4c:	429d      	cmp	r5, r3
 8007f4e:	d1bb      	bne.n	8007ec8 <_strtod_l+0x9f0>
 8007f50:	4630      	mov	r0, r6
 8007f52:	4639      	mov	r1, r7
 8007f54:	f7f8 fe98 	bl	8000c88 <__aeabi_d2lz>
 8007f58:	f7f8 fb20 	bl	800059c <__aeabi_l2d>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4630      	mov	r0, r6
 8007f62:	4639      	mov	r1, r7
 8007f64:	f7f8 f990 	bl	8000288 <__aeabi_dsub>
 8007f68:	460b      	mov	r3, r1
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007f70:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007f74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f76:	ea46 060a 	orr.w	r6, r6, sl
 8007f7a:	431e      	orrs	r6, r3
 8007f7c:	d06f      	beq.n	800805e <_strtod_l+0xb86>
 8007f7e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007fb8 <_strtod_l+0xae0>)
 8007f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f84:	f7f8 fdaa 	bl	8000adc <__aeabi_dcmplt>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	f47f accf 	bne.w	800792c <_strtod_l+0x454>
 8007f8e:	a30c      	add	r3, pc, #48	@ (adr r3, 8007fc0 <_strtod_l+0xae8>)
 8007f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f98:	f7f8 fdbe 	bl	8000b18 <__aeabi_dcmpgt>
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	d093      	beq.n	8007ec8 <_strtod_l+0x9f0>
 8007fa0:	e4c4      	b.n	800792c <_strtod_l+0x454>
 8007fa2:	bf00      	nop
 8007fa4:	f3af 8000 	nop.w
 8007fa8:	00000000 	.word	0x00000000
 8007fac:	bff00000 	.word	0xbff00000
 8007fb0:	00000000 	.word	0x00000000
 8007fb4:	3ff00000 	.word	0x3ff00000
 8007fb8:	94a03595 	.word	0x94a03595
 8007fbc:	3fdfffff 	.word	0x3fdfffff
 8007fc0:	35afe535 	.word	0x35afe535
 8007fc4:	3fe00000 	.word	0x3fe00000
 8007fc8:	000fffff 	.word	0x000fffff
 8007fcc:	7ff00000 	.word	0x7ff00000
 8007fd0:	7fefffff 	.word	0x7fefffff
 8007fd4:	3ff00000 	.word	0x3ff00000
 8007fd8:	3fe00000 	.word	0x3fe00000
 8007fdc:	7fe00000 	.word	0x7fe00000
 8007fe0:	7c9fffff 	.word	0x7c9fffff
 8007fe4:	9b08      	ldr	r3, [sp, #32]
 8007fe6:	b323      	cbz	r3, 8008032 <_strtod_l+0xb5a>
 8007fe8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007fec:	d821      	bhi.n	8008032 <_strtod_l+0xb5a>
 8007fee:	a328      	add	r3, pc, #160	@ (adr r3, 8008090 <_strtod_l+0xbb8>)
 8007ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff4:	4630      	mov	r0, r6
 8007ff6:	4639      	mov	r1, r7
 8007ff8:	f7f8 fd7a 	bl	8000af0 <__aeabi_dcmple>
 8007ffc:	b1a0      	cbz	r0, 8008028 <_strtod_l+0xb50>
 8007ffe:	4639      	mov	r1, r7
 8008000:	4630      	mov	r0, r6
 8008002:	f7f8 fdd1 	bl	8000ba8 <__aeabi_d2uiz>
 8008006:	2801      	cmp	r0, #1
 8008008:	bf38      	it	cc
 800800a:	2001      	movcc	r0, #1
 800800c:	f7f8 fa7a 	bl	8000504 <__aeabi_ui2d>
 8008010:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008012:	4606      	mov	r6, r0
 8008014:	460f      	mov	r7, r1
 8008016:	b9fb      	cbnz	r3, 8008058 <_strtod_l+0xb80>
 8008018:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800801c:	9014      	str	r0, [sp, #80]	@ 0x50
 800801e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008020:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008024:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008028:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800802a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800802e:	1b5b      	subs	r3, r3, r5
 8008030:	9311      	str	r3, [sp, #68]	@ 0x44
 8008032:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008036:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800803a:	f7ff f8f1 	bl	8007220 <__ulp>
 800803e:	4650      	mov	r0, sl
 8008040:	ec53 2b10 	vmov	r2, r3, d0
 8008044:	4659      	mov	r1, fp
 8008046:	f7f8 fad7 	bl	80005f8 <__aeabi_dmul>
 800804a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800804e:	f7f8 f91d 	bl	800028c <__adddf3>
 8008052:	4682      	mov	sl, r0
 8008054:	468b      	mov	fp, r1
 8008056:	e770      	b.n	8007f3a <_strtod_l+0xa62>
 8008058:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800805c:	e7e0      	b.n	8008020 <_strtod_l+0xb48>
 800805e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008098 <_strtod_l+0xbc0>)
 8008060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008064:	f7f8 fd3a 	bl	8000adc <__aeabi_dcmplt>
 8008068:	e798      	b.n	8007f9c <_strtod_l+0xac4>
 800806a:	2300      	movs	r3, #0
 800806c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800806e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008070:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008072:	6013      	str	r3, [r2, #0]
 8008074:	f7ff ba6d 	b.w	8007552 <_strtod_l+0x7a>
 8008078:	2a65      	cmp	r2, #101	@ 0x65
 800807a:	f43f ab66 	beq.w	800774a <_strtod_l+0x272>
 800807e:	2a45      	cmp	r2, #69	@ 0x45
 8008080:	f43f ab63 	beq.w	800774a <_strtod_l+0x272>
 8008084:	2301      	movs	r3, #1
 8008086:	f7ff bb9e 	b.w	80077c6 <_strtod_l+0x2ee>
 800808a:	bf00      	nop
 800808c:	f3af 8000 	nop.w
 8008090:	ffc00000 	.word	0xffc00000
 8008094:	41dfffff 	.word	0x41dfffff
 8008098:	94a03595 	.word	0x94a03595
 800809c:	3fcfffff 	.word	0x3fcfffff

080080a0 <_strtod_r>:
 80080a0:	4b01      	ldr	r3, [pc, #4]	@ (80080a8 <_strtod_r+0x8>)
 80080a2:	f7ff ba19 	b.w	80074d8 <_strtod_l>
 80080a6:	bf00      	nop
 80080a8:	200001f8 	.word	0x200001f8

080080ac <_strtol_l.constprop.0>:
 80080ac:	2b24      	cmp	r3, #36	@ 0x24
 80080ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080b2:	4686      	mov	lr, r0
 80080b4:	4690      	mov	r8, r2
 80080b6:	d801      	bhi.n	80080bc <_strtol_l.constprop.0+0x10>
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d106      	bne.n	80080ca <_strtol_l.constprop.0+0x1e>
 80080bc:	f7fd fdba 	bl	8005c34 <__errno>
 80080c0:	2316      	movs	r3, #22
 80080c2:	6003      	str	r3, [r0, #0]
 80080c4:	2000      	movs	r0, #0
 80080c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ca:	4834      	ldr	r0, [pc, #208]	@ (800819c <_strtol_l.constprop.0+0xf0>)
 80080cc:	460d      	mov	r5, r1
 80080ce:	462a      	mov	r2, r5
 80080d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080d4:	5d06      	ldrb	r6, [r0, r4]
 80080d6:	f016 0608 	ands.w	r6, r6, #8
 80080da:	d1f8      	bne.n	80080ce <_strtol_l.constprop.0+0x22>
 80080dc:	2c2d      	cmp	r4, #45	@ 0x2d
 80080de:	d12d      	bne.n	800813c <_strtol_l.constprop.0+0x90>
 80080e0:	782c      	ldrb	r4, [r5, #0]
 80080e2:	2601      	movs	r6, #1
 80080e4:	1c95      	adds	r5, r2, #2
 80080e6:	f033 0210 	bics.w	r2, r3, #16
 80080ea:	d109      	bne.n	8008100 <_strtol_l.constprop.0+0x54>
 80080ec:	2c30      	cmp	r4, #48	@ 0x30
 80080ee:	d12a      	bne.n	8008146 <_strtol_l.constprop.0+0x9a>
 80080f0:	782a      	ldrb	r2, [r5, #0]
 80080f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80080f6:	2a58      	cmp	r2, #88	@ 0x58
 80080f8:	d125      	bne.n	8008146 <_strtol_l.constprop.0+0x9a>
 80080fa:	786c      	ldrb	r4, [r5, #1]
 80080fc:	2310      	movs	r3, #16
 80080fe:	3502      	adds	r5, #2
 8008100:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008104:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008108:	2200      	movs	r2, #0
 800810a:	fbbc f9f3 	udiv	r9, ip, r3
 800810e:	4610      	mov	r0, r2
 8008110:	fb03 ca19 	mls	sl, r3, r9, ip
 8008114:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008118:	2f09      	cmp	r7, #9
 800811a:	d81b      	bhi.n	8008154 <_strtol_l.constprop.0+0xa8>
 800811c:	463c      	mov	r4, r7
 800811e:	42a3      	cmp	r3, r4
 8008120:	dd27      	ble.n	8008172 <_strtol_l.constprop.0+0xc6>
 8008122:	1c57      	adds	r7, r2, #1
 8008124:	d007      	beq.n	8008136 <_strtol_l.constprop.0+0x8a>
 8008126:	4581      	cmp	r9, r0
 8008128:	d320      	bcc.n	800816c <_strtol_l.constprop.0+0xc0>
 800812a:	d101      	bne.n	8008130 <_strtol_l.constprop.0+0x84>
 800812c:	45a2      	cmp	sl, r4
 800812e:	db1d      	blt.n	800816c <_strtol_l.constprop.0+0xc0>
 8008130:	fb00 4003 	mla	r0, r0, r3, r4
 8008134:	2201      	movs	r2, #1
 8008136:	f815 4b01 	ldrb.w	r4, [r5], #1
 800813a:	e7eb      	b.n	8008114 <_strtol_l.constprop.0+0x68>
 800813c:	2c2b      	cmp	r4, #43	@ 0x2b
 800813e:	bf04      	itt	eq
 8008140:	782c      	ldrbeq	r4, [r5, #0]
 8008142:	1c95      	addeq	r5, r2, #2
 8008144:	e7cf      	b.n	80080e6 <_strtol_l.constprop.0+0x3a>
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1da      	bne.n	8008100 <_strtol_l.constprop.0+0x54>
 800814a:	2c30      	cmp	r4, #48	@ 0x30
 800814c:	bf0c      	ite	eq
 800814e:	2308      	moveq	r3, #8
 8008150:	230a      	movne	r3, #10
 8008152:	e7d5      	b.n	8008100 <_strtol_l.constprop.0+0x54>
 8008154:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008158:	2f19      	cmp	r7, #25
 800815a:	d801      	bhi.n	8008160 <_strtol_l.constprop.0+0xb4>
 800815c:	3c37      	subs	r4, #55	@ 0x37
 800815e:	e7de      	b.n	800811e <_strtol_l.constprop.0+0x72>
 8008160:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008164:	2f19      	cmp	r7, #25
 8008166:	d804      	bhi.n	8008172 <_strtol_l.constprop.0+0xc6>
 8008168:	3c57      	subs	r4, #87	@ 0x57
 800816a:	e7d8      	b.n	800811e <_strtol_l.constprop.0+0x72>
 800816c:	f04f 32ff 	mov.w	r2, #4294967295
 8008170:	e7e1      	b.n	8008136 <_strtol_l.constprop.0+0x8a>
 8008172:	1c53      	adds	r3, r2, #1
 8008174:	d108      	bne.n	8008188 <_strtol_l.constprop.0+0xdc>
 8008176:	2322      	movs	r3, #34	@ 0x22
 8008178:	f8ce 3000 	str.w	r3, [lr]
 800817c:	4660      	mov	r0, ip
 800817e:	f1b8 0f00 	cmp.w	r8, #0
 8008182:	d0a0      	beq.n	80080c6 <_strtol_l.constprop.0+0x1a>
 8008184:	1e69      	subs	r1, r5, #1
 8008186:	e006      	b.n	8008196 <_strtol_l.constprop.0+0xea>
 8008188:	b106      	cbz	r6, 800818c <_strtol_l.constprop.0+0xe0>
 800818a:	4240      	negs	r0, r0
 800818c:	f1b8 0f00 	cmp.w	r8, #0
 8008190:	d099      	beq.n	80080c6 <_strtol_l.constprop.0+0x1a>
 8008192:	2a00      	cmp	r2, #0
 8008194:	d1f6      	bne.n	8008184 <_strtol_l.constprop.0+0xd8>
 8008196:	f8c8 1000 	str.w	r1, [r8]
 800819a:	e794      	b.n	80080c6 <_strtol_l.constprop.0+0x1a>
 800819c:	08009601 	.word	0x08009601

080081a0 <_strtol_r>:
 80081a0:	f7ff bf84 	b.w	80080ac <_strtol_l.constprop.0>

080081a4 <__ssputs_r>:
 80081a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a8:	688e      	ldr	r6, [r1, #8]
 80081aa:	461f      	mov	r7, r3
 80081ac:	42be      	cmp	r6, r7
 80081ae:	680b      	ldr	r3, [r1, #0]
 80081b0:	4682      	mov	sl, r0
 80081b2:	460c      	mov	r4, r1
 80081b4:	4690      	mov	r8, r2
 80081b6:	d82d      	bhi.n	8008214 <__ssputs_r+0x70>
 80081b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80081bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80081c0:	d026      	beq.n	8008210 <__ssputs_r+0x6c>
 80081c2:	6965      	ldr	r5, [r4, #20]
 80081c4:	6909      	ldr	r1, [r1, #16]
 80081c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081ca:	eba3 0901 	sub.w	r9, r3, r1
 80081ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081d2:	1c7b      	adds	r3, r7, #1
 80081d4:	444b      	add	r3, r9
 80081d6:	106d      	asrs	r5, r5, #1
 80081d8:	429d      	cmp	r5, r3
 80081da:	bf38      	it	cc
 80081dc:	461d      	movcc	r5, r3
 80081de:	0553      	lsls	r3, r2, #21
 80081e0:	d527      	bpl.n	8008232 <__ssputs_r+0x8e>
 80081e2:	4629      	mov	r1, r5
 80081e4:	f7fe fc1c 	bl	8006a20 <_malloc_r>
 80081e8:	4606      	mov	r6, r0
 80081ea:	b360      	cbz	r0, 8008246 <__ssputs_r+0xa2>
 80081ec:	6921      	ldr	r1, [r4, #16]
 80081ee:	464a      	mov	r2, r9
 80081f0:	f000 fa18 	bl	8008624 <memcpy>
 80081f4:	89a3      	ldrh	r3, [r4, #12]
 80081f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80081fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081fe:	81a3      	strh	r3, [r4, #12]
 8008200:	6126      	str	r6, [r4, #16]
 8008202:	6165      	str	r5, [r4, #20]
 8008204:	444e      	add	r6, r9
 8008206:	eba5 0509 	sub.w	r5, r5, r9
 800820a:	6026      	str	r6, [r4, #0]
 800820c:	60a5      	str	r5, [r4, #8]
 800820e:	463e      	mov	r6, r7
 8008210:	42be      	cmp	r6, r7
 8008212:	d900      	bls.n	8008216 <__ssputs_r+0x72>
 8008214:	463e      	mov	r6, r7
 8008216:	6820      	ldr	r0, [r4, #0]
 8008218:	4632      	mov	r2, r6
 800821a:	4641      	mov	r1, r8
 800821c:	f000 f9c6 	bl	80085ac <memmove>
 8008220:	68a3      	ldr	r3, [r4, #8]
 8008222:	1b9b      	subs	r3, r3, r6
 8008224:	60a3      	str	r3, [r4, #8]
 8008226:	6823      	ldr	r3, [r4, #0]
 8008228:	4433      	add	r3, r6
 800822a:	6023      	str	r3, [r4, #0]
 800822c:	2000      	movs	r0, #0
 800822e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008232:	462a      	mov	r2, r5
 8008234:	f000 fd89 	bl	8008d4a <_realloc_r>
 8008238:	4606      	mov	r6, r0
 800823a:	2800      	cmp	r0, #0
 800823c:	d1e0      	bne.n	8008200 <__ssputs_r+0x5c>
 800823e:	6921      	ldr	r1, [r4, #16]
 8008240:	4650      	mov	r0, sl
 8008242:	f7fe fb79 	bl	8006938 <_free_r>
 8008246:	230c      	movs	r3, #12
 8008248:	f8ca 3000 	str.w	r3, [sl]
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008252:	81a3      	strh	r3, [r4, #12]
 8008254:	f04f 30ff 	mov.w	r0, #4294967295
 8008258:	e7e9      	b.n	800822e <__ssputs_r+0x8a>
	...

0800825c <_svfiprintf_r>:
 800825c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008260:	4698      	mov	r8, r3
 8008262:	898b      	ldrh	r3, [r1, #12]
 8008264:	061b      	lsls	r3, r3, #24
 8008266:	b09d      	sub	sp, #116	@ 0x74
 8008268:	4607      	mov	r7, r0
 800826a:	460d      	mov	r5, r1
 800826c:	4614      	mov	r4, r2
 800826e:	d510      	bpl.n	8008292 <_svfiprintf_r+0x36>
 8008270:	690b      	ldr	r3, [r1, #16]
 8008272:	b973      	cbnz	r3, 8008292 <_svfiprintf_r+0x36>
 8008274:	2140      	movs	r1, #64	@ 0x40
 8008276:	f7fe fbd3 	bl	8006a20 <_malloc_r>
 800827a:	6028      	str	r0, [r5, #0]
 800827c:	6128      	str	r0, [r5, #16]
 800827e:	b930      	cbnz	r0, 800828e <_svfiprintf_r+0x32>
 8008280:	230c      	movs	r3, #12
 8008282:	603b      	str	r3, [r7, #0]
 8008284:	f04f 30ff 	mov.w	r0, #4294967295
 8008288:	b01d      	add	sp, #116	@ 0x74
 800828a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800828e:	2340      	movs	r3, #64	@ 0x40
 8008290:	616b      	str	r3, [r5, #20]
 8008292:	2300      	movs	r3, #0
 8008294:	9309      	str	r3, [sp, #36]	@ 0x24
 8008296:	2320      	movs	r3, #32
 8008298:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800829c:	f8cd 800c 	str.w	r8, [sp, #12]
 80082a0:	2330      	movs	r3, #48	@ 0x30
 80082a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008440 <_svfiprintf_r+0x1e4>
 80082a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80082aa:	f04f 0901 	mov.w	r9, #1
 80082ae:	4623      	mov	r3, r4
 80082b0:	469a      	mov	sl, r3
 80082b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082b6:	b10a      	cbz	r2, 80082bc <_svfiprintf_r+0x60>
 80082b8:	2a25      	cmp	r2, #37	@ 0x25
 80082ba:	d1f9      	bne.n	80082b0 <_svfiprintf_r+0x54>
 80082bc:	ebba 0b04 	subs.w	fp, sl, r4
 80082c0:	d00b      	beq.n	80082da <_svfiprintf_r+0x7e>
 80082c2:	465b      	mov	r3, fp
 80082c4:	4622      	mov	r2, r4
 80082c6:	4629      	mov	r1, r5
 80082c8:	4638      	mov	r0, r7
 80082ca:	f7ff ff6b 	bl	80081a4 <__ssputs_r>
 80082ce:	3001      	adds	r0, #1
 80082d0:	f000 80a7 	beq.w	8008422 <_svfiprintf_r+0x1c6>
 80082d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082d6:	445a      	add	r2, fp
 80082d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80082da:	f89a 3000 	ldrb.w	r3, [sl]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f000 809f 	beq.w	8008422 <_svfiprintf_r+0x1c6>
 80082e4:	2300      	movs	r3, #0
 80082e6:	f04f 32ff 	mov.w	r2, #4294967295
 80082ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082ee:	f10a 0a01 	add.w	sl, sl, #1
 80082f2:	9304      	str	r3, [sp, #16]
 80082f4:	9307      	str	r3, [sp, #28]
 80082f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80082fc:	4654      	mov	r4, sl
 80082fe:	2205      	movs	r2, #5
 8008300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008304:	484e      	ldr	r0, [pc, #312]	@ (8008440 <_svfiprintf_r+0x1e4>)
 8008306:	f7f7 ff63 	bl	80001d0 <memchr>
 800830a:	9a04      	ldr	r2, [sp, #16]
 800830c:	b9d8      	cbnz	r0, 8008346 <_svfiprintf_r+0xea>
 800830e:	06d0      	lsls	r0, r2, #27
 8008310:	bf44      	itt	mi
 8008312:	2320      	movmi	r3, #32
 8008314:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008318:	0711      	lsls	r1, r2, #28
 800831a:	bf44      	itt	mi
 800831c:	232b      	movmi	r3, #43	@ 0x2b
 800831e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008322:	f89a 3000 	ldrb.w	r3, [sl]
 8008326:	2b2a      	cmp	r3, #42	@ 0x2a
 8008328:	d015      	beq.n	8008356 <_svfiprintf_r+0xfa>
 800832a:	9a07      	ldr	r2, [sp, #28]
 800832c:	4654      	mov	r4, sl
 800832e:	2000      	movs	r0, #0
 8008330:	f04f 0c0a 	mov.w	ip, #10
 8008334:	4621      	mov	r1, r4
 8008336:	f811 3b01 	ldrb.w	r3, [r1], #1
 800833a:	3b30      	subs	r3, #48	@ 0x30
 800833c:	2b09      	cmp	r3, #9
 800833e:	d94b      	bls.n	80083d8 <_svfiprintf_r+0x17c>
 8008340:	b1b0      	cbz	r0, 8008370 <_svfiprintf_r+0x114>
 8008342:	9207      	str	r2, [sp, #28]
 8008344:	e014      	b.n	8008370 <_svfiprintf_r+0x114>
 8008346:	eba0 0308 	sub.w	r3, r0, r8
 800834a:	fa09 f303 	lsl.w	r3, r9, r3
 800834e:	4313      	orrs	r3, r2
 8008350:	9304      	str	r3, [sp, #16]
 8008352:	46a2      	mov	sl, r4
 8008354:	e7d2      	b.n	80082fc <_svfiprintf_r+0xa0>
 8008356:	9b03      	ldr	r3, [sp, #12]
 8008358:	1d19      	adds	r1, r3, #4
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	9103      	str	r1, [sp, #12]
 800835e:	2b00      	cmp	r3, #0
 8008360:	bfbb      	ittet	lt
 8008362:	425b      	neglt	r3, r3
 8008364:	f042 0202 	orrlt.w	r2, r2, #2
 8008368:	9307      	strge	r3, [sp, #28]
 800836a:	9307      	strlt	r3, [sp, #28]
 800836c:	bfb8      	it	lt
 800836e:	9204      	strlt	r2, [sp, #16]
 8008370:	7823      	ldrb	r3, [r4, #0]
 8008372:	2b2e      	cmp	r3, #46	@ 0x2e
 8008374:	d10a      	bne.n	800838c <_svfiprintf_r+0x130>
 8008376:	7863      	ldrb	r3, [r4, #1]
 8008378:	2b2a      	cmp	r3, #42	@ 0x2a
 800837a:	d132      	bne.n	80083e2 <_svfiprintf_r+0x186>
 800837c:	9b03      	ldr	r3, [sp, #12]
 800837e:	1d1a      	adds	r2, r3, #4
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	9203      	str	r2, [sp, #12]
 8008384:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008388:	3402      	adds	r4, #2
 800838a:	9305      	str	r3, [sp, #20]
 800838c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008450 <_svfiprintf_r+0x1f4>
 8008390:	7821      	ldrb	r1, [r4, #0]
 8008392:	2203      	movs	r2, #3
 8008394:	4650      	mov	r0, sl
 8008396:	f7f7 ff1b 	bl	80001d0 <memchr>
 800839a:	b138      	cbz	r0, 80083ac <_svfiprintf_r+0x150>
 800839c:	9b04      	ldr	r3, [sp, #16]
 800839e:	eba0 000a 	sub.w	r0, r0, sl
 80083a2:	2240      	movs	r2, #64	@ 0x40
 80083a4:	4082      	lsls	r2, r0
 80083a6:	4313      	orrs	r3, r2
 80083a8:	3401      	adds	r4, #1
 80083aa:	9304      	str	r3, [sp, #16]
 80083ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b0:	4824      	ldr	r0, [pc, #144]	@ (8008444 <_svfiprintf_r+0x1e8>)
 80083b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80083b6:	2206      	movs	r2, #6
 80083b8:	f7f7 ff0a 	bl	80001d0 <memchr>
 80083bc:	2800      	cmp	r0, #0
 80083be:	d036      	beq.n	800842e <_svfiprintf_r+0x1d2>
 80083c0:	4b21      	ldr	r3, [pc, #132]	@ (8008448 <_svfiprintf_r+0x1ec>)
 80083c2:	bb1b      	cbnz	r3, 800840c <_svfiprintf_r+0x1b0>
 80083c4:	9b03      	ldr	r3, [sp, #12]
 80083c6:	3307      	adds	r3, #7
 80083c8:	f023 0307 	bic.w	r3, r3, #7
 80083cc:	3308      	adds	r3, #8
 80083ce:	9303      	str	r3, [sp, #12]
 80083d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083d2:	4433      	add	r3, r6
 80083d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80083d6:	e76a      	b.n	80082ae <_svfiprintf_r+0x52>
 80083d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80083dc:	460c      	mov	r4, r1
 80083de:	2001      	movs	r0, #1
 80083e0:	e7a8      	b.n	8008334 <_svfiprintf_r+0xd8>
 80083e2:	2300      	movs	r3, #0
 80083e4:	3401      	adds	r4, #1
 80083e6:	9305      	str	r3, [sp, #20]
 80083e8:	4619      	mov	r1, r3
 80083ea:	f04f 0c0a 	mov.w	ip, #10
 80083ee:	4620      	mov	r0, r4
 80083f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083f4:	3a30      	subs	r2, #48	@ 0x30
 80083f6:	2a09      	cmp	r2, #9
 80083f8:	d903      	bls.n	8008402 <_svfiprintf_r+0x1a6>
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d0c6      	beq.n	800838c <_svfiprintf_r+0x130>
 80083fe:	9105      	str	r1, [sp, #20]
 8008400:	e7c4      	b.n	800838c <_svfiprintf_r+0x130>
 8008402:	fb0c 2101 	mla	r1, ip, r1, r2
 8008406:	4604      	mov	r4, r0
 8008408:	2301      	movs	r3, #1
 800840a:	e7f0      	b.n	80083ee <_svfiprintf_r+0x192>
 800840c:	ab03      	add	r3, sp, #12
 800840e:	9300      	str	r3, [sp, #0]
 8008410:	462a      	mov	r2, r5
 8008412:	4b0e      	ldr	r3, [pc, #56]	@ (800844c <_svfiprintf_r+0x1f0>)
 8008414:	a904      	add	r1, sp, #16
 8008416:	4638      	mov	r0, r7
 8008418:	f7fc fcc8 	bl	8004dac <_printf_float>
 800841c:	1c42      	adds	r2, r0, #1
 800841e:	4606      	mov	r6, r0
 8008420:	d1d6      	bne.n	80083d0 <_svfiprintf_r+0x174>
 8008422:	89ab      	ldrh	r3, [r5, #12]
 8008424:	065b      	lsls	r3, r3, #25
 8008426:	f53f af2d 	bmi.w	8008284 <_svfiprintf_r+0x28>
 800842a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800842c:	e72c      	b.n	8008288 <_svfiprintf_r+0x2c>
 800842e:	ab03      	add	r3, sp, #12
 8008430:	9300      	str	r3, [sp, #0]
 8008432:	462a      	mov	r2, r5
 8008434:	4b05      	ldr	r3, [pc, #20]	@ (800844c <_svfiprintf_r+0x1f0>)
 8008436:	a904      	add	r1, sp, #16
 8008438:	4638      	mov	r0, r7
 800843a:	f7fc ff4f 	bl	80052dc <_printf_i>
 800843e:	e7ed      	b.n	800841c <_svfiprintf_r+0x1c0>
 8008440:	08009701 	.word	0x08009701
 8008444:	0800970b 	.word	0x0800970b
 8008448:	08004dad 	.word	0x08004dad
 800844c:	080081a5 	.word	0x080081a5
 8008450:	08009707 	.word	0x08009707

08008454 <__sflush_r>:
 8008454:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800845c:	0716      	lsls	r6, r2, #28
 800845e:	4605      	mov	r5, r0
 8008460:	460c      	mov	r4, r1
 8008462:	d454      	bmi.n	800850e <__sflush_r+0xba>
 8008464:	684b      	ldr	r3, [r1, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	dc02      	bgt.n	8008470 <__sflush_r+0x1c>
 800846a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800846c:	2b00      	cmp	r3, #0
 800846e:	dd48      	ble.n	8008502 <__sflush_r+0xae>
 8008470:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008472:	2e00      	cmp	r6, #0
 8008474:	d045      	beq.n	8008502 <__sflush_r+0xae>
 8008476:	2300      	movs	r3, #0
 8008478:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800847c:	682f      	ldr	r7, [r5, #0]
 800847e:	6a21      	ldr	r1, [r4, #32]
 8008480:	602b      	str	r3, [r5, #0]
 8008482:	d030      	beq.n	80084e6 <__sflush_r+0x92>
 8008484:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008486:	89a3      	ldrh	r3, [r4, #12]
 8008488:	0759      	lsls	r1, r3, #29
 800848a:	d505      	bpl.n	8008498 <__sflush_r+0x44>
 800848c:	6863      	ldr	r3, [r4, #4]
 800848e:	1ad2      	subs	r2, r2, r3
 8008490:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008492:	b10b      	cbz	r3, 8008498 <__sflush_r+0x44>
 8008494:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008496:	1ad2      	subs	r2, r2, r3
 8008498:	2300      	movs	r3, #0
 800849a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800849c:	6a21      	ldr	r1, [r4, #32]
 800849e:	4628      	mov	r0, r5
 80084a0:	47b0      	blx	r6
 80084a2:	1c43      	adds	r3, r0, #1
 80084a4:	89a3      	ldrh	r3, [r4, #12]
 80084a6:	d106      	bne.n	80084b6 <__sflush_r+0x62>
 80084a8:	6829      	ldr	r1, [r5, #0]
 80084aa:	291d      	cmp	r1, #29
 80084ac:	d82b      	bhi.n	8008506 <__sflush_r+0xb2>
 80084ae:	4a2a      	ldr	r2, [pc, #168]	@ (8008558 <__sflush_r+0x104>)
 80084b0:	410a      	asrs	r2, r1
 80084b2:	07d6      	lsls	r6, r2, #31
 80084b4:	d427      	bmi.n	8008506 <__sflush_r+0xb2>
 80084b6:	2200      	movs	r2, #0
 80084b8:	6062      	str	r2, [r4, #4]
 80084ba:	04d9      	lsls	r1, r3, #19
 80084bc:	6922      	ldr	r2, [r4, #16]
 80084be:	6022      	str	r2, [r4, #0]
 80084c0:	d504      	bpl.n	80084cc <__sflush_r+0x78>
 80084c2:	1c42      	adds	r2, r0, #1
 80084c4:	d101      	bne.n	80084ca <__sflush_r+0x76>
 80084c6:	682b      	ldr	r3, [r5, #0]
 80084c8:	b903      	cbnz	r3, 80084cc <__sflush_r+0x78>
 80084ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80084cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084ce:	602f      	str	r7, [r5, #0]
 80084d0:	b1b9      	cbz	r1, 8008502 <__sflush_r+0xae>
 80084d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084d6:	4299      	cmp	r1, r3
 80084d8:	d002      	beq.n	80084e0 <__sflush_r+0x8c>
 80084da:	4628      	mov	r0, r5
 80084dc:	f7fe fa2c 	bl	8006938 <_free_r>
 80084e0:	2300      	movs	r3, #0
 80084e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80084e4:	e00d      	b.n	8008502 <__sflush_r+0xae>
 80084e6:	2301      	movs	r3, #1
 80084e8:	4628      	mov	r0, r5
 80084ea:	47b0      	blx	r6
 80084ec:	4602      	mov	r2, r0
 80084ee:	1c50      	adds	r0, r2, #1
 80084f0:	d1c9      	bne.n	8008486 <__sflush_r+0x32>
 80084f2:	682b      	ldr	r3, [r5, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d0c6      	beq.n	8008486 <__sflush_r+0x32>
 80084f8:	2b1d      	cmp	r3, #29
 80084fa:	d001      	beq.n	8008500 <__sflush_r+0xac>
 80084fc:	2b16      	cmp	r3, #22
 80084fe:	d11e      	bne.n	800853e <__sflush_r+0xea>
 8008500:	602f      	str	r7, [r5, #0]
 8008502:	2000      	movs	r0, #0
 8008504:	e022      	b.n	800854c <__sflush_r+0xf8>
 8008506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800850a:	b21b      	sxth	r3, r3
 800850c:	e01b      	b.n	8008546 <__sflush_r+0xf2>
 800850e:	690f      	ldr	r7, [r1, #16]
 8008510:	2f00      	cmp	r7, #0
 8008512:	d0f6      	beq.n	8008502 <__sflush_r+0xae>
 8008514:	0793      	lsls	r3, r2, #30
 8008516:	680e      	ldr	r6, [r1, #0]
 8008518:	bf08      	it	eq
 800851a:	694b      	ldreq	r3, [r1, #20]
 800851c:	600f      	str	r7, [r1, #0]
 800851e:	bf18      	it	ne
 8008520:	2300      	movne	r3, #0
 8008522:	eba6 0807 	sub.w	r8, r6, r7
 8008526:	608b      	str	r3, [r1, #8]
 8008528:	f1b8 0f00 	cmp.w	r8, #0
 800852c:	dde9      	ble.n	8008502 <__sflush_r+0xae>
 800852e:	6a21      	ldr	r1, [r4, #32]
 8008530:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008532:	4643      	mov	r3, r8
 8008534:	463a      	mov	r2, r7
 8008536:	4628      	mov	r0, r5
 8008538:	47b0      	blx	r6
 800853a:	2800      	cmp	r0, #0
 800853c:	dc08      	bgt.n	8008550 <__sflush_r+0xfc>
 800853e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008546:	81a3      	strh	r3, [r4, #12]
 8008548:	f04f 30ff 	mov.w	r0, #4294967295
 800854c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008550:	4407      	add	r7, r0
 8008552:	eba8 0800 	sub.w	r8, r8, r0
 8008556:	e7e7      	b.n	8008528 <__sflush_r+0xd4>
 8008558:	dfbffffe 	.word	0xdfbffffe

0800855c <_fflush_r>:
 800855c:	b538      	push	{r3, r4, r5, lr}
 800855e:	690b      	ldr	r3, [r1, #16]
 8008560:	4605      	mov	r5, r0
 8008562:	460c      	mov	r4, r1
 8008564:	b913      	cbnz	r3, 800856c <_fflush_r+0x10>
 8008566:	2500      	movs	r5, #0
 8008568:	4628      	mov	r0, r5
 800856a:	bd38      	pop	{r3, r4, r5, pc}
 800856c:	b118      	cbz	r0, 8008576 <_fflush_r+0x1a>
 800856e:	6a03      	ldr	r3, [r0, #32]
 8008570:	b90b      	cbnz	r3, 8008576 <_fflush_r+0x1a>
 8008572:	f7fd fa73 	bl	8005a5c <__sinit>
 8008576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d0f3      	beq.n	8008566 <_fflush_r+0xa>
 800857e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008580:	07d0      	lsls	r0, r2, #31
 8008582:	d404      	bmi.n	800858e <_fflush_r+0x32>
 8008584:	0599      	lsls	r1, r3, #22
 8008586:	d402      	bmi.n	800858e <_fflush_r+0x32>
 8008588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800858a:	f7fd fb7e 	bl	8005c8a <__retarget_lock_acquire_recursive>
 800858e:	4628      	mov	r0, r5
 8008590:	4621      	mov	r1, r4
 8008592:	f7ff ff5f 	bl	8008454 <__sflush_r>
 8008596:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008598:	07da      	lsls	r2, r3, #31
 800859a:	4605      	mov	r5, r0
 800859c:	d4e4      	bmi.n	8008568 <_fflush_r+0xc>
 800859e:	89a3      	ldrh	r3, [r4, #12]
 80085a0:	059b      	lsls	r3, r3, #22
 80085a2:	d4e1      	bmi.n	8008568 <_fflush_r+0xc>
 80085a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085a6:	f7fd fb71 	bl	8005c8c <__retarget_lock_release_recursive>
 80085aa:	e7dd      	b.n	8008568 <_fflush_r+0xc>

080085ac <memmove>:
 80085ac:	4288      	cmp	r0, r1
 80085ae:	b510      	push	{r4, lr}
 80085b0:	eb01 0402 	add.w	r4, r1, r2
 80085b4:	d902      	bls.n	80085bc <memmove+0x10>
 80085b6:	4284      	cmp	r4, r0
 80085b8:	4623      	mov	r3, r4
 80085ba:	d807      	bhi.n	80085cc <memmove+0x20>
 80085bc:	1e43      	subs	r3, r0, #1
 80085be:	42a1      	cmp	r1, r4
 80085c0:	d008      	beq.n	80085d4 <memmove+0x28>
 80085c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085ca:	e7f8      	b.n	80085be <memmove+0x12>
 80085cc:	4402      	add	r2, r0
 80085ce:	4601      	mov	r1, r0
 80085d0:	428a      	cmp	r2, r1
 80085d2:	d100      	bne.n	80085d6 <memmove+0x2a>
 80085d4:	bd10      	pop	{r4, pc}
 80085d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085de:	e7f7      	b.n	80085d0 <memmove+0x24>

080085e0 <strncmp>:
 80085e0:	b510      	push	{r4, lr}
 80085e2:	b16a      	cbz	r2, 8008600 <strncmp+0x20>
 80085e4:	3901      	subs	r1, #1
 80085e6:	1884      	adds	r4, r0, r2
 80085e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d103      	bne.n	80085fc <strncmp+0x1c>
 80085f4:	42a0      	cmp	r0, r4
 80085f6:	d001      	beq.n	80085fc <strncmp+0x1c>
 80085f8:	2a00      	cmp	r2, #0
 80085fa:	d1f5      	bne.n	80085e8 <strncmp+0x8>
 80085fc:	1ad0      	subs	r0, r2, r3
 80085fe:	bd10      	pop	{r4, pc}
 8008600:	4610      	mov	r0, r2
 8008602:	e7fc      	b.n	80085fe <strncmp+0x1e>

08008604 <_sbrk_r>:
 8008604:	b538      	push	{r3, r4, r5, lr}
 8008606:	4d06      	ldr	r5, [pc, #24]	@ (8008620 <_sbrk_r+0x1c>)
 8008608:	2300      	movs	r3, #0
 800860a:	4604      	mov	r4, r0
 800860c:	4608      	mov	r0, r1
 800860e:	602b      	str	r3, [r5, #0]
 8008610:	f7f9 fa5c 	bl	8001acc <_sbrk>
 8008614:	1c43      	adds	r3, r0, #1
 8008616:	d102      	bne.n	800861e <_sbrk_r+0x1a>
 8008618:	682b      	ldr	r3, [r5, #0]
 800861a:	b103      	cbz	r3, 800861e <_sbrk_r+0x1a>
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	bd38      	pop	{r3, r4, r5, pc}
 8008620:	20000904 	.word	0x20000904

08008624 <memcpy>:
 8008624:	440a      	add	r2, r1
 8008626:	4291      	cmp	r1, r2
 8008628:	f100 33ff 	add.w	r3, r0, #4294967295
 800862c:	d100      	bne.n	8008630 <memcpy+0xc>
 800862e:	4770      	bx	lr
 8008630:	b510      	push	{r4, lr}
 8008632:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008636:	f803 4f01 	strb.w	r4, [r3, #1]!
 800863a:	4291      	cmp	r1, r2
 800863c:	d1f9      	bne.n	8008632 <memcpy+0xe>
 800863e:	bd10      	pop	{r4, pc}

08008640 <nan>:
 8008640:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008648 <nan+0x8>
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	00000000 	.word	0x00000000
 800864c:	7ff80000 	.word	0x7ff80000

08008650 <__assert_func>:
 8008650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008652:	4614      	mov	r4, r2
 8008654:	461a      	mov	r2, r3
 8008656:	4b09      	ldr	r3, [pc, #36]	@ (800867c <__assert_func+0x2c>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4605      	mov	r5, r0
 800865c:	68d8      	ldr	r0, [r3, #12]
 800865e:	b954      	cbnz	r4, 8008676 <__assert_func+0x26>
 8008660:	4b07      	ldr	r3, [pc, #28]	@ (8008680 <__assert_func+0x30>)
 8008662:	461c      	mov	r4, r3
 8008664:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008668:	9100      	str	r1, [sp, #0]
 800866a:	462b      	mov	r3, r5
 800866c:	4905      	ldr	r1, [pc, #20]	@ (8008684 <__assert_func+0x34>)
 800866e:	f000 fba7 	bl	8008dc0 <fiprintf>
 8008672:	f000 fbb7 	bl	8008de4 <abort>
 8008676:	4b04      	ldr	r3, [pc, #16]	@ (8008688 <__assert_func+0x38>)
 8008678:	e7f4      	b.n	8008664 <__assert_func+0x14>
 800867a:	bf00      	nop
 800867c:	200001a8 	.word	0x200001a8
 8008680:	08009755 	.word	0x08009755
 8008684:	08009727 	.word	0x08009727
 8008688:	0800971a 	.word	0x0800971a

0800868c <_calloc_r>:
 800868c:	b570      	push	{r4, r5, r6, lr}
 800868e:	fba1 5402 	umull	r5, r4, r1, r2
 8008692:	b93c      	cbnz	r4, 80086a4 <_calloc_r+0x18>
 8008694:	4629      	mov	r1, r5
 8008696:	f7fe f9c3 	bl	8006a20 <_malloc_r>
 800869a:	4606      	mov	r6, r0
 800869c:	b928      	cbnz	r0, 80086aa <_calloc_r+0x1e>
 800869e:	2600      	movs	r6, #0
 80086a0:	4630      	mov	r0, r6
 80086a2:	bd70      	pop	{r4, r5, r6, pc}
 80086a4:	220c      	movs	r2, #12
 80086a6:	6002      	str	r2, [r0, #0]
 80086a8:	e7f9      	b.n	800869e <_calloc_r+0x12>
 80086aa:	462a      	mov	r2, r5
 80086ac:	4621      	mov	r1, r4
 80086ae:	f7fd fa6e 	bl	8005b8e <memset>
 80086b2:	e7f5      	b.n	80086a0 <_calloc_r+0x14>

080086b4 <rshift>:
 80086b4:	6903      	ldr	r3, [r0, #16]
 80086b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80086ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086be:	ea4f 1261 	mov.w	r2, r1, asr #5
 80086c2:	f100 0414 	add.w	r4, r0, #20
 80086c6:	dd45      	ble.n	8008754 <rshift+0xa0>
 80086c8:	f011 011f 	ands.w	r1, r1, #31
 80086cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80086d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80086d4:	d10c      	bne.n	80086f0 <rshift+0x3c>
 80086d6:	f100 0710 	add.w	r7, r0, #16
 80086da:	4629      	mov	r1, r5
 80086dc:	42b1      	cmp	r1, r6
 80086de:	d334      	bcc.n	800874a <rshift+0x96>
 80086e0:	1a9b      	subs	r3, r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	1eea      	subs	r2, r5, #3
 80086e6:	4296      	cmp	r6, r2
 80086e8:	bf38      	it	cc
 80086ea:	2300      	movcc	r3, #0
 80086ec:	4423      	add	r3, r4
 80086ee:	e015      	b.n	800871c <rshift+0x68>
 80086f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80086f4:	f1c1 0820 	rsb	r8, r1, #32
 80086f8:	40cf      	lsrs	r7, r1
 80086fa:	f105 0e04 	add.w	lr, r5, #4
 80086fe:	46a1      	mov	r9, r4
 8008700:	4576      	cmp	r6, lr
 8008702:	46f4      	mov	ip, lr
 8008704:	d815      	bhi.n	8008732 <rshift+0x7e>
 8008706:	1a9a      	subs	r2, r3, r2
 8008708:	0092      	lsls	r2, r2, #2
 800870a:	3a04      	subs	r2, #4
 800870c:	3501      	adds	r5, #1
 800870e:	42ae      	cmp	r6, r5
 8008710:	bf38      	it	cc
 8008712:	2200      	movcc	r2, #0
 8008714:	18a3      	adds	r3, r4, r2
 8008716:	50a7      	str	r7, [r4, r2]
 8008718:	b107      	cbz	r7, 800871c <rshift+0x68>
 800871a:	3304      	adds	r3, #4
 800871c:	1b1a      	subs	r2, r3, r4
 800871e:	42a3      	cmp	r3, r4
 8008720:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008724:	bf08      	it	eq
 8008726:	2300      	moveq	r3, #0
 8008728:	6102      	str	r2, [r0, #16]
 800872a:	bf08      	it	eq
 800872c:	6143      	streq	r3, [r0, #20]
 800872e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008732:	f8dc c000 	ldr.w	ip, [ip]
 8008736:	fa0c fc08 	lsl.w	ip, ip, r8
 800873a:	ea4c 0707 	orr.w	r7, ip, r7
 800873e:	f849 7b04 	str.w	r7, [r9], #4
 8008742:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008746:	40cf      	lsrs	r7, r1
 8008748:	e7da      	b.n	8008700 <rshift+0x4c>
 800874a:	f851 cb04 	ldr.w	ip, [r1], #4
 800874e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008752:	e7c3      	b.n	80086dc <rshift+0x28>
 8008754:	4623      	mov	r3, r4
 8008756:	e7e1      	b.n	800871c <rshift+0x68>

08008758 <__hexdig_fun>:
 8008758:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800875c:	2b09      	cmp	r3, #9
 800875e:	d802      	bhi.n	8008766 <__hexdig_fun+0xe>
 8008760:	3820      	subs	r0, #32
 8008762:	b2c0      	uxtb	r0, r0
 8008764:	4770      	bx	lr
 8008766:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800876a:	2b05      	cmp	r3, #5
 800876c:	d801      	bhi.n	8008772 <__hexdig_fun+0x1a>
 800876e:	3847      	subs	r0, #71	@ 0x47
 8008770:	e7f7      	b.n	8008762 <__hexdig_fun+0xa>
 8008772:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008776:	2b05      	cmp	r3, #5
 8008778:	d801      	bhi.n	800877e <__hexdig_fun+0x26>
 800877a:	3827      	subs	r0, #39	@ 0x27
 800877c:	e7f1      	b.n	8008762 <__hexdig_fun+0xa>
 800877e:	2000      	movs	r0, #0
 8008780:	4770      	bx	lr
	...

08008784 <__gethex>:
 8008784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008788:	b085      	sub	sp, #20
 800878a:	468a      	mov	sl, r1
 800878c:	9302      	str	r3, [sp, #8]
 800878e:	680b      	ldr	r3, [r1, #0]
 8008790:	9001      	str	r0, [sp, #4]
 8008792:	4690      	mov	r8, r2
 8008794:	1c9c      	adds	r4, r3, #2
 8008796:	46a1      	mov	r9, r4
 8008798:	f814 0b01 	ldrb.w	r0, [r4], #1
 800879c:	2830      	cmp	r0, #48	@ 0x30
 800879e:	d0fa      	beq.n	8008796 <__gethex+0x12>
 80087a0:	eba9 0303 	sub.w	r3, r9, r3
 80087a4:	f1a3 0b02 	sub.w	fp, r3, #2
 80087a8:	f7ff ffd6 	bl	8008758 <__hexdig_fun>
 80087ac:	4605      	mov	r5, r0
 80087ae:	2800      	cmp	r0, #0
 80087b0:	d168      	bne.n	8008884 <__gethex+0x100>
 80087b2:	49a0      	ldr	r1, [pc, #640]	@ (8008a34 <__gethex+0x2b0>)
 80087b4:	2201      	movs	r2, #1
 80087b6:	4648      	mov	r0, r9
 80087b8:	f7ff ff12 	bl	80085e0 <strncmp>
 80087bc:	4607      	mov	r7, r0
 80087be:	2800      	cmp	r0, #0
 80087c0:	d167      	bne.n	8008892 <__gethex+0x10e>
 80087c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80087c6:	4626      	mov	r6, r4
 80087c8:	f7ff ffc6 	bl	8008758 <__hexdig_fun>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	d062      	beq.n	8008896 <__gethex+0x112>
 80087d0:	4623      	mov	r3, r4
 80087d2:	7818      	ldrb	r0, [r3, #0]
 80087d4:	2830      	cmp	r0, #48	@ 0x30
 80087d6:	4699      	mov	r9, r3
 80087d8:	f103 0301 	add.w	r3, r3, #1
 80087dc:	d0f9      	beq.n	80087d2 <__gethex+0x4e>
 80087de:	f7ff ffbb 	bl	8008758 <__hexdig_fun>
 80087e2:	fab0 f580 	clz	r5, r0
 80087e6:	096d      	lsrs	r5, r5, #5
 80087e8:	f04f 0b01 	mov.w	fp, #1
 80087ec:	464a      	mov	r2, r9
 80087ee:	4616      	mov	r6, r2
 80087f0:	3201      	adds	r2, #1
 80087f2:	7830      	ldrb	r0, [r6, #0]
 80087f4:	f7ff ffb0 	bl	8008758 <__hexdig_fun>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	d1f8      	bne.n	80087ee <__gethex+0x6a>
 80087fc:	498d      	ldr	r1, [pc, #564]	@ (8008a34 <__gethex+0x2b0>)
 80087fe:	2201      	movs	r2, #1
 8008800:	4630      	mov	r0, r6
 8008802:	f7ff feed 	bl	80085e0 <strncmp>
 8008806:	2800      	cmp	r0, #0
 8008808:	d13f      	bne.n	800888a <__gethex+0x106>
 800880a:	b944      	cbnz	r4, 800881e <__gethex+0x9a>
 800880c:	1c74      	adds	r4, r6, #1
 800880e:	4622      	mov	r2, r4
 8008810:	4616      	mov	r6, r2
 8008812:	3201      	adds	r2, #1
 8008814:	7830      	ldrb	r0, [r6, #0]
 8008816:	f7ff ff9f 	bl	8008758 <__hexdig_fun>
 800881a:	2800      	cmp	r0, #0
 800881c:	d1f8      	bne.n	8008810 <__gethex+0x8c>
 800881e:	1ba4      	subs	r4, r4, r6
 8008820:	00a7      	lsls	r7, r4, #2
 8008822:	7833      	ldrb	r3, [r6, #0]
 8008824:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008828:	2b50      	cmp	r3, #80	@ 0x50
 800882a:	d13e      	bne.n	80088aa <__gethex+0x126>
 800882c:	7873      	ldrb	r3, [r6, #1]
 800882e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008830:	d033      	beq.n	800889a <__gethex+0x116>
 8008832:	2b2d      	cmp	r3, #45	@ 0x2d
 8008834:	d034      	beq.n	80088a0 <__gethex+0x11c>
 8008836:	1c71      	adds	r1, r6, #1
 8008838:	2400      	movs	r4, #0
 800883a:	7808      	ldrb	r0, [r1, #0]
 800883c:	f7ff ff8c 	bl	8008758 <__hexdig_fun>
 8008840:	1e43      	subs	r3, r0, #1
 8008842:	b2db      	uxtb	r3, r3
 8008844:	2b18      	cmp	r3, #24
 8008846:	d830      	bhi.n	80088aa <__gethex+0x126>
 8008848:	f1a0 0210 	sub.w	r2, r0, #16
 800884c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008850:	f7ff ff82 	bl	8008758 <__hexdig_fun>
 8008854:	f100 3cff 	add.w	ip, r0, #4294967295
 8008858:	fa5f fc8c 	uxtb.w	ip, ip
 800885c:	f1bc 0f18 	cmp.w	ip, #24
 8008860:	f04f 030a 	mov.w	r3, #10
 8008864:	d91e      	bls.n	80088a4 <__gethex+0x120>
 8008866:	b104      	cbz	r4, 800886a <__gethex+0xe6>
 8008868:	4252      	negs	r2, r2
 800886a:	4417      	add	r7, r2
 800886c:	f8ca 1000 	str.w	r1, [sl]
 8008870:	b1ed      	cbz	r5, 80088ae <__gethex+0x12a>
 8008872:	f1bb 0f00 	cmp.w	fp, #0
 8008876:	bf0c      	ite	eq
 8008878:	2506      	moveq	r5, #6
 800887a:	2500      	movne	r5, #0
 800887c:	4628      	mov	r0, r5
 800887e:	b005      	add	sp, #20
 8008880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008884:	2500      	movs	r5, #0
 8008886:	462c      	mov	r4, r5
 8008888:	e7b0      	b.n	80087ec <__gethex+0x68>
 800888a:	2c00      	cmp	r4, #0
 800888c:	d1c7      	bne.n	800881e <__gethex+0x9a>
 800888e:	4627      	mov	r7, r4
 8008890:	e7c7      	b.n	8008822 <__gethex+0x9e>
 8008892:	464e      	mov	r6, r9
 8008894:	462f      	mov	r7, r5
 8008896:	2501      	movs	r5, #1
 8008898:	e7c3      	b.n	8008822 <__gethex+0x9e>
 800889a:	2400      	movs	r4, #0
 800889c:	1cb1      	adds	r1, r6, #2
 800889e:	e7cc      	b.n	800883a <__gethex+0xb6>
 80088a0:	2401      	movs	r4, #1
 80088a2:	e7fb      	b.n	800889c <__gethex+0x118>
 80088a4:	fb03 0002 	mla	r0, r3, r2, r0
 80088a8:	e7ce      	b.n	8008848 <__gethex+0xc4>
 80088aa:	4631      	mov	r1, r6
 80088ac:	e7de      	b.n	800886c <__gethex+0xe8>
 80088ae:	eba6 0309 	sub.w	r3, r6, r9
 80088b2:	3b01      	subs	r3, #1
 80088b4:	4629      	mov	r1, r5
 80088b6:	2b07      	cmp	r3, #7
 80088b8:	dc0a      	bgt.n	80088d0 <__gethex+0x14c>
 80088ba:	9801      	ldr	r0, [sp, #4]
 80088bc:	f7fe f93c 	bl	8006b38 <_Balloc>
 80088c0:	4604      	mov	r4, r0
 80088c2:	b940      	cbnz	r0, 80088d6 <__gethex+0x152>
 80088c4:	4b5c      	ldr	r3, [pc, #368]	@ (8008a38 <__gethex+0x2b4>)
 80088c6:	4602      	mov	r2, r0
 80088c8:	21e4      	movs	r1, #228	@ 0xe4
 80088ca:	485c      	ldr	r0, [pc, #368]	@ (8008a3c <__gethex+0x2b8>)
 80088cc:	f7ff fec0 	bl	8008650 <__assert_func>
 80088d0:	3101      	adds	r1, #1
 80088d2:	105b      	asrs	r3, r3, #1
 80088d4:	e7ef      	b.n	80088b6 <__gethex+0x132>
 80088d6:	f100 0a14 	add.w	sl, r0, #20
 80088da:	2300      	movs	r3, #0
 80088dc:	4655      	mov	r5, sl
 80088de:	469b      	mov	fp, r3
 80088e0:	45b1      	cmp	r9, r6
 80088e2:	d337      	bcc.n	8008954 <__gethex+0x1d0>
 80088e4:	f845 bb04 	str.w	fp, [r5], #4
 80088e8:	eba5 050a 	sub.w	r5, r5, sl
 80088ec:	10ad      	asrs	r5, r5, #2
 80088ee:	6125      	str	r5, [r4, #16]
 80088f0:	4658      	mov	r0, fp
 80088f2:	f7fe fa13 	bl	8006d1c <__hi0bits>
 80088f6:	016d      	lsls	r5, r5, #5
 80088f8:	f8d8 6000 	ldr.w	r6, [r8]
 80088fc:	1a2d      	subs	r5, r5, r0
 80088fe:	42b5      	cmp	r5, r6
 8008900:	dd54      	ble.n	80089ac <__gethex+0x228>
 8008902:	1bad      	subs	r5, r5, r6
 8008904:	4629      	mov	r1, r5
 8008906:	4620      	mov	r0, r4
 8008908:	f7fe fda7 	bl	800745a <__any_on>
 800890c:	4681      	mov	r9, r0
 800890e:	b178      	cbz	r0, 8008930 <__gethex+0x1ac>
 8008910:	1e6b      	subs	r3, r5, #1
 8008912:	1159      	asrs	r1, r3, #5
 8008914:	f003 021f 	and.w	r2, r3, #31
 8008918:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800891c:	f04f 0901 	mov.w	r9, #1
 8008920:	fa09 f202 	lsl.w	r2, r9, r2
 8008924:	420a      	tst	r2, r1
 8008926:	d003      	beq.n	8008930 <__gethex+0x1ac>
 8008928:	454b      	cmp	r3, r9
 800892a:	dc36      	bgt.n	800899a <__gethex+0x216>
 800892c:	f04f 0902 	mov.w	r9, #2
 8008930:	4629      	mov	r1, r5
 8008932:	4620      	mov	r0, r4
 8008934:	f7ff febe 	bl	80086b4 <rshift>
 8008938:	442f      	add	r7, r5
 800893a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800893e:	42bb      	cmp	r3, r7
 8008940:	da42      	bge.n	80089c8 <__gethex+0x244>
 8008942:	9801      	ldr	r0, [sp, #4]
 8008944:	4621      	mov	r1, r4
 8008946:	f7fe f937 	bl	8006bb8 <_Bfree>
 800894a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800894c:	2300      	movs	r3, #0
 800894e:	6013      	str	r3, [r2, #0]
 8008950:	25a3      	movs	r5, #163	@ 0xa3
 8008952:	e793      	b.n	800887c <__gethex+0xf8>
 8008954:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008958:	2a2e      	cmp	r2, #46	@ 0x2e
 800895a:	d012      	beq.n	8008982 <__gethex+0x1fe>
 800895c:	2b20      	cmp	r3, #32
 800895e:	d104      	bne.n	800896a <__gethex+0x1e6>
 8008960:	f845 bb04 	str.w	fp, [r5], #4
 8008964:	f04f 0b00 	mov.w	fp, #0
 8008968:	465b      	mov	r3, fp
 800896a:	7830      	ldrb	r0, [r6, #0]
 800896c:	9303      	str	r3, [sp, #12]
 800896e:	f7ff fef3 	bl	8008758 <__hexdig_fun>
 8008972:	9b03      	ldr	r3, [sp, #12]
 8008974:	f000 000f 	and.w	r0, r0, #15
 8008978:	4098      	lsls	r0, r3
 800897a:	ea4b 0b00 	orr.w	fp, fp, r0
 800897e:	3304      	adds	r3, #4
 8008980:	e7ae      	b.n	80088e0 <__gethex+0x15c>
 8008982:	45b1      	cmp	r9, r6
 8008984:	d8ea      	bhi.n	800895c <__gethex+0x1d8>
 8008986:	492b      	ldr	r1, [pc, #172]	@ (8008a34 <__gethex+0x2b0>)
 8008988:	9303      	str	r3, [sp, #12]
 800898a:	2201      	movs	r2, #1
 800898c:	4630      	mov	r0, r6
 800898e:	f7ff fe27 	bl	80085e0 <strncmp>
 8008992:	9b03      	ldr	r3, [sp, #12]
 8008994:	2800      	cmp	r0, #0
 8008996:	d1e1      	bne.n	800895c <__gethex+0x1d8>
 8008998:	e7a2      	b.n	80088e0 <__gethex+0x15c>
 800899a:	1ea9      	subs	r1, r5, #2
 800899c:	4620      	mov	r0, r4
 800899e:	f7fe fd5c 	bl	800745a <__any_on>
 80089a2:	2800      	cmp	r0, #0
 80089a4:	d0c2      	beq.n	800892c <__gethex+0x1a8>
 80089a6:	f04f 0903 	mov.w	r9, #3
 80089aa:	e7c1      	b.n	8008930 <__gethex+0x1ac>
 80089ac:	da09      	bge.n	80089c2 <__gethex+0x23e>
 80089ae:	1b75      	subs	r5, r6, r5
 80089b0:	4621      	mov	r1, r4
 80089b2:	9801      	ldr	r0, [sp, #4]
 80089b4:	462a      	mov	r2, r5
 80089b6:	f7fe fb17 	bl	8006fe8 <__lshift>
 80089ba:	1b7f      	subs	r7, r7, r5
 80089bc:	4604      	mov	r4, r0
 80089be:	f100 0a14 	add.w	sl, r0, #20
 80089c2:	f04f 0900 	mov.w	r9, #0
 80089c6:	e7b8      	b.n	800893a <__gethex+0x1b6>
 80089c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80089cc:	42bd      	cmp	r5, r7
 80089ce:	dd6f      	ble.n	8008ab0 <__gethex+0x32c>
 80089d0:	1bed      	subs	r5, r5, r7
 80089d2:	42ae      	cmp	r6, r5
 80089d4:	dc34      	bgt.n	8008a40 <__gethex+0x2bc>
 80089d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d022      	beq.n	8008a24 <__gethex+0x2a0>
 80089de:	2b03      	cmp	r3, #3
 80089e0:	d024      	beq.n	8008a2c <__gethex+0x2a8>
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d115      	bne.n	8008a12 <__gethex+0x28e>
 80089e6:	42ae      	cmp	r6, r5
 80089e8:	d113      	bne.n	8008a12 <__gethex+0x28e>
 80089ea:	2e01      	cmp	r6, #1
 80089ec:	d10b      	bne.n	8008a06 <__gethex+0x282>
 80089ee:	9a02      	ldr	r2, [sp, #8]
 80089f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80089f4:	6013      	str	r3, [r2, #0]
 80089f6:	2301      	movs	r3, #1
 80089f8:	6123      	str	r3, [r4, #16]
 80089fa:	f8ca 3000 	str.w	r3, [sl]
 80089fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a00:	2562      	movs	r5, #98	@ 0x62
 8008a02:	601c      	str	r4, [r3, #0]
 8008a04:	e73a      	b.n	800887c <__gethex+0xf8>
 8008a06:	1e71      	subs	r1, r6, #1
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f7fe fd26 	bl	800745a <__any_on>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	d1ed      	bne.n	80089ee <__gethex+0x26a>
 8008a12:	9801      	ldr	r0, [sp, #4]
 8008a14:	4621      	mov	r1, r4
 8008a16:	f7fe f8cf 	bl	8006bb8 <_Bfree>
 8008a1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	6013      	str	r3, [r2, #0]
 8008a20:	2550      	movs	r5, #80	@ 0x50
 8008a22:	e72b      	b.n	800887c <__gethex+0xf8>
 8008a24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1f3      	bne.n	8008a12 <__gethex+0x28e>
 8008a2a:	e7e0      	b.n	80089ee <__gethex+0x26a>
 8008a2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1dd      	bne.n	80089ee <__gethex+0x26a>
 8008a32:	e7ee      	b.n	8008a12 <__gethex+0x28e>
 8008a34:	080095a8 	.word	0x080095a8
 8008a38:	0800943d 	.word	0x0800943d
 8008a3c:	08009756 	.word	0x08009756
 8008a40:	1e6f      	subs	r7, r5, #1
 8008a42:	f1b9 0f00 	cmp.w	r9, #0
 8008a46:	d130      	bne.n	8008aaa <__gethex+0x326>
 8008a48:	b127      	cbz	r7, 8008a54 <__gethex+0x2d0>
 8008a4a:	4639      	mov	r1, r7
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f7fe fd04 	bl	800745a <__any_on>
 8008a52:	4681      	mov	r9, r0
 8008a54:	117a      	asrs	r2, r7, #5
 8008a56:	2301      	movs	r3, #1
 8008a58:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008a5c:	f007 071f 	and.w	r7, r7, #31
 8008a60:	40bb      	lsls	r3, r7
 8008a62:	4213      	tst	r3, r2
 8008a64:	4629      	mov	r1, r5
 8008a66:	4620      	mov	r0, r4
 8008a68:	bf18      	it	ne
 8008a6a:	f049 0902 	orrne.w	r9, r9, #2
 8008a6e:	f7ff fe21 	bl	80086b4 <rshift>
 8008a72:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008a76:	1b76      	subs	r6, r6, r5
 8008a78:	2502      	movs	r5, #2
 8008a7a:	f1b9 0f00 	cmp.w	r9, #0
 8008a7e:	d047      	beq.n	8008b10 <__gethex+0x38c>
 8008a80:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a84:	2b02      	cmp	r3, #2
 8008a86:	d015      	beq.n	8008ab4 <__gethex+0x330>
 8008a88:	2b03      	cmp	r3, #3
 8008a8a:	d017      	beq.n	8008abc <__gethex+0x338>
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d109      	bne.n	8008aa4 <__gethex+0x320>
 8008a90:	f019 0f02 	tst.w	r9, #2
 8008a94:	d006      	beq.n	8008aa4 <__gethex+0x320>
 8008a96:	f8da 3000 	ldr.w	r3, [sl]
 8008a9a:	ea49 0903 	orr.w	r9, r9, r3
 8008a9e:	f019 0f01 	tst.w	r9, #1
 8008aa2:	d10e      	bne.n	8008ac2 <__gethex+0x33e>
 8008aa4:	f045 0510 	orr.w	r5, r5, #16
 8008aa8:	e032      	b.n	8008b10 <__gethex+0x38c>
 8008aaa:	f04f 0901 	mov.w	r9, #1
 8008aae:	e7d1      	b.n	8008a54 <__gethex+0x2d0>
 8008ab0:	2501      	movs	r5, #1
 8008ab2:	e7e2      	b.n	8008a7a <__gethex+0x2f6>
 8008ab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ab6:	f1c3 0301 	rsb	r3, r3, #1
 8008aba:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008abc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d0f0      	beq.n	8008aa4 <__gethex+0x320>
 8008ac2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008ac6:	f104 0314 	add.w	r3, r4, #20
 8008aca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008ace:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008ad2:	f04f 0c00 	mov.w	ip, #0
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008adc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008ae0:	d01b      	beq.n	8008b1a <__gethex+0x396>
 8008ae2:	3201      	adds	r2, #1
 8008ae4:	6002      	str	r2, [r0, #0]
 8008ae6:	2d02      	cmp	r5, #2
 8008ae8:	f104 0314 	add.w	r3, r4, #20
 8008aec:	d13c      	bne.n	8008b68 <__gethex+0x3e4>
 8008aee:	f8d8 2000 	ldr.w	r2, [r8]
 8008af2:	3a01      	subs	r2, #1
 8008af4:	42b2      	cmp	r2, r6
 8008af6:	d109      	bne.n	8008b0c <__gethex+0x388>
 8008af8:	1171      	asrs	r1, r6, #5
 8008afa:	2201      	movs	r2, #1
 8008afc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b00:	f006 061f 	and.w	r6, r6, #31
 8008b04:	fa02 f606 	lsl.w	r6, r2, r6
 8008b08:	421e      	tst	r6, r3
 8008b0a:	d13a      	bne.n	8008b82 <__gethex+0x3fe>
 8008b0c:	f045 0520 	orr.w	r5, r5, #32
 8008b10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b12:	601c      	str	r4, [r3, #0]
 8008b14:	9b02      	ldr	r3, [sp, #8]
 8008b16:	601f      	str	r7, [r3, #0]
 8008b18:	e6b0      	b.n	800887c <__gethex+0xf8>
 8008b1a:	4299      	cmp	r1, r3
 8008b1c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008b20:	d8d9      	bhi.n	8008ad6 <__gethex+0x352>
 8008b22:	68a3      	ldr	r3, [r4, #8]
 8008b24:	459b      	cmp	fp, r3
 8008b26:	db17      	blt.n	8008b58 <__gethex+0x3d4>
 8008b28:	6861      	ldr	r1, [r4, #4]
 8008b2a:	9801      	ldr	r0, [sp, #4]
 8008b2c:	3101      	adds	r1, #1
 8008b2e:	f7fe f803 	bl	8006b38 <_Balloc>
 8008b32:	4681      	mov	r9, r0
 8008b34:	b918      	cbnz	r0, 8008b3e <__gethex+0x3ba>
 8008b36:	4b1a      	ldr	r3, [pc, #104]	@ (8008ba0 <__gethex+0x41c>)
 8008b38:	4602      	mov	r2, r0
 8008b3a:	2184      	movs	r1, #132	@ 0x84
 8008b3c:	e6c5      	b.n	80088ca <__gethex+0x146>
 8008b3e:	6922      	ldr	r2, [r4, #16]
 8008b40:	3202      	adds	r2, #2
 8008b42:	f104 010c 	add.w	r1, r4, #12
 8008b46:	0092      	lsls	r2, r2, #2
 8008b48:	300c      	adds	r0, #12
 8008b4a:	f7ff fd6b 	bl	8008624 <memcpy>
 8008b4e:	4621      	mov	r1, r4
 8008b50:	9801      	ldr	r0, [sp, #4]
 8008b52:	f7fe f831 	bl	8006bb8 <_Bfree>
 8008b56:	464c      	mov	r4, r9
 8008b58:	6923      	ldr	r3, [r4, #16]
 8008b5a:	1c5a      	adds	r2, r3, #1
 8008b5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b60:	6122      	str	r2, [r4, #16]
 8008b62:	2201      	movs	r2, #1
 8008b64:	615a      	str	r2, [r3, #20]
 8008b66:	e7be      	b.n	8008ae6 <__gethex+0x362>
 8008b68:	6922      	ldr	r2, [r4, #16]
 8008b6a:	455a      	cmp	r2, fp
 8008b6c:	dd0b      	ble.n	8008b86 <__gethex+0x402>
 8008b6e:	2101      	movs	r1, #1
 8008b70:	4620      	mov	r0, r4
 8008b72:	f7ff fd9f 	bl	80086b4 <rshift>
 8008b76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b7a:	3701      	adds	r7, #1
 8008b7c:	42bb      	cmp	r3, r7
 8008b7e:	f6ff aee0 	blt.w	8008942 <__gethex+0x1be>
 8008b82:	2501      	movs	r5, #1
 8008b84:	e7c2      	b.n	8008b0c <__gethex+0x388>
 8008b86:	f016 061f 	ands.w	r6, r6, #31
 8008b8a:	d0fa      	beq.n	8008b82 <__gethex+0x3fe>
 8008b8c:	4453      	add	r3, sl
 8008b8e:	f1c6 0620 	rsb	r6, r6, #32
 8008b92:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008b96:	f7fe f8c1 	bl	8006d1c <__hi0bits>
 8008b9a:	42b0      	cmp	r0, r6
 8008b9c:	dbe7      	blt.n	8008b6e <__gethex+0x3ea>
 8008b9e:	e7f0      	b.n	8008b82 <__gethex+0x3fe>
 8008ba0:	0800943d 	.word	0x0800943d

08008ba4 <L_shift>:
 8008ba4:	f1c2 0208 	rsb	r2, r2, #8
 8008ba8:	0092      	lsls	r2, r2, #2
 8008baa:	b570      	push	{r4, r5, r6, lr}
 8008bac:	f1c2 0620 	rsb	r6, r2, #32
 8008bb0:	6843      	ldr	r3, [r0, #4]
 8008bb2:	6804      	ldr	r4, [r0, #0]
 8008bb4:	fa03 f506 	lsl.w	r5, r3, r6
 8008bb8:	432c      	orrs	r4, r5
 8008bba:	40d3      	lsrs	r3, r2
 8008bbc:	6004      	str	r4, [r0, #0]
 8008bbe:	f840 3f04 	str.w	r3, [r0, #4]!
 8008bc2:	4288      	cmp	r0, r1
 8008bc4:	d3f4      	bcc.n	8008bb0 <L_shift+0xc>
 8008bc6:	bd70      	pop	{r4, r5, r6, pc}

08008bc8 <__match>:
 8008bc8:	b530      	push	{r4, r5, lr}
 8008bca:	6803      	ldr	r3, [r0, #0]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bd2:	b914      	cbnz	r4, 8008bda <__match+0x12>
 8008bd4:	6003      	str	r3, [r0, #0]
 8008bd6:	2001      	movs	r0, #1
 8008bd8:	bd30      	pop	{r4, r5, pc}
 8008bda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bde:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008be2:	2d19      	cmp	r5, #25
 8008be4:	bf98      	it	ls
 8008be6:	3220      	addls	r2, #32
 8008be8:	42a2      	cmp	r2, r4
 8008bea:	d0f0      	beq.n	8008bce <__match+0x6>
 8008bec:	2000      	movs	r0, #0
 8008bee:	e7f3      	b.n	8008bd8 <__match+0x10>

08008bf0 <__hexnan>:
 8008bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf4:	680b      	ldr	r3, [r1, #0]
 8008bf6:	6801      	ldr	r1, [r0, #0]
 8008bf8:	115e      	asrs	r6, r3, #5
 8008bfa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008bfe:	f013 031f 	ands.w	r3, r3, #31
 8008c02:	b087      	sub	sp, #28
 8008c04:	bf18      	it	ne
 8008c06:	3604      	addne	r6, #4
 8008c08:	2500      	movs	r5, #0
 8008c0a:	1f37      	subs	r7, r6, #4
 8008c0c:	4682      	mov	sl, r0
 8008c0e:	4690      	mov	r8, r2
 8008c10:	9301      	str	r3, [sp, #4]
 8008c12:	f846 5c04 	str.w	r5, [r6, #-4]
 8008c16:	46b9      	mov	r9, r7
 8008c18:	463c      	mov	r4, r7
 8008c1a:	9502      	str	r5, [sp, #8]
 8008c1c:	46ab      	mov	fp, r5
 8008c1e:	784a      	ldrb	r2, [r1, #1]
 8008c20:	1c4b      	adds	r3, r1, #1
 8008c22:	9303      	str	r3, [sp, #12]
 8008c24:	b342      	cbz	r2, 8008c78 <__hexnan+0x88>
 8008c26:	4610      	mov	r0, r2
 8008c28:	9105      	str	r1, [sp, #20]
 8008c2a:	9204      	str	r2, [sp, #16]
 8008c2c:	f7ff fd94 	bl	8008758 <__hexdig_fun>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	d151      	bne.n	8008cd8 <__hexnan+0xe8>
 8008c34:	9a04      	ldr	r2, [sp, #16]
 8008c36:	9905      	ldr	r1, [sp, #20]
 8008c38:	2a20      	cmp	r2, #32
 8008c3a:	d818      	bhi.n	8008c6e <__hexnan+0x7e>
 8008c3c:	9b02      	ldr	r3, [sp, #8]
 8008c3e:	459b      	cmp	fp, r3
 8008c40:	dd13      	ble.n	8008c6a <__hexnan+0x7a>
 8008c42:	454c      	cmp	r4, r9
 8008c44:	d206      	bcs.n	8008c54 <__hexnan+0x64>
 8008c46:	2d07      	cmp	r5, #7
 8008c48:	dc04      	bgt.n	8008c54 <__hexnan+0x64>
 8008c4a:	462a      	mov	r2, r5
 8008c4c:	4649      	mov	r1, r9
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f7ff ffa8 	bl	8008ba4 <L_shift>
 8008c54:	4544      	cmp	r4, r8
 8008c56:	d952      	bls.n	8008cfe <__hexnan+0x10e>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	f1a4 0904 	sub.w	r9, r4, #4
 8008c5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c62:	f8cd b008 	str.w	fp, [sp, #8]
 8008c66:	464c      	mov	r4, r9
 8008c68:	461d      	mov	r5, r3
 8008c6a:	9903      	ldr	r1, [sp, #12]
 8008c6c:	e7d7      	b.n	8008c1e <__hexnan+0x2e>
 8008c6e:	2a29      	cmp	r2, #41	@ 0x29
 8008c70:	d157      	bne.n	8008d22 <__hexnan+0x132>
 8008c72:	3102      	adds	r1, #2
 8008c74:	f8ca 1000 	str.w	r1, [sl]
 8008c78:	f1bb 0f00 	cmp.w	fp, #0
 8008c7c:	d051      	beq.n	8008d22 <__hexnan+0x132>
 8008c7e:	454c      	cmp	r4, r9
 8008c80:	d206      	bcs.n	8008c90 <__hexnan+0xa0>
 8008c82:	2d07      	cmp	r5, #7
 8008c84:	dc04      	bgt.n	8008c90 <__hexnan+0xa0>
 8008c86:	462a      	mov	r2, r5
 8008c88:	4649      	mov	r1, r9
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f7ff ff8a 	bl	8008ba4 <L_shift>
 8008c90:	4544      	cmp	r4, r8
 8008c92:	d936      	bls.n	8008d02 <__hexnan+0x112>
 8008c94:	f1a8 0204 	sub.w	r2, r8, #4
 8008c98:	4623      	mov	r3, r4
 8008c9a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008c9e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008ca2:	429f      	cmp	r7, r3
 8008ca4:	d2f9      	bcs.n	8008c9a <__hexnan+0xaa>
 8008ca6:	1b3b      	subs	r3, r7, r4
 8008ca8:	f023 0303 	bic.w	r3, r3, #3
 8008cac:	3304      	adds	r3, #4
 8008cae:	3401      	adds	r4, #1
 8008cb0:	3e03      	subs	r6, #3
 8008cb2:	42b4      	cmp	r4, r6
 8008cb4:	bf88      	it	hi
 8008cb6:	2304      	movhi	r3, #4
 8008cb8:	4443      	add	r3, r8
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f843 2b04 	str.w	r2, [r3], #4
 8008cc0:	429f      	cmp	r7, r3
 8008cc2:	d2fb      	bcs.n	8008cbc <__hexnan+0xcc>
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	b91b      	cbnz	r3, 8008cd0 <__hexnan+0xe0>
 8008cc8:	4547      	cmp	r7, r8
 8008cca:	d128      	bne.n	8008d1e <__hexnan+0x12e>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	603b      	str	r3, [r7, #0]
 8008cd0:	2005      	movs	r0, #5
 8008cd2:	b007      	add	sp, #28
 8008cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd8:	3501      	adds	r5, #1
 8008cda:	2d08      	cmp	r5, #8
 8008cdc:	f10b 0b01 	add.w	fp, fp, #1
 8008ce0:	dd06      	ble.n	8008cf0 <__hexnan+0x100>
 8008ce2:	4544      	cmp	r4, r8
 8008ce4:	d9c1      	bls.n	8008c6a <__hexnan+0x7a>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	f844 3c04 	str.w	r3, [r4, #-4]
 8008cec:	2501      	movs	r5, #1
 8008cee:	3c04      	subs	r4, #4
 8008cf0:	6822      	ldr	r2, [r4, #0]
 8008cf2:	f000 000f 	and.w	r0, r0, #15
 8008cf6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008cfa:	6020      	str	r0, [r4, #0]
 8008cfc:	e7b5      	b.n	8008c6a <__hexnan+0x7a>
 8008cfe:	2508      	movs	r5, #8
 8008d00:	e7b3      	b.n	8008c6a <__hexnan+0x7a>
 8008d02:	9b01      	ldr	r3, [sp, #4]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d0dd      	beq.n	8008cc4 <__hexnan+0xd4>
 8008d08:	f1c3 0320 	rsb	r3, r3, #32
 8008d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d10:	40da      	lsrs	r2, r3
 8008d12:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008d16:	4013      	ands	r3, r2
 8008d18:	f846 3c04 	str.w	r3, [r6, #-4]
 8008d1c:	e7d2      	b.n	8008cc4 <__hexnan+0xd4>
 8008d1e:	3f04      	subs	r7, #4
 8008d20:	e7d0      	b.n	8008cc4 <__hexnan+0xd4>
 8008d22:	2004      	movs	r0, #4
 8008d24:	e7d5      	b.n	8008cd2 <__hexnan+0xe2>

08008d26 <__ascii_mbtowc>:
 8008d26:	b082      	sub	sp, #8
 8008d28:	b901      	cbnz	r1, 8008d2c <__ascii_mbtowc+0x6>
 8008d2a:	a901      	add	r1, sp, #4
 8008d2c:	b142      	cbz	r2, 8008d40 <__ascii_mbtowc+0x1a>
 8008d2e:	b14b      	cbz	r3, 8008d44 <__ascii_mbtowc+0x1e>
 8008d30:	7813      	ldrb	r3, [r2, #0]
 8008d32:	600b      	str	r3, [r1, #0]
 8008d34:	7812      	ldrb	r2, [r2, #0]
 8008d36:	1e10      	subs	r0, r2, #0
 8008d38:	bf18      	it	ne
 8008d3a:	2001      	movne	r0, #1
 8008d3c:	b002      	add	sp, #8
 8008d3e:	4770      	bx	lr
 8008d40:	4610      	mov	r0, r2
 8008d42:	e7fb      	b.n	8008d3c <__ascii_mbtowc+0x16>
 8008d44:	f06f 0001 	mvn.w	r0, #1
 8008d48:	e7f8      	b.n	8008d3c <__ascii_mbtowc+0x16>

08008d4a <_realloc_r>:
 8008d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d4e:	4680      	mov	r8, r0
 8008d50:	4615      	mov	r5, r2
 8008d52:	460c      	mov	r4, r1
 8008d54:	b921      	cbnz	r1, 8008d60 <_realloc_r+0x16>
 8008d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	f7fd be60 	b.w	8006a20 <_malloc_r>
 8008d60:	b92a      	cbnz	r2, 8008d6e <_realloc_r+0x24>
 8008d62:	f7fd fde9 	bl	8006938 <_free_r>
 8008d66:	2400      	movs	r4, #0
 8008d68:	4620      	mov	r0, r4
 8008d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d6e:	f000 f840 	bl	8008df2 <_malloc_usable_size_r>
 8008d72:	4285      	cmp	r5, r0
 8008d74:	4606      	mov	r6, r0
 8008d76:	d802      	bhi.n	8008d7e <_realloc_r+0x34>
 8008d78:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008d7c:	d8f4      	bhi.n	8008d68 <_realloc_r+0x1e>
 8008d7e:	4629      	mov	r1, r5
 8008d80:	4640      	mov	r0, r8
 8008d82:	f7fd fe4d 	bl	8006a20 <_malloc_r>
 8008d86:	4607      	mov	r7, r0
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	d0ec      	beq.n	8008d66 <_realloc_r+0x1c>
 8008d8c:	42b5      	cmp	r5, r6
 8008d8e:	462a      	mov	r2, r5
 8008d90:	4621      	mov	r1, r4
 8008d92:	bf28      	it	cs
 8008d94:	4632      	movcs	r2, r6
 8008d96:	f7ff fc45 	bl	8008624 <memcpy>
 8008d9a:	4621      	mov	r1, r4
 8008d9c:	4640      	mov	r0, r8
 8008d9e:	f7fd fdcb 	bl	8006938 <_free_r>
 8008da2:	463c      	mov	r4, r7
 8008da4:	e7e0      	b.n	8008d68 <_realloc_r+0x1e>

08008da6 <__ascii_wctomb>:
 8008da6:	4603      	mov	r3, r0
 8008da8:	4608      	mov	r0, r1
 8008daa:	b141      	cbz	r1, 8008dbe <__ascii_wctomb+0x18>
 8008dac:	2aff      	cmp	r2, #255	@ 0xff
 8008dae:	d904      	bls.n	8008dba <__ascii_wctomb+0x14>
 8008db0:	228a      	movs	r2, #138	@ 0x8a
 8008db2:	601a      	str	r2, [r3, #0]
 8008db4:	f04f 30ff 	mov.w	r0, #4294967295
 8008db8:	4770      	bx	lr
 8008dba:	700a      	strb	r2, [r1, #0]
 8008dbc:	2001      	movs	r0, #1
 8008dbe:	4770      	bx	lr

08008dc0 <fiprintf>:
 8008dc0:	b40e      	push	{r1, r2, r3}
 8008dc2:	b503      	push	{r0, r1, lr}
 8008dc4:	4601      	mov	r1, r0
 8008dc6:	ab03      	add	r3, sp, #12
 8008dc8:	4805      	ldr	r0, [pc, #20]	@ (8008de0 <fiprintf+0x20>)
 8008dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dce:	6800      	ldr	r0, [r0, #0]
 8008dd0:	9301      	str	r3, [sp, #4]
 8008dd2:	f000 f83f 	bl	8008e54 <_vfiprintf_r>
 8008dd6:	b002      	add	sp, #8
 8008dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ddc:	b003      	add	sp, #12
 8008dde:	4770      	bx	lr
 8008de0:	200001a8 	.word	0x200001a8

08008de4 <abort>:
 8008de4:	b508      	push	{r3, lr}
 8008de6:	2006      	movs	r0, #6
 8008de8:	f000 fa08 	bl	80091fc <raise>
 8008dec:	2001      	movs	r0, #1
 8008dee:	f7f8 fdf4 	bl	80019da <_exit>

08008df2 <_malloc_usable_size_r>:
 8008df2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008df6:	1f18      	subs	r0, r3, #4
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	bfbc      	itt	lt
 8008dfc:	580b      	ldrlt	r3, [r1, r0]
 8008dfe:	18c0      	addlt	r0, r0, r3
 8008e00:	4770      	bx	lr

08008e02 <__sfputc_r>:
 8008e02:	6893      	ldr	r3, [r2, #8]
 8008e04:	3b01      	subs	r3, #1
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	b410      	push	{r4}
 8008e0a:	6093      	str	r3, [r2, #8]
 8008e0c:	da08      	bge.n	8008e20 <__sfputc_r+0x1e>
 8008e0e:	6994      	ldr	r4, [r2, #24]
 8008e10:	42a3      	cmp	r3, r4
 8008e12:	db01      	blt.n	8008e18 <__sfputc_r+0x16>
 8008e14:	290a      	cmp	r1, #10
 8008e16:	d103      	bne.n	8008e20 <__sfputc_r+0x1e>
 8008e18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e1c:	f000 b932 	b.w	8009084 <__swbuf_r>
 8008e20:	6813      	ldr	r3, [r2, #0]
 8008e22:	1c58      	adds	r0, r3, #1
 8008e24:	6010      	str	r0, [r2, #0]
 8008e26:	7019      	strb	r1, [r3, #0]
 8008e28:	4608      	mov	r0, r1
 8008e2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <__sfputs_r>:
 8008e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e32:	4606      	mov	r6, r0
 8008e34:	460f      	mov	r7, r1
 8008e36:	4614      	mov	r4, r2
 8008e38:	18d5      	adds	r5, r2, r3
 8008e3a:	42ac      	cmp	r4, r5
 8008e3c:	d101      	bne.n	8008e42 <__sfputs_r+0x12>
 8008e3e:	2000      	movs	r0, #0
 8008e40:	e007      	b.n	8008e52 <__sfputs_r+0x22>
 8008e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e46:	463a      	mov	r2, r7
 8008e48:	4630      	mov	r0, r6
 8008e4a:	f7ff ffda 	bl	8008e02 <__sfputc_r>
 8008e4e:	1c43      	adds	r3, r0, #1
 8008e50:	d1f3      	bne.n	8008e3a <__sfputs_r+0xa>
 8008e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e54 <_vfiprintf_r>:
 8008e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e58:	460d      	mov	r5, r1
 8008e5a:	b09d      	sub	sp, #116	@ 0x74
 8008e5c:	4614      	mov	r4, r2
 8008e5e:	4698      	mov	r8, r3
 8008e60:	4606      	mov	r6, r0
 8008e62:	b118      	cbz	r0, 8008e6c <_vfiprintf_r+0x18>
 8008e64:	6a03      	ldr	r3, [r0, #32]
 8008e66:	b90b      	cbnz	r3, 8008e6c <_vfiprintf_r+0x18>
 8008e68:	f7fc fdf8 	bl	8005a5c <__sinit>
 8008e6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e6e:	07d9      	lsls	r1, r3, #31
 8008e70:	d405      	bmi.n	8008e7e <_vfiprintf_r+0x2a>
 8008e72:	89ab      	ldrh	r3, [r5, #12]
 8008e74:	059a      	lsls	r2, r3, #22
 8008e76:	d402      	bmi.n	8008e7e <_vfiprintf_r+0x2a>
 8008e78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e7a:	f7fc ff06 	bl	8005c8a <__retarget_lock_acquire_recursive>
 8008e7e:	89ab      	ldrh	r3, [r5, #12]
 8008e80:	071b      	lsls	r3, r3, #28
 8008e82:	d501      	bpl.n	8008e88 <_vfiprintf_r+0x34>
 8008e84:	692b      	ldr	r3, [r5, #16]
 8008e86:	b99b      	cbnz	r3, 8008eb0 <_vfiprintf_r+0x5c>
 8008e88:	4629      	mov	r1, r5
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	f000 f938 	bl	8009100 <__swsetup_r>
 8008e90:	b170      	cbz	r0, 8008eb0 <_vfiprintf_r+0x5c>
 8008e92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e94:	07dc      	lsls	r4, r3, #31
 8008e96:	d504      	bpl.n	8008ea2 <_vfiprintf_r+0x4e>
 8008e98:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9c:	b01d      	add	sp, #116	@ 0x74
 8008e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea2:	89ab      	ldrh	r3, [r5, #12]
 8008ea4:	0598      	lsls	r0, r3, #22
 8008ea6:	d4f7      	bmi.n	8008e98 <_vfiprintf_r+0x44>
 8008ea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008eaa:	f7fc feef 	bl	8005c8c <__retarget_lock_release_recursive>
 8008eae:	e7f3      	b.n	8008e98 <_vfiprintf_r+0x44>
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eb4:	2320      	movs	r3, #32
 8008eb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008eba:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ebe:	2330      	movs	r3, #48	@ 0x30
 8008ec0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009070 <_vfiprintf_r+0x21c>
 8008ec4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ec8:	f04f 0901 	mov.w	r9, #1
 8008ecc:	4623      	mov	r3, r4
 8008ece:	469a      	mov	sl, r3
 8008ed0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ed4:	b10a      	cbz	r2, 8008eda <_vfiprintf_r+0x86>
 8008ed6:	2a25      	cmp	r2, #37	@ 0x25
 8008ed8:	d1f9      	bne.n	8008ece <_vfiprintf_r+0x7a>
 8008eda:	ebba 0b04 	subs.w	fp, sl, r4
 8008ede:	d00b      	beq.n	8008ef8 <_vfiprintf_r+0xa4>
 8008ee0:	465b      	mov	r3, fp
 8008ee2:	4622      	mov	r2, r4
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	f7ff ffa2 	bl	8008e30 <__sfputs_r>
 8008eec:	3001      	adds	r0, #1
 8008eee:	f000 80a7 	beq.w	8009040 <_vfiprintf_r+0x1ec>
 8008ef2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ef4:	445a      	add	r2, fp
 8008ef6:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f000 809f 	beq.w	8009040 <_vfiprintf_r+0x1ec>
 8008f02:	2300      	movs	r3, #0
 8008f04:	f04f 32ff 	mov.w	r2, #4294967295
 8008f08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f0c:	f10a 0a01 	add.w	sl, sl, #1
 8008f10:	9304      	str	r3, [sp, #16]
 8008f12:	9307      	str	r3, [sp, #28]
 8008f14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f18:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f1a:	4654      	mov	r4, sl
 8008f1c:	2205      	movs	r2, #5
 8008f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f22:	4853      	ldr	r0, [pc, #332]	@ (8009070 <_vfiprintf_r+0x21c>)
 8008f24:	f7f7 f954 	bl	80001d0 <memchr>
 8008f28:	9a04      	ldr	r2, [sp, #16]
 8008f2a:	b9d8      	cbnz	r0, 8008f64 <_vfiprintf_r+0x110>
 8008f2c:	06d1      	lsls	r1, r2, #27
 8008f2e:	bf44      	itt	mi
 8008f30:	2320      	movmi	r3, #32
 8008f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f36:	0713      	lsls	r3, r2, #28
 8008f38:	bf44      	itt	mi
 8008f3a:	232b      	movmi	r3, #43	@ 0x2b
 8008f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f40:	f89a 3000 	ldrb.w	r3, [sl]
 8008f44:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f46:	d015      	beq.n	8008f74 <_vfiprintf_r+0x120>
 8008f48:	9a07      	ldr	r2, [sp, #28]
 8008f4a:	4654      	mov	r4, sl
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	f04f 0c0a 	mov.w	ip, #10
 8008f52:	4621      	mov	r1, r4
 8008f54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f58:	3b30      	subs	r3, #48	@ 0x30
 8008f5a:	2b09      	cmp	r3, #9
 8008f5c:	d94b      	bls.n	8008ff6 <_vfiprintf_r+0x1a2>
 8008f5e:	b1b0      	cbz	r0, 8008f8e <_vfiprintf_r+0x13a>
 8008f60:	9207      	str	r2, [sp, #28]
 8008f62:	e014      	b.n	8008f8e <_vfiprintf_r+0x13a>
 8008f64:	eba0 0308 	sub.w	r3, r0, r8
 8008f68:	fa09 f303 	lsl.w	r3, r9, r3
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	9304      	str	r3, [sp, #16]
 8008f70:	46a2      	mov	sl, r4
 8008f72:	e7d2      	b.n	8008f1a <_vfiprintf_r+0xc6>
 8008f74:	9b03      	ldr	r3, [sp, #12]
 8008f76:	1d19      	adds	r1, r3, #4
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	9103      	str	r1, [sp, #12]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	bfbb      	ittet	lt
 8008f80:	425b      	neglt	r3, r3
 8008f82:	f042 0202 	orrlt.w	r2, r2, #2
 8008f86:	9307      	strge	r3, [sp, #28]
 8008f88:	9307      	strlt	r3, [sp, #28]
 8008f8a:	bfb8      	it	lt
 8008f8c:	9204      	strlt	r2, [sp, #16]
 8008f8e:	7823      	ldrb	r3, [r4, #0]
 8008f90:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f92:	d10a      	bne.n	8008faa <_vfiprintf_r+0x156>
 8008f94:	7863      	ldrb	r3, [r4, #1]
 8008f96:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f98:	d132      	bne.n	8009000 <_vfiprintf_r+0x1ac>
 8008f9a:	9b03      	ldr	r3, [sp, #12]
 8008f9c:	1d1a      	adds	r2, r3, #4
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	9203      	str	r2, [sp, #12]
 8008fa2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008fa6:	3402      	adds	r4, #2
 8008fa8:	9305      	str	r3, [sp, #20]
 8008faa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009080 <_vfiprintf_r+0x22c>
 8008fae:	7821      	ldrb	r1, [r4, #0]
 8008fb0:	2203      	movs	r2, #3
 8008fb2:	4650      	mov	r0, sl
 8008fb4:	f7f7 f90c 	bl	80001d0 <memchr>
 8008fb8:	b138      	cbz	r0, 8008fca <_vfiprintf_r+0x176>
 8008fba:	9b04      	ldr	r3, [sp, #16]
 8008fbc:	eba0 000a 	sub.w	r0, r0, sl
 8008fc0:	2240      	movs	r2, #64	@ 0x40
 8008fc2:	4082      	lsls	r2, r0
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	3401      	adds	r4, #1
 8008fc8:	9304      	str	r3, [sp, #16]
 8008fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fce:	4829      	ldr	r0, [pc, #164]	@ (8009074 <_vfiprintf_r+0x220>)
 8008fd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fd4:	2206      	movs	r2, #6
 8008fd6:	f7f7 f8fb 	bl	80001d0 <memchr>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	d03f      	beq.n	800905e <_vfiprintf_r+0x20a>
 8008fde:	4b26      	ldr	r3, [pc, #152]	@ (8009078 <_vfiprintf_r+0x224>)
 8008fe0:	bb1b      	cbnz	r3, 800902a <_vfiprintf_r+0x1d6>
 8008fe2:	9b03      	ldr	r3, [sp, #12]
 8008fe4:	3307      	adds	r3, #7
 8008fe6:	f023 0307 	bic.w	r3, r3, #7
 8008fea:	3308      	adds	r3, #8
 8008fec:	9303      	str	r3, [sp, #12]
 8008fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ff0:	443b      	add	r3, r7
 8008ff2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ff4:	e76a      	b.n	8008ecc <_vfiprintf_r+0x78>
 8008ff6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	2001      	movs	r0, #1
 8008ffe:	e7a8      	b.n	8008f52 <_vfiprintf_r+0xfe>
 8009000:	2300      	movs	r3, #0
 8009002:	3401      	adds	r4, #1
 8009004:	9305      	str	r3, [sp, #20]
 8009006:	4619      	mov	r1, r3
 8009008:	f04f 0c0a 	mov.w	ip, #10
 800900c:	4620      	mov	r0, r4
 800900e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009012:	3a30      	subs	r2, #48	@ 0x30
 8009014:	2a09      	cmp	r2, #9
 8009016:	d903      	bls.n	8009020 <_vfiprintf_r+0x1cc>
 8009018:	2b00      	cmp	r3, #0
 800901a:	d0c6      	beq.n	8008faa <_vfiprintf_r+0x156>
 800901c:	9105      	str	r1, [sp, #20]
 800901e:	e7c4      	b.n	8008faa <_vfiprintf_r+0x156>
 8009020:	fb0c 2101 	mla	r1, ip, r1, r2
 8009024:	4604      	mov	r4, r0
 8009026:	2301      	movs	r3, #1
 8009028:	e7f0      	b.n	800900c <_vfiprintf_r+0x1b8>
 800902a:	ab03      	add	r3, sp, #12
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	462a      	mov	r2, r5
 8009030:	4b12      	ldr	r3, [pc, #72]	@ (800907c <_vfiprintf_r+0x228>)
 8009032:	a904      	add	r1, sp, #16
 8009034:	4630      	mov	r0, r6
 8009036:	f7fb feb9 	bl	8004dac <_printf_float>
 800903a:	4607      	mov	r7, r0
 800903c:	1c78      	adds	r0, r7, #1
 800903e:	d1d6      	bne.n	8008fee <_vfiprintf_r+0x19a>
 8009040:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009042:	07d9      	lsls	r1, r3, #31
 8009044:	d405      	bmi.n	8009052 <_vfiprintf_r+0x1fe>
 8009046:	89ab      	ldrh	r3, [r5, #12]
 8009048:	059a      	lsls	r2, r3, #22
 800904a:	d402      	bmi.n	8009052 <_vfiprintf_r+0x1fe>
 800904c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800904e:	f7fc fe1d 	bl	8005c8c <__retarget_lock_release_recursive>
 8009052:	89ab      	ldrh	r3, [r5, #12]
 8009054:	065b      	lsls	r3, r3, #25
 8009056:	f53f af1f 	bmi.w	8008e98 <_vfiprintf_r+0x44>
 800905a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800905c:	e71e      	b.n	8008e9c <_vfiprintf_r+0x48>
 800905e:	ab03      	add	r3, sp, #12
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	462a      	mov	r2, r5
 8009064:	4b05      	ldr	r3, [pc, #20]	@ (800907c <_vfiprintf_r+0x228>)
 8009066:	a904      	add	r1, sp, #16
 8009068:	4630      	mov	r0, r6
 800906a:	f7fc f937 	bl	80052dc <_printf_i>
 800906e:	e7e4      	b.n	800903a <_vfiprintf_r+0x1e6>
 8009070:	08009701 	.word	0x08009701
 8009074:	0800970b 	.word	0x0800970b
 8009078:	08004dad 	.word	0x08004dad
 800907c:	08008e31 	.word	0x08008e31
 8009080:	08009707 	.word	0x08009707

08009084 <__swbuf_r>:
 8009084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009086:	460e      	mov	r6, r1
 8009088:	4614      	mov	r4, r2
 800908a:	4605      	mov	r5, r0
 800908c:	b118      	cbz	r0, 8009096 <__swbuf_r+0x12>
 800908e:	6a03      	ldr	r3, [r0, #32]
 8009090:	b90b      	cbnz	r3, 8009096 <__swbuf_r+0x12>
 8009092:	f7fc fce3 	bl	8005a5c <__sinit>
 8009096:	69a3      	ldr	r3, [r4, #24]
 8009098:	60a3      	str	r3, [r4, #8]
 800909a:	89a3      	ldrh	r3, [r4, #12]
 800909c:	071a      	lsls	r2, r3, #28
 800909e:	d501      	bpl.n	80090a4 <__swbuf_r+0x20>
 80090a0:	6923      	ldr	r3, [r4, #16]
 80090a2:	b943      	cbnz	r3, 80090b6 <__swbuf_r+0x32>
 80090a4:	4621      	mov	r1, r4
 80090a6:	4628      	mov	r0, r5
 80090a8:	f000 f82a 	bl	8009100 <__swsetup_r>
 80090ac:	b118      	cbz	r0, 80090b6 <__swbuf_r+0x32>
 80090ae:	f04f 37ff 	mov.w	r7, #4294967295
 80090b2:	4638      	mov	r0, r7
 80090b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090b6:	6823      	ldr	r3, [r4, #0]
 80090b8:	6922      	ldr	r2, [r4, #16]
 80090ba:	1a98      	subs	r0, r3, r2
 80090bc:	6963      	ldr	r3, [r4, #20]
 80090be:	b2f6      	uxtb	r6, r6
 80090c0:	4283      	cmp	r3, r0
 80090c2:	4637      	mov	r7, r6
 80090c4:	dc05      	bgt.n	80090d2 <__swbuf_r+0x4e>
 80090c6:	4621      	mov	r1, r4
 80090c8:	4628      	mov	r0, r5
 80090ca:	f7ff fa47 	bl	800855c <_fflush_r>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	d1ed      	bne.n	80090ae <__swbuf_r+0x2a>
 80090d2:	68a3      	ldr	r3, [r4, #8]
 80090d4:	3b01      	subs	r3, #1
 80090d6:	60a3      	str	r3, [r4, #8]
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	1c5a      	adds	r2, r3, #1
 80090dc:	6022      	str	r2, [r4, #0]
 80090de:	701e      	strb	r6, [r3, #0]
 80090e0:	6962      	ldr	r2, [r4, #20]
 80090e2:	1c43      	adds	r3, r0, #1
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d004      	beq.n	80090f2 <__swbuf_r+0x6e>
 80090e8:	89a3      	ldrh	r3, [r4, #12]
 80090ea:	07db      	lsls	r3, r3, #31
 80090ec:	d5e1      	bpl.n	80090b2 <__swbuf_r+0x2e>
 80090ee:	2e0a      	cmp	r6, #10
 80090f0:	d1df      	bne.n	80090b2 <__swbuf_r+0x2e>
 80090f2:	4621      	mov	r1, r4
 80090f4:	4628      	mov	r0, r5
 80090f6:	f7ff fa31 	bl	800855c <_fflush_r>
 80090fa:	2800      	cmp	r0, #0
 80090fc:	d0d9      	beq.n	80090b2 <__swbuf_r+0x2e>
 80090fe:	e7d6      	b.n	80090ae <__swbuf_r+0x2a>

08009100 <__swsetup_r>:
 8009100:	b538      	push	{r3, r4, r5, lr}
 8009102:	4b29      	ldr	r3, [pc, #164]	@ (80091a8 <__swsetup_r+0xa8>)
 8009104:	4605      	mov	r5, r0
 8009106:	6818      	ldr	r0, [r3, #0]
 8009108:	460c      	mov	r4, r1
 800910a:	b118      	cbz	r0, 8009114 <__swsetup_r+0x14>
 800910c:	6a03      	ldr	r3, [r0, #32]
 800910e:	b90b      	cbnz	r3, 8009114 <__swsetup_r+0x14>
 8009110:	f7fc fca4 	bl	8005a5c <__sinit>
 8009114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009118:	0719      	lsls	r1, r3, #28
 800911a:	d422      	bmi.n	8009162 <__swsetup_r+0x62>
 800911c:	06da      	lsls	r2, r3, #27
 800911e:	d407      	bmi.n	8009130 <__swsetup_r+0x30>
 8009120:	2209      	movs	r2, #9
 8009122:	602a      	str	r2, [r5, #0]
 8009124:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009128:	81a3      	strh	r3, [r4, #12]
 800912a:	f04f 30ff 	mov.w	r0, #4294967295
 800912e:	e033      	b.n	8009198 <__swsetup_r+0x98>
 8009130:	0758      	lsls	r0, r3, #29
 8009132:	d512      	bpl.n	800915a <__swsetup_r+0x5a>
 8009134:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009136:	b141      	cbz	r1, 800914a <__swsetup_r+0x4a>
 8009138:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800913c:	4299      	cmp	r1, r3
 800913e:	d002      	beq.n	8009146 <__swsetup_r+0x46>
 8009140:	4628      	mov	r0, r5
 8009142:	f7fd fbf9 	bl	8006938 <_free_r>
 8009146:	2300      	movs	r3, #0
 8009148:	6363      	str	r3, [r4, #52]	@ 0x34
 800914a:	89a3      	ldrh	r3, [r4, #12]
 800914c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009150:	81a3      	strh	r3, [r4, #12]
 8009152:	2300      	movs	r3, #0
 8009154:	6063      	str	r3, [r4, #4]
 8009156:	6923      	ldr	r3, [r4, #16]
 8009158:	6023      	str	r3, [r4, #0]
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	f043 0308 	orr.w	r3, r3, #8
 8009160:	81a3      	strh	r3, [r4, #12]
 8009162:	6923      	ldr	r3, [r4, #16]
 8009164:	b94b      	cbnz	r3, 800917a <__swsetup_r+0x7a>
 8009166:	89a3      	ldrh	r3, [r4, #12]
 8009168:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800916c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009170:	d003      	beq.n	800917a <__swsetup_r+0x7a>
 8009172:	4621      	mov	r1, r4
 8009174:	4628      	mov	r0, r5
 8009176:	f000 f883 	bl	8009280 <__smakebuf_r>
 800917a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800917e:	f013 0201 	ands.w	r2, r3, #1
 8009182:	d00a      	beq.n	800919a <__swsetup_r+0x9a>
 8009184:	2200      	movs	r2, #0
 8009186:	60a2      	str	r2, [r4, #8]
 8009188:	6962      	ldr	r2, [r4, #20]
 800918a:	4252      	negs	r2, r2
 800918c:	61a2      	str	r2, [r4, #24]
 800918e:	6922      	ldr	r2, [r4, #16]
 8009190:	b942      	cbnz	r2, 80091a4 <__swsetup_r+0xa4>
 8009192:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009196:	d1c5      	bne.n	8009124 <__swsetup_r+0x24>
 8009198:	bd38      	pop	{r3, r4, r5, pc}
 800919a:	0799      	lsls	r1, r3, #30
 800919c:	bf58      	it	pl
 800919e:	6962      	ldrpl	r2, [r4, #20]
 80091a0:	60a2      	str	r2, [r4, #8]
 80091a2:	e7f4      	b.n	800918e <__swsetup_r+0x8e>
 80091a4:	2000      	movs	r0, #0
 80091a6:	e7f7      	b.n	8009198 <__swsetup_r+0x98>
 80091a8:	200001a8 	.word	0x200001a8

080091ac <_raise_r>:
 80091ac:	291f      	cmp	r1, #31
 80091ae:	b538      	push	{r3, r4, r5, lr}
 80091b0:	4605      	mov	r5, r0
 80091b2:	460c      	mov	r4, r1
 80091b4:	d904      	bls.n	80091c0 <_raise_r+0x14>
 80091b6:	2316      	movs	r3, #22
 80091b8:	6003      	str	r3, [r0, #0]
 80091ba:	f04f 30ff 	mov.w	r0, #4294967295
 80091be:	bd38      	pop	{r3, r4, r5, pc}
 80091c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80091c2:	b112      	cbz	r2, 80091ca <_raise_r+0x1e>
 80091c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091c8:	b94b      	cbnz	r3, 80091de <_raise_r+0x32>
 80091ca:	4628      	mov	r0, r5
 80091cc:	f000 f830 	bl	8009230 <_getpid_r>
 80091d0:	4622      	mov	r2, r4
 80091d2:	4601      	mov	r1, r0
 80091d4:	4628      	mov	r0, r5
 80091d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091da:	f000 b817 	b.w	800920c <_kill_r>
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d00a      	beq.n	80091f8 <_raise_r+0x4c>
 80091e2:	1c59      	adds	r1, r3, #1
 80091e4:	d103      	bne.n	80091ee <_raise_r+0x42>
 80091e6:	2316      	movs	r3, #22
 80091e8:	6003      	str	r3, [r0, #0]
 80091ea:	2001      	movs	r0, #1
 80091ec:	e7e7      	b.n	80091be <_raise_r+0x12>
 80091ee:	2100      	movs	r1, #0
 80091f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80091f4:	4620      	mov	r0, r4
 80091f6:	4798      	blx	r3
 80091f8:	2000      	movs	r0, #0
 80091fa:	e7e0      	b.n	80091be <_raise_r+0x12>

080091fc <raise>:
 80091fc:	4b02      	ldr	r3, [pc, #8]	@ (8009208 <raise+0xc>)
 80091fe:	4601      	mov	r1, r0
 8009200:	6818      	ldr	r0, [r3, #0]
 8009202:	f7ff bfd3 	b.w	80091ac <_raise_r>
 8009206:	bf00      	nop
 8009208:	200001a8 	.word	0x200001a8

0800920c <_kill_r>:
 800920c:	b538      	push	{r3, r4, r5, lr}
 800920e:	4d07      	ldr	r5, [pc, #28]	@ (800922c <_kill_r+0x20>)
 8009210:	2300      	movs	r3, #0
 8009212:	4604      	mov	r4, r0
 8009214:	4608      	mov	r0, r1
 8009216:	4611      	mov	r1, r2
 8009218:	602b      	str	r3, [r5, #0]
 800921a:	f7f8 fbce 	bl	80019ba <_kill>
 800921e:	1c43      	adds	r3, r0, #1
 8009220:	d102      	bne.n	8009228 <_kill_r+0x1c>
 8009222:	682b      	ldr	r3, [r5, #0]
 8009224:	b103      	cbz	r3, 8009228 <_kill_r+0x1c>
 8009226:	6023      	str	r3, [r4, #0]
 8009228:	bd38      	pop	{r3, r4, r5, pc}
 800922a:	bf00      	nop
 800922c:	20000904 	.word	0x20000904

08009230 <_getpid_r>:
 8009230:	f7f8 bbbb 	b.w	80019aa <_getpid>

08009234 <__swhatbuf_r>:
 8009234:	b570      	push	{r4, r5, r6, lr}
 8009236:	460c      	mov	r4, r1
 8009238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800923c:	2900      	cmp	r1, #0
 800923e:	b096      	sub	sp, #88	@ 0x58
 8009240:	4615      	mov	r5, r2
 8009242:	461e      	mov	r6, r3
 8009244:	da0d      	bge.n	8009262 <__swhatbuf_r+0x2e>
 8009246:	89a3      	ldrh	r3, [r4, #12]
 8009248:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800924c:	f04f 0100 	mov.w	r1, #0
 8009250:	bf14      	ite	ne
 8009252:	2340      	movne	r3, #64	@ 0x40
 8009254:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009258:	2000      	movs	r0, #0
 800925a:	6031      	str	r1, [r6, #0]
 800925c:	602b      	str	r3, [r5, #0]
 800925e:	b016      	add	sp, #88	@ 0x58
 8009260:	bd70      	pop	{r4, r5, r6, pc}
 8009262:	466a      	mov	r2, sp
 8009264:	f000 f848 	bl	80092f8 <_fstat_r>
 8009268:	2800      	cmp	r0, #0
 800926a:	dbec      	blt.n	8009246 <__swhatbuf_r+0x12>
 800926c:	9901      	ldr	r1, [sp, #4]
 800926e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009272:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009276:	4259      	negs	r1, r3
 8009278:	4159      	adcs	r1, r3
 800927a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800927e:	e7eb      	b.n	8009258 <__swhatbuf_r+0x24>

08009280 <__smakebuf_r>:
 8009280:	898b      	ldrh	r3, [r1, #12]
 8009282:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009284:	079d      	lsls	r5, r3, #30
 8009286:	4606      	mov	r6, r0
 8009288:	460c      	mov	r4, r1
 800928a:	d507      	bpl.n	800929c <__smakebuf_r+0x1c>
 800928c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009290:	6023      	str	r3, [r4, #0]
 8009292:	6123      	str	r3, [r4, #16]
 8009294:	2301      	movs	r3, #1
 8009296:	6163      	str	r3, [r4, #20]
 8009298:	b003      	add	sp, #12
 800929a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800929c:	ab01      	add	r3, sp, #4
 800929e:	466a      	mov	r2, sp
 80092a0:	f7ff ffc8 	bl	8009234 <__swhatbuf_r>
 80092a4:	9f00      	ldr	r7, [sp, #0]
 80092a6:	4605      	mov	r5, r0
 80092a8:	4639      	mov	r1, r7
 80092aa:	4630      	mov	r0, r6
 80092ac:	f7fd fbb8 	bl	8006a20 <_malloc_r>
 80092b0:	b948      	cbnz	r0, 80092c6 <__smakebuf_r+0x46>
 80092b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092b6:	059a      	lsls	r2, r3, #22
 80092b8:	d4ee      	bmi.n	8009298 <__smakebuf_r+0x18>
 80092ba:	f023 0303 	bic.w	r3, r3, #3
 80092be:	f043 0302 	orr.w	r3, r3, #2
 80092c2:	81a3      	strh	r3, [r4, #12]
 80092c4:	e7e2      	b.n	800928c <__smakebuf_r+0xc>
 80092c6:	89a3      	ldrh	r3, [r4, #12]
 80092c8:	6020      	str	r0, [r4, #0]
 80092ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092ce:	81a3      	strh	r3, [r4, #12]
 80092d0:	9b01      	ldr	r3, [sp, #4]
 80092d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80092d6:	b15b      	cbz	r3, 80092f0 <__smakebuf_r+0x70>
 80092d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092dc:	4630      	mov	r0, r6
 80092de:	f000 f81d 	bl	800931c <_isatty_r>
 80092e2:	b128      	cbz	r0, 80092f0 <__smakebuf_r+0x70>
 80092e4:	89a3      	ldrh	r3, [r4, #12]
 80092e6:	f023 0303 	bic.w	r3, r3, #3
 80092ea:	f043 0301 	orr.w	r3, r3, #1
 80092ee:	81a3      	strh	r3, [r4, #12]
 80092f0:	89a3      	ldrh	r3, [r4, #12]
 80092f2:	431d      	orrs	r5, r3
 80092f4:	81a5      	strh	r5, [r4, #12]
 80092f6:	e7cf      	b.n	8009298 <__smakebuf_r+0x18>

080092f8 <_fstat_r>:
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	4d07      	ldr	r5, [pc, #28]	@ (8009318 <_fstat_r+0x20>)
 80092fc:	2300      	movs	r3, #0
 80092fe:	4604      	mov	r4, r0
 8009300:	4608      	mov	r0, r1
 8009302:	4611      	mov	r1, r2
 8009304:	602b      	str	r3, [r5, #0]
 8009306:	f7f8 fbb8 	bl	8001a7a <_fstat>
 800930a:	1c43      	adds	r3, r0, #1
 800930c:	d102      	bne.n	8009314 <_fstat_r+0x1c>
 800930e:	682b      	ldr	r3, [r5, #0]
 8009310:	b103      	cbz	r3, 8009314 <_fstat_r+0x1c>
 8009312:	6023      	str	r3, [r4, #0]
 8009314:	bd38      	pop	{r3, r4, r5, pc}
 8009316:	bf00      	nop
 8009318:	20000904 	.word	0x20000904

0800931c <_isatty_r>:
 800931c:	b538      	push	{r3, r4, r5, lr}
 800931e:	4d06      	ldr	r5, [pc, #24]	@ (8009338 <_isatty_r+0x1c>)
 8009320:	2300      	movs	r3, #0
 8009322:	4604      	mov	r4, r0
 8009324:	4608      	mov	r0, r1
 8009326:	602b      	str	r3, [r5, #0]
 8009328:	f7f8 fbb7 	bl	8001a9a <_isatty>
 800932c:	1c43      	adds	r3, r0, #1
 800932e:	d102      	bne.n	8009336 <_isatty_r+0x1a>
 8009330:	682b      	ldr	r3, [r5, #0]
 8009332:	b103      	cbz	r3, 8009336 <_isatty_r+0x1a>
 8009334:	6023      	str	r3, [r4, #0]
 8009336:	bd38      	pop	{r3, r4, r5, pc}
 8009338:	20000904 	.word	0x20000904

0800933c <_init>:
 800933c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800933e:	bf00      	nop
 8009340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009342:	bc08      	pop	{r3}
 8009344:	469e      	mov	lr, r3
 8009346:	4770      	bx	lr

08009348 <_fini>:
 8009348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934a:	bf00      	nop
 800934c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800934e:	bc08      	pop	{r3}
 8009350:	469e      	mov	lr, r3
 8009352:	4770      	bx	lr
