
joystick_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08009558  08009558  00019558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099b0  080099b0  00020364  2**0
                  CONTENTS
  4 .ARM          00000000  080099b0  080099b0  00020364  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099b0  080099b0  00020364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099b0  080099b0  000199b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080099b4  080099b4  000199b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000364  20000000  080099b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020364  2**0
                  CONTENTS
 10 .bss          000005b0  20000364  20000364  00020364  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000914  20000914  00020364  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020394  2**0
                  CONTENTS, READONLY
 14 .debug_info   000135ba  00000000  00000000  000203d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002d05  00000000  00000000  00033991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012c0  00000000  00000000  00036698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e81  00000000  00000000  00037958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fe05  00000000  00000000  000387d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001747b  00000000  00000000  000585de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bae1d  00000000  00000000  0006fa59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000064ac  00000000  00000000  0012a878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00130d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000364 	.word	0x20000364
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009540 	.word	0x08009540

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000368 	.word	0x20000368
 80001cc:	08009540 	.word	0x08009540

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <enable_clocks>:
uint16_t x_coordinate = 0;
uint16_t y_coordinate = 0;


// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <enable_clocks+0x1c>)
 8000cfa:	695b      	ldr	r3, [r3, #20]
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <enable_clocks+0x1c>)
 8000cfe:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 8000d02:	6153      	str	r3, [r2, #20]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000

08000d14 <initialise_board>:

// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0

	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <initialise_board+0x20>)
 8000d1c:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f245 5255 	movw	r2, #21845	; 0x5555
 8000d24:	801a      	strh	r2, [r3, #0]
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	48001002 	.word	0x48001002

08000d38 <ContinuousReadSingleChannelADC>:
//
//		SerialOutputString(string_to_send2, &USART1_PORT);
	}
}

void ContinuousReadSingleChannelADC() {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0

	// get a pointer to the location of the LEDs
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000d3e:	4b90      	ldr	r3, [pc, #576]	; (8000f80 <ContinuousReadSingleChannelADC+0x248>)
 8000d40:	60bb      	str	r3, [r7, #8]

	// enable the clock for ADC1
	RCC->AHBENR |= RCC_AHBENR_ADC12EN;
 8000d42:	4b90      	ldr	r3, [pc, #576]	; (8000f84 <ContinuousReadSingleChannelADC+0x24c>)
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	4a8f      	ldr	r2, [pc, #572]	; (8000f84 <ContinuousReadSingleChannelADC+0x24c>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6153      	str	r3, [r2, #20]

	// set to synchronise the ADC with the clock
	ADC12_COMMON->CCR |= ADC12_CCR_CKMODE_0;
 8000d4e:	4b8e      	ldr	r3, [pc, #568]	; (8000f88 <ContinuousReadSingleChannelADC+0x250>)
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	4a8d      	ldr	r2, [pc, #564]	; (8000f88 <ContinuousReadSingleChannelADC+0x250>)
 8000d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d58:	6093      	str	r3, [r2, #8]

	// ADEN must be = 0 for configuration (is the default)
	ADC1->CR &= ~ADC_CR_ADVREGEN; // clear voltage regulator enable
 8000d5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d64:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000d68:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADVREGEN_0; // set ADVREGEN TO 01
 8000d6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d78:	6093      	str	r3, [r2, #8]
	ADC1->CR &= ~ADC_CR_ADCALDIF; // clear bit to enable Single-ended-input
 8000d7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000d88:	6093      	str	r3, [r2, #8]

	// calibrate the ADC (self calibration routine)
	ADC1->CR |= ADC_CR_ADCAL;
 8000d8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d98:	6093      	str	r3, [r2, #8]
	while((ADC1->CR & ADC_CR_ADCAL) == ADC_CR_ADCAL); // Waiting for the calibration to finish
 8000d9a:	bf00      	nop
 8000d9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000daa:	d0f7      	beq.n	8000d9c <ContinuousReadSingleChannelADC+0x64>

	// select the channel, only one conversion so it goes in
	//  the first conversion slot (SQ1)
	//  and the L value should be 0 (L=0000 does one conversion only)
	ADC1->SQR1 = 0; // clear any existing channel requests
 8000dac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000db0:	2200      	movs	r2, #0
 8000db2:	631a      	str	r2, [r3, #48]	; 0x30
	ADC1->SQR1 |= 0x02 << ADC_SQR1_SQ1_Pos; // request channel 2
 8000db4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc2:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SQR1 |= 0x00 << ADC_SQR1_L_Pos; // set the number of channels to read
 8000dc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dc8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	6313      	str	r3, [r2, #48]	; 0x30

	// continuous mode
	ADC1->CFGR |= ADC_CFGR_CONT;
 8000dd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dde:	60d3      	str	r3, [r2, #12]

	// Enable ADC
	ADC1->CR |= ADC_CR_ADEN;
 8000de0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	6093      	str	r3, [r2, #8]

	while (ADC1->ISR == 0); //Wait the ADC to be ready.
 8000df0:	bf00      	nop
 8000df2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0fa      	beq.n	8000df2 <ContinuousReadSingleChannelADC+0xba>

	// request the process to start
	// only need once in continuous mode
	ADC1->CR |= ADC_CR_ADSTART;
 8000dfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e06:	f043 0304 	orr.w	r3, r3, #4
 8000e0a:	6093      	str	r3, [r2, #8]

	ADC2->CR &= ~ADC_CR_ADVREGEN; // clear voltage regulator enable
 8000e0c:	4b5f      	ldr	r3, [pc, #380]	; (8000f8c <ContinuousReadSingleChannelADC+0x254>)
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	4a5e      	ldr	r2, [pc, #376]	; (8000f8c <ContinuousReadSingleChannelADC+0x254>)
 8000e12:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000e16:	6093      	str	r3, [r2, #8]
	ADC2->CR |= ADC_CR_ADVREGEN_0; // set ADVREGEN TO 01
 8000e18:	4b5c      	ldr	r3, [pc, #368]	; (8000f8c <ContinuousReadSingleChannelADC+0x254>)
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	4a5b      	ldr	r2, [pc, #364]	; (8000f8c <ContinuousReadSingleChannelADC+0x254>)
 8000e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e22:	6093      	str	r3, [r2, #8]
	ADC2->CR &= ~ADC_CR_ADCALDIF; // clear bit to enable Single-ended-input
 8000e24:	4b59      	ldr	r3, [pc, #356]	; (8000f8c <ContinuousReadSingleChannelADC+0x254>)
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	4a58      	ldr	r2, [pc, #352]	; (8000f8c <ContinuousReadSingleChannelADC+0x254>)
 8000e2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000e2e:	6093      	str	r3, [r2, #8]

	// calibrate the ADC (self calibration routine)
	ADC2->CR |= ADC_CR_ADCAL;
 8000e30:	4b56      	ldr	r3, [pc, #344]	; (8000f8c <ContinuousReadSingleChannelADC+0x254>)
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	4a55      	ldr	r2, [pc, #340]	; (8000f8c <ContinuousReadSingleChannelADC+0x254>)
 8000e36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e3a:	6093      	str	r3, [r2, #8]
	while((ADC2->CR & ADC_CR_ADCAL) == ADC_CR_ADCAL); // Waiting for the calibration to finish
 8000e3c:	bf00      	nop
 8000e3e:	4b53      	ldr	r3, [pc, #332]	; (8000f8c <ContinuousReadSingleChannelADC+0x254>)
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000e46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e4a:	d0f8      	beq.n	8000e3e <ContinuousReadSingleChannelADC+0x106>

	// select the channel, only one conversion so it goes in
	//  the first conversion slot (SQ1)
	//  and the L value should be 0 (L=0000 does one conversion only)
	ADC2->SQR1 = 0; // clear any existing channel requests
 8000e4c:	4b4f      	ldr	r3, [pc, #316]	; (8000f8c <ContinuousReadSingleChannelADC+0x254>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	631a      	str	r2, [r3, #48]	; 0x30
	ADC2->SQR1 |= 0x02 << ADC_SQR1_SQ1_Pos; // request channel 2
 8000e52:	4b4e      	ldr	r3, [pc, #312]	; (8000f8c <ContinuousReadSingleChannelADC+0x254>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a4d      	ldr	r2, [pc, #308]	; (8000f8c <ContinuousReadSingleChannelADC+0x254>)
 8000e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
	ADC2->SQR1 |= 0x00 << ADC_SQR1_L_Pos; // set the number of channels to read
 8000e5e:	4b4b      	ldr	r3, [pc, #300]	; (8000f8c <ContinuousReadSingleChannelADC+0x254>)
 8000e60:	4a4a      	ldr	r2, [pc, #296]	; (8000f8c <ContinuousReadSingleChannelADC+0x254>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30

	// continuous mode
	ADC2->CFGR |= ADC_CFGR_CONT;
 8000e66:	4b49      	ldr	r3, [pc, #292]	; (8000f8c <ContinuousReadSingleChannelADC+0x254>)
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	4a48      	ldr	r2, [pc, #288]	; (8000f8c <ContinuousReadSingleChannelADC+0x254>)
 8000e6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e70:	60d3      	str	r3, [r2, #12]

	// Enable ADC
	ADC2->CR |= ADC_CR_ADEN;
 8000e72:	4b46      	ldr	r3, [pc, #280]	; (8000f8c <ContinuousReadSingleChannelADC+0x254>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	4a45      	ldr	r2, [pc, #276]	; (8000f8c <ContinuousReadSingleChannelADC+0x254>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6093      	str	r3, [r2, #8]

	while (ADC2->ISR == 0); //Wait the ADC to be ready.
 8000e7e:	bf00      	nop
 8000e80:	4b42      	ldr	r3, [pc, #264]	; (8000f8c <ContinuousReadSingleChannelADC+0x254>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0fb      	beq.n	8000e80 <ContinuousReadSingleChannelADC+0x148>

	// request the process to start
	// only need once in continuous mode
	ADC2->CR |= ADC_CR_ADSTART;
 8000e88:	4b40      	ldr	r3, [pc, #256]	; (8000f8c <ContinuousReadSingleChannelADC+0x254>)
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	4a3f      	ldr	r2, [pc, #252]	; (8000f8c <ContinuousReadSingleChannelADC+0x254>)
 8000e8e:	f043 0304 	orr.w	r3, r3, #4
 8000e92:	6093      	str	r3, [r2, #8]

	uint16_t value_1 = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	80fb      	strh	r3, [r7, #6]
	uint16_t value_2 = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	80bb      	strh	r3, [r7, #4]

    /* Loop forever */
	for(;;) {

		// Wait for the end of conversion
		while(!(ADC1->ISR &= ADC_ISR_EOC));
 8000e9c:	bf00      	nop
 8000e9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ea8:	f003 0304 	and.w	r3, r3, #4
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0f5      	beq.n	8000e9e <ContinuousReadSingleChannelADC+0x166>
		value_1 = ADC1->DR;
 8000eb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	80fb      	strh	r3, [r7, #6]

		while(!(ADC2->ISR &= ADC_ISR_EOC));
 8000eba:	bf00      	nop
 8000ebc:	4b33      	ldr	r3, [pc, #204]	; (8000f8c <ContinuousReadSingleChannelADC+0x254>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a32      	ldr	r2, [pc, #200]	; (8000f8c <ContinuousReadSingleChannelADC+0x254>)
 8000ec2:	f003 0304 	and.w	r3, r3, #4
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d0f7      	beq.n	8000ebc <ContinuousReadSingleChannelADC+0x184>
		value_2 = ADC2->DR;
 8000ecc:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <ContinuousReadSingleChannelADC+0x254>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	80bb      	strh	r3, [r7, #4]

		uint16_t mapped_value_1 = (1000.0 / (3650.0- 2800.0)) * (value_1 - 2800.0);
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fb25 	bl	8000524 <__aeabi_i2d>
 8000eda:	a321      	add	r3, pc, #132	; (adr r3, 8000f60 <ContinuousReadSingleChannelADC+0x228>)
 8000edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee0:	f7ff f9d2 	bl	8000288 <__aeabi_dsub>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	4610      	mov	r0, r2
 8000eea:	4619      	mov	r1, r3
 8000eec:	a31e      	add	r3, pc, #120	; (adr r3, 8000f68 <ContinuousReadSingleChannelADC+0x230>)
 8000eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef2:	f7ff fb81 	bl	80005f8 <__aeabi_dmul>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	460b      	mov	r3, r1
 8000efa:	4610      	mov	r0, r2
 8000efc:	4619      	mov	r1, r3
 8000efe:	f7ff fe53 	bl	8000ba8 <__aeabi_d2uiz>
 8000f02:	4603      	mov	r3, r0
 8000f04:	807b      	strh	r3, [r7, #2]

		uint16_t mapped_value_2 = (1000.0 / (3900.0- 2200.0)) * (value_2 - 2200.0);
 8000f06:	88bb      	ldrh	r3, [r7, #4]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fb0b 	bl	8000524 <__aeabi_i2d>
 8000f0e:	a318      	add	r3, pc, #96	; (adr r3, 8000f70 <ContinuousReadSingleChannelADC+0x238>)
 8000f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f14:	f7ff f9b8 	bl	8000288 <__aeabi_dsub>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	4619      	mov	r1, r3
 8000f20:	a315      	add	r3, pc, #84	; (adr r3, 8000f78 <ContinuousReadSingleChannelADC+0x240>)
 8000f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f26:	f7ff fb67 	bl	80005f8 <__aeabi_dmul>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	4610      	mov	r0, r2
 8000f30:	4619      	mov	r1, r3
 8000f32:	f7ff fe39 	bl	8000ba8 <__aeabi_d2uiz>
 8000f36:	4603      	mov	r3, r0
 8000f38:	81fb      	strh	r3, [r7, #14]
		mapped_value_2 = 1000 - mapped_value_2;
 8000f3a:	89fb      	ldrh	r3, [r7, #14]
 8000f3c:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8000f40:	81fb      	strh	r3, [r7, #14]
		if (mapped_value_2 > 1000) {
 8000f42:	89fb      	ldrh	r3, [r7, #14]
 8000f44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f48:	d901      	bls.n	8000f4e <ContinuousReadSingleChannelADC+0x216>
			mapped_value_2 = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	81fb      	strh	r3, [r7, #14]
		}

		x_coordinate = mapped_value_1;
 8000f4e:	4a10      	ldr	r2, [pc, #64]	; (8000f90 <ContinuousReadSingleChannelADC+0x258>)
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	8013      	strh	r3, [r2, #0]
		y_coordinate = mapped_value_2;
 8000f54:	4a0f      	ldr	r2, [pc, #60]	; (8000f94 <ContinuousReadSingleChannelADC+0x25c>)
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	8013      	strh	r3, [r2, #0]

		sendToServos();
 8000f5a:	f000 f829 	bl	8000fb0 <sendToServos>
	for(;;) {
 8000f5e:	e79d      	b.n	8000e9c <ContinuousReadSingleChannelADC+0x164>
 8000f60:	00000000 	.word	0x00000000
 8000f64:	40a5e000 	.word	0x40a5e000
 8000f68:	d2d2d2d3 	.word	0xd2d2d2d3
 8000f6c:	3ff2d2d2 	.word	0x3ff2d2d2
 8000f70:	00000000 	.word	0x00000000
 8000f74:	40a13000 	.word	0x40a13000
 8000f78:	d2d2d2d3 	.word	0xd2d2d2d3
 8000f7c:	3fe2d2d2 	.word	0x3fe2d2d2
 8000f80:	48001015 	.word	0x48001015
 8000f84:	40021000 	.word	0x40021000
 8000f88:	50000300 	.word	0x50000300
 8000f8c:	50000100 	.word	0x50000100
 8000f90:	20000380 	.word	0x20000380
 8000f94:	20000382 	.word	0x20000382

08000f98 <setup_adc>:

	}
}


int setup_adc(void) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	enable_clocks();
 8000f9c:	f7ff feaa 	bl	8000cf4 <enable_clocks>
	initialise_board();
 8000fa0:	f7ff feb8 	bl	8000d14 <initialise_board>
//	SerialInitialise(BAUD_115200, &USART1_PORT, &finished_transmission);
	ContinuousReadSingleChannelADC();
 8000fa4:	f7ff fec8 	bl	8000d38 <ContinuousReadSingleChannelADC>
}
 8000fa8:	bf00      	nop
 8000faa:	4618      	mov	r0, r3
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <sendToServos>:

void sendToServos() {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
	// get joystick values

	// map values
	float x_pos = (float)(x_coordinate)/1000;
 8000fb6:	4b4c      	ldr	r3, [pc, #304]	; (80010e8 <sendToServos+0x138>)
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	ee07 3a90 	vmov	s15, r3
 8000fbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fc2:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80010ec <sendToServos+0x13c>
 8000fc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fca:	edc7 7a02 	vstr	s15, [r7, #8]
	float y_pos = (float)(y_coordinate)/1000;
 8000fce:	4b48      	ldr	r3, [pc, #288]	; (80010f0 <sendToServos+0x140>)
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	ee07 3a90 	vmov	s15, r3
 8000fd6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fda:	eddf 6a44 	vldr	s13, [pc, #272]	; 80010ec <sendToServos+0x13c>
 8000fde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe2:	edc7 7a01 	vstr	s15, [r7, #4]

	float x_pos_invert = 1-x_pos + 0.15;
 8000fe6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fea:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff2:	ee17 0a90 	vmov	r0, s15
 8000ff6:	f7ff faa7 	bl	8000548 <__aeabi_f2d>
 8000ffa:	a337      	add	r3, pc, #220	; (adr r3, 80010d8 <sendToServos+0x128>)
 8000ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001000:	f7ff f944 	bl	800028c <__adddf3>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4610      	mov	r0, r2
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff fdec 	bl	8000be8 <__aeabi_d2f>
 8001010:	4603      	mov	r3, r0
 8001012:	60fb      	str	r3, [r7, #12]
	if (x_pos_invert > 1) {
 8001014:	edd7 7a03 	vldr	s15, [r7, #12]
 8001018:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800101c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001024:	dd03      	ble.n	800102e <sendToServos+0x7e>
		x_pos_invert = (float) 1.0;
 8001026:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	e009      	b.n	8001042 <sendToServos+0x92>
	}
	else if (x_pos_invert < 0) {
 800102e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001032:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103a:	d502      	bpl.n	8001042 <sendToServos+0x92>
		x_pos_invert = (float) 0.0;
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
	}

	// send axis 1 to position
	servoGoToFractionalPosition(&Servo1, x_pos + 0.1);
 8001042:	68b8      	ldr	r0, [r7, #8]
 8001044:	f7ff fa80 	bl	8000548 <__aeabi_f2d>
 8001048:	a325      	add	r3, pc, #148	; (adr r3, 80010e0 <sendToServos+0x130>)
 800104a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104e:	f7ff f91d 	bl	800028c <__adddf3>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	f7ff fdc5 	bl	8000be8 <__aeabi_d2f>
 800105e:	4603      	mov	r3, r0
 8001060:	ee00 3a10 	vmov	s0, r3
 8001064:	4823      	ldr	r0, [pc, #140]	; (80010f4 <sendToServos+0x144>)
 8001066:	f000 faf2 	bl	800164e <servoGoToFractionalPosition>
	servoGoToFractionalPosition(&Servo2, x_pos_invert - 0.1);  // inverse
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f7ff fa6c 	bl	8000548 <__aeabi_f2d>
 8001070:	a31b      	add	r3, pc, #108	; (adr r3, 80010e0 <sendToServos+0x130>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	f7ff f907 	bl	8000288 <__aeabi_dsub>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f7ff fdb1 	bl	8000be8 <__aeabi_d2f>
 8001086:	4603      	mov	r3, r0
 8001088:	ee00 3a10 	vmov	s0, r3
 800108c:	481a      	ldr	r0, [pc, #104]	; (80010f8 <sendToServos+0x148>)
 800108e:	f000 fade 	bl	800164e <servoGoToFractionalPosition>

	// send axis 2 to position
	servoGoToFractionalPosition(&Servo3, y_pos-0.1);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff fa58 	bl	8000548 <__aeabi_f2d>
 8001098:	a311      	add	r3, pc, #68	; (adr r3, 80010e0 <sendToServos+0x130>)
 800109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109e:	f7ff f8f3 	bl	8000288 <__aeabi_dsub>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4610      	mov	r0, r2
 80010a8:	4619      	mov	r1, r3
 80010aa:	f7ff fd9d 	bl	8000be8 <__aeabi_d2f>
 80010ae:	4603      	mov	r3, r0
 80010b0:	ee00 3a10 	vmov	s0, r3
 80010b4:	4811      	ldr	r0, [pc, #68]	; (80010fc <sendToServos+0x14c>)
 80010b6:	f000 faca 	bl	800164e <servoGoToFractionalPosition>
	servoGoToFractionalPosition(&Servo4, 1-y_pos);  // inverse
 80010ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010be:	edd7 7a01 	vldr	s15, [r7, #4]
 80010c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ca:	480d      	ldr	r0, [pc, #52]	; (8001100 <sendToServos+0x150>)
 80010cc:	f000 fabf 	bl	800164e <servoGoToFractionalPosition>
}
 80010d0:	bf00      	nop
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	33333333 	.word	0x33333333
 80010dc:	3fc33333 	.word	0x3fc33333
 80010e0:	9999999a 	.word	0x9999999a
 80010e4:	3fb99999 	.word	0x3fb99999
 80010e8:	20000380 	.word	0x20000380
 80010ec:	447a0000 	.word	0x447a0000
 80010f0:	20000382 	.word	0x20000382
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000050 	.word	0x20000050
 80010fc:	200000a0 	.word	0x200000a0
 8001100:	200000f0 	.word	0x200000f0

08001104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001108:	f000 fe3a 	bl	8001d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110c:	f000 f824 	bl	8001158 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001110:	f000 fa1a 	bl	8001548 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001114:	f000 f882 	bl	800121c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001118:	f000 f8c0 	bl	800129c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800111c:	f000 f9f2 	bl	8001504 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8001120:	f000 f8fa 	bl	8001318 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001124:	f000 f972 	bl	800140c <MX_TIM3_Init>

//  // initialise the gyros
//  BSP_GYRO_Init();

  // start the timers
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001128:	2100      	movs	r1, #0
 800112a:	4809      	ldr	r0, [pc, #36]	; (8001150 <main+0x4c>)
 800112c:	f002 ffd4 	bl	80040d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001130:	210c      	movs	r1, #12
 8001132:	4807      	ldr	r0, [pc, #28]	; (8001150 <main+0x4c>)
 8001134:	f002 ffd0 	bl	80040d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001138:	2100      	movs	r1, #0
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <main+0x50>)
 800113c:	f002 ffcc 	bl	80040d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001140:	2104      	movs	r1, #4
 8001142:	4804      	ldr	r0, [pc, #16]	; (8001154 <main+0x50>)
 8001144:	f002 ffc8 	bl	80040d8 <HAL_TIM_PWM_Start>

  // init the adc module
  setup_adc();
 8001148:	f7ff ff26 	bl	8000f98 <setup_adc>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800114c:	e7fe      	b.n	800114c <main+0x48>
 800114e:	bf00      	nop
 8001150:	2000043c 	.word	0x2000043c
 8001154:	20000488 	.word	0x20000488

08001158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b09e      	sub	sp, #120	; 0x78
 800115c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001162:	2228      	movs	r2, #40	; 0x28
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f004 fdad 	bl	8005cc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800116c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800117c:	463b      	mov	r3, r7
 800117e:	223c      	movs	r2, #60	; 0x3c
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f004 fd9f 	bl	8005cc6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001188:	2303      	movs	r3, #3
 800118a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800118c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001190:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001196:	2301      	movs	r3, #1
 8001198:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800119a:	2310      	movs	r3, #16
 800119c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119e:	2302      	movs	r3, #2
 80011a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80011a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011ac:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011b2:	4618      	mov	r0, r3
 80011b4:	f001 faba 	bl	800272c <HAL_RCC_OscConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80011be:	f000 fa41 	bl	8001644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c2:	230f      	movs	r3, #15
 80011c4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c6:	2302      	movs	r3, #2
 80011c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011dc:	2101      	movs	r1, #1
 80011de:	4618      	mov	r0, r3
 80011e0:	f002 fae2 	bl	80037a8 <HAL_RCC_ClockConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011ea:	f000 fa2b 	bl	8001644 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <SystemClock_Config+0xc0>)
 80011f0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80011f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011fc:	463b      	mov	r3, r7
 80011fe:	4618      	mov	r0, r3
 8001200:	f002 fcb8 	bl	8003b74 <HAL_RCCEx_PeriphCLKConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800120a:	f000 fa1b 	bl	8001644 <Error_Handler>
  }
}
 800120e:	bf00      	nop
 8001210:	3778      	adds	r7, #120	; 0x78
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	00020020 	.word	0x00020020

0800121c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <MX_I2C1_Init+0x74>)
 8001222:	4a1c      	ldr	r2, [pc, #112]	; (8001294 <MX_I2C1_Init+0x78>)
 8001224:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_I2C1_Init+0x74>)
 8001228:	4a1b      	ldr	r2, [pc, #108]	; (8001298 <MX_I2C1_Init+0x7c>)
 800122a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <MX_I2C1_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_I2C1_Init+0x74>)
 8001234:	2201      	movs	r2, #1
 8001236:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <MX_I2C1_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_I2C1_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <MX_I2C1_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_I2C1_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_I2C1_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001256:	480e      	ldr	r0, [pc, #56]	; (8001290 <MX_I2C1_Init+0x74>)
 8001258:	f001 f870 	bl	800233c <HAL_I2C_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001262:	f000 f9ef 	bl	8001644 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001266:	2100      	movs	r1, #0
 8001268:	4809      	ldr	r0, [pc, #36]	; (8001290 <MX_I2C1_Init+0x74>)
 800126a:	f001 f8f6 	bl	800245a <HAL_I2CEx_ConfigAnalogFilter>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001274:	f000 f9e6 	bl	8001644 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001278:	2100      	movs	r1, #0
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_I2C1_Init+0x74>)
 800127c:	f001 f938 	bl	80024f0 <HAL_I2CEx_ConfigDigitalFilter>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001286:	f000 f9dd 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000384 	.word	0x20000384
 8001294:	40005400 	.word	0x40005400
 8001298:	2000090e 	.word	0x2000090e

0800129c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <MX_SPI1_Init+0x74>)
 80012a2:	4a1c      	ldr	r2, [pc, #112]	; (8001314 <MX_SPI1_Init+0x78>)
 80012a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012a6:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <MX_SPI1_Init+0x74>)
 80012a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <MX_SPI1_Init+0x74>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80012b4:	4b16      	ldr	r3, [pc, #88]	; (8001310 <MX_SPI1_Init+0x74>)
 80012b6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80012ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012bc:	4b14      	ldr	r3, [pc, #80]	; (8001310 <MX_SPI1_Init+0x74>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <MX_SPI1_Init+0x74>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_SPI1_Init+0x74>)
 80012ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <MX_SPI1_Init+0x74>)
 80012d2:	2208      	movs	r2, #8
 80012d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <MX_SPI1_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <MX_SPI1_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <MX_SPI1_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <MX_SPI1_Init+0x74>)
 80012ea:	2207      	movs	r2, #7
 80012ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012ee:	4b08      	ldr	r3, [pc, #32]	; (8001310 <MX_SPI1_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <MX_SPI1_Init+0x74>)
 80012f6:	2208      	movs	r2, #8
 80012f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_SPI1_Init+0x74>)
 80012fc:	f002 fdea 	bl	8003ed4 <HAL_SPI_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001306:	f000 f99d 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200003d8 	.word	0x200003d8
 8001314:	40013000 	.word	0x40013000

08001318 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800132a:	463b      	mov	r3, r7
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
 8001338:	615a      	str	r2, [r3, #20]
 800133a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800133c:	4b32      	ldr	r3, [pc, #200]	; (8001408 <MX_TIM2_Init+0xf0>)
 800133e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001342:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001344:	4b30      	ldr	r3, [pc, #192]	; (8001408 <MX_TIM2_Init+0xf0>)
 8001346:	222f      	movs	r2, #47	; 0x2f
 8001348:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134a:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <MX_TIM2_Init+0xf0>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8001350:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <MX_TIM2_Init+0xf0>)
 8001352:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001356:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001358:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <MX_TIM2_Init+0xf0>)
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135e:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <MX_TIM2_Init+0xf0>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001364:	4828      	ldr	r0, [pc, #160]	; (8001408 <MX_TIM2_Init+0xf0>)
 8001366:	f002 fe60 	bl	800402a <HAL_TIM_PWM_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001370:	f000 f968 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	4821      	ldr	r0, [pc, #132]	; (8001408 <MX_TIM2_Init+0xf0>)
 8001384:	f003 fc48 	bl	8004c18 <HAL_TIMEx_MasterConfigSynchronization>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800138e:	f000 f959 	bl	8001644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001392:	2360      	movs	r3, #96	; 0x60
 8001394:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013a2:	463b      	mov	r3, r7
 80013a4:	2200      	movs	r2, #0
 80013a6:	4619      	mov	r1, r3
 80013a8:	4817      	ldr	r0, [pc, #92]	; (8001408 <MX_TIM2_Init+0xf0>)
 80013aa:	f002 ff95 	bl	80042d8 <HAL_TIM_PWM_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80013b4:	f000 f946 	bl	8001644 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013b8:	463b      	mov	r3, r7
 80013ba:	2204      	movs	r2, #4
 80013bc:	4619      	mov	r1, r3
 80013be:	4812      	ldr	r0, [pc, #72]	; (8001408 <MX_TIM2_Init+0xf0>)
 80013c0:	f002 ff8a 	bl	80042d8 <HAL_TIM_PWM_ConfigChannel>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80013ca:	f000 f93b 	bl	8001644 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013ce:	463b      	mov	r3, r7
 80013d0:	2208      	movs	r2, #8
 80013d2:	4619      	mov	r1, r3
 80013d4:	480c      	ldr	r0, [pc, #48]	; (8001408 <MX_TIM2_Init+0xf0>)
 80013d6:	f002 ff7f 	bl	80042d8 <HAL_TIM_PWM_ConfigChannel>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80013e0:	f000 f930 	bl	8001644 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013e4:	463b      	mov	r3, r7
 80013e6:	220c      	movs	r2, #12
 80013e8:	4619      	mov	r1, r3
 80013ea:	4807      	ldr	r0, [pc, #28]	; (8001408 <MX_TIM2_Init+0xf0>)
 80013ec:	f002 ff74 	bl	80042d8 <HAL_TIM_PWM_ConfigChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 80013f6:	f000 f925 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013fa:	4803      	ldr	r0, [pc, #12]	; (8001408 <MX_TIM2_Init+0xf0>)
 80013fc:	f000 fa64 	bl	80018c8 <HAL_TIM_MspPostInit>

}
 8001400:	bf00      	nop
 8001402:	3728      	adds	r7, #40	; 0x28
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	2000043c 	.word	0x2000043c

0800140c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800141e:	463b      	mov	r3, r7
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
 800142c:	615a      	str	r2, [r3, #20]
 800142e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001430:	4b32      	ldr	r3, [pc, #200]	; (80014fc <MX_TIM3_Init+0xf0>)
 8001432:	4a33      	ldr	r2, [pc, #204]	; (8001500 <MX_TIM3_Init+0xf4>)
 8001434:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 8001436:	4b31      	ldr	r3, [pc, #196]	; (80014fc <MX_TIM3_Init+0xf0>)
 8001438:	222f      	movs	r2, #47	; 0x2f
 800143a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143c:	4b2f      	ldr	r3, [pc, #188]	; (80014fc <MX_TIM3_Init+0xf0>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8001442:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <MX_TIM3_Init+0xf0>)
 8001444:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001448:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144a:	4b2c      	ldr	r3, [pc, #176]	; (80014fc <MX_TIM3_Init+0xf0>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001450:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <MX_TIM3_Init+0xf0>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001456:	4829      	ldr	r0, [pc, #164]	; (80014fc <MX_TIM3_Init+0xf0>)
 8001458:	f002 fde7 	bl	800402a <HAL_TIM_PWM_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001462:	f000 f8ef 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	4619      	mov	r1, r3
 8001474:	4821      	ldr	r0, [pc, #132]	; (80014fc <MX_TIM3_Init+0xf0>)
 8001476:	f003 fbcf 	bl	8004c18 <HAL_TIMEx_MasterConfigSynchronization>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001480:	f000 f8e0 	bl	8001644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001484:	2360      	movs	r3, #96	; 0x60
 8001486:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001494:	463b      	mov	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	4619      	mov	r1, r3
 800149a:	4818      	ldr	r0, [pc, #96]	; (80014fc <MX_TIM3_Init+0xf0>)
 800149c:	f002 ff1c 	bl	80042d8 <HAL_TIM_PWM_ConfigChannel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80014a6:	f000 f8cd 	bl	8001644 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014aa:	463b      	mov	r3, r7
 80014ac:	2204      	movs	r2, #4
 80014ae:	4619      	mov	r1, r3
 80014b0:	4812      	ldr	r0, [pc, #72]	; (80014fc <MX_TIM3_Init+0xf0>)
 80014b2:	f002 ff11 	bl	80042d8 <HAL_TIM_PWM_ConfigChannel>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80014bc:	f000 f8c2 	bl	8001644 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014c0:	463b      	mov	r3, r7
 80014c2:	2208      	movs	r2, #8
 80014c4:	4619      	mov	r1, r3
 80014c6:	480d      	ldr	r0, [pc, #52]	; (80014fc <MX_TIM3_Init+0xf0>)
 80014c8:	f002 ff06 	bl	80042d8 <HAL_TIM_PWM_ConfigChannel>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80014d2:	f000 f8b7 	bl	8001644 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014d6:	463b      	mov	r3, r7
 80014d8:	220c      	movs	r2, #12
 80014da:	4619      	mov	r1, r3
 80014dc:	4807      	ldr	r0, [pc, #28]	; (80014fc <MX_TIM3_Init+0xf0>)
 80014de:	f002 fefb 	bl	80042d8 <HAL_TIM_PWM_ConfigChannel>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80014e8:	f000 f8ac 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014ec:	4803      	ldr	r0, [pc, #12]	; (80014fc <MX_TIM3_Init+0xf0>)
 80014ee:	f000 f9eb 	bl	80018c8 <HAL_TIM_MspPostInit>

}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	; 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000488 	.word	0x20000488
 8001500:	40000400 	.word	0x40000400

08001504 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001508:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <MX_USB_PCD_Init+0x3c>)
 800150a:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <MX_USB_PCD_Init+0x40>)
 800150c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_USB_PCD_Init+0x3c>)
 8001510:	2208      	movs	r2, #8
 8001512:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <MX_USB_PCD_Init+0x3c>)
 8001516:	2202      	movs	r2, #2
 8001518:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_USB_PCD_Init+0x3c>)
 800151c:	2202      	movs	r2, #2
 800151e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <MX_USB_PCD_Init+0x3c>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_USB_PCD_Init+0x3c>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800152c:	4804      	ldr	r0, [pc, #16]	; (8001540 <MX_USB_PCD_Init+0x3c>)
 800152e:	f001 f82b 	bl	8002588 <HAL_PCD_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001538:	f000 f884 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	200004d4 	.word	0x200004d4
 8001544:	40005c00 	.word	0x40005c00

08001548 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
 800155c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800155e:	4b37      	ldr	r3, [pc, #220]	; (800163c <MX_GPIO_Init+0xf4>)
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	4a36      	ldr	r2, [pc, #216]	; (800163c <MX_GPIO_Init+0xf4>)
 8001564:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001568:	6153      	str	r3, [r2, #20]
 800156a:	4b34      	ldr	r3, [pc, #208]	; (800163c <MX_GPIO_Init+0xf4>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001576:	4b31      	ldr	r3, [pc, #196]	; (800163c <MX_GPIO_Init+0xf4>)
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	4a30      	ldr	r2, [pc, #192]	; (800163c <MX_GPIO_Init+0xf4>)
 800157c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001580:	6153      	str	r3, [r2, #20]
 8001582:	4b2e      	ldr	r3, [pc, #184]	; (800163c <MX_GPIO_Init+0xf4>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800158e:	4b2b      	ldr	r3, [pc, #172]	; (800163c <MX_GPIO_Init+0xf4>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	4a2a      	ldr	r2, [pc, #168]	; (800163c <MX_GPIO_Init+0xf4>)
 8001594:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001598:	6153      	str	r3, [r2, #20]
 800159a:	4b28      	ldr	r3, [pc, #160]	; (800163c <MX_GPIO_Init+0xf4>)
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	4b25      	ldr	r3, [pc, #148]	; (800163c <MX_GPIO_Init+0xf4>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	4a24      	ldr	r2, [pc, #144]	; (800163c <MX_GPIO_Init+0xf4>)
 80015ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b0:	6153      	str	r3, [r2, #20]
 80015b2:	4b22      	ldr	r3, [pc, #136]	; (800163c <MX_GPIO_Init+0xf4>)
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	4b1f      	ldr	r3, [pc, #124]	; (800163c <MX_GPIO_Init+0xf4>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	4a1e      	ldr	r2, [pc, #120]	; (800163c <MX_GPIO_Init+0xf4>)
 80015c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c8:	6153      	str	r3, [r2, #20]
 80015ca:	4b1c      	ldr	r3, [pc, #112]	; (800163c <MX_GPIO_Init+0xf4>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80015d6:	2200      	movs	r2, #0
 80015d8:	f64f 7108 	movw	r1, #65288	; 0xff08
 80015dc:	4818      	ldr	r0, [pc, #96]	; (8001640 <MX_GPIO_Init+0xf8>)
 80015de:	f000 fe95 	bl	800230c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80015e2:	2337      	movs	r3, #55	; 0x37
 80015e4:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015e6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80015ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	4812      	ldr	r0, [pc, #72]	; (8001640 <MX_GPIO_Init+0xf8>)
 80015f8:	f000 fd0e 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80015fc:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001600:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001602:	2301      	movs	r3, #1
 8001604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	480a      	ldr	r0, [pc, #40]	; (8001640 <MX_GPIO_Init+0xf8>)
 8001616:	f000 fcff 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800161a:	2301      	movs	r3, #1
 800161c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001630:	f000 fcf2 	bl	8002018 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001634:	bf00      	nop
 8001636:	3728      	adds	r7, #40	; 0x28
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40021000 	.word	0x40021000
 8001640:	48001000 	.word	0x48001000

08001644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001648:	b672      	cpsid	i
}
 800164a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800164c:	e7fe      	b.n	800164c <Error_Handler+0x8>

0800164e <servoGoToFractionalPosition>:

// a function to make servo move to a point in its range of motion
// Inputs:
// - Servo*: address of the servo struct being used
// - frac: the fraction of the servos range to go to (0 to 1)
void servoGoToFractionalPosition(Servo *servo, float frac) {
 800164e:	b580      	push	{r7, lr}
 8001650:	b088      	sub	sp, #32
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	ed87 0a00 	vstr	s0, [r7]
	uint32_t max = servo->max_pwm;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	61fb      	str	r3, [r7, #28]
	uint32_t min = servo->min_pwm;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	61bb      	str	r3, [r7, #24]
	float range = (float)(max - min);
 8001666:	69fa      	ldr	r2, [r7, #28]
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001674:	edc7 7a05 	vstr	s15, [r7, #20]

	// map to pwm range
	float pwm = (float)min + range*frac;
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	ee07 3a90 	vmov	s15, r3
 800167e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001682:	edd7 6a05 	vldr	s13, [r7, #20]
 8001686:	edd7 7a00 	vldr	s15, [r7]
 800168a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800168e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001692:	edc7 7a04 	vstr	s15, [r7, #16]
	uint32_t pwm_int = (uint32_t)pwm;
 8001696:	edd7 7a04 	vldr	s15, [r7, #16]
 800169a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800169e:	ee17 3a90 	vmov	r3, s15
 80016a2:	60fb      	str	r3, [r7, #12]

	// set the pwm val
	setServoPWM(servo, pwm_int);
 80016a4:	68f9      	ldr	r1, [r7, #12]
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f804 	bl	80016b4 <setServoPWM>
}
 80016ac:	bf00      	nop
 80016ae:	3720      	adds	r7, #32
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <setServoPWM>:

void setServoPWM(Servo *servo, uint32_t pwm){
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]

	if (servo->channel == 1) {
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	791b      	ldrb	r3, [r3, #4]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d104      	bne.n	80016d0 <setServoPWM+0x1c>
		servo->TIMx->CCR1 = pwm;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	635a      	str	r2, [r3, #52]	; 0x34
		servo->TIMx->CCR3 = pwm;
	}
	else if (servo->channel == 4) {
		servo->TIMx->CCR4 = pwm;
	}
}
 80016ce:	e019      	b.n	8001704 <setServoPWM+0x50>
	else if (servo->channel == 2) {
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	791b      	ldrb	r3, [r3, #4]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d104      	bne.n	80016e2 <setServoPWM+0x2e>
		servo->TIMx->CCR2 = pwm;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	639a      	str	r2, [r3, #56]	; 0x38
}
 80016e0:	e010      	b.n	8001704 <setServoPWM+0x50>
	else if (servo->channel == 3) {
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	791b      	ldrb	r3, [r3, #4]
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	d104      	bne.n	80016f4 <setServoPWM+0x40>
		servo->TIMx->CCR3 = pwm;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80016f2:	e007      	b.n	8001704 <setServoPWM+0x50>
	else if (servo->channel == 4) {
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	791b      	ldrb	r3, [r3, #4]
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d103      	bne.n	8001704 <setServoPWM+0x50>
		servo->TIMx->CCR4 = pwm;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <HAL_MspInit+0x44>)
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	4a0e      	ldr	r2, [pc, #56]	; (8001754 <HAL_MspInit+0x44>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6193      	str	r3, [r2, #24]
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <HAL_MspInit+0x44>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_MspInit+0x44>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	4a08      	ldr	r2, [pc, #32]	; (8001754 <HAL_MspInit+0x44>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001738:	61d3      	str	r3, [r2, #28]
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_MspInit+0x44>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001746:	2007      	movs	r0, #7
 8001748:	f000 fc32 	bl	8001fb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40021000 	.word	0x40021000

08001758 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a17      	ldr	r2, [pc, #92]	; (80017d4 <HAL_I2C_MspInit+0x7c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d127      	bne.n	80017ca <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177a:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <HAL_I2C_MspInit+0x80>)
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	4a16      	ldr	r2, [pc, #88]	; (80017d8 <HAL_I2C_MspInit+0x80>)
 8001780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001784:	6153      	str	r3, [r2, #20]
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <HAL_I2C_MspInit+0x80>)
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001792:	23c0      	movs	r3, #192	; 0xc0
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001796:	2312      	movs	r3, #18
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800179a:	2301      	movs	r3, #1
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017a2:	2304      	movs	r3, #4
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	480b      	ldr	r0, [pc, #44]	; (80017dc <HAL_I2C_MspInit+0x84>)
 80017ae:	f000 fc33 	bl	8002018 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_I2C_MspInit+0x80>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	4a08      	ldr	r2, [pc, #32]	; (80017d8 <HAL_I2C_MspInit+0x80>)
 80017b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017bc:	61d3      	str	r3, [r2, #28]
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_I2C_MspInit+0x80>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017ca:	bf00      	nop
 80017cc:	3728      	adds	r7, #40	; 0x28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40005400 	.word	0x40005400
 80017d8:	40021000 	.word	0x40021000
 80017dc:	48000400 	.word	0x48000400

080017e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a17      	ldr	r2, [pc, #92]	; (800185c <HAL_SPI_MspInit+0x7c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d128      	bne.n	8001854 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <HAL_SPI_MspInit+0x80>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	4a16      	ldr	r2, [pc, #88]	; (8001860 <HAL_SPI_MspInit+0x80>)
 8001808:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800180c:	6193      	str	r3, [r2, #24]
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <HAL_SPI_MspInit+0x80>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <HAL_SPI_MspInit+0x80>)
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	4a10      	ldr	r2, [pc, #64]	; (8001860 <HAL_SPI_MspInit+0x80>)
 8001820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001824:	6153      	str	r3, [r2, #20]
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <HAL_SPI_MspInit+0x80>)
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001832:	23e0      	movs	r3, #224	; 0xe0
 8001834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001842:	2305      	movs	r3, #5
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001850:	f000 fbe2 	bl	8002018 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001854:	bf00      	nop
 8001856:	3728      	adds	r7, #40	; 0x28
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40013000 	.word	0x40013000
 8001860:	40021000 	.word	0x40021000

08001864 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001874:	d10c      	bne.n	8001890 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001876:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	4a11      	ldr	r2, [pc, #68]	; (80018c0 <HAL_TIM_PWM_MspInit+0x5c>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	61d3      	str	r3, [r2, #28]
 8001882:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800188e:	e010      	b.n	80018b2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <HAL_TIM_PWM_MspInit+0x60>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d10b      	bne.n	80018b2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_TIM_PWM_MspInit+0x5c>)
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	4a08      	ldr	r2, [pc, #32]	; (80018c0 <HAL_TIM_PWM_MspInit+0x5c>)
 80018a0:	f043 0302 	orr.w	r3, r3, #2
 80018a4:	61d3      	str	r3, [r2, #28]
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_TIM_PWM_MspInit+0x5c>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
}
 80018b2:	bf00      	nop
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40000400 	.word	0x40000400

080018c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08c      	sub	sp, #48	; 0x30
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 031c 	add.w	r3, r7, #28
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e8:	d11e      	bne.n	8001928 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	4b3e      	ldr	r3, [pc, #248]	; (80019e4 <HAL_TIM_MspPostInit+0x11c>)
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	4a3d      	ldr	r2, [pc, #244]	; (80019e4 <HAL_TIM_MspPostInit+0x11c>)
 80018f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f4:	6153      	str	r3, [r2, #20]
 80018f6:	4b3b      	ldr	r3, [pc, #236]	; (80019e4 <HAL_TIM_MspPostInit+0x11c>)
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	61bb      	str	r3, [r7, #24]
 8001900:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8001902:	f248 030e 	movw	r3, #32782	; 0x800e
 8001906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001910:	2300      	movs	r3, #0
 8001912:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001914:	2301      	movs	r3, #1
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 031c 	add.w	r3, r7, #28
 800191c:	4619      	mov	r1, r3
 800191e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001922:	f000 fb79 	bl	8002018 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001926:	e059      	b.n	80019dc <HAL_TIM_MspPostInit+0x114>
  else if(htim->Instance==TIM3)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a2e      	ldr	r2, [pc, #184]	; (80019e8 <HAL_TIM_MspPostInit+0x120>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d154      	bne.n	80019dc <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <HAL_TIM_MspPostInit+0x11c>)
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	4a2b      	ldr	r2, [pc, #172]	; (80019e4 <HAL_TIM_MspPostInit+0x11c>)
 8001938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800193c:	6153      	str	r3, [r2, #20]
 800193e:	4b29      	ldr	r3, [pc, #164]	; (80019e4 <HAL_TIM_MspPostInit+0x11c>)
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194a:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <HAL_TIM_MspPostInit+0x11c>)
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	4a25      	ldr	r2, [pc, #148]	; (80019e4 <HAL_TIM_MspPostInit+0x11c>)
 8001950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001954:	6153      	str	r3, [r2, #20]
 8001956:	4b23      	ldr	r3, [pc, #140]	; (80019e4 <HAL_TIM_MspPostInit+0x11c>)
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001962:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <HAL_TIM_MspPostInit+0x11c>)
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	4a1f      	ldr	r2, [pc, #124]	; (80019e4 <HAL_TIM_MspPostInit+0x11c>)
 8001968:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800196c:	6153      	str	r3, [r2, #20]
 800196e:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <HAL_TIM_MspPostInit+0x11c>)
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800197a:	2310      	movs	r3, #16
 800197c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800198a:	2302      	movs	r3, #2
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	f107 031c 	add.w	r3, r7, #28
 8001992:	4619      	mov	r1, r3
 8001994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001998:	f000 fb3e 	bl	8002018 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800199c:	2303      	movs	r3, #3
 800199e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019ac:	2302      	movs	r3, #2
 80019ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b0:	f107 031c 	add.w	r3, r7, #28
 80019b4:	4619      	mov	r1, r3
 80019b6:	480d      	ldr	r0, [pc, #52]	; (80019ec <HAL_TIM_MspPostInit+0x124>)
 80019b8:	f000 fb2e 	bl	8002018 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019bc:	2340      	movs	r3, #64	; 0x40
 80019be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019cc:	2302      	movs	r3, #2
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d0:	f107 031c 	add.w	r3, r7, #28
 80019d4:	4619      	mov	r1, r3
 80019d6:	4806      	ldr	r0, [pc, #24]	; (80019f0 <HAL_TIM_MspPostInit+0x128>)
 80019d8:	f000 fb1e 	bl	8002018 <HAL_GPIO_Init>
}
 80019dc:	bf00      	nop
 80019de:	3730      	adds	r7, #48	; 0x30
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40000400 	.word	0x40000400
 80019ec:	48000400 	.word	0x48000400
 80019f0:	48000800 	.word	0x48000800

080019f4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a18      	ldr	r2, [pc, #96]	; (8001a74 <HAL_PCD_MspInit+0x80>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d129      	bne.n	8001a6a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <HAL_PCD_MspInit+0x84>)
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	4a17      	ldr	r2, [pc, #92]	; (8001a78 <HAL_PCD_MspInit+0x84>)
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a20:	6153      	str	r3, [r2, #20]
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <HAL_PCD_MspInit+0x84>)
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001a2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001a40:	230e      	movs	r3, #14
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4e:	f000 fae3 	bl	8002018 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <HAL_PCD_MspInit+0x84>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4a08      	ldr	r2, [pc, #32]	; (8001a78 <HAL_PCD_MspInit+0x84>)
 8001a58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a5c:	61d3      	str	r3, [r2, #28]
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_PCD_MspInit+0x84>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001a6a:	bf00      	nop
 8001a6c:	3728      	adds	r7, #40	; 0x28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40005c00 	.word	0x40005c00
 8001a78:	40021000 	.word	0x40021000

08001a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a80:	e7fe      	b.n	8001a80 <NMI_Handler+0x4>

08001a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <HardFault_Handler+0x4>

08001a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <MemManage_Handler+0x4>

08001a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <BusFault_Handler+0x4>

08001a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <UsageFault_Handler+0x4>

08001a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac8:	f000 f9a0 	bl	8001e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return 1;
 8001ad4:	2301      	movs	r3, #1
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <_kill>:

int _kill(int pid, int sig)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aea:	f004 f93f 	bl	8005d6c <__errno>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2216      	movs	r2, #22
 8001af2:	601a      	str	r2, [r3, #0]
  return -1;
 8001af4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <_exit>:

void _exit (int status)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ffe7 	bl	8001ae0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b12:	e7fe      	b.n	8001b12 <_exit+0x12>

08001b14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	e00a      	b.n	8001b3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b26:	f3af 8000 	nop.w
 8001b2a:	4601      	mov	r1, r0
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	60ba      	str	r2, [r7, #8]
 8001b32:	b2ca      	uxtb	r2, r1
 8001b34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	dbf0      	blt.n	8001b26 <_read+0x12>
  }

  return len;
 8001b44:	687b      	ldr	r3, [r7, #4]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	e009      	b.n	8001b74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	60ba      	str	r2, [r7, #8]
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	3301      	adds	r3, #1
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	dbf1      	blt.n	8001b60 <_write+0x12>
  }
  return len;
 8001b7c:	687b      	ldr	r3, [r7, #4]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <_close>:

int _close(int file)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bae:	605a      	str	r2, [r3, #4]
  return 0;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <_isatty>:

int _isatty(int file)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bc6:	2301      	movs	r3, #1
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf8:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <_sbrk+0x5c>)
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <_sbrk+0x60>)
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <_sbrk+0x64>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d102      	bne.n	8001c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <_sbrk+0x64>)
 8001c0e:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <_sbrk+0x68>)
 8001c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <_sbrk+0x64>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d207      	bcs.n	8001c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c20:	f004 f8a4 	bl	8005d6c <__errno>
 8001c24:	4603      	mov	r3, r0
 8001c26:	220c      	movs	r2, #12
 8001c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2e:	e009      	b.n	8001c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <_sbrk+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c36:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	4a05      	ldr	r2, [pc, #20]	; (8001c54 <_sbrk+0x64>)
 8001c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c42:	68fb      	ldr	r3, [r7, #12]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	2000a000 	.word	0x2000a000
 8001c50:	00000400 	.word	0x00000400
 8001c54:	200007c0 	.word	0x200007c0
 8001c58:	20000918 	.word	0x20000918

08001c5c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <SystemInit+0x20>)
 8001c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c66:	4a05      	ldr	r2, [pc, #20]	; (8001c7c <SystemInit+0x20>)
 8001c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <TIM2_IRQHandler>:
    hardware_timer->timer_completion_function = completion_function;

}

// tim2 overflow handler
void TIM2_IRQHandler(void) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 8001c84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d01e      	beq.n	8001cd0 <TIM2_IRQHandler+0x50>
        TIM2->SR &= ~TIM_SR_UIF; // Clear the interrupt flag
 8001c92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c9c:	f023 0301 	bic.w	r3, r3, #1
 8001ca0:	6113      	str	r3, [r2, #16]

        if (TIM2_init.oneShotMode) {
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <TIM2_IRQHandler+0x54>)
 8001ca4:	7b1b      	ldrb	r3, [r3, #12]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00a      	beq.n	8001cc2 <TIM2_IRQHandler+0x42>
            TIM2->CR1 &= ~TIM_CR1_CEN; // Stop the timer if in one-shot mode
 8001cac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cb6:	f023 0301 	bic.w	r3, r3, #1
 8001cba:	6013      	str	r3, [r2, #0]

            TIM2_init.oneShotMode = 0; // turn off the oneshot mode
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <TIM2_IRQHandler+0x54>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	731a      	strb	r2, [r3, #12]
        }

        if (TIM2_init.timer_completion_function != NULL) {
 8001cc2:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <TIM2_IRQHandler+0x54>)
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <TIM2_IRQHandler+0x50>
            TIM2_init.timer_completion_function();
 8001cca:	4b02      	ldr	r3, [pc, #8]	; (8001cd4 <TIM2_IRQHandler+0x54>)
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	4798      	blx	r3
        }
    }
}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000144 	.word	0x20000144

08001cd8 <TIM4_IRQHandler>:

// tim4 overflow handler
void TIM4_IRQHandler(void) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
    if (TIM4->SR & TIM_SR_UIF) {
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <TIM4_IRQHandler+0x4c>)
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d01a      	beq.n	8001d1e <TIM4_IRQHandler+0x46>
        TIM4->SR &= ~TIM_SR_UIF; // Clear the interrupt flag
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <TIM4_IRQHandler+0x4c>)
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	4a0d      	ldr	r2, [pc, #52]	; (8001d24 <TIM4_IRQHandler+0x4c>)
 8001cee:	f023 0301 	bic.w	r3, r3, #1
 8001cf2:	6113      	str	r3, [r2, #16]

        if (TIM4_init.oneShotMode) {
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <TIM4_IRQHandler+0x50>)
 8001cf6:	7b1b      	ldrb	r3, [r3, #12]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d008      	beq.n	8001d10 <TIM4_IRQHandler+0x38>
            TIM4->CR1 &= ~TIM_CR1_CEN; // Stop the timer if in one-shot mode
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <TIM4_IRQHandler+0x4c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a08      	ldr	r2, [pc, #32]	; (8001d24 <TIM4_IRQHandler+0x4c>)
 8001d04:	f023 0301 	bic.w	r3, r3, #1
 8001d08:	6013      	str	r3, [r2, #0]

            TIM4_init.oneShotMode = 0; // turn off the oneshot mode
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <TIM4_IRQHandler+0x50>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	731a      	strb	r2, [r3, #12]
        }

        if (TIM4_init.timer_completion_function != NULL) {
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <TIM4_IRQHandler+0x50>)
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <TIM4_IRQHandler+0x46>
            TIM4_init.timer_completion_function();
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <TIM4_IRQHandler+0x50>)
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	4798      	blx	r3
        }
    }
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40000800 	.word	0x40000800
 8001d28:	2000016c 	.word	0x2000016c

08001d2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d64 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d30:	f7ff ff94 	bl	8001c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d34:	480c      	ldr	r0, [pc, #48]	; (8001d68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d36:	490d      	ldr	r1, [pc, #52]	; (8001d6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d38:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <LoopForever+0xe>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d3c:	e002      	b.n	8001d44 <LoopCopyDataInit>

08001d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d42:	3304      	adds	r3, #4

08001d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d48:	d3f9      	bcc.n	8001d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d4c:	4c0a      	ldr	r4, [pc, #40]	; (8001d78 <LoopForever+0x16>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d50:	e001      	b.n	8001d56 <LoopFillZerobss>

08001d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d54:	3204      	adds	r2, #4

08001d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d58:	d3fb      	bcc.n	8001d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d5a:	f004 f80d 	bl	8005d78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d5e:	f7ff f9d1 	bl	8001104 <main>

08001d62 <LoopForever>:

LoopForever:
    b LoopForever
 8001d62:	e7fe      	b.n	8001d62 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d64:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d6c:	20000364 	.word	0x20000364
  ldr r2, =_sidata
 8001d70:	080099b8 	.word	0x080099b8
  ldr r2, =_sbss
 8001d74:	20000364 	.word	0x20000364
  ldr r4, =_ebss
 8001d78:	20000914 	.word	0x20000914

08001d7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d7c:	e7fe      	b.n	8001d7c <ADC1_2_IRQHandler>
	...

08001d80 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d84:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <HAL_Init+0x28>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a07      	ldr	r2, [pc, #28]	; (8001da8 <HAL_Init+0x28>)
 8001d8a:	f043 0310 	orr.w	r3, r3, #16
 8001d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d90:	2003      	movs	r0, #3
 8001d92:	f000 f90d 	bl	8001fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d96:	2000      	movs	r0, #0
 8001d98:	f000 f808 	bl	8001dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d9c:	f7ff fcb8 	bl	8001710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40022000 	.word	0x40022000

08001dac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_InitTick+0x54>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_InitTick+0x58>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f917 	bl	8001ffe <HAL_SYSTICK_Config>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00e      	b.n	8001df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b0f      	cmp	r3, #15
 8001dde:	d80a      	bhi.n	8001df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de0:	2200      	movs	r2, #0
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295
 8001de8:	f000 f8ed 	bl	8001fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dec:	4a06      	ldr	r2, [pc, #24]	; (8001e08 <HAL_InitTick+0x5c>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e000      	b.n	8001df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000140 	.word	0x20000140
 8001e04:	20000198 	.word	0x20000198
 8001e08:	20000194 	.word	0x20000194

08001e0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_IncTick+0x20>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x24>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <HAL_IncTick+0x24>)
 8001e1e:	6013      	str	r3, [r2, #0]
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000198 	.word	0x20000198
 8001e30:	200007c4 	.word	0x200007c4

08001e34 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return uwTick;  
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <HAL_GetTick+0x14>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	200007c4 	.word	0x200007c4

08001e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e7e:	4a04      	ldr	r2, [pc, #16]	; (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	60d3      	str	r3, [r2, #12]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e98:	4b04      	ldr	r3, [pc, #16]	; (8001eac <__NVIC_GetPriorityGrouping+0x18>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6039      	str	r1, [r7, #0]
 8001eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	db0a      	blt.n	8001eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	490c      	ldr	r1, [pc, #48]	; (8001efc <__NVIC_SetPriority+0x4c>)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	0112      	lsls	r2, r2, #4
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	440b      	add	r3, r1
 8001ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed8:	e00a      	b.n	8001ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4908      	ldr	r1, [pc, #32]	; (8001f00 <__NVIC_SetPriority+0x50>)
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	3b04      	subs	r3, #4
 8001ee8:	0112      	lsls	r2, r2, #4
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	440b      	add	r3, r1
 8001eee:	761a      	strb	r2, [r3, #24]
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000e100 	.word	0xe000e100
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b089      	sub	sp, #36	; 0x24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f1c3 0307 	rsb	r3, r3, #7
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	bf28      	it	cs
 8001f22:	2304      	movcs	r3, #4
 8001f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	2b06      	cmp	r3, #6
 8001f2c:	d902      	bls.n	8001f34 <NVIC_EncodePriority+0x30>
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3b03      	subs	r3, #3
 8001f32:	e000      	b.n	8001f36 <NVIC_EncodePriority+0x32>
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	f04f 32ff 	mov.w	r2, #4294967295
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43da      	mvns	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	401a      	ands	r2, r3
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	fa01 f303 	lsl.w	r3, r1, r3
 8001f56:	43d9      	mvns	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5c:	4313      	orrs	r3, r2
         );
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3724      	adds	r7, #36	; 0x24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
	...

08001f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f7c:	d301      	bcc.n	8001f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e00f      	b.n	8001fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f82:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <SysTick_Config+0x40>)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f8a:	210f      	movs	r1, #15
 8001f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f90:	f7ff ff8e 	bl	8001eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <SysTick_Config+0x40>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f9a:	4b04      	ldr	r3, [pc, #16]	; (8001fac <SysTick_Config+0x40>)
 8001f9c:	2207      	movs	r2, #7
 8001f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	e000e010 	.word	0xe000e010

08001fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff ff47 	bl	8001e4c <__NVIC_SetPriorityGrouping>
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b086      	sub	sp, #24
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	4603      	mov	r3, r0
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
 8001fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd8:	f7ff ff5c 	bl	8001e94 <__NVIC_GetPriorityGrouping>
 8001fdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	68b9      	ldr	r1, [r7, #8]
 8001fe2:	6978      	ldr	r0, [r7, #20]
 8001fe4:	f7ff ff8e 	bl	8001f04 <NVIC_EncodePriority>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fee:	4611      	mov	r1, r2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff5d 	bl	8001eb0 <__NVIC_SetPriority>
}
 8001ff6:	bf00      	nop
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff ffb0 	bl	8001f6c <SysTick_Config>
 800200c:	4603      	mov	r3, r0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002026:	e154      	b.n	80022d2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	2101      	movs	r1, #1
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	fa01 f303 	lsl.w	r3, r1, r3
 8002034:	4013      	ands	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 8146 	beq.w	80022cc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	2b01      	cmp	r3, #1
 800204a:	d005      	beq.n	8002058 <HAL_GPIO_Init+0x40>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d130      	bne.n	80020ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	2203      	movs	r2, #3
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800208e:	2201      	movs	r2, #1
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	091b      	lsrs	r3, r3, #4
 80020a4:	f003 0201 	and.w	r2, r3, #1
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d017      	beq.n	80020f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	2203      	movs	r2, #3
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4013      	ands	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d123      	bne.n	800214a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	08da      	lsrs	r2, r3, #3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3208      	adds	r2, #8
 800210a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800210e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	220f      	movs	r2, #15
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4013      	ands	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	691a      	ldr	r2, [r3, #16]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	08da      	lsrs	r2, r3, #3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3208      	adds	r2, #8
 8002144:	6939      	ldr	r1, [r7, #16]
 8002146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	2203      	movs	r2, #3
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	4013      	ands	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 0203 	and.w	r2, r3, #3
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 80a0 	beq.w	80022cc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218c:	4b58      	ldr	r3, [pc, #352]	; (80022f0 <HAL_GPIO_Init+0x2d8>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	4a57      	ldr	r2, [pc, #348]	; (80022f0 <HAL_GPIO_Init+0x2d8>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6193      	str	r3, [r2, #24]
 8002198:	4b55      	ldr	r3, [pc, #340]	; (80022f0 <HAL_GPIO_Init+0x2d8>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021a4:	4a53      	ldr	r2, [pc, #332]	; (80022f4 <HAL_GPIO_Init+0x2dc>)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	089b      	lsrs	r3, r3, #2
 80021aa:	3302      	adds	r3, #2
 80021ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	220f      	movs	r2, #15
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4013      	ands	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021ce:	d019      	beq.n	8002204 <HAL_GPIO_Init+0x1ec>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a49      	ldr	r2, [pc, #292]	; (80022f8 <HAL_GPIO_Init+0x2e0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d013      	beq.n	8002200 <HAL_GPIO_Init+0x1e8>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a48      	ldr	r2, [pc, #288]	; (80022fc <HAL_GPIO_Init+0x2e4>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d00d      	beq.n	80021fc <HAL_GPIO_Init+0x1e4>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a47      	ldr	r2, [pc, #284]	; (8002300 <HAL_GPIO_Init+0x2e8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d007      	beq.n	80021f8 <HAL_GPIO_Init+0x1e0>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a46      	ldr	r2, [pc, #280]	; (8002304 <HAL_GPIO_Init+0x2ec>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d101      	bne.n	80021f4 <HAL_GPIO_Init+0x1dc>
 80021f0:	2304      	movs	r3, #4
 80021f2:	e008      	b.n	8002206 <HAL_GPIO_Init+0x1ee>
 80021f4:	2305      	movs	r3, #5
 80021f6:	e006      	b.n	8002206 <HAL_GPIO_Init+0x1ee>
 80021f8:	2303      	movs	r3, #3
 80021fa:	e004      	b.n	8002206 <HAL_GPIO_Init+0x1ee>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e002      	b.n	8002206 <HAL_GPIO_Init+0x1ee>
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <HAL_GPIO_Init+0x1ee>
 8002204:	2300      	movs	r3, #0
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	f002 0203 	and.w	r2, r2, #3
 800220c:	0092      	lsls	r2, r2, #2
 800220e:	4093      	lsls	r3, r2
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002216:	4937      	ldr	r1, [pc, #220]	; (80022f4 <HAL_GPIO_Init+0x2dc>)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	089b      	lsrs	r3, r3, #2
 800221c:	3302      	adds	r3, #2
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002224:	4b38      	ldr	r3, [pc, #224]	; (8002308 <HAL_GPIO_Init+0x2f0>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	43db      	mvns	r3, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002248:	4a2f      	ldr	r2, [pc, #188]	; (8002308 <HAL_GPIO_Init+0x2f0>)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800224e:	4b2e      	ldr	r3, [pc, #184]	; (8002308 <HAL_GPIO_Init+0x2f0>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	43db      	mvns	r3, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002272:	4a25      	ldr	r2, [pc, #148]	; (8002308 <HAL_GPIO_Init+0x2f0>)
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002278:	4b23      	ldr	r3, [pc, #140]	; (8002308 <HAL_GPIO_Init+0x2f0>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	43db      	mvns	r3, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800229c:	4a1a      	ldr	r2, [pc, #104]	; (8002308 <HAL_GPIO_Init+0x2f0>)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022a2:	4b19      	ldr	r3, [pc, #100]	; (8002308 <HAL_GPIO_Init+0x2f0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022c6:	4a10      	ldr	r2, [pc, #64]	; (8002308 <HAL_GPIO_Init+0x2f0>)
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	3301      	adds	r3, #1
 80022d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	fa22 f303 	lsr.w	r3, r2, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f47f aea3 	bne.w	8002028 <HAL_GPIO_Init+0x10>
  }
}
 80022e2:	bf00      	nop
 80022e4:	bf00      	nop
 80022e6:	371c      	adds	r7, #28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40010000 	.word	0x40010000
 80022f8:	48000400 	.word	0x48000400
 80022fc:	48000800 	.word	0x48000800
 8002300:	48000c00 	.word	0x48000c00
 8002304:	48001000 	.word	0x48001000
 8002308:	40010400 	.word	0x40010400

0800230c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	807b      	strh	r3, [r7, #2]
 8002318:	4613      	mov	r3, r2
 800231a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800231c:	787b      	ldrb	r3, [r7, #1]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002322:	887a      	ldrh	r2, [r7, #2]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002328:	e002      	b.n	8002330 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800232a:	887a      	ldrh	r2, [r7, #2]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e081      	b.n	8002452 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d106      	bne.n	8002368 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff f9f8 	bl	8001758 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2224      	movs	r2, #36	; 0x24
 800236c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800238c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800239c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d107      	bne.n	80023b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	e006      	b.n	80023c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80023c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d104      	bne.n	80023d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691a      	ldr	r2, [r3, #16]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69d9      	ldr	r1, [r3, #28]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1a      	ldr	r2, [r3, #32]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2220      	movs	r2, #32
 800243e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b20      	cmp	r3, #32
 800246e:	d138      	bne.n	80024e2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800247a:	2302      	movs	r3, #2
 800247c:	e032      	b.n	80024e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2224      	movs	r2, #36	; 0x24
 800248a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0201 	bic.w	r2, r2, #1
 800249c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024ac:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6819      	ldr	r1, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f042 0201 	orr.w	r2, r2, #1
 80024cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	e000      	b.n	80024e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024e2:	2302      	movs	r3, #2
  }
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b20      	cmp	r3, #32
 8002504:	d139      	bne.n	800257a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002510:	2302      	movs	r3, #2
 8002512:	e033      	b.n	800257c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2224      	movs	r2, #36	; 0x24
 8002520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0201 	bic.w	r2, r2, #1
 8002532:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002542:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4313      	orrs	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 0201 	orr.w	r2, r2, #1
 8002564:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2220      	movs	r2, #32
 800256a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	e000      	b.n	800257c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800257a:	2302      	movs	r3, #2
  }
}
 800257c:	4618      	mov	r0, r3
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800258a:	b08b      	sub	sp, #44	; 0x2c
 800258c:	af06      	add	r7, sp, #24
 800258e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e0c4      	b.n	8002724 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff fa20 	bl	80019f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2203      	movs	r2, #3
 80025b8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f002 fba9 	bl	8004d18 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025c6:	2300      	movs	r3, #0
 80025c8:	73fb      	strb	r3, [r7, #15]
 80025ca:	e040      	b.n	800264e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	440b      	add	r3, r1
 80025dc:	3301      	adds	r3, #1
 80025de:	2201      	movs	r2, #1
 80025e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	440b      	add	r3, r1
 80025f2:	7bfa      	ldrb	r2, [r7, #15]
 80025f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	440b      	add	r3, r1
 8002606:	3303      	adds	r3, #3
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	440b      	add	r3, r1
 800261a:	3338      	adds	r3, #56	; 0x38
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002620:	7bfa      	ldrb	r2, [r7, #15]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	440b      	add	r3, r1
 800262e:	333c      	adds	r3, #60	; 0x3c
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002634:	7bfa      	ldrb	r2, [r7, #15]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	440b      	add	r3, r1
 8002642:	3340      	adds	r3, #64	; 0x40
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	3301      	adds	r3, #1
 800264c:	73fb      	strb	r3, [r7, #15]
 800264e:	7bfa      	ldrb	r2, [r7, #15]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	429a      	cmp	r2, r3
 8002656:	d3b9      	bcc.n	80025cc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002658:	2300      	movs	r3, #0
 800265a:	73fb      	strb	r3, [r7, #15]
 800265c:	e044      	b.n	80026e8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800265e:	7bfa      	ldrb	r2, [r7, #15]
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	440b      	add	r3, r1
 800266c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002674:	7bfa      	ldrb	r2, [r7, #15]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	440b      	add	r3, r1
 8002682:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002686:	7bfa      	ldrb	r2, [r7, #15]
 8002688:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800268a:	7bfa      	ldrb	r2, [r7, #15]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	440b      	add	r3, r1
 8002698:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	440b      	add	r3, r1
 80026ae:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026b6:	7bfa      	ldrb	r2, [r7, #15]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	440b      	add	r3, r1
 80026c4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026cc:	7bfa      	ldrb	r2, [r7, #15]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	440b      	add	r3, r1
 80026da:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	3301      	adds	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
 80026e8:	7bfa      	ldrb	r2, [r7, #15]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d3b5      	bcc.n	800265e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	687e      	ldr	r6, [r7, #4]
 80026fa:	466d      	mov	r5, sp
 80026fc:	f106 0410 	add.w	r4, r6, #16
 8002700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002704:	6823      	ldr	r3, [r4, #0]
 8002706:	602b      	str	r3, [r5, #0]
 8002708:	1d33      	adds	r3, r6, #4
 800270a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800270c:	6838      	ldr	r0, [r7, #0]
 800270e:	f002 fb1e 	bl	8004d4e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800272c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002732:	af00      	add	r7, sp, #0
 8002734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002738:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800273c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800273e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002742:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d102      	bne.n	8002752 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	f001 b823 	b.w	8003798 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002756:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 817d 	beq.w	8002a62 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002768:	4bbc      	ldr	r3, [pc, #752]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 030c 	and.w	r3, r3, #12
 8002770:	2b04      	cmp	r3, #4
 8002772:	d00c      	beq.n	800278e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002774:	4bb9      	ldr	r3, [pc, #740]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 030c 	and.w	r3, r3, #12
 800277c:	2b08      	cmp	r3, #8
 800277e:	d15c      	bne.n	800283a <HAL_RCC_OscConfig+0x10e>
 8002780:	4bb6      	ldr	r3, [pc, #728]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278c:	d155      	bne.n	800283a <HAL_RCC_OscConfig+0x10e>
 800278e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002792:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800279a:	fa93 f3a3 	rbit	r3, r3
 800279e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027a2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a6:	fab3 f383 	clz	r3, r3
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	095b      	lsrs	r3, r3, #5
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d102      	bne.n	80027c0 <HAL_RCC_OscConfig+0x94>
 80027ba:	4ba8      	ldr	r3, [pc, #672]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	e015      	b.n	80027ec <HAL_RCC_OscConfig+0xc0>
 80027c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027c4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80027cc:	fa93 f3a3 	rbit	r3, r3
 80027d0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80027d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027d8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80027dc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80027e8:	4b9c      	ldr	r3, [pc, #624]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027f0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80027f4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80027f8:	fa92 f2a2 	rbit	r2, r2
 80027fc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002800:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002804:	fab2 f282 	clz	r2, r2
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	f042 0220 	orr.w	r2, r2, #32
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	f002 021f 	and.w	r2, r2, #31
 8002814:	2101      	movs	r1, #1
 8002816:	fa01 f202 	lsl.w	r2, r1, r2
 800281a:	4013      	ands	r3, r2
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 811f 	beq.w	8002a60 <HAL_RCC_OscConfig+0x334>
 8002822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002826:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	f040 8116 	bne.w	8002a60 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	f000 bfaf 	b.w	8003798 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800283a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800284a:	d106      	bne.n	800285a <HAL_RCC_OscConfig+0x12e>
 800284c:	4b83      	ldr	r3, [pc, #524]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a82      	ldr	r2, [pc, #520]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 8002852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	e036      	b.n	80028c8 <HAL_RCC_OscConfig+0x19c>
 800285a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10c      	bne.n	8002884 <HAL_RCC_OscConfig+0x158>
 800286a:	4b7c      	ldr	r3, [pc, #496]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a7b      	ldr	r2, [pc, #492]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 8002870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b79      	ldr	r3, [pc, #484]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a78      	ldr	r2, [pc, #480]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 800287c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e021      	b.n	80028c8 <HAL_RCC_OscConfig+0x19c>
 8002884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002888:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002894:	d10c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x184>
 8002896:	4b71      	ldr	r3, [pc, #452]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a70      	ldr	r2, [pc, #448]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 800289c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	4b6e      	ldr	r3, [pc, #440]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a6d      	ldr	r2, [pc, #436]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 80028a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e00b      	b.n	80028c8 <HAL_RCC_OscConfig+0x19c>
 80028b0:	4b6a      	ldr	r3, [pc, #424]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a69      	ldr	r2, [pc, #420]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 80028b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ba:	6013      	str	r3, [r2, #0]
 80028bc:	4b67      	ldr	r3, [pc, #412]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a66      	ldr	r2, [pc, #408]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 80028c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028c6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028c8:	4b64      	ldr	r3, [pc, #400]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	f023 020f 	bic.w	r2, r3, #15
 80028d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	495f      	ldr	r1, [pc, #380]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d059      	beq.n	80029a6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f2:	f7ff fa9f 	bl	8001e34 <HAL_GetTick>
 80028f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028fc:	f7ff fa9a 	bl	8001e34 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b64      	cmp	r3, #100	; 0x64
 800290a:	d902      	bls.n	8002912 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	f000 bf43 	b.w	8003798 <HAL_RCC_OscConfig+0x106c>
 8002912:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002916:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002926:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292a:	fab3 f383 	clz	r3, r3
 800292e:	b2db      	uxtb	r3, r3
 8002930:	095b      	lsrs	r3, r3, #5
 8002932:	b2db      	uxtb	r3, r3
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d102      	bne.n	8002944 <HAL_RCC_OscConfig+0x218>
 800293e:	4b47      	ldr	r3, [pc, #284]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	e015      	b.n	8002970 <HAL_RCC_OscConfig+0x244>
 8002944:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002948:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002958:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800295c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002960:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800296c:	4b3b      	ldr	r3, [pc, #236]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002974:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002978:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800297c:	fa92 f2a2 	rbit	r2, r2
 8002980:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002984:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002988:	fab2 f282 	clz	r2, r2
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	f042 0220 	orr.w	r2, r2, #32
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	f002 021f 	and.w	r2, r2, #31
 8002998:	2101      	movs	r1, #1
 800299a:	fa01 f202 	lsl.w	r2, r1, r2
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0ab      	beq.n	80028fc <HAL_RCC_OscConfig+0x1d0>
 80029a4:	e05d      	b.n	8002a62 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a6:	f7ff fa45 	bl	8001e34 <HAL_GetTick>
 80029aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ae:	e00a      	b.n	80029c6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029b0:	f7ff fa40 	bl	8001e34 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b64      	cmp	r3, #100	; 0x64
 80029be:	d902      	bls.n	80029c6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	f000 bee9 	b.w	8003798 <HAL_RCC_OscConfig+0x106c>
 80029c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ca:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80029da:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029de:	fab3 f383 	clz	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	095b      	lsrs	r3, r3, #5
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d102      	bne.n	80029f8 <HAL_RCC_OscConfig+0x2cc>
 80029f2:	4b1a      	ldr	r3, [pc, #104]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	e015      	b.n	8002a24 <HAL_RCC_OscConfig+0x2f8>
 80029f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029fc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a00:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002a04:	fa93 f3a3 	rbit	r3, r3
 8002a08:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a10:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002a14:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002a20:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <HAL_RCC_OscConfig+0x330>)
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a28:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002a2c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a30:	fa92 f2a2 	rbit	r2, r2
 8002a34:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002a38:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002a3c:	fab2 f282 	clz	r2, r2
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	f042 0220 	orr.w	r2, r2, #32
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	f002 021f 	and.w	r2, r2, #31
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1ab      	bne.n	80029b0 <HAL_RCC_OscConfig+0x284>
 8002a58:	e003      	b.n	8002a62 <HAL_RCC_OscConfig+0x336>
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 817d 	beq.w	8002d72 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a78:	4ba6      	ldr	r3, [pc, #664]	; (8002d14 <HAL_RCC_OscConfig+0x5e8>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 030c 	and.w	r3, r3, #12
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00b      	beq.n	8002a9c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a84:	4ba3      	ldr	r3, [pc, #652]	; (8002d14 <HAL_RCC_OscConfig+0x5e8>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 030c 	and.w	r3, r3, #12
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d172      	bne.n	8002b76 <HAL_RCC_OscConfig+0x44a>
 8002a90:	4ba0      	ldr	r3, [pc, #640]	; (8002d14 <HAL_RCC_OscConfig+0x5e8>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d16c      	bne.n	8002b76 <HAL_RCC_OscConfig+0x44a>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002aae:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab2:	fab3 f383 	clz	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	095b      	lsrs	r3, r3, #5
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d102      	bne.n	8002acc <HAL_RCC_OscConfig+0x3a0>
 8002ac6:	4b93      	ldr	r3, [pc, #588]	; (8002d14 <HAL_RCC_OscConfig+0x5e8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	e013      	b.n	8002af4 <HAL_RCC_OscConfig+0x3c8>
 8002acc:	2302      	movs	r3, #2
 8002ace:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002ade:	2302      	movs	r3, #2
 8002ae0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002ae4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ae8:	fa93 f3a3 	rbit	r3, r3
 8002aec:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002af0:	4b88      	ldr	r3, [pc, #544]	; (8002d14 <HAL_RCC_OscConfig+0x5e8>)
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	2202      	movs	r2, #2
 8002af6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002afa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002afe:	fa92 f2a2 	rbit	r2, r2
 8002b02:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002b06:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002b0a:	fab2 f282 	clz	r2, r2
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	f042 0220 	orr.w	r2, r2, #32
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	f002 021f 	and.w	r2, r2, #31
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <HAL_RCC_OscConfig+0x410>
 8002b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d002      	beq.n	8002b3c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	f000 be2e 	b.w	8003798 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3c:	4b75      	ldr	r3, [pc, #468]	; (8002d14 <HAL_RCC_OscConfig+0x5e8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	21f8      	movs	r1, #248	; 0xf8
 8002b52:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002b5a:	fa91 f1a1 	rbit	r1, r1
 8002b5e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002b62:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002b66:	fab1 f181 	clz	r1, r1
 8002b6a:	b2c9      	uxtb	r1, r1
 8002b6c:	408b      	lsls	r3, r1
 8002b6e:	4969      	ldr	r1, [pc, #420]	; (8002d14 <HAL_RCC_OscConfig+0x5e8>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b74:	e0fd      	b.n	8002d72 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 8088 	beq.w	8002c98 <HAL_RCC_OscConfig+0x56c>
 8002b88:	2301      	movs	r3, #1
 8002b8a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002b9a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ba8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	461a      	mov	r2, r3
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7ff f93e 	bl	8001e34 <HAL_GetTick>
 8002bb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbc:	e00a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bbe:	f7ff f939 	bl	8001e34 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d902      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	f000 bde2 	b.w	8003798 <HAL_RCC_OscConfig+0x106c>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002be6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d102      	bne.n	8002c04 <HAL_RCC_OscConfig+0x4d8>
 8002bfe:	4b45      	ldr	r3, [pc, #276]	; (8002d14 <HAL_RCC_OscConfig+0x5e8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	e013      	b.n	8002c2c <HAL_RCC_OscConfig+0x500>
 8002c04:	2302      	movs	r3, #2
 8002c06:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c16:	2302      	movs	r3, #2
 8002c18:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c1c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002c20:	fa93 f3a3 	rbit	r3, r3
 8002c24:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002c28:	4b3a      	ldr	r3, [pc, #232]	; (8002d14 <HAL_RCC_OscConfig+0x5e8>)
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002c32:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002c36:	fa92 f2a2 	rbit	r2, r2
 8002c3a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002c3e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002c42:	fab2 f282 	clz	r2, r2
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	f042 0220 	orr.w	r2, r2, #32
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	f002 021f 	and.w	r2, r2, #31
 8002c52:	2101      	movs	r1, #1
 8002c54:	fa01 f202 	lsl.w	r2, r1, r2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0af      	beq.n	8002bbe <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5e:	4b2d      	ldr	r3, [pc, #180]	; (8002d14 <HAL_RCC_OscConfig+0x5e8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	21f8      	movs	r1, #248	; 0xf8
 8002c74:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c78:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002c7c:	fa91 f1a1 	rbit	r1, r1
 8002c80:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002c84:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002c88:	fab1 f181 	clz	r1, r1
 8002c8c:	b2c9      	uxtb	r1, r1
 8002c8e:	408b      	lsls	r3, r1
 8002c90:	4920      	ldr	r1, [pc, #128]	; (8002d14 <HAL_RCC_OscConfig+0x5e8>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]
 8002c96:	e06c      	b.n	8002d72 <HAL_RCC_OscConfig+0x646>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ca2:	fa93 f3a3 	rbit	r3, r3
 8002ca6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002caa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc4:	f7ff f8b6 	bl	8001e34 <HAL_GetTick>
 8002cc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ccc:	e00a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cce:	f7ff f8b1 	bl	8001e34 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d902      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	f000 bd5a 	b.w	8003798 <HAL_RCC_OscConfig+0x106c>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfa:	fab3 f383 	clz	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	095b      	lsrs	r3, r3, #5
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d104      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5ec>
 8002d0e:	4b01      	ldr	r3, [pc, #4]	; (8002d14 <HAL_RCC_OscConfig+0x5e8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	e015      	b.n	8002d40 <HAL_RCC_OscConfig+0x614>
 8002d14:	40021000 	.word	0x40021000
 8002d18:	2302      	movs	r3, #2
 8002d1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002d22:	fa93 f3a3 	rbit	r3, r3
 8002d26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d30:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002d34:	fa93 f3a3 	rbit	r3, r3
 8002d38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002d3c:	4bc8      	ldr	r3, [pc, #800]	; (8003060 <HAL_RCC_OscConfig+0x934>)
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	2202      	movs	r2, #2
 8002d42:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002d46:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002d4a:	fa92 f2a2 	rbit	r2, r2
 8002d4e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002d52:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002d56:	fab2 f282 	clz	r2, r2
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	f042 0220 	orr.w	r2, r2, #32
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	f002 021f 	and.w	r2, r2, #31
 8002d66:	2101      	movs	r1, #1
 8002d68:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1ad      	bne.n	8002cce <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 8110 	beq.w	8002fa8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d079      	beq.n	8002e8c <HAL_RCC_OscConfig+0x760>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	4bab      	ldr	r3, [pc, #684]	; (8003064 <HAL_RCC_OscConfig+0x938>)
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc2:	f7ff f837 	bl	8001e34 <HAL_GetTick>
 8002dc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dcc:	f7ff f832 	bl	8001e34 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d902      	bls.n	8002de2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	f000 bcdb 	b.w	8003798 <HAL_RCC_OscConfig+0x106c>
 8002de2:	2302      	movs	r3, #2
 8002de4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002dec:	fa93 f3a3 	rbit	r3, r3
 8002df0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e04:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	fa93 f2a3 	rbit	r2, r3
 8002e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e20:	2202      	movs	r2, #2
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	fa93 f2a3 	rbit	r2, r3
 8002e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e3a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3c:	4b88      	ldr	r3, [pc, #544]	; (8003060 <HAL_RCC_OscConfig+0x934>)
 8002e3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e44:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e48:	2102      	movs	r1, #2
 8002e4a:	6019      	str	r1, [r3, #0]
 8002e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	fa93 f1a3 	rbit	r1, r3
 8002e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e62:	6019      	str	r1, [r3, #0]
  return result;
 8002e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e68:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	fab3 f383 	clz	r3, r3
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	f003 031f 	and.w	r3, r3, #31
 8002e7e:	2101      	movs	r1, #1
 8002e80:	fa01 f303 	lsl.w	r3, r1, r3
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0a0      	beq.n	8002dcc <HAL_RCC_OscConfig+0x6a0>
 8002e8a:	e08d      	b.n	8002fa8 <HAL_RCC_OscConfig+0x87c>
 8002e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e90:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e94:	2201      	movs	r2, #1
 8002e96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	fa93 f2a3 	rbit	r2, r3
 8002ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eaa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002eae:	601a      	str	r2, [r3, #0]
  return result;
 8002eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002eb8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4b68      	ldr	r3, [pc, #416]	; (8003064 <HAL_RCC_OscConfig+0x938>)
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	461a      	mov	r2, r3
 8002eca:	2300      	movs	r3, #0
 8002ecc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ece:	f7fe ffb1 	bl	8001e34 <HAL_GetTick>
 8002ed2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed6:	e00a      	b.n	8002eee <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed8:	f7fe ffac 	bl	8001e34 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d902      	bls.n	8002eee <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	f000 bc55 	b.w	8003798 <HAL_RCC_OscConfig+0x106c>
 8002eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	fa93 f2a3 	rbit	r2, r3
 8002f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f16:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f22:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	fa93 f2a3 	rbit	r2, r3
 8002f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f3e:	2202      	movs	r2, #2
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	fa93 f2a3 	rbit	r2, r3
 8002f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f54:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f58:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f5a:	4b41      	ldr	r3, [pc, #260]	; (8003060 <HAL_RCC_OscConfig+0x934>)
 8002f5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f62:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f66:	2102      	movs	r1, #2
 8002f68:	6019      	str	r1, [r3, #0]
 8002f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	fa93 f1a3 	rbit	r1, r3
 8002f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f80:	6019      	str	r1, [r3, #0]
  return result;
 8002f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f86:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	fab3 f383 	clz	r3, r3
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d197      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 81a1 	beq.w	8003300 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc4:	4b26      	ldr	r3, [pc, #152]	; (8003060 <HAL_RCC_OscConfig+0x934>)
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d116      	bne.n	8002ffe <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd0:	4b23      	ldr	r3, [pc, #140]	; (8003060 <HAL_RCC_OscConfig+0x934>)
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	4a22      	ldr	r2, [pc, #136]	; (8003060 <HAL_RCC_OscConfig+0x934>)
 8002fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fda:	61d3      	str	r3, [r2, #28]
 8002fdc:	4b20      	ldr	r3, [pc, #128]	; (8003060 <HAL_RCC_OscConfig+0x934>)
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002ff6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffe:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <HAL_RCC_OscConfig+0x93c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003006:	2b00      	cmp	r3, #0
 8003008:	d11a      	bne.n	8003040 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800300a:	4b17      	ldr	r3, [pc, #92]	; (8003068 <HAL_RCC_OscConfig+0x93c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a16      	ldr	r2, [pc, #88]	; (8003068 <HAL_RCC_OscConfig+0x93c>)
 8003010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003014:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003016:	f7fe ff0d 	bl	8001e34 <HAL_GetTick>
 800301a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301e:	e009      	b.n	8003034 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003020:	f7fe ff08 	bl	8001e34 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b64      	cmp	r3, #100	; 0x64
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e3b1      	b.n	8003798 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003034:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <HAL_RCC_OscConfig+0x93c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0ef      	beq.n	8003020 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003044:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d10d      	bne.n	800306c <HAL_RCC_OscConfig+0x940>
 8003050:	4b03      	ldr	r3, [pc, #12]	; (8003060 <HAL_RCC_OscConfig+0x934>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	4a02      	ldr	r2, [pc, #8]	; (8003060 <HAL_RCC_OscConfig+0x934>)
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	6213      	str	r3, [r2, #32]
 800305c:	e03c      	b.n	80030d8 <HAL_RCC_OscConfig+0x9ac>
 800305e:	bf00      	nop
 8003060:	40021000 	.word	0x40021000
 8003064:	10908120 	.word	0x10908120
 8003068:	40007000 	.word	0x40007000
 800306c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003070:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10c      	bne.n	8003096 <HAL_RCC_OscConfig+0x96a>
 800307c:	4bc1      	ldr	r3, [pc, #772]	; (8003384 <HAL_RCC_OscConfig+0xc58>)
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	4ac0      	ldr	r2, [pc, #768]	; (8003384 <HAL_RCC_OscConfig+0xc58>)
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	6213      	str	r3, [r2, #32]
 8003088:	4bbe      	ldr	r3, [pc, #760]	; (8003384 <HAL_RCC_OscConfig+0xc58>)
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	4abd      	ldr	r2, [pc, #756]	; (8003384 <HAL_RCC_OscConfig+0xc58>)
 800308e:	f023 0304 	bic.w	r3, r3, #4
 8003092:	6213      	str	r3, [r2, #32]
 8003094:	e020      	b.n	80030d8 <HAL_RCC_OscConfig+0x9ac>
 8003096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	2b05      	cmp	r3, #5
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCC_OscConfig+0x994>
 80030a6:	4bb7      	ldr	r3, [pc, #732]	; (8003384 <HAL_RCC_OscConfig+0xc58>)
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	4ab6      	ldr	r2, [pc, #728]	; (8003384 <HAL_RCC_OscConfig+0xc58>)
 80030ac:	f043 0304 	orr.w	r3, r3, #4
 80030b0:	6213      	str	r3, [r2, #32]
 80030b2:	4bb4      	ldr	r3, [pc, #720]	; (8003384 <HAL_RCC_OscConfig+0xc58>)
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	4ab3      	ldr	r2, [pc, #716]	; (8003384 <HAL_RCC_OscConfig+0xc58>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6213      	str	r3, [r2, #32]
 80030be:	e00b      	b.n	80030d8 <HAL_RCC_OscConfig+0x9ac>
 80030c0:	4bb0      	ldr	r3, [pc, #704]	; (8003384 <HAL_RCC_OscConfig+0xc58>)
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	4aaf      	ldr	r2, [pc, #700]	; (8003384 <HAL_RCC_OscConfig+0xc58>)
 80030c6:	f023 0301 	bic.w	r3, r3, #1
 80030ca:	6213      	str	r3, [r2, #32]
 80030cc:	4bad      	ldr	r3, [pc, #692]	; (8003384 <HAL_RCC_OscConfig+0xc58>)
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	4aac      	ldr	r2, [pc, #688]	; (8003384 <HAL_RCC_OscConfig+0xc58>)
 80030d2:	f023 0304 	bic.w	r3, r3, #4
 80030d6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 8081 	beq.w	80031ec <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ea:	f7fe fea3 	bl	8001e34 <HAL_GetTick>
 80030ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f2:	e00b      	b.n	800310c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030f4:	f7fe fe9e 	bl	8001e34 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	f241 3288 	movw	r2, #5000	; 0x1388
 8003104:	4293      	cmp	r3, r2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e345      	b.n	8003798 <HAL_RCC_OscConfig+0x106c>
 800310c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003110:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003114:	2202      	movs	r2, #2
 8003116:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	fa93 f2a3 	rbit	r2, r3
 8003126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003134:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003138:	2202      	movs	r2, #2
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003140:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	fa93 f2a3 	rbit	r2, r3
 800314a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003152:	601a      	str	r2, [r3, #0]
  return result;
 8003154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003158:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800315c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	b2db      	uxtb	r3, r3
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	b2db      	uxtb	r3, r3
 8003168:	f043 0302 	orr.w	r3, r3, #2
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d102      	bne.n	8003178 <HAL_RCC_OscConfig+0xa4c>
 8003172:	4b84      	ldr	r3, [pc, #528]	; (8003384 <HAL_RCC_OscConfig+0xc58>)
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	e013      	b.n	80031a0 <HAL_RCC_OscConfig+0xa74>
 8003178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003180:	2202      	movs	r2, #2
 8003182:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003188:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	fa93 f2a3 	rbit	r2, r3
 8003192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003196:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	4b79      	ldr	r3, [pc, #484]	; (8003384 <HAL_RCC_OscConfig+0xc58>)
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031a4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80031a8:	2102      	movs	r1, #2
 80031aa:	6011      	str	r1, [r2, #0]
 80031ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031b0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	fa92 f1a2 	rbit	r1, r2
 80031ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031be:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80031c2:	6011      	str	r1, [r2, #0]
  return result;
 80031c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031c8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80031cc:	6812      	ldr	r2, [r2, #0]
 80031ce:	fab2 f282 	clz	r2, r2
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	f002 021f 	and.w	r2, r2, #31
 80031de:	2101      	movs	r1, #1
 80031e0:	fa01 f202 	lsl.w	r2, r1, r2
 80031e4:	4013      	ands	r3, r2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d084      	beq.n	80030f4 <HAL_RCC_OscConfig+0x9c8>
 80031ea:	e07f      	b.n	80032ec <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ec:	f7fe fe22 	bl	8001e34 <HAL_GetTick>
 80031f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f4:	e00b      	b.n	800320e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f6:	f7fe fe1d 	bl	8001e34 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	f241 3288 	movw	r2, #5000	; 0x1388
 8003206:	4293      	cmp	r3, r2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e2c4      	b.n	8003798 <HAL_RCC_OscConfig+0x106c>
 800320e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003212:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003216:	2202      	movs	r2, #2
 8003218:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	fa93 f2a3 	rbit	r2, r3
 8003228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003236:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800323a:	2202      	movs	r2, #2
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003242:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	fa93 f2a3 	rbit	r2, r3
 800324c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003250:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003254:	601a      	str	r2, [r3, #0]
  return result;
 8003256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800325e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003260:	fab3 f383 	clz	r3, r3
 8003264:	b2db      	uxtb	r3, r3
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	b2db      	uxtb	r3, r3
 800326a:	f043 0302 	orr.w	r3, r3, #2
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d102      	bne.n	800327a <HAL_RCC_OscConfig+0xb4e>
 8003274:	4b43      	ldr	r3, [pc, #268]	; (8003384 <HAL_RCC_OscConfig+0xc58>)
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	e013      	b.n	80032a2 <HAL_RCC_OscConfig+0xb76>
 800327a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003282:	2202      	movs	r2, #2
 8003284:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	fa93 f2a3 	rbit	r2, r3
 8003294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003298:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	4b39      	ldr	r3, [pc, #228]	; (8003384 <HAL_RCC_OscConfig+0xc58>)
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032a6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80032aa:	2102      	movs	r1, #2
 80032ac:	6011      	str	r1, [r2, #0]
 80032ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032b2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	fa92 f1a2 	rbit	r1, r2
 80032bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032c0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80032c4:	6011      	str	r1, [r2, #0]
  return result;
 80032c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032ca:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80032ce:	6812      	ldr	r2, [r2, #0]
 80032d0:	fab2 f282 	clz	r2, r2
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	f002 021f 	and.w	r2, r2, #31
 80032e0:	2101      	movs	r1, #1
 80032e2:	fa01 f202 	lsl.w	r2, r1, r2
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d184      	bne.n	80031f6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032ec:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d105      	bne.n	8003300 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f4:	4b23      	ldr	r3, [pc, #140]	; (8003384 <HAL_RCC_OscConfig+0xc58>)
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	4a22      	ldr	r2, [pc, #136]	; (8003384 <HAL_RCC_OscConfig+0xc58>)
 80032fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032fe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003304:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 8242 	beq.w	8003796 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003312:	4b1c      	ldr	r3, [pc, #112]	; (8003384 <HAL_RCC_OscConfig+0xc58>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b08      	cmp	r3, #8
 800331c:	f000 8213 	beq.w	8003746 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003324:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	2b02      	cmp	r3, #2
 800332e:	f040 8162 	bne.w	80035f6 <HAL_RCC_OscConfig+0xeca>
 8003332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003336:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800333a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800333e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003344:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	fa93 f2a3 	rbit	r2, r3
 800334e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003352:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003356:	601a      	str	r2, [r3, #0]
  return result;
 8003358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003360:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003362:	fab3 f383 	clz	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800336c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	461a      	mov	r2, r3
 8003374:	2300      	movs	r3, #0
 8003376:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003378:	f7fe fd5c 	bl	8001e34 <HAL_GetTick>
 800337c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003380:	e00c      	b.n	800339c <HAL_RCC_OscConfig+0xc70>
 8003382:	bf00      	nop
 8003384:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003388:	f7fe fd54 	bl	8001e34 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e1fd      	b.n	8003798 <HAL_RCC_OscConfig+0x106c>
 800339c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80033a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ae:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	fa93 f2a3 	rbit	r2, r3
 80033b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033bc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80033c0:	601a      	str	r2, [r3, #0]
  return result;
 80033c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80033ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033cc:	fab3 f383 	clz	r3, r3
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d102      	bne.n	80033e6 <HAL_RCC_OscConfig+0xcba>
 80033e0:	4bb0      	ldr	r3, [pc, #704]	; (80036a4 <HAL_RCC_OscConfig+0xf78>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	e027      	b.n	8003436 <HAL_RCC_OscConfig+0xd0a>
 80033e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ea:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80033ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	fa93 f2a3 	rbit	r2, r3
 8003402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003406:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003410:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003414:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	fa93 f2a3 	rbit	r2, r3
 8003428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	4b9c      	ldr	r3, [pc, #624]	; (80036a4 <HAL_RCC_OscConfig+0xf78>)
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800343a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800343e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003442:	6011      	str	r1, [r2, #0]
 8003444:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003448:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	fa92 f1a2 	rbit	r1, r2
 8003452:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003456:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800345a:	6011      	str	r1, [r2, #0]
  return result;
 800345c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003460:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	fab2 f282 	clz	r2, r2
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	f042 0220 	orr.w	r2, r2, #32
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	f002 021f 	and.w	r2, r2, #31
 8003476:	2101      	movs	r1, #1
 8003478:	fa01 f202 	lsl.w	r2, r1, r2
 800347c:	4013      	ands	r3, r2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d182      	bne.n	8003388 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003482:	4b88      	ldr	r3, [pc, #544]	; (80036a4 <HAL_RCC_OscConfig+0xf78>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800348a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	430b      	orrs	r3, r1
 80034a4:	497f      	ldr	r1, [pc, #508]	; (80036a4 <HAL_RCC_OscConfig+0xf78>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	604b      	str	r3, [r1, #4]
 80034aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ae:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80034b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034bc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	fa93 f2a3 	rbit	r2, r3
 80034c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ca:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80034ce:	601a      	str	r2, [r3, #0]
  return result;
 80034d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80034d8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034da:	fab3 f383 	clz	r3, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	461a      	mov	r2, r3
 80034ec:	2301      	movs	r3, #1
 80034ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7fe fca0 	bl	8001e34 <HAL_GetTick>
 80034f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034f8:	e009      	b.n	800350e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034fa:	f7fe fc9b 	bl	8001e34 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e144      	b.n	8003798 <HAL_RCC_OscConfig+0x106c>
 800350e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003512:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003516:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800351a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003520:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	fa93 f2a3 	rbit	r2, r3
 800352a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800352e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003532:	601a      	str	r2, [r3, #0]
  return result;
 8003534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003538:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800353c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800353e:	fab3 f383 	clz	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b01      	cmp	r3, #1
 8003550:	d102      	bne.n	8003558 <HAL_RCC_OscConfig+0xe2c>
 8003552:	4b54      	ldr	r3, [pc, #336]	; (80036a4 <HAL_RCC_OscConfig+0xf78>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	e027      	b.n	80035a8 <HAL_RCC_OscConfig+0xe7c>
 8003558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003560:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003564:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	fa93 f2a3 	rbit	r2, r3
 8003574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003578:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003582:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003586:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003590:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	fa93 f2a3 	rbit	r2, r3
 800359a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	4b3f      	ldr	r3, [pc, #252]	; (80036a4 <HAL_RCC_OscConfig+0xf78>)
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035ac:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80035b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035b4:	6011      	str	r1, [r2, #0]
 80035b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035ba:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	fa92 f1a2 	rbit	r1, r2
 80035c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035c8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80035cc:	6011      	str	r1, [r2, #0]
  return result;
 80035ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035d2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80035d6:	6812      	ldr	r2, [r2, #0]
 80035d8:	fab2 f282 	clz	r2, r2
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	f042 0220 	orr.w	r2, r2, #32
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	f002 021f 	and.w	r2, r2, #31
 80035e8:	2101      	movs	r1, #1
 80035ea:	fa01 f202 	lsl.w	r2, r1, r2
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d082      	beq.n	80034fa <HAL_RCC_OscConfig+0xdce>
 80035f4:	e0cf      	b.n	8003796 <HAL_RCC_OscConfig+0x106a>
 80035f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80035fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003608:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	fa93 f2a3 	rbit	r2, r3
 8003612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003616:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800361a:	601a      	str	r2, [r3, #0]
  return result;
 800361c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003620:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003624:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003626:	fab3 f383 	clz	r3, r3
 800362a:	b2db      	uxtb	r3, r3
 800362c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003630:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	461a      	mov	r2, r3
 8003638:	2300      	movs	r3, #0
 800363a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7fe fbfa 	bl	8001e34 <HAL_GetTick>
 8003640:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003644:	e009      	b.n	800365a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003646:	f7fe fbf5 	bl	8001e34 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e09e      	b.n	8003798 <HAL_RCC_OscConfig+0x106c>
 800365a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003662:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003666:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	fa93 f2a3 	rbit	r2, r3
 8003676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800367e:	601a      	str	r2, [r3, #0]
  return result;
 8003680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003684:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003688:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800368a:	fab3 f383 	clz	r3, r3
 800368e:	b2db      	uxtb	r3, r3
 8003690:	095b      	lsrs	r3, r3, #5
 8003692:	b2db      	uxtb	r3, r3
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b01      	cmp	r3, #1
 800369c:	d104      	bne.n	80036a8 <HAL_RCC_OscConfig+0xf7c>
 800369e:	4b01      	ldr	r3, [pc, #4]	; (80036a4 <HAL_RCC_OscConfig+0xf78>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	e029      	b.n	80036f8 <HAL_RCC_OscConfig+0xfcc>
 80036a4:	40021000 	.word	0x40021000
 80036a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ac:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80036b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ba:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	fa93 f2a3 	rbit	r2, r3
 80036c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80036d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	fa93 f2a3 	rbit	r2, r3
 80036ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ee:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	4b2b      	ldr	r3, [pc, #172]	; (80037a4 <HAL_RCC_OscConfig+0x1078>)
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036fc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003700:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003704:	6011      	str	r1, [r2, #0]
 8003706:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800370a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	fa92 f1a2 	rbit	r1, r2
 8003714:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003718:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800371c:	6011      	str	r1, [r2, #0]
  return result;
 800371e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003722:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	fab2 f282 	clz	r2, r2
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	f042 0220 	orr.w	r2, r2, #32
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	f002 021f 	and.w	r2, r2, #31
 8003738:	2101      	movs	r1, #1
 800373a:	fa01 f202 	lsl.w	r2, r1, r2
 800373e:	4013      	ands	r3, r2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d180      	bne.n	8003646 <HAL_RCC_OscConfig+0xf1a>
 8003744:	e027      	b.n	8003796 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e01e      	b.n	8003798 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800375a:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <HAL_RCC_OscConfig+0x1078>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003762:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003766:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800376a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	429a      	cmp	r2, r3
 8003778:	d10b      	bne.n	8003792 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800377a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800377e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003786:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800378e:	429a      	cmp	r2, r3
 8003790:	d001      	beq.n	8003796 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40021000 	.word	0x40021000

080037a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b09e      	sub	sp, #120	; 0x78
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e162      	b.n	8003a86 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037c0:	4b90      	ldr	r3, [pc, #576]	; (8003a04 <HAL_RCC_ClockConfig+0x25c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d910      	bls.n	80037f0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ce:	4b8d      	ldr	r3, [pc, #564]	; (8003a04 <HAL_RCC_ClockConfig+0x25c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 0207 	bic.w	r2, r3, #7
 80037d6:	498b      	ldr	r1, [pc, #556]	; (8003a04 <HAL_RCC_ClockConfig+0x25c>)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	4313      	orrs	r3, r2
 80037dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037de:	4b89      	ldr	r3, [pc, #548]	; (8003a04 <HAL_RCC_ClockConfig+0x25c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e14a      	b.n	8003a86 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037fc:	4b82      	ldr	r3, [pc, #520]	; (8003a08 <HAL_RCC_ClockConfig+0x260>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	497f      	ldr	r1, [pc, #508]	; (8003a08 <HAL_RCC_ClockConfig+0x260>)
 800380a:	4313      	orrs	r3, r2
 800380c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 80dc 	beq.w	80039d4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d13c      	bne.n	800389e <HAL_RCC_ClockConfig+0xf6>
 8003824:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003828:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800382c:	fa93 f3a3 	rbit	r3, r3
 8003830:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003834:	fab3 f383 	clz	r3, r3
 8003838:	b2db      	uxtb	r3, r3
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	b2db      	uxtb	r3, r3
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b01      	cmp	r3, #1
 8003846:	d102      	bne.n	800384e <HAL_RCC_ClockConfig+0xa6>
 8003848:	4b6f      	ldr	r3, [pc, #444]	; (8003a08 <HAL_RCC_ClockConfig+0x260>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	e00f      	b.n	800386e <HAL_RCC_ClockConfig+0xc6>
 800384e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003852:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003854:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003856:	fa93 f3a3 	rbit	r3, r3
 800385a:	667b      	str	r3, [r7, #100]	; 0x64
 800385c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003860:	663b      	str	r3, [r7, #96]	; 0x60
 8003862:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003864:	fa93 f3a3 	rbit	r3, r3
 8003868:	65fb      	str	r3, [r7, #92]	; 0x5c
 800386a:	4b67      	ldr	r3, [pc, #412]	; (8003a08 <HAL_RCC_ClockConfig+0x260>)
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003872:	65ba      	str	r2, [r7, #88]	; 0x58
 8003874:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003876:	fa92 f2a2 	rbit	r2, r2
 800387a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800387c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800387e:	fab2 f282 	clz	r2, r2
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	f042 0220 	orr.w	r2, r2, #32
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	f002 021f 	and.w	r2, r2, #31
 800388e:	2101      	movs	r1, #1
 8003890:	fa01 f202 	lsl.w	r2, r1, r2
 8003894:	4013      	ands	r3, r2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d17b      	bne.n	8003992 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e0f3      	b.n	8003a86 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d13c      	bne.n	8003920 <HAL_RCC_ClockConfig+0x178>
 80038a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ae:	fa93 f3a3 	rbit	r3, r3
 80038b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80038b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b6:	fab3 f383 	clz	r3, r3
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	095b      	lsrs	r3, r3, #5
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d102      	bne.n	80038d0 <HAL_RCC_ClockConfig+0x128>
 80038ca:	4b4f      	ldr	r3, [pc, #316]	; (8003a08 <HAL_RCC_ClockConfig+0x260>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	e00f      	b.n	80038f0 <HAL_RCC_ClockConfig+0x148>
 80038d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038d8:	fa93 f3a3 	rbit	r3, r3
 80038dc:	647b      	str	r3, [r7, #68]	; 0x44
 80038de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038e2:	643b      	str	r3, [r7, #64]	; 0x40
 80038e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038e6:	fa93 f3a3 	rbit	r3, r3
 80038ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ec:	4b46      	ldr	r3, [pc, #280]	; (8003a08 <HAL_RCC_ClockConfig+0x260>)
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038f4:	63ba      	str	r2, [r7, #56]	; 0x38
 80038f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038f8:	fa92 f2a2 	rbit	r2, r2
 80038fc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80038fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003900:	fab2 f282 	clz	r2, r2
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	f042 0220 	orr.w	r2, r2, #32
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	f002 021f 	and.w	r2, r2, #31
 8003910:	2101      	movs	r1, #1
 8003912:	fa01 f202 	lsl.w	r2, r1, r2
 8003916:	4013      	ands	r3, r2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d13a      	bne.n	8003992 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0b2      	b.n	8003a86 <HAL_RCC_ClockConfig+0x2de>
 8003920:	2302      	movs	r3, #2
 8003922:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003926:	fa93 f3a3 	rbit	r3, r3
 800392a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392e:	fab3 f383 	clz	r3, r3
 8003932:	b2db      	uxtb	r3, r3
 8003934:	095b      	lsrs	r3, r3, #5
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b01      	cmp	r3, #1
 8003940:	d102      	bne.n	8003948 <HAL_RCC_ClockConfig+0x1a0>
 8003942:	4b31      	ldr	r3, [pc, #196]	; (8003a08 <HAL_RCC_ClockConfig+0x260>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	e00d      	b.n	8003964 <HAL_RCC_ClockConfig+0x1bc>
 8003948:	2302      	movs	r3, #2
 800394a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394e:	fa93 f3a3 	rbit	r3, r3
 8003952:	627b      	str	r3, [r7, #36]	; 0x24
 8003954:	2302      	movs	r3, #2
 8003956:	623b      	str	r3, [r7, #32]
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	fa93 f3a3 	rbit	r3, r3
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	4b29      	ldr	r3, [pc, #164]	; (8003a08 <HAL_RCC_ClockConfig+0x260>)
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	2202      	movs	r2, #2
 8003966:	61ba      	str	r2, [r7, #24]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	fa92 f2a2 	rbit	r2, r2
 800396e:	617a      	str	r2, [r7, #20]
  return result;
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	fab2 f282 	clz	r2, r2
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	f042 0220 	orr.w	r2, r2, #32
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	f002 021f 	and.w	r2, r2, #31
 8003982:	2101      	movs	r1, #1
 8003984:	fa01 f202 	lsl.w	r2, r1, r2
 8003988:	4013      	ands	r3, r2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e079      	b.n	8003a86 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003992:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <HAL_RCC_ClockConfig+0x260>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f023 0203 	bic.w	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	491a      	ldr	r1, [pc, #104]	; (8003a08 <HAL_RCC_ClockConfig+0x260>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039a4:	f7fe fa46 	bl	8001e34 <HAL_GetTick>
 80039a8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	e00a      	b.n	80039c2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ac:	f7fe fa42 	bl	8001e34 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e061      	b.n	8003a86 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c2:	4b11      	ldr	r3, [pc, #68]	; (8003a08 <HAL_RCC_ClockConfig+0x260>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f003 020c 	and.w	r2, r3, #12
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d1eb      	bne.n	80039ac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039d4:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <HAL_RCC_ClockConfig+0x25c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d214      	bcs.n	8003a0c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e2:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <HAL_RCC_ClockConfig+0x25c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f023 0207 	bic.w	r2, r3, #7
 80039ea:	4906      	ldr	r1, [pc, #24]	; (8003a04 <HAL_RCC_ClockConfig+0x25c>)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f2:	4b04      	ldr	r3, [pc, #16]	; (8003a04 <HAL_RCC_ClockConfig+0x25c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d005      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e040      	b.n	8003a86 <HAL_RCC_ClockConfig+0x2de>
 8003a04:	40022000 	.word	0x40022000
 8003a08:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a18:	4b1d      	ldr	r3, [pc, #116]	; (8003a90 <HAL_RCC_ClockConfig+0x2e8>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	491a      	ldr	r1, [pc, #104]	; (8003a90 <HAL_RCC_ClockConfig+0x2e8>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d009      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a36:	4b16      	ldr	r3, [pc, #88]	; (8003a90 <HAL_RCC_ClockConfig+0x2e8>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	4912      	ldr	r1, [pc, #72]	; (8003a90 <HAL_RCC_ClockConfig+0x2e8>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a4a:	f000 f829 	bl	8003aa0 <HAL_RCC_GetSysClockFreq>
 8003a4e:	4601      	mov	r1, r0
 8003a50:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <HAL_RCC_ClockConfig+0x2e8>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a58:	22f0      	movs	r2, #240	; 0xf0
 8003a5a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	fa92 f2a2 	rbit	r2, r2
 8003a62:	60fa      	str	r2, [r7, #12]
  return result;
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	fab2 f282 	clz	r2, r2
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	40d3      	lsrs	r3, r2
 8003a6e:	4a09      	ldr	r2, [pc, #36]	; (8003a94 <HAL_RCC_ClockConfig+0x2ec>)
 8003a70:	5cd3      	ldrb	r3, [r2, r3]
 8003a72:	fa21 f303 	lsr.w	r3, r1, r3
 8003a76:	4a08      	ldr	r2, [pc, #32]	; (8003a98 <HAL_RCC_ClockConfig+0x2f0>)
 8003a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a7a:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <HAL_RCC_ClockConfig+0x2f4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fe f994 	bl	8001dac <HAL_InitTick>
  
  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3778      	adds	r7, #120	; 0x78
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40021000 	.word	0x40021000
 8003a94:	08009558 	.word	0x08009558
 8003a98:	20000140 	.word	0x20000140
 8003a9c:	20000194 	.word	0x20000194

08003aa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b08b      	sub	sp, #44	; 0x2c
 8003aa4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61fb      	str	r3, [r7, #28]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61bb      	str	r3, [r7, #24]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003aba:	4b29      	ldr	r3, [pc, #164]	; (8003b60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d002      	beq.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x30>
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d003      	beq.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x36>
 8003ace:	e03c      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ad0:	4b24      	ldr	r3, [pc, #144]	; (8003b64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ad2:	623b      	str	r3, [r7, #32]
      break;
 8003ad4:	e03c      	b.n	8003b50 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003adc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003ae0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	fa92 f2a2 	rbit	r2, r2
 8003ae8:	607a      	str	r2, [r7, #4]
  return result;
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	fab2 f282 	clz	r2, r2
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	40d3      	lsrs	r3, r2
 8003af4:	4a1c      	ldr	r2, [pc, #112]	; (8003b68 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003af6:	5cd3      	ldrb	r3, [r2, r3]
 8003af8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003afa:	4b19      	ldr	r3, [pc, #100]	; (8003b60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	220f      	movs	r2, #15
 8003b04:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	fa92 f2a2 	rbit	r2, r2
 8003b0c:	60fa      	str	r2, [r7, #12]
  return result;
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	fab2 f282 	clz	r2, r2
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	40d3      	lsrs	r3, r2
 8003b18:	4a14      	ldr	r2, [pc, #80]	; (8003b6c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b1a:	5cd3      	ldrb	r3, [r2, r3]
 8003b1c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b28:	4a0e      	ldr	r2, [pc, #56]	; (8003b64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	fb02 f303 	mul.w	r3, r2, r3
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
 8003b38:	e004      	b.n	8003b44 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	4a0c      	ldr	r2, [pc, #48]	; (8003b70 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b3e:	fb02 f303 	mul.w	r3, r2, r3
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	623b      	str	r3, [r7, #32]
      break;
 8003b48:	e002      	b.n	8003b50 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b4a:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b4c:	623b      	str	r3, [r7, #32]
      break;
 8003b4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b50:	6a3b      	ldr	r3, [r7, #32]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	372c      	adds	r7, #44	; 0x2c
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000
 8003b64:	007a1200 	.word	0x007a1200
 8003b68:	08009568 	.word	0x08009568
 8003b6c:	08009578 	.word	0x08009578
 8003b70:	003d0900 	.word	0x003d0900

08003b74 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b092      	sub	sp, #72	; 0x48
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b84:	2300      	movs	r3, #0
 8003b86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 80d4 	beq.w	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b98:	4b4e      	ldr	r3, [pc, #312]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10e      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba4:	4b4b      	ldr	r3, [pc, #300]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	4a4a      	ldr	r2, [pc, #296]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bae:	61d3      	str	r3, [r2, #28]
 8003bb0:	4b48      	ldr	r3, [pc, #288]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb8:	60bb      	str	r3, [r7, #8]
 8003bba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc2:	4b45      	ldr	r3, [pc, #276]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d118      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bce:	4b42      	ldr	r3, [pc, #264]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a41      	ldr	r2, [pc, #260]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bda:	f7fe f92b 	bl	8001e34 <HAL_GetTick>
 8003bde:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be0:	e008      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003be2:	f7fe f927 	bl	8001e34 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b64      	cmp	r3, #100	; 0x64
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e169      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf4:	4b38      	ldr	r3, [pc, #224]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0f0      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c00:	4b34      	ldr	r3, [pc, #208]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c08:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 8084 	beq.w	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d07c      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c20:	4b2c      	ldr	r3, [pc, #176]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c32:	fa93 f3a3 	rbit	r3, r3
 8003c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c3a:	fab3 f383 	clz	r3, r3
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	461a      	mov	r2, r3
 8003c42:	4b26      	ldr	r3, [pc, #152]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	461a      	mov	r2, r3
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c56:	fa93 f3a3 	rbit	r3, r3
 8003c5a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c5e:	fab3 f383 	clz	r3, r3
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	461a      	mov	r2, r3
 8003c66:	4b1d      	ldr	r3, [pc, #116]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	2300      	movs	r3, #0
 8003c70:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c72:	4a18      	ldr	r2, [pc, #96]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c76:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d04b      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c82:	f7fe f8d7 	bl	8001e34 <HAL_GetTick>
 8003c86:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c88:	e00a      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c8a:	f7fe f8d3 	bl	8001e34 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e113      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca6:	fa93 f3a3 	rbit	r3, r3
 8003caa:	627b      	str	r3, [r7, #36]	; 0x24
 8003cac:	2302      	movs	r3, #2
 8003cae:	623b      	str	r3, [r7, #32]
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	fa93 f3a3 	rbit	r3, r3
 8003cb6:	61fb      	str	r3, [r7, #28]
  return result;
 8003cb8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cba:	fab3 f383 	clz	r3, r3
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	095b      	lsrs	r3, r3, #5
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	f043 0302 	orr.w	r3, r3, #2
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d108      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003cce:	4b01      	ldr	r3, [pc, #4]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	e00d      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	40007000 	.word	0x40007000
 8003cdc:	10908100 	.word	0x10908100
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	fa93 f3a3 	rbit	r3, r3
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	4b78      	ldr	r3, [pc, #480]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	613a      	str	r2, [r7, #16]
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	fa92 f2a2 	rbit	r2, r2
 8003cfa:	60fa      	str	r2, [r7, #12]
  return result;
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	fab2 f282 	clz	r2, r2
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	f002 021f 	and.w	r2, r2, #31
 8003d0e:	2101      	movs	r1, #1
 8003d10:	fa01 f202 	lsl.w	r2, r1, r2
 8003d14:	4013      	ands	r3, r2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0b7      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d1a:	4b6d      	ldr	r3, [pc, #436]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	496a      	ldr	r1, [pc, #424]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d105      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d34:	4b66      	ldr	r3, [pc, #408]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	4a65      	ldr	r2, [pc, #404]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d008      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d4c:	4b60      	ldr	r3, [pc, #384]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	f023 0203 	bic.w	r2, r3, #3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	495d      	ldr	r1, [pc, #372]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d008      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d6a:	4b59      	ldr	r3, [pc, #356]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	4956      	ldr	r1, [pc, #344]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d88:	4b51      	ldr	r3, [pc, #324]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	494e      	ldr	r1, [pc, #312]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d008      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003da6:	4b4a      	ldr	r3, [pc, #296]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	f023 0210 	bic.w	r2, r3, #16
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	4947      	ldr	r1, [pc, #284]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003dc4:	4b42      	ldr	r3, [pc, #264]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	493f      	ldr	r1, [pc, #252]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d008      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003de2:	4b3b      	ldr	r3, [pc, #236]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	f023 0220 	bic.w	r2, r3, #32
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	4938      	ldr	r1, [pc, #224]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d008      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e00:	4b33      	ldr	r3, [pc, #204]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	4930      	ldr	r1, [pc, #192]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0310 	and.w	r3, r3, #16
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d008      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e1e:	4b2c      	ldr	r3, [pc, #176]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	4929      	ldr	r1, [pc, #164]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d008      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e3c:	4b24      	ldr	r3, [pc, #144]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	4921      	ldr	r1, [pc, #132]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d008      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	491a      	ldr	r1, [pc, #104]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d008      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003e78:	4b15      	ldr	r3, [pc, #84]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	4912      	ldr	r1, [pc, #72]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d008      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e96:	4b0e      	ldr	r3, [pc, #56]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	490b      	ldr	r1, [pc, #44]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003eb4:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec0:	4903      	ldr	r1, [pc, #12]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3748      	adds	r7, #72	; 0x48
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40021000 	.word	0x40021000

08003ed4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e09d      	b.n	8004022 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d108      	bne.n	8003f00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ef6:	d009      	beq.n	8003f0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	61da      	str	r2, [r3, #28]
 8003efe:	e005      	b.n	8003f0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d106      	bne.n	8003f2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7fd fc5a 	bl	80017e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f4c:	d902      	bls.n	8003f54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	e002      	b.n	8003f5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003f62:	d007      	beq.n	8003f74 <HAL_SPI_Init+0xa0>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f6c:	d002      	beq.n	8003f74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb6:	ea42 0103 	orr.w	r1, r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	0c1b      	lsrs	r3, r3, #16
 8003fd0:	f003 0204 	and.w	r2, r3, #4
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	f003 0310 	and.w	r3, r3, #16
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ff0:	ea42 0103 	orr.w	r1, r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69da      	ldr	r2, [r3, #28]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004010:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b082      	sub	sp, #8
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e049      	b.n	80040d0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d106      	bne.n	8004056 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7fd fc07 	bl	8001864 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2202      	movs	r2, #2
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3304      	adds	r3, #4
 8004066:	4619      	mov	r1, r3
 8004068:	4610      	mov	r0, r2
 800406a:	f000 fa49 	bl	8004500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d109      	bne.n	80040fc <HAL_TIM_PWM_Start+0x24>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	bf14      	ite	ne
 80040f4:	2301      	movne	r3, #1
 80040f6:	2300      	moveq	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	e03c      	b.n	8004176 <HAL_TIM_PWM_Start+0x9e>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d109      	bne.n	8004116 <HAL_TIM_PWM_Start+0x3e>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b01      	cmp	r3, #1
 800410c:	bf14      	ite	ne
 800410e:	2301      	movne	r3, #1
 8004110:	2300      	moveq	r3, #0
 8004112:	b2db      	uxtb	r3, r3
 8004114:	e02f      	b.n	8004176 <HAL_TIM_PWM_Start+0x9e>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b08      	cmp	r3, #8
 800411a:	d109      	bne.n	8004130 <HAL_TIM_PWM_Start+0x58>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b01      	cmp	r3, #1
 8004126:	bf14      	ite	ne
 8004128:	2301      	movne	r3, #1
 800412a:	2300      	moveq	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	e022      	b.n	8004176 <HAL_TIM_PWM_Start+0x9e>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2b0c      	cmp	r3, #12
 8004134:	d109      	bne.n	800414a <HAL_TIM_PWM_Start+0x72>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b01      	cmp	r3, #1
 8004140:	bf14      	ite	ne
 8004142:	2301      	movne	r3, #1
 8004144:	2300      	moveq	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	e015      	b.n	8004176 <HAL_TIM_PWM_Start+0x9e>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b10      	cmp	r3, #16
 800414e:	d109      	bne.n	8004164 <HAL_TIM_PWM_Start+0x8c>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b01      	cmp	r3, #1
 800415a:	bf14      	ite	ne
 800415c:	2301      	movne	r3, #1
 800415e:	2300      	moveq	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	e008      	b.n	8004176 <HAL_TIM_PWM_Start+0x9e>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	bf14      	ite	ne
 8004170:	2301      	movne	r3, #1
 8004172:	2300      	moveq	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e097      	b.n	80042ae <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d104      	bne.n	800418e <HAL_TIM_PWM_Start+0xb6>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800418c:	e023      	b.n	80041d6 <HAL_TIM_PWM_Start+0xfe>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b04      	cmp	r3, #4
 8004192:	d104      	bne.n	800419e <HAL_TIM_PWM_Start+0xc6>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800419c:	e01b      	b.n	80041d6 <HAL_TIM_PWM_Start+0xfe>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d104      	bne.n	80041ae <HAL_TIM_PWM_Start+0xd6>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041ac:	e013      	b.n	80041d6 <HAL_TIM_PWM_Start+0xfe>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b0c      	cmp	r3, #12
 80041b2:	d104      	bne.n	80041be <HAL_TIM_PWM_Start+0xe6>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041bc:	e00b      	b.n	80041d6 <HAL_TIM_PWM_Start+0xfe>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b10      	cmp	r3, #16
 80041c2:	d104      	bne.n	80041ce <HAL_TIM_PWM_Start+0xf6>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041cc:	e003      	b.n	80041d6 <HAL_TIM_PWM_Start+0xfe>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2202      	movs	r2, #2
 80041d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2201      	movs	r2, #1
 80041dc:	6839      	ldr	r1, [r7, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fcf4 	bl	8004bcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a33      	ldr	r2, [pc, #204]	; (80042b8 <HAL_TIM_PWM_Start+0x1e0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d013      	beq.n	8004216 <HAL_TIM_PWM_Start+0x13e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a32      	ldr	r2, [pc, #200]	; (80042bc <HAL_TIM_PWM_Start+0x1e4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d00e      	beq.n	8004216 <HAL_TIM_PWM_Start+0x13e>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a30      	ldr	r2, [pc, #192]	; (80042c0 <HAL_TIM_PWM_Start+0x1e8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d009      	beq.n	8004216 <HAL_TIM_PWM_Start+0x13e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a2f      	ldr	r2, [pc, #188]	; (80042c4 <HAL_TIM_PWM_Start+0x1ec>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d004      	beq.n	8004216 <HAL_TIM_PWM_Start+0x13e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a2d      	ldr	r2, [pc, #180]	; (80042c8 <HAL_TIM_PWM_Start+0x1f0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d101      	bne.n	800421a <HAL_TIM_PWM_Start+0x142>
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <HAL_TIM_PWM_Start+0x144>
 800421a:	2300      	movs	r3, #0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d007      	beq.n	8004230 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800422e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a20      	ldr	r2, [pc, #128]	; (80042b8 <HAL_TIM_PWM_Start+0x1e0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d018      	beq.n	800426c <HAL_TIM_PWM_Start+0x194>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004242:	d013      	beq.n	800426c <HAL_TIM_PWM_Start+0x194>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a20      	ldr	r2, [pc, #128]	; (80042cc <HAL_TIM_PWM_Start+0x1f4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00e      	beq.n	800426c <HAL_TIM_PWM_Start+0x194>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a1f      	ldr	r2, [pc, #124]	; (80042d0 <HAL_TIM_PWM_Start+0x1f8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d009      	beq.n	800426c <HAL_TIM_PWM_Start+0x194>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a17      	ldr	r2, [pc, #92]	; (80042bc <HAL_TIM_PWM_Start+0x1e4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d004      	beq.n	800426c <HAL_TIM_PWM_Start+0x194>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a16      	ldr	r2, [pc, #88]	; (80042c0 <HAL_TIM_PWM_Start+0x1e8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d115      	bne.n	8004298 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	4b18      	ldr	r3, [pc, #96]	; (80042d4 <HAL_TIM_PWM_Start+0x1fc>)
 8004274:	4013      	ands	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b06      	cmp	r3, #6
 800427c:	d015      	beq.n	80042aa <HAL_TIM_PWM_Start+0x1d2>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004284:	d011      	beq.n	80042aa <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f042 0201 	orr.w	r2, r2, #1
 8004294:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004296:	e008      	b.n	80042aa <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0201 	orr.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	e000      	b.n	80042ac <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40012c00 	.word	0x40012c00
 80042bc:	40013400 	.word	0x40013400
 80042c0:	40014000 	.word	0x40014000
 80042c4:	40014400 	.word	0x40014400
 80042c8:	40014800 	.word	0x40014800
 80042cc:	40000400 	.word	0x40000400
 80042d0:	40000800 	.word	0x40000800
 80042d4:	00010007 	.word	0x00010007

080042d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d101      	bne.n	80042f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042f2:	2302      	movs	r3, #2
 80042f4:	e0ff      	b.n	80044f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b14      	cmp	r3, #20
 8004302:	f200 80f0 	bhi.w	80044e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004306:	a201      	add	r2, pc, #4	; (adr r2, 800430c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430c:	08004361 	.word	0x08004361
 8004310:	080044e7 	.word	0x080044e7
 8004314:	080044e7 	.word	0x080044e7
 8004318:	080044e7 	.word	0x080044e7
 800431c:	080043a1 	.word	0x080043a1
 8004320:	080044e7 	.word	0x080044e7
 8004324:	080044e7 	.word	0x080044e7
 8004328:	080044e7 	.word	0x080044e7
 800432c:	080043e3 	.word	0x080043e3
 8004330:	080044e7 	.word	0x080044e7
 8004334:	080044e7 	.word	0x080044e7
 8004338:	080044e7 	.word	0x080044e7
 800433c:	08004423 	.word	0x08004423
 8004340:	080044e7 	.word	0x080044e7
 8004344:	080044e7 	.word	0x080044e7
 8004348:	080044e7 	.word	0x080044e7
 800434c:	08004465 	.word	0x08004465
 8004350:	080044e7 	.word	0x080044e7
 8004354:	080044e7 	.word	0x080044e7
 8004358:	080044e7 	.word	0x080044e7
 800435c:	080044a5 	.word	0x080044a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68b9      	ldr	r1, [r7, #8]
 8004366:	4618      	mov	r0, r3
 8004368:	f000 f95a 	bl	8004620 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699a      	ldr	r2, [r3, #24]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0208 	orr.w	r2, r2, #8
 800437a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699a      	ldr	r2, [r3, #24]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0204 	bic.w	r2, r2, #4
 800438a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6999      	ldr	r1, [r3, #24]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	691a      	ldr	r2, [r3, #16]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	619a      	str	r2, [r3, #24]
      break;
 800439e:	e0a5      	b.n	80044ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68b9      	ldr	r1, [r7, #8]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 f9ca 	bl	8004740 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699a      	ldr	r2, [r3, #24]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699a      	ldr	r2, [r3, #24]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6999      	ldr	r1, [r3, #24]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	021a      	lsls	r2, r3, #8
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	619a      	str	r2, [r3, #24]
      break;
 80043e0:	e084      	b.n	80044ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68b9      	ldr	r1, [r7, #8]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 fa33 	bl	8004854 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69da      	ldr	r2, [r3, #28]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f042 0208 	orr.w	r2, r2, #8
 80043fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69da      	ldr	r2, [r3, #28]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0204 	bic.w	r2, r2, #4
 800440c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	69d9      	ldr	r1, [r3, #28]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	691a      	ldr	r2, [r3, #16]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	61da      	str	r2, [r3, #28]
      break;
 8004420:	e064      	b.n	80044ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68b9      	ldr	r1, [r7, #8]
 8004428:	4618      	mov	r0, r3
 800442a:	f000 fa9b 	bl	8004964 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	69da      	ldr	r2, [r3, #28]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800443c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69da      	ldr	r2, [r3, #28]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800444c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69d9      	ldr	r1, [r3, #28]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	021a      	lsls	r2, r3, #8
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	61da      	str	r2, [r3, #28]
      break;
 8004462:	e043      	b.n	80044ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68b9      	ldr	r1, [r7, #8]
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fae4 	bl	8004a38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0208 	orr.w	r2, r2, #8
 800447e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0204 	bic.w	r2, r2, #4
 800448e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	691a      	ldr	r2, [r3, #16]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044a2:	e023      	b.n	80044ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68b9      	ldr	r1, [r7, #8]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fb28 	bl	8004b00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	021a      	lsls	r2, r3, #8
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044e4:	e002      	b.n	80044ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	75fb      	strb	r3, [r7, #23]
      break;
 80044ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop

08004500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a3c      	ldr	r2, [pc, #240]	; (8004604 <TIM_Base_SetConfig+0x104>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d00f      	beq.n	8004538 <TIM_Base_SetConfig+0x38>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800451e:	d00b      	beq.n	8004538 <TIM_Base_SetConfig+0x38>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a39      	ldr	r2, [pc, #228]	; (8004608 <TIM_Base_SetConfig+0x108>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d007      	beq.n	8004538 <TIM_Base_SetConfig+0x38>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a38      	ldr	r2, [pc, #224]	; (800460c <TIM_Base_SetConfig+0x10c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d003      	beq.n	8004538 <TIM_Base_SetConfig+0x38>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a37      	ldr	r2, [pc, #220]	; (8004610 <TIM_Base_SetConfig+0x110>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d108      	bne.n	800454a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a2d      	ldr	r2, [pc, #180]	; (8004604 <TIM_Base_SetConfig+0x104>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d01b      	beq.n	800458a <TIM_Base_SetConfig+0x8a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004558:	d017      	beq.n	800458a <TIM_Base_SetConfig+0x8a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a2a      	ldr	r2, [pc, #168]	; (8004608 <TIM_Base_SetConfig+0x108>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d013      	beq.n	800458a <TIM_Base_SetConfig+0x8a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a29      	ldr	r2, [pc, #164]	; (800460c <TIM_Base_SetConfig+0x10c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00f      	beq.n	800458a <TIM_Base_SetConfig+0x8a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a28      	ldr	r2, [pc, #160]	; (8004610 <TIM_Base_SetConfig+0x110>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00b      	beq.n	800458a <TIM_Base_SetConfig+0x8a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a27      	ldr	r2, [pc, #156]	; (8004614 <TIM_Base_SetConfig+0x114>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d007      	beq.n	800458a <TIM_Base_SetConfig+0x8a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a26      	ldr	r2, [pc, #152]	; (8004618 <TIM_Base_SetConfig+0x118>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d003      	beq.n	800458a <TIM_Base_SetConfig+0x8a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a25      	ldr	r2, [pc, #148]	; (800461c <TIM_Base_SetConfig+0x11c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d108      	bne.n	800459c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a10      	ldr	r2, [pc, #64]	; (8004604 <TIM_Base_SetConfig+0x104>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d00f      	beq.n	80045e8 <TIM_Base_SetConfig+0xe8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a11      	ldr	r2, [pc, #68]	; (8004610 <TIM_Base_SetConfig+0x110>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d00b      	beq.n	80045e8 <TIM_Base_SetConfig+0xe8>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a10      	ldr	r2, [pc, #64]	; (8004614 <TIM_Base_SetConfig+0x114>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d007      	beq.n	80045e8 <TIM_Base_SetConfig+0xe8>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a0f      	ldr	r2, [pc, #60]	; (8004618 <TIM_Base_SetConfig+0x118>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d003      	beq.n	80045e8 <TIM_Base_SetConfig+0xe8>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a0e      	ldr	r2, [pc, #56]	; (800461c <TIM_Base_SetConfig+0x11c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d103      	bne.n	80045f0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	615a      	str	r2, [r3, #20]
}
 80045f6:	bf00      	nop
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40012c00 	.word	0x40012c00
 8004608:	40000400 	.word	0x40000400
 800460c:	40000800 	.word	0x40000800
 8004610:	40013400 	.word	0x40013400
 8004614:	40014000 	.word	0x40014000
 8004618:	40014400 	.word	0x40014400
 800461c:	40014800 	.word	0x40014800

08004620 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	f023 0201 	bic.w	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800464e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0303 	bic.w	r3, r3, #3
 800465a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f023 0302 	bic.w	r3, r3, #2
 800466c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a2c      	ldr	r2, [pc, #176]	; (800472c <TIM_OC1_SetConfig+0x10c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00f      	beq.n	80046a0 <TIM_OC1_SetConfig+0x80>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a2b      	ldr	r2, [pc, #172]	; (8004730 <TIM_OC1_SetConfig+0x110>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d00b      	beq.n	80046a0 <TIM_OC1_SetConfig+0x80>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a2a      	ldr	r2, [pc, #168]	; (8004734 <TIM_OC1_SetConfig+0x114>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d007      	beq.n	80046a0 <TIM_OC1_SetConfig+0x80>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a29      	ldr	r2, [pc, #164]	; (8004738 <TIM_OC1_SetConfig+0x118>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d003      	beq.n	80046a0 <TIM_OC1_SetConfig+0x80>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a28      	ldr	r2, [pc, #160]	; (800473c <TIM_OC1_SetConfig+0x11c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d10c      	bne.n	80046ba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f023 0308 	bic.w	r3, r3, #8
 80046a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f023 0304 	bic.w	r3, r3, #4
 80046b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a1b      	ldr	r2, [pc, #108]	; (800472c <TIM_OC1_SetConfig+0x10c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d00f      	beq.n	80046e2 <TIM_OC1_SetConfig+0xc2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a1a      	ldr	r2, [pc, #104]	; (8004730 <TIM_OC1_SetConfig+0x110>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00b      	beq.n	80046e2 <TIM_OC1_SetConfig+0xc2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a19      	ldr	r2, [pc, #100]	; (8004734 <TIM_OC1_SetConfig+0x114>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d007      	beq.n	80046e2 <TIM_OC1_SetConfig+0xc2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a18      	ldr	r2, [pc, #96]	; (8004738 <TIM_OC1_SetConfig+0x118>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d003      	beq.n	80046e2 <TIM_OC1_SetConfig+0xc2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a17      	ldr	r2, [pc, #92]	; (800473c <TIM_OC1_SetConfig+0x11c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d111      	bne.n	8004706 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	621a      	str	r2, [r3, #32]
}
 8004720:	bf00      	nop
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	40012c00 	.word	0x40012c00
 8004730:	40013400 	.word	0x40013400
 8004734:	40014000 	.word	0x40014000
 8004738:	40014400 	.word	0x40014400
 800473c:	40014800 	.word	0x40014800

08004740 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	f023 0210 	bic.w	r2, r3, #16
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800476e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800477a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	021b      	lsls	r3, r3, #8
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	4313      	orrs	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f023 0320 	bic.w	r3, r3, #32
 800478e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	4313      	orrs	r3, r2
 800479a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a28      	ldr	r2, [pc, #160]	; (8004840 <TIM_OC2_SetConfig+0x100>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d003      	beq.n	80047ac <TIM_OC2_SetConfig+0x6c>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a27      	ldr	r2, [pc, #156]	; (8004844 <TIM_OC2_SetConfig+0x104>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d10d      	bne.n	80047c8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	4313      	orrs	r3, r2
 80047be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a1d      	ldr	r2, [pc, #116]	; (8004840 <TIM_OC2_SetConfig+0x100>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d00f      	beq.n	80047f0 <TIM_OC2_SetConfig+0xb0>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a1c      	ldr	r2, [pc, #112]	; (8004844 <TIM_OC2_SetConfig+0x104>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00b      	beq.n	80047f0 <TIM_OC2_SetConfig+0xb0>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a1b      	ldr	r2, [pc, #108]	; (8004848 <TIM_OC2_SetConfig+0x108>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d007      	beq.n	80047f0 <TIM_OC2_SetConfig+0xb0>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a1a      	ldr	r2, [pc, #104]	; (800484c <TIM_OC2_SetConfig+0x10c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d003      	beq.n	80047f0 <TIM_OC2_SetConfig+0xb0>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a19      	ldr	r2, [pc, #100]	; (8004850 <TIM_OC2_SetConfig+0x110>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d113      	bne.n	8004818 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047f6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047fe:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	621a      	str	r2, [r3, #32]
}
 8004832:	bf00      	nop
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	40012c00 	.word	0x40012c00
 8004844:	40013400 	.word	0x40013400
 8004848:	40014000 	.word	0x40014000
 800484c:	40014400 	.word	0x40014400
 8004850:	40014800 	.word	0x40014800

08004854 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0303 	bic.w	r3, r3, #3
 800488e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	4313      	orrs	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	021b      	lsls	r3, r3, #8
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a27      	ldr	r2, [pc, #156]	; (8004950 <TIM_OC3_SetConfig+0xfc>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d003      	beq.n	80048be <TIM_OC3_SetConfig+0x6a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a26      	ldr	r2, [pc, #152]	; (8004954 <TIM_OC3_SetConfig+0x100>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d10d      	bne.n	80048da <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048d8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a1c      	ldr	r2, [pc, #112]	; (8004950 <TIM_OC3_SetConfig+0xfc>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d00f      	beq.n	8004902 <TIM_OC3_SetConfig+0xae>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a1b      	ldr	r2, [pc, #108]	; (8004954 <TIM_OC3_SetConfig+0x100>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d00b      	beq.n	8004902 <TIM_OC3_SetConfig+0xae>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a1a      	ldr	r2, [pc, #104]	; (8004958 <TIM_OC3_SetConfig+0x104>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d007      	beq.n	8004902 <TIM_OC3_SetConfig+0xae>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a19      	ldr	r2, [pc, #100]	; (800495c <TIM_OC3_SetConfig+0x108>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d003      	beq.n	8004902 <TIM_OC3_SetConfig+0xae>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a18      	ldr	r2, [pc, #96]	; (8004960 <TIM_OC3_SetConfig+0x10c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d113      	bne.n	800492a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	011b      	lsls	r3, r3, #4
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	4313      	orrs	r3, r2
 800491c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	621a      	str	r2, [r3, #32]
}
 8004944:	bf00      	nop
 8004946:	371c      	adds	r7, #28
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	40012c00 	.word	0x40012c00
 8004954:	40013400 	.word	0x40013400
 8004958:	40014000 	.word	0x40014000
 800495c:	40014400 	.word	0x40014400
 8004960:	40014800 	.word	0x40014800

08004964 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800499e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	021b      	lsls	r3, r3, #8
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	031b      	lsls	r3, r3, #12
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a18      	ldr	r2, [pc, #96]	; (8004a24 <TIM_OC4_SetConfig+0xc0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d00f      	beq.n	80049e8 <TIM_OC4_SetConfig+0x84>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a17      	ldr	r2, [pc, #92]	; (8004a28 <TIM_OC4_SetConfig+0xc4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00b      	beq.n	80049e8 <TIM_OC4_SetConfig+0x84>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a16      	ldr	r2, [pc, #88]	; (8004a2c <TIM_OC4_SetConfig+0xc8>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d007      	beq.n	80049e8 <TIM_OC4_SetConfig+0x84>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a15      	ldr	r2, [pc, #84]	; (8004a30 <TIM_OC4_SetConfig+0xcc>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d003      	beq.n	80049e8 <TIM_OC4_SetConfig+0x84>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a14      	ldr	r2, [pc, #80]	; (8004a34 <TIM_OC4_SetConfig+0xd0>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d109      	bne.n	80049fc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	019b      	lsls	r3, r3, #6
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	621a      	str	r2, [r3, #32]
}
 8004a16:	bf00      	nop
 8004a18:	371c      	adds	r7, #28
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	40012c00 	.word	0x40012c00
 8004a28:	40013400 	.word	0x40013400
 8004a2c:	40014000 	.word	0x40014000
 8004a30:	40014400 	.word	0x40014400
 8004a34:	40014800 	.word	0x40014800

08004a38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004a7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	041b      	lsls	r3, r3, #16
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a17      	ldr	r2, [pc, #92]	; (8004aec <TIM_OC5_SetConfig+0xb4>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00f      	beq.n	8004ab2 <TIM_OC5_SetConfig+0x7a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a16      	ldr	r2, [pc, #88]	; (8004af0 <TIM_OC5_SetConfig+0xb8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00b      	beq.n	8004ab2 <TIM_OC5_SetConfig+0x7a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a15      	ldr	r2, [pc, #84]	; (8004af4 <TIM_OC5_SetConfig+0xbc>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d007      	beq.n	8004ab2 <TIM_OC5_SetConfig+0x7a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a14      	ldr	r2, [pc, #80]	; (8004af8 <TIM_OC5_SetConfig+0xc0>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d003      	beq.n	8004ab2 <TIM_OC5_SetConfig+0x7a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a13      	ldr	r2, [pc, #76]	; (8004afc <TIM_OC5_SetConfig+0xc4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d109      	bne.n	8004ac6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	021b      	lsls	r3, r3, #8
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	621a      	str	r2, [r3, #32]
}
 8004ae0:	bf00      	nop
 8004ae2:	371c      	adds	r7, #28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	40012c00 	.word	0x40012c00
 8004af0:	40013400 	.word	0x40013400
 8004af4:	40014000 	.word	0x40014000
 8004af8:	40014400 	.word	0x40014400
 8004afc:	40014800 	.word	0x40014800

08004b00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	021b      	lsls	r3, r3, #8
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	051b      	lsls	r3, r3, #20
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a18      	ldr	r2, [pc, #96]	; (8004bb8 <TIM_OC6_SetConfig+0xb8>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00f      	beq.n	8004b7c <TIM_OC6_SetConfig+0x7c>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a17      	ldr	r2, [pc, #92]	; (8004bbc <TIM_OC6_SetConfig+0xbc>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00b      	beq.n	8004b7c <TIM_OC6_SetConfig+0x7c>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a16      	ldr	r2, [pc, #88]	; (8004bc0 <TIM_OC6_SetConfig+0xc0>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d007      	beq.n	8004b7c <TIM_OC6_SetConfig+0x7c>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a15      	ldr	r2, [pc, #84]	; (8004bc4 <TIM_OC6_SetConfig+0xc4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d003      	beq.n	8004b7c <TIM_OC6_SetConfig+0x7c>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a14      	ldr	r2, [pc, #80]	; (8004bc8 <TIM_OC6_SetConfig+0xc8>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d109      	bne.n	8004b90 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	029b      	lsls	r3, r3, #10
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	621a      	str	r2, [r3, #32]
}
 8004baa:	bf00      	nop
 8004bac:	371c      	adds	r7, #28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40012c00 	.word	0x40012c00
 8004bbc:	40013400 	.word	0x40013400
 8004bc0:	40014000 	.word	0x40014000
 8004bc4:	40014400 	.word	0x40014400
 8004bc8:	40014800 	.word	0x40014800

08004bcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f003 031f 	and.w	r3, r3, #31
 8004bde:	2201      	movs	r2, #1
 8004be0:	fa02 f303 	lsl.w	r3, r2, r3
 8004be4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a1a      	ldr	r2, [r3, #32]
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	43db      	mvns	r3, r3
 8004bee:	401a      	ands	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a1a      	ldr	r2, [r3, #32]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f003 031f 	and.w	r3, r3, #31
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	fa01 f303 	lsl.w	r3, r1, r3
 8004c04:	431a      	orrs	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	621a      	str	r2, [r3, #32]
}
 8004c0a:	bf00      	nop
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
	...

08004c18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d101      	bne.n	8004c30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	e063      	b.n	8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a2b      	ldr	r2, [pc, #172]	; (8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d004      	beq.n	8004c64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a2a      	ldr	r2, [pc, #168]	; (8004d08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d108      	bne.n	8004c76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a1b      	ldr	r2, [pc, #108]	; (8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d018      	beq.n	8004ccc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca2:	d013      	beq.n	8004ccc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a18      	ldr	r2, [pc, #96]	; (8004d0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00e      	beq.n	8004ccc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a17      	ldr	r2, [pc, #92]	; (8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d009      	beq.n	8004ccc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a12      	ldr	r2, [pc, #72]	; (8004d08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d004      	beq.n	8004ccc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a13      	ldr	r2, [pc, #76]	; (8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d10c      	bne.n	8004ce6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	40012c00 	.word	0x40012c00
 8004d08:	40013400 	.word	0x40013400
 8004d0c:	40000400 	.word	0x40000400
 8004d10:	40000800 	.word	0x40000800
 8004d14:	40014000 	.word	0x40014000

08004d18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d20:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004d24:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	43db      	mvns	r3, r3
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	4013      	ands	r3, r2
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d4e:	b084      	sub	sp, #16
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	f107 0014 	add.w	r0, r7, #20
 8004d5c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	b004      	add	sp, #16
 8004d8e:	4770      	bx	lr

08004d90 <__cvt>:
 8004d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d94:	ec55 4b10 	vmov	r4, r5, d0
 8004d98:	2d00      	cmp	r5, #0
 8004d9a:	460e      	mov	r6, r1
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	462b      	mov	r3, r5
 8004da0:	bfbb      	ittet	lt
 8004da2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004da6:	461d      	movlt	r5, r3
 8004da8:	2300      	movge	r3, #0
 8004daa:	232d      	movlt	r3, #45	; 0x2d
 8004dac:	700b      	strb	r3, [r1, #0]
 8004dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004db0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004db4:	4691      	mov	r9, r2
 8004db6:	f023 0820 	bic.w	r8, r3, #32
 8004dba:	bfbc      	itt	lt
 8004dbc:	4622      	movlt	r2, r4
 8004dbe:	4614      	movlt	r4, r2
 8004dc0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004dc4:	d005      	beq.n	8004dd2 <__cvt+0x42>
 8004dc6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004dca:	d100      	bne.n	8004dce <__cvt+0x3e>
 8004dcc:	3601      	adds	r6, #1
 8004dce:	2102      	movs	r1, #2
 8004dd0:	e000      	b.n	8004dd4 <__cvt+0x44>
 8004dd2:	2103      	movs	r1, #3
 8004dd4:	ab03      	add	r3, sp, #12
 8004dd6:	9301      	str	r3, [sp, #4]
 8004dd8:	ab02      	add	r3, sp, #8
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	ec45 4b10 	vmov	d0, r4, r5
 8004de0:	4653      	mov	r3, sl
 8004de2:	4632      	mov	r2, r6
 8004de4:	f001 f880 	bl	8005ee8 <_dtoa_r>
 8004de8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004dec:	4607      	mov	r7, r0
 8004dee:	d102      	bne.n	8004df6 <__cvt+0x66>
 8004df0:	f019 0f01 	tst.w	r9, #1
 8004df4:	d022      	beq.n	8004e3c <__cvt+0xac>
 8004df6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004dfa:	eb07 0906 	add.w	r9, r7, r6
 8004dfe:	d110      	bne.n	8004e22 <__cvt+0x92>
 8004e00:	783b      	ldrb	r3, [r7, #0]
 8004e02:	2b30      	cmp	r3, #48	; 0x30
 8004e04:	d10a      	bne.n	8004e1c <__cvt+0x8c>
 8004e06:	2200      	movs	r2, #0
 8004e08:	2300      	movs	r3, #0
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	f7fb fe5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e12:	b918      	cbnz	r0, 8004e1c <__cvt+0x8c>
 8004e14:	f1c6 0601 	rsb	r6, r6, #1
 8004e18:	f8ca 6000 	str.w	r6, [sl]
 8004e1c:	f8da 3000 	ldr.w	r3, [sl]
 8004e20:	4499      	add	r9, r3
 8004e22:	2200      	movs	r2, #0
 8004e24:	2300      	movs	r3, #0
 8004e26:	4620      	mov	r0, r4
 8004e28:	4629      	mov	r1, r5
 8004e2a:	f7fb fe4d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e2e:	b108      	cbz	r0, 8004e34 <__cvt+0xa4>
 8004e30:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e34:	2230      	movs	r2, #48	; 0x30
 8004e36:	9b03      	ldr	r3, [sp, #12]
 8004e38:	454b      	cmp	r3, r9
 8004e3a:	d307      	bcc.n	8004e4c <__cvt+0xbc>
 8004e3c:	9b03      	ldr	r3, [sp, #12]
 8004e3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e40:	1bdb      	subs	r3, r3, r7
 8004e42:	4638      	mov	r0, r7
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	b004      	add	sp, #16
 8004e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e4c:	1c59      	adds	r1, r3, #1
 8004e4e:	9103      	str	r1, [sp, #12]
 8004e50:	701a      	strb	r2, [r3, #0]
 8004e52:	e7f0      	b.n	8004e36 <__cvt+0xa6>

08004e54 <__exponent>:
 8004e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e56:	4603      	mov	r3, r0
 8004e58:	2900      	cmp	r1, #0
 8004e5a:	bfb8      	it	lt
 8004e5c:	4249      	neglt	r1, r1
 8004e5e:	f803 2b02 	strb.w	r2, [r3], #2
 8004e62:	bfb4      	ite	lt
 8004e64:	222d      	movlt	r2, #45	; 0x2d
 8004e66:	222b      	movge	r2, #43	; 0x2b
 8004e68:	2909      	cmp	r1, #9
 8004e6a:	7042      	strb	r2, [r0, #1]
 8004e6c:	dd2a      	ble.n	8004ec4 <__exponent+0x70>
 8004e6e:	f10d 0207 	add.w	r2, sp, #7
 8004e72:	4617      	mov	r7, r2
 8004e74:	260a      	movs	r6, #10
 8004e76:	4694      	mov	ip, r2
 8004e78:	fb91 f5f6 	sdiv	r5, r1, r6
 8004e7c:	fb06 1415 	mls	r4, r6, r5, r1
 8004e80:	3430      	adds	r4, #48	; 0x30
 8004e82:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004e86:	460c      	mov	r4, r1
 8004e88:	2c63      	cmp	r4, #99	; 0x63
 8004e8a:	f102 32ff 	add.w	r2, r2, #4294967295
 8004e8e:	4629      	mov	r1, r5
 8004e90:	dcf1      	bgt.n	8004e76 <__exponent+0x22>
 8004e92:	3130      	adds	r1, #48	; 0x30
 8004e94:	f1ac 0402 	sub.w	r4, ip, #2
 8004e98:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004e9c:	1c41      	adds	r1, r0, #1
 8004e9e:	4622      	mov	r2, r4
 8004ea0:	42ba      	cmp	r2, r7
 8004ea2:	d30a      	bcc.n	8004eba <__exponent+0x66>
 8004ea4:	f10d 0209 	add.w	r2, sp, #9
 8004ea8:	eba2 020c 	sub.w	r2, r2, ip
 8004eac:	42bc      	cmp	r4, r7
 8004eae:	bf88      	it	hi
 8004eb0:	2200      	movhi	r2, #0
 8004eb2:	4413      	add	r3, r2
 8004eb4:	1a18      	subs	r0, r3, r0
 8004eb6:	b003      	add	sp, #12
 8004eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eba:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004ebe:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004ec2:	e7ed      	b.n	8004ea0 <__exponent+0x4c>
 8004ec4:	2330      	movs	r3, #48	; 0x30
 8004ec6:	3130      	adds	r1, #48	; 0x30
 8004ec8:	7083      	strb	r3, [r0, #2]
 8004eca:	70c1      	strb	r1, [r0, #3]
 8004ecc:	1d03      	adds	r3, r0, #4
 8004ece:	e7f1      	b.n	8004eb4 <__exponent+0x60>

08004ed0 <_printf_float>:
 8004ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed4:	ed2d 8b02 	vpush	{d8}
 8004ed8:	b08d      	sub	sp, #52	; 0x34
 8004eda:	460c      	mov	r4, r1
 8004edc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004ee0:	4616      	mov	r6, r2
 8004ee2:	461f      	mov	r7, r3
 8004ee4:	4605      	mov	r5, r0
 8004ee6:	f000 fef7 	bl	8005cd8 <_localeconv_r>
 8004eea:	f8d0 a000 	ldr.w	sl, [r0]
 8004eee:	4650      	mov	r0, sl
 8004ef0:	f7fb f9be 	bl	8000270 <strlen>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	930a      	str	r3, [sp, #40]	; 0x28
 8004ef8:	6823      	ldr	r3, [r4, #0]
 8004efa:	9305      	str	r3, [sp, #20]
 8004efc:	f8d8 3000 	ldr.w	r3, [r8]
 8004f00:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004f04:	3307      	adds	r3, #7
 8004f06:	f023 0307 	bic.w	r3, r3, #7
 8004f0a:	f103 0208 	add.w	r2, r3, #8
 8004f0e:	f8c8 2000 	str.w	r2, [r8]
 8004f12:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f1a:	9307      	str	r3, [sp, #28]
 8004f1c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f20:	ee08 0a10 	vmov	s16, r0
 8004f24:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004f28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f2c:	4b9e      	ldr	r3, [pc, #632]	; (80051a8 <_printf_float+0x2d8>)
 8004f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f32:	f7fb fdfb 	bl	8000b2c <__aeabi_dcmpun>
 8004f36:	bb88      	cbnz	r0, 8004f9c <_printf_float+0xcc>
 8004f38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f3c:	4b9a      	ldr	r3, [pc, #616]	; (80051a8 <_printf_float+0x2d8>)
 8004f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f42:	f7fb fdd5 	bl	8000af0 <__aeabi_dcmple>
 8004f46:	bb48      	cbnz	r0, 8004f9c <_printf_float+0xcc>
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	4640      	mov	r0, r8
 8004f4e:	4649      	mov	r1, r9
 8004f50:	f7fb fdc4 	bl	8000adc <__aeabi_dcmplt>
 8004f54:	b110      	cbz	r0, 8004f5c <_printf_float+0x8c>
 8004f56:	232d      	movs	r3, #45	; 0x2d
 8004f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f5c:	4a93      	ldr	r2, [pc, #588]	; (80051ac <_printf_float+0x2dc>)
 8004f5e:	4b94      	ldr	r3, [pc, #592]	; (80051b0 <_printf_float+0x2e0>)
 8004f60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004f64:	bf94      	ite	ls
 8004f66:	4690      	movls	r8, r2
 8004f68:	4698      	movhi	r8, r3
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	6123      	str	r3, [r4, #16]
 8004f6e:	9b05      	ldr	r3, [sp, #20]
 8004f70:	f023 0304 	bic.w	r3, r3, #4
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	f04f 0900 	mov.w	r9, #0
 8004f7a:	9700      	str	r7, [sp, #0]
 8004f7c:	4633      	mov	r3, r6
 8004f7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004f80:	4621      	mov	r1, r4
 8004f82:	4628      	mov	r0, r5
 8004f84:	f000 f9da 	bl	800533c <_printf_common>
 8004f88:	3001      	adds	r0, #1
 8004f8a:	f040 8090 	bne.w	80050ae <_printf_float+0x1de>
 8004f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f92:	b00d      	add	sp, #52	; 0x34
 8004f94:	ecbd 8b02 	vpop	{d8}
 8004f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f9c:	4642      	mov	r2, r8
 8004f9e:	464b      	mov	r3, r9
 8004fa0:	4640      	mov	r0, r8
 8004fa2:	4649      	mov	r1, r9
 8004fa4:	f7fb fdc2 	bl	8000b2c <__aeabi_dcmpun>
 8004fa8:	b140      	cbz	r0, 8004fbc <_printf_float+0xec>
 8004faa:	464b      	mov	r3, r9
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	bfbc      	itt	lt
 8004fb0:	232d      	movlt	r3, #45	; 0x2d
 8004fb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004fb6:	4a7f      	ldr	r2, [pc, #508]	; (80051b4 <_printf_float+0x2e4>)
 8004fb8:	4b7f      	ldr	r3, [pc, #508]	; (80051b8 <_printf_float+0x2e8>)
 8004fba:	e7d1      	b.n	8004f60 <_printf_float+0x90>
 8004fbc:	6863      	ldr	r3, [r4, #4]
 8004fbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004fc2:	9206      	str	r2, [sp, #24]
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	d13f      	bne.n	8005048 <_printf_float+0x178>
 8004fc8:	2306      	movs	r3, #6
 8004fca:	6063      	str	r3, [r4, #4]
 8004fcc:	9b05      	ldr	r3, [sp, #20]
 8004fce:	6861      	ldr	r1, [r4, #4]
 8004fd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	9303      	str	r3, [sp, #12]
 8004fd8:	ab0a      	add	r3, sp, #40	; 0x28
 8004fda:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004fde:	ab09      	add	r3, sp, #36	; 0x24
 8004fe0:	ec49 8b10 	vmov	d0, r8, r9
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	6022      	str	r2, [r4, #0]
 8004fe8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004fec:	4628      	mov	r0, r5
 8004fee:	f7ff fecf 	bl	8004d90 <__cvt>
 8004ff2:	9b06      	ldr	r3, [sp, #24]
 8004ff4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ff6:	2b47      	cmp	r3, #71	; 0x47
 8004ff8:	4680      	mov	r8, r0
 8004ffa:	d108      	bne.n	800500e <_printf_float+0x13e>
 8004ffc:	1cc8      	adds	r0, r1, #3
 8004ffe:	db02      	blt.n	8005006 <_printf_float+0x136>
 8005000:	6863      	ldr	r3, [r4, #4]
 8005002:	4299      	cmp	r1, r3
 8005004:	dd41      	ble.n	800508a <_printf_float+0x1ba>
 8005006:	f1ab 0302 	sub.w	r3, fp, #2
 800500a:	fa5f fb83 	uxtb.w	fp, r3
 800500e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005012:	d820      	bhi.n	8005056 <_printf_float+0x186>
 8005014:	3901      	subs	r1, #1
 8005016:	465a      	mov	r2, fp
 8005018:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800501c:	9109      	str	r1, [sp, #36]	; 0x24
 800501e:	f7ff ff19 	bl	8004e54 <__exponent>
 8005022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005024:	1813      	adds	r3, r2, r0
 8005026:	2a01      	cmp	r2, #1
 8005028:	4681      	mov	r9, r0
 800502a:	6123      	str	r3, [r4, #16]
 800502c:	dc02      	bgt.n	8005034 <_printf_float+0x164>
 800502e:	6822      	ldr	r2, [r4, #0]
 8005030:	07d2      	lsls	r2, r2, #31
 8005032:	d501      	bpl.n	8005038 <_printf_float+0x168>
 8005034:	3301      	adds	r3, #1
 8005036:	6123      	str	r3, [r4, #16]
 8005038:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800503c:	2b00      	cmp	r3, #0
 800503e:	d09c      	beq.n	8004f7a <_printf_float+0xaa>
 8005040:	232d      	movs	r3, #45	; 0x2d
 8005042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005046:	e798      	b.n	8004f7a <_printf_float+0xaa>
 8005048:	9a06      	ldr	r2, [sp, #24]
 800504a:	2a47      	cmp	r2, #71	; 0x47
 800504c:	d1be      	bne.n	8004fcc <_printf_float+0xfc>
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1bc      	bne.n	8004fcc <_printf_float+0xfc>
 8005052:	2301      	movs	r3, #1
 8005054:	e7b9      	b.n	8004fca <_printf_float+0xfa>
 8005056:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800505a:	d118      	bne.n	800508e <_printf_float+0x1be>
 800505c:	2900      	cmp	r1, #0
 800505e:	6863      	ldr	r3, [r4, #4]
 8005060:	dd0b      	ble.n	800507a <_printf_float+0x1aa>
 8005062:	6121      	str	r1, [r4, #16]
 8005064:	b913      	cbnz	r3, 800506c <_printf_float+0x19c>
 8005066:	6822      	ldr	r2, [r4, #0]
 8005068:	07d0      	lsls	r0, r2, #31
 800506a:	d502      	bpl.n	8005072 <_printf_float+0x1a2>
 800506c:	3301      	adds	r3, #1
 800506e:	440b      	add	r3, r1
 8005070:	6123      	str	r3, [r4, #16]
 8005072:	65a1      	str	r1, [r4, #88]	; 0x58
 8005074:	f04f 0900 	mov.w	r9, #0
 8005078:	e7de      	b.n	8005038 <_printf_float+0x168>
 800507a:	b913      	cbnz	r3, 8005082 <_printf_float+0x1b2>
 800507c:	6822      	ldr	r2, [r4, #0]
 800507e:	07d2      	lsls	r2, r2, #31
 8005080:	d501      	bpl.n	8005086 <_printf_float+0x1b6>
 8005082:	3302      	adds	r3, #2
 8005084:	e7f4      	b.n	8005070 <_printf_float+0x1a0>
 8005086:	2301      	movs	r3, #1
 8005088:	e7f2      	b.n	8005070 <_printf_float+0x1a0>
 800508a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800508e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005090:	4299      	cmp	r1, r3
 8005092:	db05      	blt.n	80050a0 <_printf_float+0x1d0>
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	6121      	str	r1, [r4, #16]
 8005098:	07d8      	lsls	r0, r3, #31
 800509a:	d5ea      	bpl.n	8005072 <_printf_float+0x1a2>
 800509c:	1c4b      	adds	r3, r1, #1
 800509e:	e7e7      	b.n	8005070 <_printf_float+0x1a0>
 80050a0:	2900      	cmp	r1, #0
 80050a2:	bfd4      	ite	le
 80050a4:	f1c1 0202 	rsble	r2, r1, #2
 80050a8:	2201      	movgt	r2, #1
 80050aa:	4413      	add	r3, r2
 80050ac:	e7e0      	b.n	8005070 <_printf_float+0x1a0>
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	055a      	lsls	r2, r3, #21
 80050b2:	d407      	bmi.n	80050c4 <_printf_float+0x1f4>
 80050b4:	6923      	ldr	r3, [r4, #16]
 80050b6:	4642      	mov	r2, r8
 80050b8:	4631      	mov	r1, r6
 80050ba:	4628      	mov	r0, r5
 80050bc:	47b8      	blx	r7
 80050be:	3001      	adds	r0, #1
 80050c0:	d12c      	bne.n	800511c <_printf_float+0x24c>
 80050c2:	e764      	b.n	8004f8e <_printf_float+0xbe>
 80050c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80050c8:	f240 80e0 	bls.w	800528c <_printf_float+0x3bc>
 80050cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050d0:	2200      	movs	r2, #0
 80050d2:	2300      	movs	r3, #0
 80050d4:	f7fb fcf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80050d8:	2800      	cmp	r0, #0
 80050da:	d034      	beq.n	8005146 <_printf_float+0x276>
 80050dc:	4a37      	ldr	r2, [pc, #220]	; (80051bc <_printf_float+0x2ec>)
 80050de:	2301      	movs	r3, #1
 80050e0:	4631      	mov	r1, r6
 80050e2:	4628      	mov	r0, r5
 80050e4:	47b8      	blx	r7
 80050e6:	3001      	adds	r0, #1
 80050e8:	f43f af51 	beq.w	8004f8e <_printf_float+0xbe>
 80050ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050f0:	429a      	cmp	r2, r3
 80050f2:	db02      	blt.n	80050fa <_printf_float+0x22a>
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	07d8      	lsls	r0, r3, #31
 80050f8:	d510      	bpl.n	800511c <_printf_float+0x24c>
 80050fa:	ee18 3a10 	vmov	r3, s16
 80050fe:	4652      	mov	r2, sl
 8005100:	4631      	mov	r1, r6
 8005102:	4628      	mov	r0, r5
 8005104:	47b8      	blx	r7
 8005106:	3001      	adds	r0, #1
 8005108:	f43f af41 	beq.w	8004f8e <_printf_float+0xbe>
 800510c:	f04f 0800 	mov.w	r8, #0
 8005110:	f104 091a 	add.w	r9, r4, #26
 8005114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005116:	3b01      	subs	r3, #1
 8005118:	4543      	cmp	r3, r8
 800511a:	dc09      	bgt.n	8005130 <_printf_float+0x260>
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	079b      	lsls	r3, r3, #30
 8005120:	f100 8107 	bmi.w	8005332 <_printf_float+0x462>
 8005124:	68e0      	ldr	r0, [r4, #12]
 8005126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005128:	4298      	cmp	r0, r3
 800512a:	bfb8      	it	lt
 800512c:	4618      	movlt	r0, r3
 800512e:	e730      	b.n	8004f92 <_printf_float+0xc2>
 8005130:	2301      	movs	r3, #1
 8005132:	464a      	mov	r2, r9
 8005134:	4631      	mov	r1, r6
 8005136:	4628      	mov	r0, r5
 8005138:	47b8      	blx	r7
 800513a:	3001      	adds	r0, #1
 800513c:	f43f af27 	beq.w	8004f8e <_printf_float+0xbe>
 8005140:	f108 0801 	add.w	r8, r8, #1
 8005144:	e7e6      	b.n	8005114 <_printf_float+0x244>
 8005146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005148:	2b00      	cmp	r3, #0
 800514a:	dc39      	bgt.n	80051c0 <_printf_float+0x2f0>
 800514c:	4a1b      	ldr	r2, [pc, #108]	; (80051bc <_printf_float+0x2ec>)
 800514e:	2301      	movs	r3, #1
 8005150:	4631      	mov	r1, r6
 8005152:	4628      	mov	r0, r5
 8005154:	47b8      	blx	r7
 8005156:	3001      	adds	r0, #1
 8005158:	f43f af19 	beq.w	8004f8e <_printf_float+0xbe>
 800515c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005160:	4313      	orrs	r3, r2
 8005162:	d102      	bne.n	800516a <_printf_float+0x29a>
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	07d9      	lsls	r1, r3, #31
 8005168:	d5d8      	bpl.n	800511c <_printf_float+0x24c>
 800516a:	ee18 3a10 	vmov	r3, s16
 800516e:	4652      	mov	r2, sl
 8005170:	4631      	mov	r1, r6
 8005172:	4628      	mov	r0, r5
 8005174:	47b8      	blx	r7
 8005176:	3001      	adds	r0, #1
 8005178:	f43f af09 	beq.w	8004f8e <_printf_float+0xbe>
 800517c:	f04f 0900 	mov.w	r9, #0
 8005180:	f104 0a1a 	add.w	sl, r4, #26
 8005184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005186:	425b      	negs	r3, r3
 8005188:	454b      	cmp	r3, r9
 800518a:	dc01      	bgt.n	8005190 <_printf_float+0x2c0>
 800518c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800518e:	e792      	b.n	80050b6 <_printf_float+0x1e6>
 8005190:	2301      	movs	r3, #1
 8005192:	4652      	mov	r2, sl
 8005194:	4631      	mov	r1, r6
 8005196:	4628      	mov	r0, r5
 8005198:	47b8      	blx	r7
 800519a:	3001      	adds	r0, #1
 800519c:	f43f aef7 	beq.w	8004f8e <_printf_float+0xbe>
 80051a0:	f109 0901 	add.w	r9, r9, #1
 80051a4:	e7ee      	b.n	8005184 <_printf_float+0x2b4>
 80051a6:	bf00      	nop
 80051a8:	7fefffff 	.word	0x7fefffff
 80051ac:	08009588 	.word	0x08009588
 80051b0:	0800958c 	.word	0x0800958c
 80051b4:	08009590 	.word	0x08009590
 80051b8:	08009594 	.word	0x08009594
 80051bc:	08009598 	.word	0x08009598
 80051c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051c4:	429a      	cmp	r2, r3
 80051c6:	bfa8      	it	ge
 80051c8:	461a      	movge	r2, r3
 80051ca:	2a00      	cmp	r2, #0
 80051cc:	4691      	mov	r9, r2
 80051ce:	dc37      	bgt.n	8005240 <_printf_float+0x370>
 80051d0:	f04f 0b00 	mov.w	fp, #0
 80051d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051d8:	f104 021a 	add.w	r2, r4, #26
 80051dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051de:	9305      	str	r3, [sp, #20]
 80051e0:	eba3 0309 	sub.w	r3, r3, r9
 80051e4:	455b      	cmp	r3, fp
 80051e6:	dc33      	bgt.n	8005250 <_printf_float+0x380>
 80051e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051ec:	429a      	cmp	r2, r3
 80051ee:	db3b      	blt.n	8005268 <_printf_float+0x398>
 80051f0:	6823      	ldr	r3, [r4, #0]
 80051f2:	07da      	lsls	r2, r3, #31
 80051f4:	d438      	bmi.n	8005268 <_printf_float+0x398>
 80051f6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80051fa:	eba2 0903 	sub.w	r9, r2, r3
 80051fe:	9b05      	ldr	r3, [sp, #20]
 8005200:	1ad2      	subs	r2, r2, r3
 8005202:	4591      	cmp	r9, r2
 8005204:	bfa8      	it	ge
 8005206:	4691      	movge	r9, r2
 8005208:	f1b9 0f00 	cmp.w	r9, #0
 800520c:	dc35      	bgt.n	800527a <_printf_float+0x3aa>
 800520e:	f04f 0800 	mov.w	r8, #0
 8005212:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005216:	f104 0a1a 	add.w	sl, r4, #26
 800521a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800521e:	1a9b      	subs	r3, r3, r2
 8005220:	eba3 0309 	sub.w	r3, r3, r9
 8005224:	4543      	cmp	r3, r8
 8005226:	f77f af79 	ble.w	800511c <_printf_float+0x24c>
 800522a:	2301      	movs	r3, #1
 800522c:	4652      	mov	r2, sl
 800522e:	4631      	mov	r1, r6
 8005230:	4628      	mov	r0, r5
 8005232:	47b8      	blx	r7
 8005234:	3001      	adds	r0, #1
 8005236:	f43f aeaa 	beq.w	8004f8e <_printf_float+0xbe>
 800523a:	f108 0801 	add.w	r8, r8, #1
 800523e:	e7ec      	b.n	800521a <_printf_float+0x34a>
 8005240:	4613      	mov	r3, r2
 8005242:	4631      	mov	r1, r6
 8005244:	4642      	mov	r2, r8
 8005246:	4628      	mov	r0, r5
 8005248:	47b8      	blx	r7
 800524a:	3001      	adds	r0, #1
 800524c:	d1c0      	bne.n	80051d0 <_printf_float+0x300>
 800524e:	e69e      	b.n	8004f8e <_printf_float+0xbe>
 8005250:	2301      	movs	r3, #1
 8005252:	4631      	mov	r1, r6
 8005254:	4628      	mov	r0, r5
 8005256:	9205      	str	r2, [sp, #20]
 8005258:	47b8      	blx	r7
 800525a:	3001      	adds	r0, #1
 800525c:	f43f ae97 	beq.w	8004f8e <_printf_float+0xbe>
 8005260:	9a05      	ldr	r2, [sp, #20]
 8005262:	f10b 0b01 	add.w	fp, fp, #1
 8005266:	e7b9      	b.n	80051dc <_printf_float+0x30c>
 8005268:	ee18 3a10 	vmov	r3, s16
 800526c:	4652      	mov	r2, sl
 800526e:	4631      	mov	r1, r6
 8005270:	4628      	mov	r0, r5
 8005272:	47b8      	blx	r7
 8005274:	3001      	adds	r0, #1
 8005276:	d1be      	bne.n	80051f6 <_printf_float+0x326>
 8005278:	e689      	b.n	8004f8e <_printf_float+0xbe>
 800527a:	9a05      	ldr	r2, [sp, #20]
 800527c:	464b      	mov	r3, r9
 800527e:	4442      	add	r2, r8
 8005280:	4631      	mov	r1, r6
 8005282:	4628      	mov	r0, r5
 8005284:	47b8      	blx	r7
 8005286:	3001      	adds	r0, #1
 8005288:	d1c1      	bne.n	800520e <_printf_float+0x33e>
 800528a:	e680      	b.n	8004f8e <_printf_float+0xbe>
 800528c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800528e:	2a01      	cmp	r2, #1
 8005290:	dc01      	bgt.n	8005296 <_printf_float+0x3c6>
 8005292:	07db      	lsls	r3, r3, #31
 8005294:	d53a      	bpl.n	800530c <_printf_float+0x43c>
 8005296:	2301      	movs	r3, #1
 8005298:	4642      	mov	r2, r8
 800529a:	4631      	mov	r1, r6
 800529c:	4628      	mov	r0, r5
 800529e:	47b8      	blx	r7
 80052a0:	3001      	adds	r0, #1
 80052a2:	f43f ae74 	beq.w	8004f8e <_printf_float+0xbe>
 80052a6:	ee18 3a10 	vmov	r3, s16
 80052aa:	4652      	mov	r2, sl
 80052ac:	4631      	mov	r1, r6
 80052ae:	4628      	mov	r0, r5
 80052b0:	47b8      	blx	r7
 80052b2:	3001      	adds	r0, #1
 80052b4:	f43f ae6b 	beq.w	8004f8e <_printf_float+0xbe>
 80052b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052bc:	2200      	movs	r2, #0
 80052be:	2300      	movs	r3, #0
 80052c0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80052c4:	f7fb fc00 	bl	8000ac8 <__aeabi_dcmpeq>
 80052c8:	b9d8      	cbnz	r0, 8005302 <_printf_float+0x432>
 80052ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 80052ce:	f108 0201 	add.w	r2, r8, #1
 80052d2:	4631      	mov	r1, r6
 80052d4:	4628      	mov	r0, r5
 80052d6:	47b8      	blx	r7
 80052d8:	3001      	adds	r0, #1
 80052da:	d10e      	bne.n	80052fa <_printf_float+0x42a>
 80052dc:	e657      	b.n	8004f8e <_printf_float+0xbe>
 80052de:	2301      	movs	r3, #1
 80052e0:	4652      	mov	r2, sl
 80052e2:	4631      	mov	r1, r6
 80052e4:	4628      	mov	r0, r5
 80052e6:	47b8      	blx	r7
 80052e8:	3001      	adds	r0, #1
 80052ea:	f43f ae50 	beq.w	8004f8e <_printf_float+0xbe>
 80052ee:	f108 0801 	add.w	r8, r8, #1
 80052f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052f4:	3b01      	subs	r3, #1
 80052f6:	4543      	cmp	r3, r8
 80052f8:	dcf1      	bgt.n	80052de <_printf_float+0x40e>
 80052fa:	464b      	mov	r3, r9
 80052fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005300:	e6da      	b.n	80050b8 <_printf_float+0x1e8>
 8005302:	f04f 0800 	mov.w	r8, #0
 8005306:	f104 0a1a 	add.w	sl, r4, #26
 800530a:	e7f2      	b.n	80052f2 <_printf_float+0x422>
 800530c:	2301      	movs	r3, #1
 800530e:	4642      	mov	r2, r8
 8005310:	e7df      	b.n	80052d2 <_printf_float+0x402>
 8005312:	2301      	movs	r3, #1
 8005314:	464a      	mov	r2, r9
 8005316:	4631      	mov	r1, r6
 8005318:	4628      	mov	r0, r5
 800531a:	47b8      	blx	r7
 800531c:	3001      	adds	r0, #1
 800531e:	f43f ae36 	beq.w	8004f8e <_printf_float+0xbe>
 8005322:	f108 0801 	add.w	r8, r8, #1
 8005326:	68e3      	ldr	r3, [r4, #12]
 8005328:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800532a:	1a5b      	subs	r3, r3, r1
 800532c:	4543      	cmp	r3, r8
 800532e:	dcf0      	bgt.n	8005312 <_printf_float+0x442>
 8005330:	e6f8      	b.n	8005124 <_printf_float+0x254>
 8005332:	f04f 0800 	mov.w	r8, #0
 8005336:	f104 0919 	add.w	r9, r4, #25
 800533a:	e7f4      	b.n	8005326 <_printf_float+0x456>

0800533c <_printf_common>:
 800533c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005340:	4616      	mov	r6, r2
 8005342:	4699      	mov	r9, r3
 8005344:	688a      	ldr	r2, [r1, #8]
 8005346:	690b      	ldr	r3, [r1, #16]
 8005348:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800534c:	4293      	cmp	r3, r2
 800534e:	bfb8      	it	lt
 8005350:	4613      	movlt	r3, r2
 8005352:	6033      	str	r3, [r6, #0]
 8005354:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005358:	4607      	mov	r7, r0
 800535a:	460c      	mov	r4, r1
 800535c:	b10a      	cbz	r2, 8005362 <_printf_common+0x26>
 800535e:	3301      	adds	r3, #1
 8005360:	6033      	str	r3, [r6, #0]
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	0699      	lsls	r1, r3, #26
 8005366:	bf42      	ittt	mi
 8005368:	6833      	ldrmi	r3, [r6, #0]
 800536a:	3302      	addmi	r3, #2
 800536c:	6033      	strmi	r3, [r6, #0]
 800536e:	6825      	ldr	r5, [r4, #0]
 8005370:	f015 0506 	ands.w	r5, r5, #6
 8005374:	d106      	bne.n	8005384 <_printf_common+0x48>
 8005376:	f104 0a19 	add.w	sl, r4, #25
 800537a:	68e3      	ldr	r3, [r4, #12]
 800537c:	6832      	ldr	r2, [r6, #0]
 800537e:	1a9b      	subs	r3, r3, r2
 8005380:	42ab      	cmp	r3, r5
 8005382:	dc26      	bgt.n	80053d2 <_printf_common+0x96>
 8005384:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005388:	1e13      	subs	r3, r2, #0
 800538a:	6822      	ldr	r2, [r4, #0]
 800538c:	bf18      	it	ne
 800538e:	2301      	movne	r3, #1
 8005390:	0692      	lsls	r2, r2, #26
 8005392:	d42b      	bmi.n	80053ec <_printf_common+0xb0>
 8005394:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005398:	4649      	mov	r1, r9
 800539a:	4638      	mov	r0, r7
 800539c:	47c0      	blx	r8
 800539e:	3001      	adds	r0, #1
 80053a0:	d01e      	beq.n	80053e0 <_printf_common+0xa4>
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	6922      	ldr	r2, [r4, #16]
 80053a6:	f003 0306 	and.w	r3, r3, #6
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	bf02      	ittt	eq
 80053ae:	68e5      	ldreq	r5, [r4, #12]
 80053b0:	6833      	ldreq	r3, [r6, #0]
 80053b2:	1aed      	subeq	r5, r5, r3
 80053b4:	68a3      	ldr	r3, [r4, #8]
 80053b6:	bf0c      	ite	eq
 80053b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053bc:	2500      	movne	r5, #0
 80053be:	4293      	cmp	r3, r2
 80053c0:	bfc4      	itt	gt
 80053c2:	1a9b      	subgt	r3, r3, r2
 80053c4:	18ed      	addgt	r5, r5, r3
 80053c6:	2600      	movs	r6, #0
 80053c8:	341a      	adds	r4, #26
 80053ca:	42b5      	cmp	r5, r6
 80053cc:	d11a      	bne.n	8005404 <_printf_common+0xc8>
 80053ce:	2000      	movs	r0, #0
 80053d0:	e008      	b.n	80053e4 <_printf_common+0xa8>
 80053d2:	2301      	movs	r3, #1
 80053d4:	4652      	mov	r2, sl
 80053d6:	4649      	mov	r1, r9
 80053d8:	4638      	mov	r0, r7
 80053da:	47c0      	blx	r8
 80053dc:	3001      	adds	r0, #1
 80053de:	d103      	bne.n	80053e8 <_printf_common+0xac>
 80053e0:	f04f 30ff 	mov.w	r0, #4294967295
 80053e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e8:	3501      	adds	r5, #1
 80053ea:	e7c6      	b.n	800537a <_printf_common+0x3e>
 80053ec:	18e1      	adds	r1, r4, r3
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	2030      	movs	r0, #48	; 0x30
 80053f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053f6:	4422      	add	r2, r4
 80053f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005400:	3302      	adds	r3, #2
 8005402:	e7c7      	b.n	8005394 <_printf_common+0x58>
 8005404:	2301      	movs	r3, #1
 8005406:	4622      	mov	r2, r4
 8005408:	4649      	mov	r1, r9
 800540a:	4638      	mov	r0, r7
 800540c:	47c0      	blx	r8
 800540e:	3001      	adds	r0, #1
 8005410:	d0e6      	beq.n	80053e0 <_printf_common+0xa4>
 8005412:	3601      	adds	r6, #1
 8005414:	e7d9      	b.n	80053ca <_printf_common+0x8e>
	...

08005418 <_printf_i>:
 8005418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800541c:	7e0f      	ldrb	r7, [r1, #24]
 800541e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005420:	2f78      	cmp	r7, #120	; 0x78
 8005422:	4691      	mov	r9, r2
 8005424:	4680      	mov	r8, r0
 8005426:	460c      	mov	r4, r1
 8005428:	469a      	mov	sl, r3
 800542a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800542e:	d807      	bhi.n	8005440 <_printf_i+0x28>
 8005430:	2f62      	cmp	r7, #98	; 0x62
 8005432:	d80a      	bhi.n	800544a <_printf_i+0x32>
 8005434:	2f00      	cmp	r7, #0
 8005436:	f000 80d4 	beq.w	80055e2 <_printf_i+0x1ca>
 800543a:	2f58      	cmp	r7, #88	; 0x58
 800543c:	f000 80c0 	beq.w	80055c0 <_printf_i+0x1a8>
 8005440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005444:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005448:	e03a      	b.n	80054c0 <_printf_i+0xa8>
 800544a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800544e:	2b15      	cmp	r3, #21
 8005450:	d8f6      	bhi.n	8005440 <_printf_i+0x28>
 8005452:	a101      	add	r1, pc, #4	; (adr r1, 8005458 <_printf_i+0x40>)
 8005454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005458:	080054b1 	.word	0x080054b1
 800545c:	080054c5 	.word	0x080054c5
 8005460:	08005441 	.word	0x08005441
 8005464:	08005441 	.word	0x08005441
 8005468:	08005441 	.word	0x08005441
 800546c:	08005441 	.word	0x08005441
 8005470:	080054c5 	.word	0x080054c5
 8005474:	08005441 	.word	0x08005441
 8005478:	08005441 	.word	0x08005441
 800547c:	08005441 	.word	0x08005441
 8005480:	08005441 	.word	0x08005441
 8005484:	080055c9 	.word	0x080055c9
 8005488:	080054f1 	.word	0x080054f1
 800548c:	08005583 	.word	0x08005583
 8005490:	08005441 	.word	0x08005441
 8005494:	08005441 	.word	0x08005441
 8005498:	080055eb 	.word	0x080055eb
 800549c:	08005441 	.word	0x08005441
 80054a0:	080054f1 	.word	0x080054f1
 80054a4:	08005441 	.word	0x08005441
 80054a8:	08005441 	.word	0x08005441
 80054ac:	0800558b 	.word	0x0800558b
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	1d1a      	adds	r2, r3, #4
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	602a      	str	r2, [r5, #0]
 80054b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054c0:	2301      	movs	r3, #1
 80054c2:	e09f      	b.n	8005604 <_printf_i+0x1ec>
 80054c4:	6820      	ldr	r0, [r4, #0]
 80054c6:	682b      	ldr	r3, [r5, #0]
 80054c8:	0607      	lsls	r7, r0, #24
 80054ca:	f103 0104 	add.w	r1, r3, #4
 80054ce:	6029      	str	r1, [r5, #0]
 80054d0:	d501      	bpl.n	80054d6 <_printf_i+0xbe>
 80054d2:	681e      	ldr	r6, [r3, #0]
 80054d4:	e003      	b.n	80054de <_printf_i+0xc6>
 80054d6:	0646      	lsls	r6, r0, #25
 80054d8:	d5fb      	bpl.n	80054d2 <_printf_i+0xba>
 80054da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80054de:	2e00      	cmp	r6, #0
 80054e0:	da03      	bge.n	80054ea <_printf_i+0xd2>
 80054e2:	232d      	movs	r3, #45	; 0x2d
 80054e4:	4276      	negs	r6, r6
 80054e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ea:	485a      	ldr	r0, [pc, #360]	; (8005654 <_printf_i+0x23c>)
 80054ec:	230a      	movs	r3, #10
 80054ee:	e012      	b.n	8005516 <_printf_i+0xfe>
 80054f0:	682b      	ldr	r3, [r5, #0]
 80054f2:	6820      	ldr	r0, [r4, #0]
 80054f4:	1d19      	adds	r1, r3, #4
 80054f6:	6029      	str	r1, [r5, #0]
 80054f8:	0605      	lsls	r5, r0, #24
 80054fa:	d501      	bpl.n	8005500 <_printf_i+0xe8>
 80054fc:	681e      	ldr	r6, [r3, #0]
 80054fe:	e002      	b.n	8005506 <_printf_i+0xee>
 8005500:	0641      	lsls	r1, r0, #25
 8005502:	d5fb      	bpl.n	80054fc <_printf_i+0xe4>
 8005504:	881e      	ldrh	r6, [r3, #0]
 8005506:	4853      	ldr	r0, [pc, #332]	; (8005654 <_printf_i+0x23c>)
 8005508:	2f6f      	cmp	r7, #111	; 0x6f
 800550a:	bf0c      	ite	eq
 800550c:	2308      	moveq	r3, #8
 800550e:	230a      	movne	r3, #10
 8005510:	2100      	movs	r1, #0
 8005512:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005516:	6865      	ldr	r5, [r4, #4]
 8005518:	60a5      	str	r5, [r4, #8]
 800551a:	2d00      	cmp	r5, #0
 800551c:	bfa2      	ittt	ge
 800551e:	6821      	ldrge	r1, [r4, #0]
 8005520:	f021 0104 	bicge.w	r1, r1, #4
 8005524:	6021      	strge	r1, [r4, #0]
 8005526:	b90e      	cbnz	r6, 800552c <_printf_i+0x114>
 8005528:	2d00      	cmp	r5, #0
 800552a:	d04b      	beq.n	80055c4 <_printf_i+0x1ac>
 800552c:	4615      	mov	r5, r2
 800552e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005532:	fb03 6711 	mls	r7, r3, r1, r6
 8005536:	5dc7      	ldrb	r7, [r0, r7]
 8005538:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800553c:	4637      	mov	r7, r6
 800553e:	42bb      	cmp	r3, r7
 8005540:	460e      	mov	r6, r1
 8005542:	d9f4      	bls.n	800552e <_printf_i+0x116>
 8005544:	2b08      	cmp	r3, #8
 8005546:	d10b      	bne.n	8005560 <_printf_i+0x148>
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	07de      	lsls	r6, r3, #31
 800554c:	d508      	bpl.n	8005560 <_printf_i+0x148>
 800554e:	6923      	ldr	r3, [r4, #16]
 8005550:	6861      	ldr	r1, [r4, #4]
 8005552:	4299      	cmp	r1, r3
 8005554:	bfde      	ittt	le
 8005556:	2330      	movle	r3, #48	; 0x30
 8005558:	f805 3c01 	strble.w	r3, [r5, #-1]
 800555c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005560:	1b52      	subs	r2, r2, r5
 8005562:	6122      	str	r2, [r4, #16]
 8005564:	f8cd a000 	str.w	sl, [sp]
 8005568:	464b      	mov	r3, r9
 800556a:	aa03      	add	r2, sp, #12
 800556c:	4621      	mov	r1, r4
 800556e:	4640      	mov	r0, r8
 8005570:	f7ff fee4 	bl	800533c <_printf_common>
 8005574:	3001      	adds	r0, #1
 8005576:	d14a      	bne.n	800560e <_printf_i+0x1f6>
 8005578:	f04f 30ff 	mov.w	r0, #4294967295
 800557c:	b004      	add	sp, #16
 800557e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	f043 0320 	orr.w	r3, r3, #32
 8005588:	6023      	str	r3, [r4, #0]
 800558a:	4833      	ldr	r0, [pc, #204]	; (8005658 <_printf_i+0x240>)
 800558c:	2778      	movs	r7, #120	; 0x78
 800558e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	6829      	ldr	r1, [r5, #0]
 8005596:	061f      	lsls	r7, r3, #24
 8005598:	f851 6b04 	ldr.w	r6, [r1], #4
 800559c:	d402      	bmi.n	80055a4 <_printf_i+0x18c>
 800559e:	065f      	lsls	r7, r3, #25
 80055a0:	bf48      	it	mi
 80055a2:	b2b6      	uxthmi	r6, r6
 80055a4:	07df      	lsls	r7, r3, #31
 80055a6:	bf48      	it	mi
 80055a8:	f043 0320 	orrmi.w	r3, r3, #32
 80055ac:	6029      	str	r1, [r5, #0]
 80055ae:	bf48      	it	mi
 80055b0:	6023      	strmi	r3, [r4, #0]
 80055b2:	b91e      	cbnz	r6, 80055bc <_printf_i+0x1a4>
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	f023 0320 	bic.w	r3, r3, #32
 80055ba:	6023      	str	r3, [r4, #0]
 80055bc:	2310      	movs	r3, #16
 80055be:	e7a7      	b.n	8005510 <_printf_i+0xf8>
 80055c0:	4824      	ldr	r0, [pc, #144]	; (8005654 <_printf_i+0x23c>)
 80055c2:	e7e4      	b.n	800558e <_printf_i+0x176>
 80055c4:	4615      	mov	r5, r2
 80055c6:	e7bd      	b.n	8005544 <_printf_i+0x12c>
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	6826      	ldr	r6, [r4, #0]
 80055cc:	6961      	ldr	r1, [r4, #20]
 80055ce:	1d18      	adds	r0, r3, #4
 80055d0:	6028      	str	r0, [r5, #0]
 80055d2:	0635      	lsls	r5, r6, #24
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	d501      	bpl.n	80055dc <_printf_i+0x1c4>
 80055d8:	6019      	str	r1, [r3, #0]
 80055da:	e002      	b.n	80055e2 <_printf_i+0x1ca>
 80055dc:	0670      	lsls	r0, r6, #25
 80055de:	d5fb      	bpl.n	80055d8 <_printf_i+0x1c0>
 80055e0:	8019      	strh	r1, [r3, #0]
 80055e2:	2300      	movs	r3, #0
 80055e4:	6123      	str	r3, [r4, #16]
 80055e6:	4615      	mov	r5, r2
 80055e8:	e7bc      	b.n	8005564 <_printf_i+0x14c>
 80055ea:	682b      	ldr	r3, [r5, #0]
 80055ec:	1d1a      	adds	r2, r3, #4
 80055ee:	602a      	str	r2, [r5, #0]
 80055f0:	681d      	ldr	r5, [r3, #0]
 80055f2:	6862      	ldr	r2, [r4, #4]
 80055f4:	2100      	movs	r1, #0
 80055f6:	4628      	mov	r0, r5
 80055f8:	f7fa fdea 	bl	80001d0 <memchr>
 80055fc:	b108      	cbz	r0, 8005602 <_printf_i+0x1ea>
 80055fe:	1b40      	subs	r0, r0, r5
 8005600:	6060      	str	r0, [r4, #4]
 8005602:	6863      	ldr	r3, [r4, #4]
 8005604:	6123      	str	r3, [r4, #16]
 8005606:	2300      	movs	r3, #0
 8005608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800560c:	e7aa      	b.n	8005564 <_printf_i+0x14c>
 800560e:	6923      	ldr	r3, [r4, #16]
 8005610:	462a      	mov	r2, r5
 8005612:	4649      	mov	r1, r9
 8005614:	4640      	mov	r0, r8
 8005616:	47d0      	blx	sl
 8005618:	3001      	adds	r0, #1
 800561a:	d0ad      	beq.n	8005578 <_printf_i+0x160>
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	079b      	lsls	r3, r3, #30
 8005620:	d413      	bmi.n	800564a <_printf_i+0x232>
 8005622:	68e0      	ldr	r0, [r4, #12]
 8005624:	9b03      	ldr	r3, [sp, #12]
 8005626:	4298      	cmp	r0, r3
 8005628:	bfb8      	it	lt
 800562a:	4618      	movlt	r0, r3
 800562c:	e7a6      	b.n	800557c <_printf_i+0x164>
 800562e:	2301      	movs	r3, #1
 8005630:	4632      	mov	r2, r6
 8005632:	4649      	mov	r1, r9
 8005634:	4640      	mov	r0, r8
 8005636:	47d0      	blx	sl
 8005638:	3001      	adds	r0, #1
 800563a:	d09d      	beq.n	8005578 <_printf_i+0x160>
 800563c:	3501      	adds	r5, #1
 800563e:	68e3      	ldr	r3, [r4, #12]
 8005640:	9903      	ldr	r1, [sp, #12]
 8005642:	1a5b      	subs	r3, r3, r1
 8005644:	42ab      	cmp	r3, r5
 8005646:	dcf2      	bgt.n	800562e <_printf_i+0x216>
 8005648:	e7eb      	b.n	8005622 <_printf_i+0x20a>
 800564a:	2500      	movs	r5, #0
 800564c:	f104 0619 	add.w	r6, r4, #25
 8005650:	e7f5      	b.n	800563e <_printf_i+0x226>
 8005652:	bf00      	nop
 8005654:	0800959a 	.word	0x0800959a
 8005658:	080095ab 	.word	0x080095ab

0800565c <_scanf_float>:
 800565c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005660:	b087      	sub	sp, #28
 8005662:	4617      	mov	r7, r2
 8005664:	9303      	str	r3, [sp, #12]
 8005666:	688b      	ldr	r3, [r1, #8]
 8005668:	1e5a      	subs	r2, r3, #1
 800566a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800566e:	bf83      	ittte	hi
 8005670:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005674:	195b      	addhi	r3, r3, r5
 8005676:	9302      	strhi	r3, [sp, #8]
 8005678:	2300      	movls	r3, #0
 800567a:	bf86      	itte	hi
 800567c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005680:	608b      	strhi	r3, [r1, #8]
 8005682:	9302      	strls	r3, [sp, #8]
 8005684:	680b      	ldr	r3, [r1, #0]
 8005686:	468b      	mov	fp, r1
 8005688:	2500      	movs	r5, #0
 800568a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800568e:	f84b 3b1c 	str.w	r3, [fp], #28
 8005692:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005696:	4680      	mov	r8, r0
 8005698:	460c      	mov	r4, r1
 800569a:	465e      	mov	r6, fp
 800569c:	46aa      	mov	sl, r5
 800569e:	46a9      	mov	r9, r5
 80056a0:	9501      	str	r5, [sp, #4]
 80056a2:	68a2      	ldr	r2, [r4, #8]
 80056a4:	b152      	cbz	r2, 80056bc <_scanf_float+0x60>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	2b4e      	cmp	r3, #78	; 0x4e
 80056ac:	d864      	bhi.n	8005778 <_scanf_float+0x11c>
 80056ae:	2b40      	cmp	r3, #64	; 0x40
 80056b0:	d83c      	bhi.n	800572c <_scanf_float+0xd0>
 80056b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80056b6:	b2c8      	uxtb	r0, r1
 80056b8:	280e      	cmp	r0, #14
 80056ba:	d93a      	bls.n	8005732 <_scanf_float+0xd6>
 80056bc:	f1b9 0f00 	cmp.w	r9, #0
 80056c0:	d003      	beq.n	80056ca <_scanf_float+0x6e>
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056c8:	6023      	str	r3, [r4, #0]
 80056ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056ce:	f1ba 0f01 	cmp.w	sl, #1
 80056d2:	f200 8113 	bhi.w	80058fc <_scanf_float+0x2a0>
 80056d6:	455e      	cmp	r6, fp
 80056d8:	f200 8105 	bhi.w	80058e6 <_scanf_float+0x28a>
 80056dc:	2501      	movs	r5, #1
 80056de:	4628      	mov	r0, r5
 80056e0:	b007      	add	sp, #28
 80056e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80056ea:	2a0d      	cmp	r2, #13
 80056ec:	d8e6      	bhi.n	80056bc <_scanf_float+0x60>
 80056ee:	a101      	add	r1, pc, #4	; (adr r1, 80056f4 <_scanf_float+0x98>)
 80056f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80056f4:	08005833 	.word	0x08005833
 80056f8:	080056bd 	.word	0x080056bd
 80056fc:	080056bd 	.word	0x080056bd
 8005700:	080056bd 	.word	0x080056bd
 8005704:	08005893 	.word	0x08005893
 8005708:	0800586b 	.word	0x0800586b
 800570c:	080056bd 	.word	0x080056bd
 8005710:	080056bd 	.word	0x080056bd
 8005714:	08005841 	.word	0x08005841
 8005718:	080056bd 	.word	0x080056bd
 800571c:	080056bd 	.word	0x080056bd
 8005720:	080056bd 	.word	0x080056bd
 8005724:	080056bd 	.word	0x080056bd
 8005728:	080057f9 	.word	0x080057f9
 800572c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005730:	e7db      	b.n	80056ea <_scanf_float+0x8e>
 8005732:	290e      	cmp	r1, #14
 8005734:	d8c2      	bhi.n	80056bc <_scanf_float+0x60>
 8005736:	a001      	add	r0, pc, #4	; (adr r0, 800573c <_scanf_float+0xe0>)
 8005738:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800573c:	080057eb 	.word	0x080057eb
 8005740:	080056bd 	.word	0x080056bd
 8005744:	080057eb 	.word	0x080057eb
 8005748:	0800587f 	.word	0x0800587f
 800574c:	080056bd 	.word	0x080056bd
 8005750:	08005799 	.word	0x08005799
 8005754:	080057d5 	.word	0x080057d5
 8005758:	080057d5 	.word	0x080057d5
 800575c:	080057d5 	.word	0x080057d5
 8005760:	080057d5 	.word	0x080057d5
 8005764:	080057d5 	.word	0x080057d5
 8005768:	080057d5 	.word	0x080057d5
 800576c:	080057d5 	.word	0x080057d5
 8005770:	080057d5 	.word	0x080057d5
 8005774:	080057d5 	.word	0x080057d5
 8005778:	2b6e      	cmp	r3, #110	; 0x6e
 800577a:	d809      	bhi.n	8005790 <_scanf_float+0x134>
 800577c:	2b60      	cmp	r3, #96	; 0x60
 800577e:	d8b2      	bhi.n	80056e6 <_scanf_float+0x8a>
 8005780:	2b54      	cmp	r3, #84	; 0x54
 8005782:	d077      	beq.n	8005874 <_scanf_float+0x218>
 8005784:	2b59      	cmp	r3, #89	; 0x59
 8005786:	d199      	bne.n	80056bc <_scanf_float+0x60>
 8005788:	2d07      	cmp	r5, #7
 800578a:	d197      	bne.n	80056bc <_scanf_float+0x60>
 800578c:	2508      	movs	r5, #8
 800578e:	e029      	b.n	80057e4 <_scanf_float+0x188>
 8005790:	2b74      	cmp	r3, #116	; 0x74
 8005792:	d06f      	beq.n	8005874 <_scanf_float+0x218>
 8005794:	2b79      	cmp	r3, #121	; 0x79
 8005796:	e7f6      	b.n	8005786 <_scanf_float+0x12a>
 8005798:	6821      	ldr	r1, [r4, #0]
 800579a:	05c8      	lsls	r0, r1, #23
 800579c:	d51a      	bpl.n	80057d4 <_scanf_float+0x178>
 800579e:	9b02      	ldr	r3, [sp, #8]
 80057a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80057a4:	6021      	str	r1, [r4, #0]
 80057a6:	f109 0901 	add.w	r9, r9, #1
 80057aa:	b11b      	cbz	r3, 80057b4 <_scanf_float+0x158>
 80057ac:	3b01      	subs	r3, #1
 80057ae:	3201      	adds	r2, #1
 80057b0:	9302      	str	r3, [sp, #8]
 80057b2:	60a2      	str	r2, [r4, #8]
 80057b4:	68a3      	ldr	r3, [r4, #8]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	60a3      	str	r3, [r4, #8]
 80057ba:	6923      	ldr	r3, [r4, #16]
 80057bc:	3301      	adds	r3, #1
 80057be:	6123      	str	r3, [r4, #16]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3b01      	subs	r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	607b      	str	r3, [r7, #4]
 80057c8:	f340 8084 	ble.w	80058d4 <_scanf_float+0x278>
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	3301      	adds	r3, #1
 80057d0:	603b      	str	r3, [r7, #0]
 80057d2:	e766      	b.n	80056a2 <_scanf_float+0x46>
 80057d4:	eb1a 0f05 	cmn.w	sl, r5
 80057d8:	f47f af70 	bne.w	80056bc <_scanf_float+0x60>
 80057dc:	6822      	ldr	r2, [r4, #0]
 80057de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80057e2:	6022      	str	r2, [r4, #0]
 80057e4:	f806 3b01 	strb.w	r3, [r6], #1
 80057e8:	e7e4      	b.n	80057b4 <_scanf_float+0x158>
 80057ea:	6822      	ldr	r2, [r4, #0]
 80057ec:	0610      	lsls	r0, r2, #24
 80057ee:	f57f af65 	bpl.w	80056bc <_scanf_float+0x60>
 80057f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057f6:	e7f4      	b.n	80057e2 <_scanf_float+0x186>
 80057f8:	f1ba 0f00 	cmp.w	sl, #0
 80057fc:	d10e      	bne.n	800581c <_scanf_float+0x1c0>
 80057fe:	f1b9 0f00 	cmp.w	r9, #0
 8005802:	d10e      	bne.n	8005822 <_scanf_float+0x1c6>
 8005804:	6822      	ldr	r2, [r4, #0]
 8005806:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800580a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800580e:	d108      	bne.n	8005822 <_scanf_float+0x1c6>
 8005810:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005814:	6022      	str	r2, [r4, #0]
 8005816:	f04f 0a01 	mov.w	sl, #1
 800581a:	e7e3      	b.n	80057e4 <_scanf_float+0x188>
 800581c:	f1ba 0f02 	cmp.w	sl, #2
 8005820:	d055      	beq.n	80058ce <_scanf_float+0x272>
 8005822:	2d01      	cmp	r5, #1
 8005824:	d002      	beq.n	800582c <_scanf_float+0x1d0>
 8005826:	2d04      	cmp	r5, #4
 8005828:	f47f af48 	bne.w	80056bc <_scanf_float+0x60>
 800582c:	3501      	adds	r5, #1
 800582e:	b2ed      	uxtb	r5, r5
 8005830:	e7d8      	b.n	80057e4 <_scanf_float+0x188>
 8005832:	f1ba 0f01 	cmp.w	sl, #1
 8005836:	f47f af41 	bne.w	80056bc <_scanf_float+0x60>
 800583a:	f04f 0a02 	mov.w	sl, #2
 800583e:	e7d1      	b.n	80057e4 <_scanf_float+0x188>
 8005840:	b97d      	cbnz	r5, 8005862 <_scanf_float+0x206>
 8005842:	f1b9 0f00 	cmp.w	r9, #0
 8005846:	f47f af3c 	bne.w	80056c2 <_scanf_float+0x66>
 800584a:	6822      	ldr	r2, [r4, #0]
 800584c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005850:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005854:	f47f af39 	bne.w	80056ca <_scanf_float+0x6e>
 8005858:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800585c:	6022      	str	r2, [r4, #0]
 800585e:	2501      	movs	r5, #1
 8005860:	e7c0      	b.n	80057e4 <_scanf_float+0x188>
 8005862:	2d03      	cmp	r5, #3
 8005864:	d0e2      	beq.n	800582c <_scanf_float+0x1d0>
 8005866:	2d05      	cmp	r5, #5
 8005868:	e7de      	b.n	8005828 <_scanf_float+0x1cc>
 800586a:	2d02      	cmp	r5, #2
 800586c:	f47f af26 	bne.w	80056bc <_scanf_float+0x60>
 8005870:	2503      	movs	r5, #3
 8005872:	e7b7      	b.n	80057e4 <_scanf_float+0x188>
 8005874:	2d06      	cmp	r5, #6
 8005876:	f47f af21 	bne.w	80056bc <_scanf_float+0x60>
 800587a:	2507      	movs	r5, #7
 800587c:	e7b2      	b.n	80057e4 <_scanf_float+0x188>
 800587e:	6822      	ldr	r2, [r4, #0]
 8005880:	0591      	lsls	r1, r2, #22
 8005882:	f57f af1b 	bpl.w	80056bc <_scanf_float+0x60>
 8005886:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800588a:	6022      	str	r2, [r4, #0]
 800588c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005890:	e7a8      	b.n	80057e4 <_scanf_float+0x188>
 8005892:	6822      	ldr	r2, [r4, #0]
 8005894:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005898:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800589c:	d006      	beq.n	80058ac <_scanf_float+0x250>
 800589e:	0550      	lsls	r0, r2, #21
 80058a0:	f57f af0c 	bpl.w	80056bc <_scanf_float+0x60>
 80058a4:	f1b9 0f00 	cmp.w	r9, #0
 80058a8:	f43f af0f 	beq.w	80056ca <_scanf_float+0x6e>
 80058ac:	0591      	lsls	r1, r2, #22
 80058ae:	bf58      	it	pl
 80058b0:	9901      	ldrpl	r1, [sp, #4]
 80058b2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80058b6:	bf58      	it	pl
 80058b8:	eba9 0101 	subpl.w	r1, r9, r1
 80058bc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80058c0:	bf58      	it	pl
 80058c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80058c6:	6022      	str	r2, [r4, #0]
 80058c8:	f04f 0900 	mov.w	r9, #0
 80058cc:	e78a      	b.n	80057e4 <_scanf_float+0x188>
 80058ce:	f04f 0a03 	mov.w	sl, #3
 80058d2:	e787      	b.n	80057e4 <_scanf_float+0x188>
 80058d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80058d8:	4639      	mov	r1, r7
 80058da:	4640      	mov	r0, r8
 80058dc:	4798      	blx	r3
 80058de:	2800      	cmp	r0, #0
 80058e0:	f43f aedf 	beq.w	80056a2 <_scanf_float+0x46>
 80058e4:	e6ea      	b.n	80056bc <_scanf_float+0x60>
 80058e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058ee:	463a      	mov	r2, r7
 80058f0:	4640      	mov	r0, r8
 80058f2:	4798      	blx	r3
 80058f4:	6923      	ldr	r3, [r4, #16]
 80058f6:	3b01      	subs	r3, #1
 80058f8:	6123      	str	r3, [r4, #16]
 80058fa:	e6ec      	b.n	80056d6 <_scanf_float+0x7a>
 80058fc:	1e6b      	subs	r3, r5, #1
 80058fe:	2b06      	cmp	r3, #6
 8005900:	d825      	bhi.n	800594e <_scanf_float+0x2f2>
 8005902:	2d02      	cmp	r5, #2
 8005904:	d836      	bhi.n	8005974 <_scanf_float+0x318>
 8005906:	455e      	cmp	r6, fp
 8005908:	f67f aee8 	bls.w	80056dc <_scanf_float+0x80>
 800590c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005910:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005914:	463a      	mov	r2, r7
 8005916:	4640      	mov	r0, r8
 8005918:	4798      	blx	r3
 800591a:	6923      	ldr	r3, [r4, #16]
 800591c:	3b01      	subs	r3, #1
 800591e:	6123      	str	r3, [r4, #16]
 8005920:	e7f1      	b.n	8005906 <_scanf_float+0x2aa>
 8005922:	9802      	ldr	r0, [sp, #8]
 8005924:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005928:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800592c:	9002      	str	r0, [sp, #8]
 800592e:	463a      	mov	r2, r7
 8005930:	4640      	mov	r0, r8
 8005932:	4798      	blx	r3
 8005934:	6923      	ldr	r3, [r4, #16]
 8005936:	3b01      	subs	r3, #1
 8005938:	6123      	str	r3, [r4, #16]
 800593a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800593e:	fa5f fa8a 	uxtb.w	sl, sl
 8005942:	f1ba 0f02 	cmp.w	sl, #2
 8005946:	d1ec      	bne.n	8005922 <_scanf_float+0x2c6>
 8005948:	3d03      	subs	r5, #3
 800594a:	b2ed      	uxtb	r5, r5
 800594c:	1b76      	subs	r6, r6, r5
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	05da      	lsls	r2, r3, #23
 8005952:	d52f      	bpl.n	80059b4 <_scanf_float+0x358>
 8005954:	055b      	lsls	r3, r3, #21
 8005956:	d510      	bpl.n	800597a <_scanf_float+0x31e>
 8005958:	455e      	cmp	r6, fp
 800595a:	f67f aebf 	bls.w	80056dc <_scanf_float+0x80>
 800595e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005962:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005966:	463a      	mov	r2, r7
 8005968:	4640      	mov	r0, r8
 800596a:	4798      	blx	r3
 800596c:	6923      	ldr	r3, [r4, #16]
 800596e:	3b01      	subs	r3, #1
 8005970:	6123      	str	r3, [r4, #16]
 8005972:	e7f1      	b.n	8005958 <_scanf_float+0x2fc>
 8005974:	46aa      	mov	sl, r5
 8005976:	9602      	str	r6, [sp, #8]
 8005978:	e7df      	b.n	800593a <_scanf_float+0x2de>
 800597a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800597e:	6923      	ldr	r3, [r4, #16]
 8005980:	2965      	cmp	r1, #101	; 0x65
 8005982:	f103 33ff 	add.w	r3, r3, #4294967295
 8005986:	f106 35ff 	add.w	r5, r6, #4294967295
 800598a:	6123      	str	r3, [r4, #16]
 800598c:	d00c      	beq.n	80059a8 <_scanf_float+0x34c>
 800598e:	2945      	cmp	r1, #69	; 0x45
 8005990:	d00a      	beq.n	80059a8 <_scanf_float+0x34c>
 8005992:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005996:	463a      	mov	r2, r7
 8005998:	4640      	mov	r0, r8
 800599a:	4798      	blx	r3
 800599c:	6923      	ldr	r3, [r4, #16]
 800599e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80059a2:	3b01      	subs	r3, #1
 80059a4:	1eb5      	subs	r5, r6, #2
 80059a6:	6123      	str	r3, [r4, #16]
 80059a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80059ac:	463a      	mov	r2, r7
 80059ae:	4640      	mov	r0, r8
 80059b0:	4798      	blx	r3
 80059b2:	462e      	mov	r6, r5
 80059b4:	6825      	ldr	r5, [r4, #0]
 80059b6:	f015 0510 	ands.w	r5, r5, #16
 80059ba:	d158      	bne.n	8005a6e <_scanf_float+0x412>
 80059bc:	7035      	strb	r5, [r6, #0]
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80059c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059c8:	d11c      	bne.n	8005a04 <_scanf_float+0x3a8>
 80059ca:	9b01      	ldr	r3, [sp, #4]
 80059cc:	454b      	cmp	r3, r9
 80059ce:	eba3 0209 	sub.w	r2, r3, r9
 80059d2:	d124      	bne.n	8005a1e <_scanf_float+0x3c2>
 80059d4:	2200      	movs	r2, #0
 80059d6:	4659      	mov	r1, fp
 80059d8:	4640      	mov	r0, r8
 80059da:	f002 fc31 	bl	8008240 <_strtod_r>
 80059de:	9b03      	ldr	r3, [sp, #12]
 80059e0:	6821      	ldr	r1, [r4, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f011 0f02 	tst.w	r1, #2
 80059e8:	ec57 6b10 	vmov	r6, r7, d0
 80059ec:	f103 0204 	add.w	r2, r3, #4
 80059f0:	d020      	beq.n	8005a34 <_scanf_float+0x3d8>
 80059f2:	9903      	ldr	r1, [sp, #12]
 80059f4:	600a      	str	r2, [r1, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	e9c3 6700 	strd	r6, r7, [r3]
 80059fc:	68e3      	ldr	r3, [r4, #12]
 80059fe:	3301      	adds	r3, #1
 8005a00:	60e3      	str	r3, [r4, #12]
 8005a02:	e66c      	b.n	80056de <_scanf_float+0x82>
 8005a04:	9b04      	ldr	r3, [sp, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0e4      	beq.n	80059d4 <_scanf_float+0x378>
 8005a0a:	9905      	ldr	r1, [sp, #20]
 8005a0c:	230a      	movs	r3, #10
 8005a0e:	462a      	mov	r2, r5
 8005a10:	3101      	adds	r1, #1
 8005a12:	4640      	mov	r0, r8
 8005a14:	f002 fc9c 	bl	8008350 <_strtol_r>
 8005a18:	9b04      	ldr	r3, [sp, #16]
 8005a1a:	9e05      	ldr	r6, [sp, #20]
 8005a1c:	1ac2      	subs	r2, r0, r3
 8005a1e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005a22:	429e      	cmp	r6, r3
 8005a24:	bf28      	it	cs
 8005a26:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005a2a:	4912      	ldr	r1, [pc, #72]	; (8005a74 <_scanf_float+0x418>)
 8005a2c:	4630      	mov	r0, r6
 8005a2e:	f000 f8e7 	bl	8005c00 <siprintf>
 8005a32:	e7cf      	b.n	80059d4 <_scanf_float+0x378>
 8005a34:	f011 0f04 	tst.w	r1, #4
 8005a38:	9903      	ldr	r1, [sp, #12]
 8005a3a:	600a      	str	r2, [r1, #0]
 8005a3c:	d1db      	bne.n	80059f6 <_scanf_float+0x39a>
 8005a3e:	f8d3 8000 	ldr.w	r8, [r3]
 8005a42:	ee10 2a10 	vmov	r2, s0
 8005a46:	ee10 0a10 	vmov	r0, s0
 8005a4a:	463b      	mov	r3, r7
 8005a4c:	4639      	mov	r1, r7
 8005a4e:	f7fb f86d 	bl	8000b2c <__aeabi_dcmpun>
 8005a52:	b128      	cbz	r0, 8005a60 <_scanf_float+0x404>
 8005a54:	4808      	ldr	r0, [pc, #32]	; (8005a78 <_scanf_float+0x41c>)
 8005a56:	f000 f9b7 	bl	8005dc8 <nanf>
 8005a5a:	ed88 0a00 	vstr	s0, [r8]
 8005a5e:	e7cd      	b.n	80059fc <_scanf_float+0x3a0>
 8005a60:	4630      	mov	r0, r6
 8005a62:	4639      	mov	r1, r7
 8005a64:	f7fb f8c0 	bl	8000be8 <__aeabi_d2f>
 8005a68:	f8c8 0000 	str.w	r0, [r8]
 8005a6c:	e7c6      	b.n	80059fc <_scanf_float+0x3a0>
 8005a6e:	2500      	movs	r5, #0
 8005a70:	e635      	b.n	80056de <_scanf_float+0x82>
 8005a72:	bf00      	nop
 8005a74:	080095bc 	.word	0x080095bc
 8005a78:	0800994d 	.word	0x0800994d

08005a7c <std>:
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	b510      	push	{r4, lr}
 8005a80:	4604      	mov	r4, r0
 8005a82:	e9c0 3300 	strd	r3, r3, [r0]
 8005a86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a8a:	6083      	str	r3, [r0, #8]
 8005a8c:	8181      	strh	r1, [r0, #12]
 8005a8e:	6643      	str	r3, [r0, #100]	; 0x64
 8005a90:	81c2      	strh	r2, [r0, #14]
 8005a92:	6183      	str	r3, [r0, #24]
 8005a94:	4619      	mov	r1, r3
 8005a96:	2208      	movs	r2, #8
 8005a98:	305c      	adds	r0, #92	; 0x5c
 8005a9a:	f000 f914 	bl	8005cc6 <memset>
 8005a9e:	4b0d      	ldr	r3, [pc, #52]	; (8005ad4 <std+0x58>)
 8005aa0:	6263      	str	r3, [r4, #36]	; 0x24
 8005aa2:	4b0d      	ldr	r3, [pc, #52]	; (8005ad8 <std+0x5c>)
 8005aa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005aa6:	4b0d      	ldr	r3, [pc, #52]	; (8005adc <std+0x60>)
 8005aa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005aaa:	4b0d      	ldr	r3, [pc, #52]	; (8005ae0 <std+0x64>)
 8005aac:	6323      	str	r3, [r4, #48]	; 0x30
 8005aae:	4b0d      	ldr	r3, [pc, #52]	; (8005ae4 <std+0x68>)
 8005ab0:	6224      	str	r4, [r4, #32]
 8005ab2:	429c      	cmp	r4, r3
 8005ab4:	d006      	beq.n	8005ac4 <std+0x48>
 8005ab6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005aba:	4294      	cmp	r4, r2
 8005abc:	d002      	beq.n	8005ac4 <std+0x48>
 8005abe:	33d0      	adds	r3, #208	; 0xd0
 8005ac0:	429c      	cmp	r4, r3
 8005ac2:	d105      	bne.n	8005ad0 <std+0x54>
 8005ac4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005acc:	f000 b978 	b.w	8005dc0 <__retarget_lock_init_recursive>
 8005ad0:	bd10      	pop	{r4, pc}
 8005ad2:	bf00      	nop
 8005ad4:	08005c41 	.word	0x08005c41
 8005ad8:	08005c63 	.word	0x08005c63
 8005adc:	08005c9b 	.word	0x08005c9b
 8005ae0:	08005cbf 	.word	0x08005cbf
 8005ae4:	200007c8 	.word	0x200007c8

08005ae8 <stdio_exit_handler>:
 8005ae8:	4a02      	ldr	r2, [pc, #8]	; (8005af4 <stdio_exit_handler+0xc>)
 8005aea:	4903      	ldr	r1, [pc, #12]	; (8005af8 <stdio_exit_handler+0x10>)
 8005aec:	4803      	ldr	r0, [pc, #12]	; (8005afc <stdio_exit_handler+0x14>)
 8005aee:	f000 b869 	b.w	8005bc4 <_fwalk_sglue>
 8005af2:	bf00      	nop
 8005af4:	2000019c 	.word	0x2000019c
 8005af8:	08008711 	.word	0x08008711
 8005afc:	200001a8 	.word	0x200001a8

08005b00 <cleanup_stdio>:
 8005b00:	6841      	ldr	r1, [r0, #4]
 8005b02:	4b0c      	ldr	r3, [pc, #48]	; (8005b34 <cleanup_stdio+0x34>)
 8005b04:	4299      	cmp	r1, r3
 8005b06:	b510      	push	{r4, lr}
 8005b08:	4604      	mov	r4, r0
 8005b0a:	d001      	beq.n	8005b10 <cleanup_stdio+0x10>
 8005b0c:	f002 fe00 	bl	8008710 <_fflush_r>
 8005b10:	68a1      	ldr	r1, [r4, #8]
 8005b12:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <cleanup_stdio+0x38>)
 8005b14:	4299      	cmp	r1, r3
 8005b16:	d002      	beq.n	8005b1e <cleanup_stdio+0x1e>
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f002 fdf9 	bl	8008710 <_fflush_r>
 8005b1e:	68e1      	ldr	r1, [r4, #12]
 8005b20:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <cleanup_stdio+0x3c>)
 8005b22:	4299      	cmp	r1, r3
 8005b24:	d004      	beq.n	8005b30 <cleanup_stdio+0x30>
 8005b26:	4620      	mov	r0, r4
 8005b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b2c:	f002 bdf0 	b.w	8008710 <_fflush_r>
 8005b30:	bd10      	pop	{r4, pc}
 8005b32:	bf00      	nop
 8005b34:	200007c8 	.word	0x200007c8
 8005b38:	20000830 	.word	0x20000830
 8005b3c:	20000898 	.word	0x20000898

08005b40 <global_stdio_init.part.0>:
 8005b40:	b510      	push	{r4, lr}
 8005b42:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <global_stdio_init.part.0+0x30>)
 8005b44:	4c0b      	ldr	r4, [pc, #44]	; (8005b74 <global_stdio_init.part.0+0x34>)
 8005b46:	4a0c      	ldr	r2, [pc, #48]	; (8005b78 <global_stdio_init.part.0+0x38>)
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	2104      	movs	r1, #4
 8005b50:	f7ff ff94 	bl	8005a7c <std>
 8005b54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005b58:	2201      	movs	r2, #1
 8005b5a:	2109      	movs	r1, #9
 8005b5c:	f7ff ff8e 	bl	8005a7c <std>
 8005b60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005b64:	2202      	movs	r2, #2
 8005b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b6a:	2112      	movs	r1, #18
 8005b6c:	f7ff bf86 	b.w	8005a7c <std>
 8005b70:	20000900 	.word	0x20000900
 8005b74:	200007c8 	.word	0x200007c8
 8005b78:	08005ae9 	.word	0x08005ae9

08005b7c <__sfp_lock_acquire>:
 8005b7c:	4801      	ldr	r0, [pc, #4]	; (8005b84 <__sfp_lock_acquire+0x8>)
 8005b7e:	f000 b920 	b.w	8005dc2 <__retarget_lock_acquire_recursive>
 8005b82:	bf00      	nop
 8005b84:	20000909 	.word	0x20000909

08005b88 <__sfp_lock_release>:
 8005b88:	4801      	ldr	r0, [pc, #4]	; (8005b90 <__sfp_lock_release+0x8>)
 8005b8a:	f000 b91b 	b.w	8005dc4 <__retarget_lock_release_recursive>
 8005b8e:	bf00      	nop
 8005b90:	20000909 	.word	0x20000909

08005b94 <__sinit>:
 8005b94:	b510      	push	{r4, lr}
 8005b96:	4604      	mov	r4, r0
 8005b98:	f7ff fff0 	bl	8005b7c <__sfp_lock_acquire>
 8005b9c:	6a23      	ldr	r3, [r4, #32]
 8005b9e:	b11b      	cbz	r3, 8005ba8 <__sinit+0x14>
 8005ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ba4:	f7ff bff0 	b.w	8005b88 <__sfp_lock_release>
 8005ba8:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <__sinit+0x28>)
 8005baa:	6223      	str	r3, [r4, #32]
 8005bac:	4b04      	ldr	r3, [pc, #16]	; (8005bc0 <__sinit+0x2c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1f5      	bne.n	8005ba0 <__sinit+0xc>
 8005bb4:	f7ff ffc4 	bl	8005b40 <global_stdio_init.part.0>
 8005bb8:	e7f2      	b.n	8005ba0 <__sinit+0xc>
 8005bba:	bf00      	nop
 8005bbc:	08005b01 	.word	0x08005b01
 8005bc0:	20000900 	.word	0x20000900

08005bc4 <_fwalk_sglue>:
 8005bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bc8:	4607      	mov	r7, r0
 8005bca:	4688      	mov	r8, r1
 8005bcc:	4614      	mov	r4, r2
 8005bce:	2600      	movs	r6, #0
 8005bd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bd4:	f1b9 0901 	subs.w	r9, r9, #1
 8005bd8:	d505      	bpl.n	8005be6 <_fwalk_sglue+0x22>
 8005bda:	6824      	ldr	r4, [r4, #0]
 8005bdc:	2c00      	cmp	r4, #0
 8005bde:	d1f7      	bne.n	8005bd0 <_fwalk_sglue+0xc>
 8005be0:	4630      	mov	r0, r6
 8005be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005be6:	89ab      	ldrh	r3, [r5, #12]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d907      	bls.n	8005bfc <_fwalk_sglue+0x38>
 8005bec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	d003      	beq.n	8005bfc <_fwalk_sglue+0x38>
 8005bf4:	4629      	mov	r1, r5
 8005bf6:	4638      	mov	r0, r7
 8005bf8:	47c0      	blx	r8
 8005bfa:	4306      	orrs	r6, r0
 8005bfc:	3568      	adds	r5, #104	; 0x68
 8005bfe:	e7e9      	b.n	8005bd4 <_fwalk_sglue+0x10>

08005c00 <siprintf>:
 8005c00:	b40e      	push	{r1, r2, r3}
 8005c02:	b500      	push	{lr}
 8005c04:	b09c      	sub	sp, #112	; 0x70
 8005c06:	ab1d      	add	r3, sp, #116	; 0x74
 8005c08:	9002      	str	r0, [sp, #8]
 8005c0a:	9006      	str	r0, [sp, #24]
 8005c0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c10:	4809      	ldr	r0, [pc, #36]	; (8005c38 <siprintf+0x38>)
 8005c12:	9107      	str	r1, [sp, #28]
 8005c14:	9104      	str	r1, [sp, #16]
 8005c16:	4909      	ldr	r1, [pc, #36]	; (8005c3c <siprintf+0x3c>)
 8005c18:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c1c:	9105      	str	r1, [sp, #20]
 8005c1e:	6800      	ldr	r0, [r0, #0]
 8005c20:	9301      	str	r3, [sp, #4]
 8005c22:	a902      	add	r1, sp, #8
 8005c24:	f002 fbf0 	bl	8008408 <_svfiprintf_r>
 8005c28:	9b02      	ldr	r3, [sp, #8]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	701a      	strb	r2, [r3, #0]
 8005c2e:	b01c      	add	sp, #112	; 0x70
 8005c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c34:	b003      	add	sp, #12
 8005c36:	4770      	bx	lr
 8005c38:	200001f4 	.word	0x200001f4
 8005c3c:	ffff0208 	.word	0xffff0208

08005c40 <__sread>:
 8005c40:	b510      	push	{r4, lr}
 8005c42:	460c      	mov	r4, r1
 8005c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c48:	f000 f86c 	bl	8005d24 <_read_r>
 8005c4c:	2800      	cmp	r0, #0
 8005c4e:	bfab      	itete	ge
 8005c50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c52:	89a3      	ldrhlt	r3, [r4, #12]
 8005c54:	181b      	addge	r3, r3, r0
 8005c56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c5a:	bfac      	ite	ge
 8005c5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c5e:	81a3      	strhlt	r3, [r4, #12]
 8005c60:	bd10      	pop	{r4, pc}

08005c62 <__swrite>:
 8005c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c66:	461f      	mov	r7, r3
 8005c68:	898b      	ldrh	r3, [r1, #12]
 8005c6a:	05db      	lsls	r3, r3, #23
 8005c6c:	4605      	mov	r5, r0
 8005c6e:	460c      	mov	r4, r1
 8005c70:	4616      	mov	r6, r2
 8005c72:	d505      	bpl.n	8005c80 <__swrite+0x1e>
 8005c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c78:	2302      	movs	r3, #2
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f000 f840 	bl	8005d00 <_lseek_r>
 8005c80:	89a3      	ldrh	r3, [r4, #12]
 8005c82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c8a:	81a3      	strh	r3, [r4, #12]
 8005c8c:	4632      	mov	r2, r6
 8005c8e:	463b      	mov	r3, r7
 8005c90:	4628      	mov	r0, r5
 8005c92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c96:	f000 b857 	b.w	8005d48 <_write_r>

08005c9a <__sseek>:
 8005c9a:	b510      	push	{r4, lr}
 8005c9c:	460c      	mov	r4, r1
 8005c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ca2:	f000 f82d 	bl	8005d00 <_lseek_r>
 8005ca6:	1c43      	adds	r3, r0, #1
 8005ca8:	89a3      	ldrh	r3, [r4, #12]
 8005caa:	bf15      	itete	ne
 8005cac:	6560      	strne	r0, [r4, #84]	; 0x54
 8005cae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005cb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cb6:	81a3      	strheq	r3, [r4, #12]
 8005cb8:	bf18      	it	ne
 8005cba:	81a3      	strhne	r3, [r4, #12]
 8005cbc:	bd10      	pop	{r4, pc}

08005cbe <__sclose>:
 8005cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cc2:	f000 b80d 	b.w	8005ce0 <_close_r>

08005cc6 <memset>:
 8005cc6:	4402      	add	r2, r0
 8005cc8:	4603      	mov	r3, r0
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d100      	bne.n	8005cd0 <memset+0xa>
 8005cce:	4770      	bx	lr
 8005cd0:	f803 1b01 	strb.w	r1, [r3], #1
 8005cd4:	e7f9      	b.n	8005cca <memset+0x4>
	...

08005cd8 <_localeconv_r>:
 8005cd8:	4800      	ldr	r0, [pc, #0]	; (8005cdc <_localeconv_r+0x4>)
 8005cda:	4770      	bx	lr
 8005cdc:	200002e8 	.word	0x200002e8

08005ce0 <_close_r>:
 8005ce0:	b538      	push	{r3, r4, r5, lr}
 8005ce2:	4d06      	ldr	r5, [pc, #24]	; (8005cfc <_close_r+0x1c>)
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	4608      	mov	r0, r1
 8005cea:	602b      	str	r3, [r5, #0]
 8005cec:	f7fb ff4b 	bl	8001b86 <_close>
 8005cf0:	1c43      	adds	r3, r0, #1
 8005cf2:	d102      	bne.n	8005cfa <_close_r+0x1a>
 8005cf4:	682b      	ldr	r3, [r5, #0]
 8005cf6:	b103      	cbz	r3, 8005cfa <_close_r+0x1a>
 8005cf8:	6023      	str	r3, [r4, #0]
 8005cfa:	bd38      	pop	{r3, r4, r5, pc}
 8005cfc:	20000904 	.word	0x20000904

08005d00 <_lseek_r>:
 8005d00:	b538      	push	{r3, r4, r5, lr}
 8005d02:	4d07      	ldr	r5, [pc, #28]	; (8005d20 <_lseek_r+0x20>)
 8005d04:	4604      	mov	r4, r0
 8005d06:	4608      	mov	r0, r1
 8005d08:	4611      	mov	r1, r2
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	602a      	str	r2, [r5, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f7fb ff60 	bl	8001bd4 <_lseek>
 8005d14:	1c43      	adds	r3, r0, #1
 8005d16:	d102      	bne.n	8005d1e <_lseek_r+0x1e>
 8005d18:	682b      	ldr	r3, [r5, #0]
 8005d1a:	b103      	cbz	r3, 8005d1e <_lseek_r+0x1e>
 8005d1c:	6023      	str	r3, [r4, #0]
 8005d1e:	bd38      	pop	{r3, r4, r5, pc}
 8005d20:	20000904 	.word	0x20000904

08005d24 <_read_r>:
 8005d24:	b538      	push	{r3, r4, r5, lr}
 8005d26:	4d07      	ldr	r5, [pc, #28]	; (8005d44 <_read_r+0x20>)
 8005d28:	4604      	mov	r4, r0
 8005d2a:	4608      	mov	r0, r1
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	2200      	movs	r2, #0
 8005d30:	602a      	str	r2, [r5, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	f7fb feee 	bl	8001b14 <_read>
 8005d38:	1c43      	adds	r3, r0, #1
 8005d3a:	d102      	bne.n	8005d42 <_read_r+0x1e>
 8005d3c:	682b      	ldr	r3, [r5, #0]
 8005d3e:	b103      	cbz	r3, 8005d42 <_read_r+0x1e>
 8005d40:	6023      	str	r3, [r4, #0]
 8005d42:	bd38      	pop	{r3, r4, r5, pc}
 8005d44:	20000904 	.word	0x20000904

08005d48 <_write_r>:
 8005d48:	b538      	push	{r3, r4, r5, lr}
 8005d4a:	4d07      	ldr	r5, [pc, #28]	; (8005d68 <_write_r+0x20>)
 8005d4c:	4604      	mov	r4, r0
 8005d4e:	4608      	mov	r0, r1
 8005d50:	4611      	mov	r1, r2
 8005d52:	2200      	movs	r2, #0
 8005d54:	602a      	str	r2, [r5, #0]
 8005d56:	461a      	mov	r2, r3
 8005d58:	f7fb fef9 	bl	8001b4e <_write>
 8005d5c:	1c43      	adds	r3, r0, #1
 8005d5e:	d102      	bne.n	8005d66 <_write_r+0x1e>
 8005d60:	682b      	ldr	r3, [r5, #0]
 8005d62:	b103      	cbz	r3, 8005d66 <_write_r+0x1e>
 8005d64:	6023      	str	r3, [r4, #0]
 8005d66:	bd38      	pop	{r3, r4, r5, pc}
 8005d68:	20000904 	.word	0x20000904

08005d6c <__errno>:
 8005d6c:	4b01      	ldr	r3, [pc, #4]	; (8005d74 <__errno+0x8>)
 8005d6e:	6818      	ldr	r0, [r3, #0]
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	200001f4 	.word	0x200001f4

08005d78 <__libc_init_array>:
 8005d78:	b570      	push	{r4, r5, r6, lr}
 8005d7a:	4d0d      	ldr	r5, [pc, #52]	; (8005db0 <__libc_init_array+0x38>)
 8005d7c:	4c0d      	ldr	r4, [pc, #52]	; (8005db4 <__libc_init_array+0x3c>)
 8005d7e:	1b64      	subs	r4, r4, r5
 8005d80:	10a4      	asrs	r4, r4, #2
 8005d82:	2600      	movs	r6, #0
 8005d84:	42a6      	cmp	r6, r4
 8005d86:	d109      	bne.n	8005d9c <__libc_init_array+0x24>
 8005d88:	4d0b      	ldr	r5, [pc, #44]	; (8005db8 <__libc_init_array+0x40>)
 8005d8a:	4c0c      	ldr	r4, [pc, #48]	; (8005dbc <__libc_init_array+0x44>)
 8005d8c:	f003 fbd8 	bl	8009540 <_init>
 8005d90:	1b64      	subs	r4, r4, r5
 8005d92:	10a4      	asrs	r4, r4, #2
 8005d94:	2600      	movs	r6, #0
 8005d96:	42a6      	cmp	r6, r4
 8005d98:	d105      	bne.n	8005da6 <__libc_init_array+0x2e>
 8005d9a:	bd70      	pop	{r4, r5, r6, pc}
 8005d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da0:	4798      	blx	r3
 8005da2:	3601      	adds	r6, #1
 8005da4:	e7ee      	b.n	8005d84 <__libc_init_array+0xc>
 8005da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005daa:	4798      	blx	r3
 8005dac:	3601      	adds	r6, #1
 8005dae:	e7f2      	b.n	8005d96 <__libc_init_array+0x1e>
 8005db0:	080099b0 	.word	0x080099b0
 8005db4:	080099b0 	.word	0x080099b0
 8005db8:	080099b0 	.word	0x080099b0
 8005dbc:	080099b4 	.word	0x080099b4

08005dc0 <__retarget_lock_init_recursive>:
 8005dc0:	4770      	bx	lr

08005dc2 <__retarget_lock_acquire_recursive>:
 8005dc2:	4770      	bx	lr

08005dc4 <__retarget_lock_release_recursive>:
 8005dc4:	4770      	bx	lr
	...

08005dc8 <nanf>:
 8005dc8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005dd0 <nanf+0x8>
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	7fc00000 	.word	0x7fc00000

08005dd4 <quorem>:
 8005dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd8:	6903      	ldr	r3, [r0, #16]
 8005dda:	690c      	ldr	r4, [r1, #16]
 8005ddc:	42a3      	cmp	r3, r4
 8005dde:	4607      	mov	r7, r0
 8005de0:	db7e      	blt.n	8005ee0 <quorem+0x10c>
 8005de2:	3c01      	subs	r4, #1
 8005de4:	f101 0814 	add.w	r8, r1, #20
 8005de8:	f100 0514 	add.w	r5, r0, #20
 8005dec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005df0:	9301      	str	r3, [sp, #4]
 8005df2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005df6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e02:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e06:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e0a:	d331      	bcc.n	8005e70 <quorem+0x9c>
 8005e0c:	f04f 0e00 	mov.w	lr, #0
 8005e10:	4640      	mov	r0, r8
 8005e12:	46ac      	mov	ip, r5
 8005e14:	46f2      	mov	sl, lr
 8005e16:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e1a:	b293      	uxth	r3, r2
 8005e1c:	fb06 e303 	mla	r3, r6, r3, lr
 8005e20:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e24:	0c1a      	lsrs	r2, r3, #16
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	ebaa 0303 	sub.w	r3, sl, r3
 8005e2c:	f8dc a000 	ldr.w	sl, [ip]
 8005e30:	fa13 f38a 	uxtah	r3, r3, sl
 8005e34:	fb06 220e 	mla	r2, r6, lr, r2
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	9b00      	ldr	r3, [sp, #0]
 8005e3c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e40:	b292      	uxth	r2, r2
 8005e42:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e4a:	f8bd 3000 	ldrh.w	r3, [sp]
 8005e4e:	4581      	cmp	r9, r0
 8005e50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e54:	f84c 3b04 	str.w	r3, [ip], #4
 8005e58:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e5c:	d2db      	bcs.n	8005e16 <quorem+0x42>
 8005e5e:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e62:	b92b      	cbnz	r3, 8005e70 <quorem+0x9c>
 8005e64:	9b01      	ldr	r3, [sp, #4]
 8005e66:	3b04      	subs	r3, #4
 8005e68:	429d      	cmp	r5, r3
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	d32c      	bcc.n	8005ec8 <quorem+0xf4>
 8005e6e:	613c      	str	r4, [r7, #16]
 8005e70:	4638      	mov	r0, r7
 8005e72:	f001 f9f1 	bl	8007258 <__mcmp>
 8005e76:	2800      	cmp	r0, #0
 8005e78:	db22      	blt.n	8005ec0 <quorem+0xec>
 8005e7a:	3601      	adds	r6, #1
 8005e7c:	4629      	mov	r1, r5
 8005e7e:	2000      	movs	r0, #0
 8005e80:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e84:	f8d1 c000 	ldr.w	ip, [r1]
 8005e88:	b293      	uxth	r3, r2
 8005e8a:	1ac3      	subs	r3, r0, r3
 8005e8c:	0c12      	lsrs	r2, r2, #16
 8005e8e:	fa13 f38c 	uxtah	r3, r3, ip
 8005e92:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005e96:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ea0:	45c1      	cmp	r9, r8
 8005ea2:	f841 3b04 	str.w	r3, [r1], #4
 8005ea6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005eaa:	d2e9      	bcs.n	8005e80 <quorem+0xac>
 8005eac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005eb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005eb4:	b922      	cbnz	r2, 8005ec0 <quorem+0xec>
 8005eb6:	3b04      	subs	r3, #4
 8005eb8:	429d      	cmp	r5, r3
 8005eba:	461a      	mov	r2, r3
 8005ebc:	d30a      	bcc.n	8005ed4 <quorem+0x100>
 8005ebe:	613c      	str	r4, [r7, #16]
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	b003      	add	sp, #12
 8005ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec8:	6812      	ldr	r2, [r2, #0]
 8005eca:	3b04      	subs	r3, #4
 8005ecc:	2a00      	cmp	r2, #0
 8005ece:	d1ce      	bne.n	8005e6e <quorem+0x9a>
 8005ed0:	3c01      	subs	r4, #1
 8005ed2:	e7c9      	b.n	8005e68 <quorem+0x94>
 8005ed4:	6812      	ldr	r2, [r2, #0]
 8005ed6:	3b04      	subs	r3, #4
 8005ed8:	2a00      	cmp	r2, #0
 8005eda:	d1f0      	bne.n	8005ebe <quorem+0xea>
 8005edc:	3c01      	subs	r4, #1
 8005ede:	e7eb      	b.n	8005eb8 <quorem+0xe4>
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	e7ee      	b.n	8005ec2 <quorem+0xee>
 8005ee4:	0000      	movs	r0, r0
	...

08005ee8 <_dtoa_r>:
 8005ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eec:	ed2d 8b04 	vpush	{d8-d9}
 8005ef0:	69c5      	ldr	r5, [r0, #28]
 8005ef2:	b093      	sub	sp, #76	; 0x4c
 8005ef4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005ef8:	ec57 6b10 	vmov	r6, r7, d0
 8005efc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005f00:	9107      	str	r1, [sp, #28]
 8005f02:	4604      	mov	r4, r0
 8005f04:	920a      	str	r2, [sp, #40]	; 0x28
 8005f06:	930d      	str	r3, [sp, #52]	; 0x34
 8005f08:	b975      	cbnz	r5, 8005f28 <_dtoa_r+0x40>
 8005f0a:	2010      	movs	r0, #16
 8005f0c:	f000 fe2a 	bl	8006b64 <malloc>
 8005f10:	4602      	mov	r2, r0
 8005f12:	61e0      	str	r0, [r4, #28]
 8005f14:	b920      	cbnz	r0, 8005f20 <_dtoa_r+0x38>
 8005f16:	4bae      	ldr	r3, [pc, #696]	; (80061d0 <_dtoa_r+0x2e8>)
 8005f18:	21ef      	movs	r1, #239	; 0xef
 8005f1a:	48ae      	ldr	r0, [pc, #696]	; (80061d4 <_dtoa_r+0x2ec>)
 8005f1c:	f002 fc74 	bl	8008808 <__assert_func>
 8005f20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f24:	6005      	str	r5, [r0, #0]
 8005f26:	60c5      	str	r5, [r0, #12]
 8005f28:	69e3      	ldr	r3, [r4, #28]
 8005f2a:	6819      	ldr	r1, [r3, #0]
 8005f2c:	b151      	cbz	r1, 8005f44 <_dtoa_r+0x5c>
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	604a      	str	r2, [r1, #4]
 8005f32:	2301      	movs	r3, #1
 8005f34:	4093      	lsls	r3, r2
 8005f36:	608b      	str	r3, [r1, #8]
 8005f38:	4620      	mov	r0, r4
 8005f3a:	f000 ff07 	bl	8006d4c <_Bfree>
 8005f3e:	69e3      	ldr	r3, [r4, #28]
 8005f40:	2200      	movs	r2, #0
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	1e3b      	subs	r3, r7, #0
 8005f46:	bfbb      	ittet	lt
 8005f48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f4c:	9303      	strlt	r3, [sp, #12]
 8005f4e:	2300      	movge	r3, #0
 8005f50:	2201      	movlt	r2, #1
 8005f52:	bfac      	ite	ge
 8005f54:	f8c8 3000 	strge.w	r3, [r8]
 8005f58:	f8c8 2000 	strlt.w	r2, [r8]
 8005f5c:	4b9e      	ldr	r3, [pc, #632]	; (80061d8 <_dtoa_r+0x2f0>)
 8005f5e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005f62:	ea33 0308 	bics.w	r3, r3, r8
 8005f66:	d11b      	bne.n	8005fa0 <_dtoa_r+0xb8>
 8005f68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f6e:	6013      	str	r3, [r2, #0]
 8005f70:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005f74:	4333      	orrs	r3, r6
 8005f76:	f000 8593 	beq.w	8006aa0 <_dtoa_r+0xbb8>
 8005f7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f7c:	b963      	cbnz	r3, 8005f98 <_dtoa_r+0xb0>
 8005f7e:	4b97      	ldr	r3, [pc, #604]	; (80061dc <_dtoa_r+0x2f4>)
 8005f80:	e027      	b.n	8005fd2 <_dtoa_r+0xea>
 8005f82:	4b97      	ldr	r3, [pc, #604]	; (80061e0 <_dtoa_r+0x2f8>)
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	3308      	adds	r3, #8
 8005f88:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f8a:	6013      	str	r3, [r2, #0]
 8005f8c:	9800      	ldr	r0, [sp, #0]
 8005f8e:	b013      	add	sp, #76	; 0x4c
 8005f90:	ecbd 8b04 	vpop	{d8-d9}
 8005f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f98:	4b90      	ldr	r3, [pc, #576]	; (80061dc <_dtoa_r+0x2f4>)
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	3303      	adds	r3, #3
 8005f9e:	e7f3      	b.n	8005f88 <_dtoa_r+0xa0>
 8005fa0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	ec51 0b17 	vmov	r0, r1, d7
 8005faa:	eeb0 8a47 	vmov.f32	s16, s14
 8005fae:	eef0 8a67 	vmov.f32	s17, s15
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f7fa fd88 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fb8:	4681      	mov	r9, r0
 8005fba:	b160      	cbz	r0, 8005fd6 <_dtoa_r+0xee>
 8005fbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	6013      	str	r3, [r2, #0]
 8005fc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 8568 	beq.w	8006a9a <_dtoa_r+0xbb2>
 8005fca:	4b86      	ldr	r3, [pc, #536]	; (80061e4 <_dtoa_r+0x2fc>)
 8005fcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005fce:	6013      	str	r3, [r2, #0]
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	e7da      	b.n	8005f8c <_dtoa_r+0xa4>
 8005fd6:	aa10      	add	r2, sp, #64	; 0x40
 8005fd8:	a911      	add	r1, sp, #68	; 0x44
 8005fda:	4620      	mov	r0, r4
 8005fdc:	eeb0 0a48 	vmov.f32	s0, s16
 8005fe0:	eef0 0a68 	vmov.f32	s1, s17
 8005fe4:	f001 fa4e 	bl	8007484 <__d2b>
 8005fe8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005fec:	4682      	mov	sl, r0
 8005fee:	2d00      	cmp	r5, #0
 8005ff0:	d07f      	beq.n	80060f2 <_dtoa_r+0x20a>
 8005ff2:	ee18 3a90 	vmov	r3, s17
 8005ff6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ffa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005ffe:	ec51 0b18 	vmov	r0, r1, d8
 8006002:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006006:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800600a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800600e:	4619      	mov	r1, r3
 8006010:	2200      	movs	r2, #0
 8006012:	4b75      	ldr	r3, [pc, #468]	; (80061e8 <_dtoa_r+0x300>)
 8006014:	f7fa f938 	bl	8000288 <__aeabi_dsub>
 8006018:	a367      	add	r3, pc, #412	; (adr r3, 80061b8 <_dtoa_r+0x2d0>)
 800601a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601e:	f7fa faeb 	bl	80005f8 <__aeabi_dmul>
 8006022:	a367      	add	r3, pc, #412	; (adr r3, 80061c0 <_dtoa_r+0x2d8>)
 8006024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006028:	f7fa f930 	bl	800028c <__adddf3>
 800602c:	4606      	mov	r6, r0
 800602e:	4628      	mov	r0, r5
 8006030:	460f      	mov	r7, r1
 8006032:	f7fa fa77 	bl	8000524 <__aeabi_i2d>
 8006036:	a364      	add	r3, pc, #400	; (adr r3, 80061c8 <_dtoa_r+0x2e0>)
 8006038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603c:	f7fa fadc 	bl	80005f8 <__aeabi_dmul>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	4630      	mov	r0, r6
 8006046:	4639      	mov	r1, r7
 8006048:	f7fa f920 	bl	800028c <__adddf3>
 800604c:	4606      	mov	r6, r0
 800604e:	460f      	mov	r7, r1
 8006050:	f7fa fd82 	bl	8000b58 <__aeabi_d2iz>
 8006054:	2200      	movs	r2, #0
 8006056:	4683      	mov	fp, r0
 8006058:	2300      	movs	r3, #0
 800605a:	4630      	mov	r0, r6
 800605c:	4639      	mov	r1, r7
 800605e:	f7fa fd3d 	bl	8000adc <__aeabi_dcmplt>
 8006062:	b148      	cbz	r0, 8006078 <_dtoa_r+0x190>
 8006064:	4658      	mov	r0, fp
 8006066:	f7fa fa5d 	bl	8000524 <__aeabi_i2d>
 800606a:	4632      	mov	r2, r6
 800606c:	463b      	mov	r3, r7
 800606e:	f7fa fd2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006072:	b908      	cbnz	r0, 8006078 <_dtoa_r+0x190>
 8006074:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006078:	f1bb 0f16 	cmp.w	fp, #22
 800607c:	d857      	bhi.n	800612e <_dtoa_r+0x246>
 800607e:	4b5b      	ldr	r3, [pc, #364]	; (80061ec <_dtoa_r+0x304>)
 8006080:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006088:	ec51 0b18 	vmov	r0, r1, d8
 800608c:	f7fa fd26 	bl	8000adc <__aeabi_dcmplt>
 8006090:	2800      	cmp	r0, #0
 8006092:	d04e      	beq.n	8006132 <_dtoa_r+0x24a>
 8006094:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006098:	2300      	movs	r3, #0
 800609a:	930c      	str	r3, [sp, #48]	; 0x30
 800609c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800609e:	1b5b      	subs	r3, r3, r5
 80060a0:	1e5a      	subs	r2, r3, #1
 80060a2:	bf45      	ittet	mi
 80060a4:	f1c3 0301 	rsbmi	r3, r3, #1
 80060a8:	9305      	strmi	r3, [sp, #20]
 80060aa:	2300      	movpl	r3, #0
 80060ac:	2300      	movmi	r3, #0
 80060ae:	9206      	str	r2, [sp, #24]
 80060b0:	bf54      	ite	pl
 80060b2:	9305      	strpl	r3, [sp, #20]
 80060b4:	9306      	strmi	r3, [sp, #24]
 80060b6:	f1bb 0f00 	cmp.w	fp, #0
 80060ba:	db3c      	blt.n	8006136 <_dtoa_r+0x24e>
 80060bc:	9b06      	ldr	r3, [sp, #24]
 80060be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80060c2:	445b      	add	r3, fp
 80060c4:	9306      	str	r3, [sp, #24]
 80060c6:	2300      	movs	r3, #0
 80060c8:	9308      	str	r3, [sp, #32]
 80060ca:	9b07      	ldr	r3, [sp, #28]
 80060cc:	2b09      	cmp	r3, #9
 80060ce:	d868      	bhi.n	80061a2 <_dtoa_r+0x2ba>
 80060d0:	2b05      	cmp	r3, #5
 80060d2:	bfc4      	itt	gt
 80060d4:	3b04      	subgt	r3, #4
 80060d6:	9307      	strgt	r3, [sp, #28]
 80060d8:	9b07      	ldr	r3, [sp, #28]
 80060da:	f1a3 0302 	sub.w	r3, r3, #2
 80060de:	bfcc      	ite	gt
 80060e0:	2500      	movgt	r5, #0
 80060e2:	2501      	movle	r5, #1
 80060e4:	2b03      	cmp	r3, #3
 80060e6:	f200 8085 	bhi.w	80061f4 <_dtoa_r+0x30c>
 80060ea:	e8df f003 	tbb	[pc, r3]
 80060ee:	3b2e      	.short	0x3b2e
 80060f0:	5839      	.short	0x5839
 80060f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80060f6:	441d      	add	r5, r3
 80060f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80060fc:	2b20      	cmp	r3, #32
 80060fe:	bfc1      	itttt	gt
 8006100:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006104:	fa08 f803 	lslgt.w	r8, r8, r3
 8006108:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800610c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006110:	bfd6      	itet	le
 8006112:	f1c3 0320 	rsble	r3, r3, #32
 8006116:	ea48 0003 	orrgt.w	r0, r8, r3
 800611a:	fa06 f003 	lslle.w	r0, r6, r3
 800611e:	f7fa f9f1 	bl	8000504 <__aeabi_ui2d>
 8006122:	2201      	movs	r2, #1
 8006124:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006128:	3d01      	subs	r5, #1
 800612a:	920e      	str	r2, [sp, #56]	; 0x38
 800612c:	e76f      	b.n	800600e <_dtoa_r+0x126>
 800612e:	2301      	movs	r3, #1
 8006130:	e7b3      	b.n	800609a <_dtoa_r+0x1b2>
 8006132:	900c      	str	r0, [sp, #48]	; 0x30
 8006134:	e7b2      	b.n	800609c <_dtoa_r+0x1b4>
 8006136:	9b05      	ldr	r3, [sp, #20]
 8006138:	eba3 030b 	sub.w	r3, r3, fp
 800613c:	9305      	str	r3, [sp, #20]
 800613e:	f1cb 0300 	rsb	r3, fp, #0
 8006142:	9308      	str	r3, [sp, #32]
 8006144:	2300      	movs	r3, #0
 8006146:	930b      	str	r3, [sp, #44]	; 0x2c
 8006148:	e7bf      	b.n	80060ca <_dtoa_r+0x1e2>
 800614a:	2300      	movs	r3, #0
 800614c:	9309      	str	r3, [sp, #36]	; 0x24
 800614e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006150:	2b00      	cmp	r3, #0
 8006152:	dc52      	bgt.n	80061fa <_dtoa_r+0x312>
 8006154:	2301      	movs	r3, #1
 8006156:	9301      	str	r3, [sp, #4]
 8006158:	9304      	str	r3, [sp, #16]
 800615a:	461a      	mov	r2, r3
 800615c:	920a      	str	r2, [sp, #40]	; 0x28
 800615e:	e00b      	b.n	8006178 <_dtoa_r+0x290>
 8006160:	2301      	movs	r3, #1
 8006162:	e7f3      	b.n	800614c <_dtoa_r+0x264>
 8006164:	2300      	movs	r3, #0
 8006166:	9309      	str	r3, [sp, #36]	; 0x24
 8006168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800616a:	445b      	add	r3, fp
 800616c:	9301      	str	r3, [sp, #4]
 800616e:	3301      	adds	r3, #1
 8006170:	2b01      	cmp	r3, #1
 8006172:	9304      	str	r3, [sp, #16]
 8006174:	bfb8      	it	lt
 8006176:	2301      	movlt	r3, #1
 8006178:	69e0      	ldr	r0, [r4, #28]
 800617a:	2100      	movs	r1, #0
 800617c:	2204      	movs	r2, #4
 800617e:	f102 0614 	add.w	r6, r2, #20
 8006182:	429e      	cmp	r6, r3
 8006184:	d93d      	bls.n	8006202 <_dtoa_r+0x31a>
 8006186:	6041      	str	r1, [r0, #4]
 8006188:	4620      	mov	r0, r4
 800618a:	f000 fd9f 	bl	8006ccc <_Balloc>
 800618e:	9000      	str	r0, [sp, #0]
 8006190:	2800      	cmp	r0, #0
 8006192:	d139      	bne.n	8006208 <_dtoa_r+0x320>
 8006194:	4b16      	ldr	r3, [pc, #88]	; (80061f0 <_dtoa_r+0x308>)
 8006196:	4602      	mov	r2, r0
 8006198:	f240 11af 	movw	r1, #431	; 0x1af
 800619c:	e6bd      	b.n	8005f1a <_dtoa_r+0x32>
 800619e:	2301      	movs	r3, #1
 80061a0:	e7e1      	b.n	8006166 <_dtoa_r+0x27e>
 80061a2:	2501      	movs	r5, #1
 80061a4:	2300      	movs	r3, #0
 80061a6:	9307      	str	r3, [sp, #28]
 80061a8:	9509      	str	r5, [sp, #36]	; 0x24
 80061aa:	f04f 33ff 	mov.w	r3, #4294967295
 80061ae:	9301      	str	r3, [sp, #4]
 80061b0:	9304      	str	r3, [sp, #16]
 80061b2:	2200      	movs	r2, #0
 80061b4:	2312      	movs	r3, #18
 80061b6:	e7d1      	b.n	800615c <_dtoa_r+0x274>
 80061b8:	636f4361 	.word	0x636f4361
 80061bc:	3fd287a7 	.word	0x3fd287a7
 80061c0:	8b60c8b3 	.word	0x8b60c8b3
 80061c4:	3fc68a28 	.word	0x3fc68a28
 80061c8:	509f79fb 	.word	0x509f79fb
 80061cc:	3fd34413 	.word	0x3fd34413
 80061d0:	080095ce 	.word	0x080095ce
 80061d4:	080095e5 	.word	0x080095e5
 80061d8:	7ff00000 	.word	0x7ff00000
 80061dc:	080095ca 	.word	0x080095ca
 80061e0:	080095c1 	.word	0x080095c1
 80061e4:	08009599 	.word	0x08009599
 80061e8:	3ff80000 	.word	0x3ff80000
 80061ec:	080096d0 	.word	0x080096d0
 80061f0:	0800963d 	.word	0x0800963d
 80061f4:	2301      	movs	r3, #1
 80061f6:	9309      	str	r3, [sp, #36]	; 0x24
 80061f8:	e7d7      	b.n	80061aa <_dtoa_r+0x2c2>
 80061fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061fc:	9301      	str	r3, [sp, #4]
 80061fe:	9304      	str	r3, [sp, #16]
 8006200:	e7ba      	b.n	8006178 <_dtoa_r+0x290>
 8006202:	3101      	adds	r1, #1
 8006204:	0052      	lsls	r2, r2, #1
 8006206:	e7ba      	b.n	800617e <_dtoa_r+0x296>
 8006208:	69e3      	ldr	r3, [r4, #28]
 800620a:	9a00      	ldr	r2, [sp, #0]
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	9b04      	ldr	r3, [sp, #16]
 8006210:	2b0e      	cmp	r3, #14
 8006212:	f200 80a8 	bhi.w	8006366 <_dtoa_r+0x47e>
 8006216:	2d00      	cmp	r5, #0
 8006218:	f000 80a5 	beq.w	8006366 <_dtoa_r+0x47e>
 800621c:	f1bb 0f00 	cmp.w	fp, #0
 8006220:	dd38      	ble.n	8006294 <_dtoa_r+0x3ac>
 8006222:	4bc0      	ldr	r3, [pc, #768]	; (8006524 <_dtoa_r+0x63c>)
 8006224:	f00b 020f 	and.w	r2, fp, #15
 8006228:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800622c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006230:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006234:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006238:	d019      	beq.n	800626e <_dtoa_r+0x386>
 800623a:	4bbb      	ldr	r3, [pc, #748]	; (8006528 <_dtoa_r+0x640>)
 800623c:	ec51 0b18 	vmov	r0, r1, d8
 8006240:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006244:	f7fa fb02 	bl	800084c <__aeabi_ddiv>
 8006248:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800624c:	f008 080f 	and.w	r8, r8, #15
 8006250:	2503      	movs	r5, #3
 8006252:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006528 <_dtoa_r+0x640>
 8006256:	f1b8 0f00 	cmp.w	r8, #0
 800625a:	d10a      	bne.n	8006272 <_dtoa_r+0x38a>
 800625c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006260:	4632      	mov	r2, r6
 8006262:	463b      	mov	r3, r7
 8006264:	f7fa faf2 	bl	800084c <__aeabi_ddiv>
 8006268:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800626c:	e02b      	b.n	80062c6 <_dtoa_r+0x3de>
 800626e:	2502      	movs	r5, #2
 8006270:	e7ef      	b.n	8006252 <_dtoa_r+0x36a>
 8006272:	f018 0f01 	tst.w	r8, #1
 8006276:	d008      	beq.n	800628a <_dtoa_r+0x3a2>
 8006278:	4630      	mov	r0, r6
 800627a:	4639      	mov	r1, r7
 800627c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006280:	f7fa f9ba 	bl	80005f8 <__aeabi_dmul>
 8006284:	3501      	adds	r5, #1
 8006286:	4606      	mov	r6, r0
 8006288:	460f      	mov	r7, r1
 800628a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800628e:	f109 0908 	add.w	r9, r9, #8
 8006292:	e7e0      	b.n	8006256 <_dtoa_r+0x36e>
 8006294:	f000 809f 	beq.w	80063d6 <_dtoa_r+0x4ee>
 8006298:	f1cb 0600 	rsb	r6, fp, #0
 800629c:	4ba1      	ldr	r3, [pc, #644]	; (8006524 <_dtoa_r+0x63c>)
 800629e:	4fa2      	ldr	r7, [pc, #648]	; (8006528 <_dtoa_r+0x640>)
 80062a0:	f006 020f 	and.w	r2, r6, #15
 80062a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	ec51 0b18 	vmov	r0, r1, d8
 80062b0:	f7fa f9a2 	bl	80005f8 <__aeabi_dmul>
 80062b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062b8:	1136      	asrs	r6, r6, #4
 80062ba:	2300      	movs	r3, #0
 80062bc:	2502      	movs	r5, #2
 80062be:	2e00      	cmp	r6, #0
 80062c0:	d17e      	bne.n	80063c0 <_dtoa_r+0x4d8>
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1d0      	bne.n	8006268 <_dtoa_r+0x380>
 80062c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062c8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 8084 	beq.w	80063da <_dtoa_r+0x4f2>
 80062d2:	4b96      	ldr	r3, [pc, #600]	; (800652c <_dtoa_r+0x644>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	4640      	mov	r0, r8
 80062d8:	4649      	mov	r1, r9
 80062da:	f7fa fbff 	bl	8000adc <__aeabi_dcmplt>
 80062de:	2800      	cmp	r0, #0
 80062e0:	d07b      	beq.n	80063da <_dtoa_r+0x4f2>
 80062e2:	9b04      	ldr	r3, [sp, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d078      	beq.n	80063da <_dtoa_r+0x4f2>
 80062e8:	9b01      	ldr	r3, [sp, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	dd39      	ble.n	8006362 <_dtoa_r+0x47a>
 80062ee:	4b90      	ldr	r3, [pc, #576]	; (8006530 <_dtoa_r+0x648>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	4640      	mov	r0, r8
 80062f4:	4649      	mov	r1, r9
 80062f6:	f7fa f97f 	bl	80005f8 <__aeabi_dmul>
 80062fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062fe:	9e01      	ldr	r6, [sp, #4]
 8006300:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006304:	3501      	adds	r5, #1
 8006306:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800630a:	4628      	mov	r0, r5
 800630c:	f7fa f90a 	bl	8000524 <__aeabi_i2d>
 8006310:	4642      	mov	r2, r8
 8006312:	464b      	mov	r3, r9
 8006314:	f7fa f970 	bl	80005f8 <__aeabi_dmul>
 8006318:	4b86      	ldr	r3, [pc, #536]	; (8006534 <_dtoa_r+0x64c>)
 800631a:	2200      	movs	r2, #0
 800631c:	f7f9 ffb6 	bl	800028c <__adddf3>
 8006320:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006328:	9303      	str	r3, [sp, #12]
 800632a:	2e00      	cmp	r6, #0
 800632c:	d158      	bne.n	80063e0 <_dtoa_r+0x4f8>
 800632e:	4b82      	ldr	r3, [pc, #520]	; (8006538 <_dtoa_r+0x650>)
 8006330:	2200      	movs	r2, #0
 8006332:	4640      	mov	r0, r8
 8006334:	4649      	mov	r1, r9
 8006336:	f7f9 ffa7 	bl	8000288 <__aeabi_dsub>
 800633a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800633e:	4680      	mov	r8, r0
 8006340:	4689      	mov	r9, r1
 8006342:	f7fa fbe9 	bl	8000b18 <__aeabi_dcmpgt>
 8006346:	2800      	cmp	r0, #0
 8006348:	f040 8296 	bne.w	8006878 <_dtoa_r+0x990>
 800634c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006350:	4640      	mov	r0, r8
 8006352:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006356:	4649      	mov	r1, r9
 8006358:	f7fa fbc0 	bl	8000adc <__aeabi_dcmplt>
 800635c:	2800      	cmp	r0, #0
 800635e:	f040 8289 	bne.w	8006874 <_dtoa_r+0x98c>
 8006362:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006366:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006368:	2b00      	cmp	r3, #0
 800636a:	f2c0 814e 	blt.w	800660a <_dtoa_r+0x722>
 800636e:	f1bb 0f0e 	cmp.w	fp, #14
 8006372:	f300 814a 	bgt.w	800660a <_dtoa_r+0x722>
 8006376:	4b6b      	ldr	r3, [pc, #428]	; (8006524 <_dtoa_r+0x63c>)
 8006378:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800637c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006382:	2b00      	cmp	r3, #0
 8006384:	f280 80dc 	bge.w	8006540 <_dtoa_r+0x658>
 8006388:	9b04      	ldr	r3, [sp, #16]
 800638a:	2b00      	cmp	r3, #0
 800638c:	f300 80d8 	bgt.w	8006540 <_dtoa_r+0x658>
 8006390:	f040 826f 	bne.w	8006872 <_dtoa_r+0x98a>
 8006394:	4b68      	ldr	r3, [pc, #416]	; (8006538 <_dtoa_r+0x650>)
 8006396:	2200      	movs	r2, #0
 8006398:	4640      	mov	r0, r8
 800639a:	4649      	mov	r1, r9
 800639c:	f7fa f92c 	bl	80005f8 <__aeabi_dmul>
 80063a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063a4:	f7fa fbae 	bl	8000b04 <__aeabi_dcmpge>
 80063a8:	9e04      	ldr	r6, [sp, #16]
 80063aa:	4637      	mov	r7, r6
 80063ac:	2800      	cmp	r0, #0
 80063ae:	f040 8245 	bne.w	800683c <_dtoa_r+0x954>
 80063b2:	9d00      	ldr	r5, [sp, #0]
 80063b4:	2331      	movs	r3, #49	; 0x31
 80063b6:	f805 3b01 	strb.w	r3, [r5], #1
 80063ba:	f10b 0b01 	add.w	fp, fp, #1
 80063be:	e241      	b.n	8006844 <_dtoa_r+0x95c>
 80063c0:	07f2      	lsls	r2, r6, #31
 80063c2:	d505      	bpl.n	80063d0 <_dtoa_r+0x4e8>
 80063c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063c8:	f7fa f916 	bl	80005f8 <__aeabi_dmul>
 80063cc:	3501      	adds	r5, #1
 80063ce:	2301      	movs	r3, #1
 80063d0:	1076      	asrs	r6, r6, #1
 80063d2:	3708      	adds	r7, #8
 80063d4:	e773      	b.n	80062be <_dtoa_r+0x3d6>
 80063d6:	2502      	movs	r5, #2
 80063d8:	e775      	b.n	80062c6 <_dtoa_r+0x3de>
 80063da:	9e04      	ldr	r6, [sp, #16]
 80063dc:	465f      	mov	r7, fp
 80063de:	e792      	b.n	8006306 <_dtoa_r+0x41e>
 80063e0:	9900      	ldr	r1, [sp, #0]
 80063e2:	4b50      	ldr	r3, [pc, #320]	; (8006524 <_dtoa_r+0x63c>)
 80063e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80063e8:	4431      	add	r1, r6
 80063ea:	9102      	str	r1, [sp, #8]
 80063ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063ee:	eeb0 9a47 	vmov.f32	s18, s14
 80063f2:	eef0 9a67 	vmov.f32	s19, s15
 80063f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80063fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80063fe:	2900      	cmp	r1, #0
 8006400:	d044      	beq.n	800648c <_dtoa_r+0x5a4>
 8006402:	494e      	ldr	r1, [pc, #312]	; (800653c <_dtoa_r+0x654>)
 8006404:	2000      	movs	r0, #0
 8006406:	f7fa fa21 	bl	800084c <__aeabi_ddiv>
 800640a:	ec53 2b19 	vmov	r2, r3, d9
 800640e:	f7f9 ff3b 	bl	8000288 <__aeabi_dsub>
 8006412:	9d00      	ldr	r5, [sp, #0]
 8006414:	ec41 0b19 	vmov	d9, r0, r1
 8006418:	4649      	mov	r1, r9
 800641a:	4640      	mov	r0, r8
 800641c:	f7fa fb9c 	bl	8000b58 <__aeabi_d2iz>
 8006420:	4606      	mov	r6, r0
 8006422:	f7fa f87f 	bl	8000524 <__aeabi_i2d>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	4640      	mov	r0, r8
 800642c:	4649      	mov	r1, r9
 800642e:	f7f9 ff2b 	bl	8000288 <__aeabi_dsub>
 8006432:	3630      	adds	r6, #48	; 0x30
 8006434:	f805 6b01 	strb.w	r6, [r5], #1
 8006438:	ec53 2b19 	vmov	r2, r3, d9
 800643c:	4680      	mov	r8, r0
 800643e:	4689      	mov	r9, r1
 8006440:	f7fa fb4c 	bl	8000adc <__aeabi_dcmplt>
 8006444:	2800      	cmp	r0, #0
 8006446:	d164      	bne.n	8006512 <_dtoa_r+0x62a>
 8006448:	4642      	mov	r2, r8
 800644a:	464b      	mov	r3, r9
 800644c:	4937      	ldr	r1, [pc, #220]	; (800652c <_dtoa_r+0x644>)
 800644e:	2000      	movs	r0, #0
 8006450:	f7f9 ff1a 	bl	8000288 <__aeabi_dsub>
 8006454:	ec53 2b19 	vmov	r2, r3, d9
 8006458:	f7fa fb40 	bl	8000adc <__aeabi_dcmplt>
 800645c:	2800      	cmp	r0, #0
 800645e:	f040 80b6 	bne.w	80065ce <_dtoa_r+0x6e6>
 8006462:	9b02      	ldr	r3, [sp, #8]
 8006464:	429d      	cmp	r5, r3
 8006466:	f43f af7c 	beq.w	8006362 <_dtoa_r+0x47a>
 800646a:	4b31      	ldr	r3, [pc, #196]	; (8006530 <_dtoa_r+0x648>)
 800646c:	ec51 0b19 	vmov	r0, r1, d9
 8006470:	2200      	movs	r2, #0
 8006472:	f7fa f8c1 	bl	80005f8 <__aeabi_dmul>
 8006476:	4b2e      	ldr	r3, [pc, #184]	; (8006530 <_dtoa_r+0x648>)
 8006478:	ec41 0b19 	vmov	d9, r0, r1
 800647c:	2200      	movs	r2, #0
 800647e:	4640      	mov	r0, r8
 8006480:	4649      	mov	r1, r9
 8006482:	f7fa f8b9 	bl	80005f8 <__aeabi_dmul>
 8006486:	4680      	mov	r8, r0
 8006488:	4689      	mov	r9, r1
 800648a:	e7c5      	b.n	8006418 <_dtoa_r+0x530>
 800648c:	ec51 0b17 	vmov	r0, r1, d7
 8006490:	f7fa f8b2 	bl	80005f8 <__aeabi_dmul>
 8006494:	9b02      	ldr	r3, [sp, #8]
 8006496:	9d00      	ldr	r5, [sp, #0]
 8006498:	930f      	str	r3, [sp, #60]	; 0x3c
 800649a:	ec41 0b19 	vmov	d9, r0, r1
 800649e:	4649      	mov	r1, r9
 80064a0:	4640      	mov	r0, r8
 80064a2:	f7fa fb59 	bl	8000b58 <__aeabi_d2iz>
 80064a6:	4606      	mov	r6, r0
 80064a8:	f7fa f83c 	bl	8000524 <__aeabi_i2d>
 80064ac:	3630      	adds	r6, #48	; 0x30
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	4640      	mov	r0, r8
 80064b4:	4649      	mov	r1, r9
 80064b6:	f7f9 fee7 	bl	8000288 <__aeabi_dsub>
 80064ba:	f805 6b01 	strb.w	r6, [r5], #1
 80064be:	9b02      	ldr	r3, [sp, #8]
 80064c0:	429d      	cmp	r5, r3
 80064c2:	4680      	mov	r8, r0
 80064c4:	4689      	mov	r9, r1
 80064c6:	f04f 0200 	mov.w	r2, #0
 80064ca:	d124      	bne.n	8006516 <_dtoa_r+0x62e>
 80064cc:	4b1b      	ldr	r3, [pc, #108]	; (800653c <_dtoa_r+0x654>)
 80064ce:	ec51 0b19 	vmov	r0, r1, d9
 80064d2:	f7f9 fedb 	bl	800028c <__adddf3>
 80064d6:	4602      	mov	r2, r0
 80064d8:	460b      	mov	r3, r1
 80064da:	4640      	mov	r0, r8
 80064dc:	4649      	mov	r1, r9
 80064de:	f7fa fb1b 	bl	8000b18 <__aeabi_dcmpgt>
 80064e2:	2800      	cmp	r0, #0
 80064e4:	d173      	bne.n	80065ce <_dtoa_r+0x6e6>
 80064e6:	ec53 2b19 	vmov	r2, r3, d9
 80064ea:	4914      	ldr	r1, [pc, #80]	; (800653c <_dtoa_r+0x654>)
 80064ec:	2000      	movs	r0, #0
 80064ee:	f7f9 fecb 	bl	8000288 <__aeabi_dsub>
 80064f2:	4602      	mov	r2, r0
 80064f4:	460b      	mov	r3, r1
 80064f6:	4640      	mov	r0, r8
 80064f8:	4649      	mov	r1, r9
 80064fa:	f7fa faef 	bl	8000adc <__aeabi_dcmplt>
 80064fe:	2800      	cmp	r0, #0
 8006500:	f43f af2f 	beq.w	8006362 <_dtoa_r+0x47a>
 8006504:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006506:	1e6b      	subs	r3, r5, #1
 8006508:	930f      	str	r3, [sp, #60]	; 0x3c
 800650a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800650e:	2b30      	cmp	r3, #48	; 0x30
 8006510:	d0f8      	beq.n	8006504 <_dtoa_r+0x61c>
 8006512:	46bb      	mov	fp, r7
 8006514:	e04a      	b.n	80065ac <_dtoa_r+0x6c4>
 8006516:	4b06      	ldr	r3, [pc, #24]	; (8006530 <_dtoa_r+0x648>)
 8006518:	f7fa f86e 	bl	80005f8 <__aeabi_dmul>
 800651c:	4680      	mov	r8, r0
 800651e:	4689      	mov	r9, r1
 8006520:	e7bd      	b.n	800649e <_dtoa_r+0x5b6>
 8006522:	bf00      	nop
 8006524:	080096d0 	.word	0x080096d0
 8006528:	080096a8 	.word	0x080096a8
 800652c:	3ff00000 	.word	0x3ff00000
 8006530:	40240000 	.word	0x40240000
 8006534:	401c0000 	.word	0x401c0000
 8006538:	40140000 	.word	0x40140000
 800653c:	3fe00000 	.word	0x3fe00000
 8006540:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006544:	9d00      	ldr	r5, [sp, #0]
 8006546:	4642      	mov	r2, r8
 8006548:	464b      	mov	r3, r9
 800654a:	4630      	mov	r0, r6
 800654c:	4639      	mov	r1, r7
 800654e:	f7fa f97d 	bl	800084c <__aeabi_ddiv>
 8006552:	f7fa fb01 	bl	8000b58 <__aeabi_d2iz>
 8006556:	9001      	str	r0, [sp, #4]
 8006558:	f7f9 ffe4 	bl	8000524 <__aeabi_i2d>
 800655c:	4642      	mov	r2, r8
 800655e:	464b      	mov	r3, r9
 8006560:	f7fa f84a 	bl	80005f8 <__aeabi_dmul>
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	4630      	mov	r0, r6
 800656a:	4639      	mov	r1, r7
 800656c:	f7f9 fe8c 	bl	8000288 <__aeabi_dsub>
 8006570:	9e01      	ldr	r6, [sp, #4]
 8006572:	9f04      	ldr	r7, [sp, #16]
 8006574:	3630      	adds	r6, #48	; 0x30
 8006576:	f805 6b01 	strb.w	r6, [r5], #1
 800657a:	9e00      	ldr	r6, [sp, #0]
 800657c:	1bae      	subs	r6, r5, r6
 800657e:	42b7      	cmp	r7, r6
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	d134      	bne.n	80065f0 <_dtoa_r+0x708>
 8006586:	f7f9 fe81 	bl	800028c <__adddf3>
 800658a:	4642      	mov	r2, r8
 800658c:	464b      	mov	r3, r9
 800658e:	4606      	mov	r6, r0
 8006590:	460f      	mov	r7, r1
 8006592:	f7fa fac1 	bl	8000b18 <__aeabi_dcmpgt>
 8006596:	b9c8      	cbnz	r0, 80065cc <_dtoa_r+0x6e4>
 8006598:	4642      	mov	r2, r8
 800659a:	464b      	mov	r3, r9
 800659c:	4630      	mov	r0, r6
 800659e:	4639      	mov	r1, r7
 80065a0:	f7fa fa92 	bl	8000ac8 <__aeabi_dcmpeq>
 80065a4:	b110      	cbz	r0, 80065ac <_dtoa_r+0x6c4>
 80065a6:	9b01      	ldr	r3, [sp, #4]
 80065a8:	07db      	lsls	r3, r3, #31
 80065aa:	d40f      	bmi.n	80065cc <_dtoa_r+0x6e4>
 80065ac:	4651      	mov	r1, sl
 80065ae:	4620      	mov	r0, r4
 80065b0:	f000 fbcc 	bl	8006d4c <_Bfree>
 80065b4:	2300      	movs	r3, #0
 80065b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065b8:	702b      	strb	r3, [r5, #0]
 80065ba:	f10b 0301 	add.w	r3, fp, #1
 80065be:	6013      	str	r3, [r2, #0]
 80065c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f43f ace2 	beq.w	8005f8c <_dtoa_r+0xa4>
 80065c8:	601d      	str	r5, [r3, #0]
 80065ca:	e4df      	b.n	8005f8c <_dtoa_r+0xa4>
 80065cc:	465f      	mov	r7, fp
 80065ce:	462b      	mov	r3, r5
 80065d0:	461d      	mov	r5, r3
 80065d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065d6:	2a39      	cmp	r2, #57	; 0x39
 80065d8:	d106      	bne.n	80065e8 <_dtoa_r+0x700>
 80065da:	9a00      	ldr	r2, [sp, #0]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d1f7      	bne.n	80065d0 <_dtoa_r+0x6e8>
 80065e0:	9900      	ldr	r1, [sp, #0]
 80065e2:	2230      	movs	r2, #48	; 0x30
 80065e4:	3701      	adds	r7, #1
 80065e6:	700a      	strb	r2, [r1, #0]
 80065e8:	781a      	ldrb	r2, [r3, #0]
 80065ea:	3201      	adds	r2, #1
 80065ec:	701a      	strb	r2, [r3, #0]
 80065ee:	e790      	b.n	8006512 <_dtoa_r+0x62a>
 80065f0:	4ba3      	ldr	r3, [pc, #652]	; (8006880 <_dtoa_r+0x998>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	f7fa f800 	bl	80005f8 <__aeabi_dmul>
 80065f8:	2200      	movs	r2, #0
 80065fa:	2300      	movs	r3, #0
 80065fc:	4606      	mov	r6, r0
 80065fe:	460f      	mov	r7, r1
 8006600:	f7fa fa62 	bl	8000ac8 <__aeabi_dcmpeq>
 8006604:	2800      	cmp	r0, #0
 8006606:	d09e      	beq.n	8006546 <_dtoa_r+0x65e>
 8006608:	e7d0      	b.n	80065ac <_dtoa_r+0x6c4>
 800660a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800660c:	2a00      	cmp	r2, #0
 800660e:	f000 80ca 	beq.w	80067a6 <_dtoa_r+0x8be>
 8006612:	9a07      	ldr	r2, [sp, #28]
 8006614:	2a01      	cmp	r2, #1
 8006616:	f300 80ad 	bgt.w	8006774 <_dtoa_r+0x88c>
 800661a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800661c:	2a00      	cmp	r2, #0
 800661e:	f000 80a5 	beq.w	800676c <_dtoa_r+0x884>
 8006622:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006626:	9e08      	ldr	r6, [sp, #32]
 8006628:	9d05      	ldr	r5, [sp, #20]
 800662a:	9a05      	ldr	r2, [sp, #20]
 800662c:	441a      	add	r2, r3
 800662e:	9205      	str	r2, [sp, #20]
 8006630:	9a06      	ldr	r2, [sp, #24]
 8006632:	2101      	movs	r1, #1
 8006634:	441a      	add	r2, r3
 8006636:	4620      	mov	r0, r4
 8006638:	9206      	str	r2, [sp, #24]
 800663a:	f000 fc87 	bl	8006f4c <__i2b>
 800663e:	4607      	mov	r7, r0
 8006640:	b165      	cbz	r5, 800665c <_dtoa_r+0x774>
 8006642:	9b06      	ldr	r3, [sp, #24]
 8006644:	2b00      	cmp	r3, #0
 8006646:	dd09      	ble.n	800665c <_dtoa_r+0x774>
 8006648:	42ab      	cmp	r3, r5
 800664a:	9a05      	ldr	r2, [sp, #20]
 800664c:	bfa8      	it	ge
 800664e:	462b      	movge	r3, r5
 8006650:	1ad2      	subs	r2, r2, r3
 8006652:	9205      	str	r2, [sp, #20]
 8006654:	9a06      	ldr	r2, [sp, #24]
 8006656:	1aed      	subs	r5, r5, r3
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	9306      	str	r3, [sp, #24]
 800665c:	9b08      	ldr	r3, [sp, #32]
 800665e:	b1f3      	cbz	r3, 800669e <_dtoa_r+0x7b6>
 8006660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006662:	2b00      	cmp	r3, #0
 8006664:	f000 80a3 	beq.w	80067ae <_dtoa_r+0x8c6>
 8006668:	2e00      	cmp	r6, #0
 800666a:	dd10      	ble.n	800668e <_dtoa_r+0x7a6>
 800666c:	4639      	mov	r1, r7
 800666e:	4632      	mov	r2, r6
 8006670:	4620      	mov	r0, r4
 8006672:	f000 fd2b 	bl	80070cc <__pow5mult>
 8006676:	4652      	mov	r2, sl
 8006678:	4601      	mov	r1, r0
 800667a:	4607      	mov	r7, r0
 800667c:	4620      	mov	r0, r4
 800667e:	f000 fc7b 	bl	8006f78 <__multiply>
 8006682:	4651      	mov	r1, sl
 8006684:	4680      	mov	r8, r0
 8006686:	4620      	mov	r0, r4
 8006688:	f000 fb60 	bl	8006d4c <_Bfree>
 800668c:	46c2      	mov	sl, r8
 800668e:	9b08      	ldr	r3, [sp, #32]
 8006690:	1b9a      	subs	r2, r3, r6
 8006692:	d004      	beq.n	800669e <_dtoa_r+0x7b6>
 8006694:	4651      	mov	r1, sl
 8006696:	4620      	mov	r0, r4
 8006698:	f000 fd18 	bl	80070cc <__pow5mult>
 800669c:	4682      	mov	sl, r0
 800669e:	2101      	movs	r1, #1
 80066a0:	4620      	mov	r0, r4
 80066a2:	f000 fc53 	bl	8006f4c <__i2b>
 80066a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	4606      	mov	r6, r0
 80066ac:	f340 8081 	ble.w	80067b2 <_dtoa_r+0x8ca>
 80066b0:	461a      	mov	r2, r3
 80066b2:	4601      	mov	r1, r0
 80066b4:	4620      	mov	r0, r4
 80066b6:	f000 fd09 	bl	80070cc <__pow5mult>
 80066ba:	9b07      	ldr	r3, [sp, #28]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	4606      	mov	r6, r0
 80066c0:	dd7a      	ble.n	80067b8 <_dtoa_r+0x8d0>
 80066c2:	f04f 0800 	mov.w	r8, #0
 80066c6:	6933      	ldr	r3, [r6, #16]
 80066c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80066cc:	6918      	ldr	r0, [r3, #16]
 80066ce:	f000 fbef 	bl	8006eb0 <__hi0bits>
 80066d2:	f1c0 0020 	rsb	r0, r0, #32
 80066d6:	9b06      	ldr	r3, [sp, #24]
 80066d8:	4418      	add	r0, r3
 80066da:	f010 001f 	ands.w	r0, r0, #31
 80066de:	f000 8094 	beq.w	800680a <_dtoa_r+0x922>
 80066e2:	f1c0 0320 	rsb	r3, r0, #32
 80066e6:	2b04      	cmp	r3, #4
 80066e8:	f340 8085 	ble.w	80067f6 <_dtoa_r+0x90e>
 80066ec:	9b05      	ldr	r3, [sp, #20]
 80066ee:	f1c0 001c 	rsb	r0, r0, #28
 80066f2:	4403      	add	r3, r0
 80066f4:	9305      	str	r3, [sp, #20]
 80066f6:	9b06      	ldr	r3, [sp, #24]
 80066f8:	4403      	add	r3, r0
 80066fa:	4405      	add	r5, r0
 80066fc:	9306      	str	r3, [sp, #24]
 80066fe:	9b05      	ldr	r3, [sp, #20]
 8006700:	2b00      	cmp	r3, #0
 8006702:	dd05      	ble.n	8006710 <_dtoa_r+0x828>
 8006704:	4651      	mov	r1, sl
 8006706:	461a      	mov	r2, r3
 8006708:	4620      	mov	r0, r4
 800670a:	f000 fd39 	bl	8007180 <__lshift>
 800670e:	4682      	mov	sl, r0
 8006710:	9b06      	ldr	r3, [sp, #24]
 8006712:	2b00      	cmp	r3, #0
 8006714:	dd05      	ble.n	8006722 <_dtoa_r+0x83a>
 8006716:	4631      	mov	r1, r6
 8006718:	461a      	mov	r2, r3
 800671a:	4620      	mov	r0, r4
 800671c:	f000 fd30 	bl	8007180 <__lshift>
 8006720:	4606      	mov	r6, r0
 8006722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006724:	2b00      	cmp	r3, #0
 8006726:	d072      	beq.n	800680e <_dtoa_r+0x926>
 8006728:	4631      	mov	r1, r6
 800672a:	4650      	mov	r0, sl
 800672c:	f000 fd94 	bl	8007258 <__mcmp>
 8006730:	2800      	cmp	r0, #0
 8006732:	da6c      	bge.n	800680e <_dtoa_r+0x926>
 8006734:	2300      	movs	r3, #0
 8006736:	4651      	mov	r1, sl
 8006738:	220a      	movs	r2, #10
 800673a:	4620      	mov	r0, r4
 800673c:	f000 fb28 	bl	8006d90 <__multadd>
 8006740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006742:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006746:	4682      	mov	sl, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 81b0 	beq.w	8006aae <_dtoa_r+0xbc6>
 800674e:	2300      	movs	r3, #0
 8006750:	4639      	mov	r1, r7
 8006752:	220a      	movs	r2, #10
 8006754:	4620      	mov	r0, r4
 8006756:	f000 fb1b 	bl	8006d90 <__multadd>
 800675a:	9b01      	ldr	r3, [sp, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	4607      	mov	r7, r0
 8006760:	f300 8096 	bgt.w	8006890 <_dtoa_r+0x9a8>
 8006764:	9b07      	ldr	r3, [sp, #28]
 8006766:	2b02      	cmp	r3, #2
 8006768:	dc59      	bgt.n	800681e <_dtoa_r+0x936>
 800676a:	e091      	b.n	8006890 <_dtoa_r+0x9a8>
 800676c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800676e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006772:	e758      	b.n	8006626 <_dtoa_r+0x73e>
 8006774:	9b04      	ldr	r3, [sp, #16]
 8006776:	1e5e      	subs	r6, r3, #1
 8006778:	9b08      	ldr	r3, [sp, #32]
 800677a:	42b3      	cmp	r3, r6
 800677c:	bfbf      	itttt	lt
 800677e:	9b08      	ldrlt	r3, [sp, #32]
 8006780:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006782:	9608      	strlt	r6, [sp, #32]
 8006784:	1af3      	sublt	r3, r6, r3
 8006786:	bfb4      	ite	lt
 8006788:	18d2      	addlt	r2, r2, r3
 800678a:	1b9e      	subge	r6, r3, r6
 800678c:	9b04      	ldr	r3, [sp, #16]
 800678e:	bfbc      	itt	lt
 8006790:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006792:	2600      	movlt	r6, #0
 8006794:	2b00      	cmp	r3, #0
 8006796:	bfb7      	itett	lt
 8006798:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800679c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80067a0:	1a9d      	sublt	r5, r3, r2
 80067a2:	2300      	movlt	r3, #0
 80067a4:	e741      	b.n	800662a <_dtoa_r+0x742>
 80067a6:	9e08      	ldr	r6, [sp, #32]
 80067a8:	9d05      	ldr	r5, [sp, #20]
 80067aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80067ac:	e748      	b.n	8006640 <_dtoa_r+0x758>
 80067ae:	9a08      	ldr	r2, [sp, #32]
 80067b0:	e770      	b.n	8006694 <_dtoa_r+0x7ac>
 80067b2:	9b07      	ldr	r3, [sp, #28]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	dc19      	bgt.n	80067ec <_dtoa_r+0x904>
 80067b8:	9b02      	ldr	r3, [sp, #8]
 80067ba:	b9bb      	cbnz	r3, 80067ec <_dtoa_r+0x904>
 80067bc:	9b03      	ldr	r3, [sp, #12]
 80067be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067c2:	b99b      	cbnz	r3, 80067ec <_dtoa_r+0x904>
 80067c4:	9b03      	ldr	r3, [sp, #12]
 80067c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067ca:	0d1b      	lsrs	r3, r3, #20
 80067cc:	051b      	lsls	r3, r3, #20
 80067ce:	b183      	cbz	r3, 80067f2 <_dtoa_r+0x90a>
 80067d0:	9b05      	ldr	r3, [sp, #20]
 80067d2:	3301      	adds	r3, #1
 80067d4:	9305      	str	r3, [sp, #20]
 80067d6:	9b06      	ldr	r3, [sp, #24]
 80067d8:	3301      	adds	r3, #1
 80067da:	9306      	str	r3, [sp, #24]
 80067dc:	f04f 0801 	mov.w	r8, #1
 80067e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f47f af6f 	bne.w	80066c6 <_dtoa_r+0x7de>
 80067e8:	2001      	movs	r0, #1
 80067ea:	e774      	b.n	80066d6 <_dtoa_r+0x7ee>
 80067ec:	f04f 0800 	mov.w	r8, #0
 80067f0:	e7f6      	b.n	80067e0 <_dtoa_r+0x8f8>
 80067f2:	4698      	mov	r8, r3
 80067f4:	e7f4      	b.n	80067e0 <_dtoa_r+0x8f8>
 80067f6:	d082      	beq.n	80066fe <_dtoa_r+0x816>
 80067f8:	9a05      	ldr	r2, [sp, #20]
 80067fa:	331c      	adds	r3, #28
 80067fc:	441a      	add	r2, r3
 80067fe:	9205      	str	r2, [sp, #20]
 8006800:	9a06      	ldr	r2, [sp, #24]
 8006802:	441a      	add	r2, r3
 8006804:	441d      	add	r5, r3
 8006806:	9206      	str	r2, [sp, #24]
 8006808:	e779      	b.n	80066fe <_dtoa_r+0x816>
 800680a:	4603      	mov	r3, r0
 800680c:	e7f4      	b.n	80067f8 <_dtoa_r+0x910>
 800680e:	9b04      	ldr	r3, [sp, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	dc37      	bgt.n	8006884 <_dtoa_r+0x99c>
 8006814:	9b07      	ldr	r3, [sp, #28]
 8006816:	2b02      	cmp	r3, #2
 8006818:	dd34      	ble.n	8006884 <_dtoa_r+0x99c>
 800681a:	9b04      	ldr	r3, [sp, #16]
 800681c:	9301      	str	r3, [sp, #4]
 800681e:	9b01      	ldr	r3, [sp, #4]
 8006820:	b963      	cbnz	r3, 800683c <_dtoa_r+0x954>
 8006822:	4631      	mov	r1, r6
 8006824:	2205      	movs	r2, #5
 8006826:	4620      	mov	r0, r4
 8006828:	f000 fab2 	bl	8006d90 <__multadd>
 800682c:	4601      	mov	r1, r0
 800682e:	4606      	mov	r6, r0
 8006830:	4650      	mov	r0, sl
 8006832:	f000 fd11 	bl	8007258 <__mcmp>
 8006836:	2800      	cmp	r0, #0
 8006838:	f73f adbb 	bgt.w	80063b2 <_dtoa_r+0x4ca>
 800683c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800683e:	9d00      	ldr	r5, [sp, #0]
 8006840:	ea6f 0b03 	mvn.w	fp, r3
 8006844:	f04f 0800 	mov.w	r8, #0
 8006848:	4631      	mov	r1, r6
 800684a:	4620      	mov	r0, r4
 800684c:	f000 fa7e 	bl	8006d4c <_Bfree>
 8006850:	2f00      	cmp	r7, #0
 8006852:	f43f aeab 	beq.w	80065ac <_dtoa_r+0x6c4>
 8006856:	f1b8 0f00 	cmp.w	r8, #0
 800685a:	d005      	beq.n	8006868 <_dtoa_r+0x980>
 800685c:	45b8      	cmp	r8, r7
 800685e:	d003      	beq.n	8006868 <_dtoa_r+0x980>
 8006860:	4641      	mov	r1, r8
 8006862:	4620      	mov	r0, r4
 8006864:	f000 fa72 	bl	8006d4c <_Bfree>
 8006868:	4639      	mov	r1, r7
 800686a:	4620      	mov	r0, r4
 800686c:	f000 fa6e 	bl	8006d4c <_Bfree>
 8006870:	e69c      	b.n	80065ac <_dtoa_r+0x6c4>
 8006872:	2600      	movs	r6, #0
 8006874:	4637      	mov	r7, r6
 8006876:	e7e1      	b.n	800683c <_dtoa_r+0x954>
 8006878:	46bb      	mov	fp, r7
 800687a:	4637      	mov	r7, r6
 800687c:	e599      	b.n	80063b2 <_dtoa_r+0x4ca>
 800687e:	bf00      	nop
 8006880:	40240000 	.word	0x40240000
 8006884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006886:	2b00      	cmp	r3, #0
 8006888:	f000 80c8 	beq.w	8006a1c <_dtoa_r+0xb34>
 800688c:	9b04      	ldr	r3, [sp, #16]
 800688e:	9301      	str	r3, [sp, #4]
 8006890:	2d00      	cmp	r5, #0
 8006892:	dd05      	ble.n	80068a0 <_dtoa_r+0x9b8>
 8006894:	4639      	mov	r1, r7
 8006896:	462a      	mov	r2, r5
 8006898:	4620      	mov	r0, r4
 800689a:	f000 fc71 	bl	8007180 <__lshift>
 800689e:	4607      	mov	r7, r0
 80068a0:	f1b8 0f00 	cmp.w	r8, #0
 80068a4:	d05b      	beq.n	800695e <_dtoa_r+0xa76>
 80068a6:	6879      	ldr	r1, [r7, #4]
 80068a8:	4620      	mov	r0, r4
 80068aa:	f000 fa0f 	bl	8006ccc <_Balloc>
 80068ae:	4605      	mov	r5, r0
 80068b0:	b928      	cbnz	r0, 80068be <_dtoa_r+0x9d6>
 80068b2:	4b83      	ldr	r3, [pc, #524]	; (8006ac0 <_dtoa_r+0xbd8>)
 80068b4:	4602      	mov	r2, r0
 80068b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80068ba:	f7ff bb2e 	b.w	8005f1a <_dtoa_r+0x32>
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	3202      	adds	r2, #2
 80068c2:	0092      	lsls	r2, r2, #2
 80068c4:	f107 010c 	add.w	r1, r7, #12
 80068c8:	300c      	adds	r0, #12
 80068ca:	f001 ff85 	bl	80087d8 <memcpy>
 80068ce:	2201      	movs	r2, #1
 80068d0:	4629      	mov	r1, r5
 80068d2:	4620      	mov	r0, r4
 80068d4:	f000 fc54 	bl	8007180 <__lshift>
 80068d8:	9b00      	ldr	r3, [sp, #0]
 80068da:	3301      	adds	r3, #1
 80068dc:	9304      	str	r3, [sp, #16]
 80068de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068e2:	4413      	add	r3, r2
 80068e4:	9308      	str	r3, [sp, #32]
 80068e6:	9b02      	ldr	r3, [sp, #8]
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	46b8      	mov	r8, r7
 80068ee:	9306      	str	r3, [sp, #24]
 80068f0:	4607      	mov	r7, r0
 80068f2:	9b04      	ldr	r3, [sp, #16]
 80068f4:	4631      	mov	r1, r6
 80068f6:	3b01      	subs	r3, #1
 80068f8:	4650      	mov	r0, sl
 80068fa:	9301      	str	r3, [sp, #4]
 80068fc:	f7ff fa6a 	bl	8005dd4 <quorem>
 8006900:	4641      	mov	r1, r8
 8006902:	9002      	str	r0, [sp, #8]
 8006904:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006908:	4650      	mov	r0, sl
 800690a:	f000 fca5 	bl	8007258 <__mcmp>
 800690e:	463a      	mov	r2, r7
 8006910:	9005      	str	r0, [sp, #20]
 8006912:	4631      	mov	r1, r6
 8006914:	4620      	mov	r0, r4
 8006916:	f000 fcbb 	bl	8007290 <__mdiff>
 800691a:	68c2      	ldr	r2, [r0, #12]
 800691c:	4605      	mov	r5, r0
 800691e:	bb02      	cbnz	r2, 8006962 <_dtoa_r+0xa7a>
 8006920:	4601      	mov	r1, r0
 8006922:	4650      	mov	r0, sl
 8006924:	f000 fc98 	bl	8007258 <__mcmp>
 8006928:	4602      	mov	r2, r0
 800692a:	4629      	mov	r1, r5
 800692c:	4620      	mov	r0, r4
 800692e:	9209      	str	r2, [sp, #36]	; 0x24
 8006930:	f000 fa0c 	bl	8006d4c <_Bfree>
 8006934:	9b07      	ldr	r3, [sp, #28]
 8006936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006938:	9d04      	ldr	r5, [sp, #16]
 800693a:	ea43 0102 	orr.w	r1, r3, r2
 800693e:	9b06      	ldr	r3, [sp, #24]
 8006940:	4319      	orrs	r1, r3
 8006942:	d110      	bne.n	8006966 <_dtoa_r+0xa7e>
 8006944:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006948:	d029      	beq.n	800699e <_dtoa_r+0xab6>
 800694a:	9b05      	ldr	r3, [sp, #20]
 800694c:	2b00      	cmp	r3, #0
 800694e:	dd02      	ble.n	8006956 <_dtoa_r+0xa6e>
 8006950:	9b02      	ldr	r3, [sp, #8]
 8006952:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006956:	9b01      	ldr	r3, [sp, #4]
 8006958:	f883 9000 	strb.w	r9, [r3]
 800695c:	e774      	b.n	8006848 <_dtoa_r+0x960>
 800695e:	4638      	mov	r0, r7
 8006960:	e7ba      	b.n	80068d8 <_dtoa_r+0x9f0>
 8006962:	2201      	movs	r2, #1
 8006964:	e7e1      	b.n	800692a <_dtoa_r+0xa42>
 8006966:	9b05      	ldr	r3, [sp, #20]
 8006968:	2b00      	cmp	r3, #0
 800696a:	db04      	blt.n	8006976 <_dtoa_r+0xa8e>
 800696c:	9907      	ldr	r1, [sp, #28]
 800696e:	430b      	orrs	r3, r1
 8006970:	9906      	ldr	r1, [sp, #24]
 8006972:	430b      	orrs	r3, r1
 8006974:	d120      	bne.n	80069b8 <_dtoa_r+0xad0>
 8006976:	2a00      	cmp	r2, #0
 8006978:	dded      	ble.n	8006956 <_dtoa_r+0xa6e>
 800697a:	4651      	mov	r1, sl
 800697c:	2201      	movs	r2, #1
 800697e:	4620      	mov	r0, r4
 8006980:	f000 fbfe 	bl	8007180 <__lshift>
 8006984:	4631      	mov	r1, r6
 8006986:	4682      	mov	sl, r0
 8006988:	f000 fc66 	bl	8007258 <__mcmp>
 800698c:	2800      	cmp	r0, #0
 800698e:	dc03      	bgt.n	8006998 <_dtoa_r+0xab0>
 8006990:	d1e1      	bne.n	8006956 <_dtoa_r+0xa6e>
 8006992:	f019 0f01 	tst.w	r9, #1
 8006996:	d0de      	beq.n	8006956 <_dtoa_r+0xa6e>
 8006998:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800699c:	d1d8      	bne.n	8006950 <_dtoa_r+0xa68>
 800699e:	9a01      	ldr	r2, [sp, #4]
 80069a0:	2339      	movs	r3, #57	; 0x39
 80069a2:	7013      	strb	r3, [r2, #0]
 80069a4:	462b      	mov	r3, r5
 80069a6:	461d      	mov	r5, r3
 80069a8:	3b01      	subs	r3, #1
 80069aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80069ae:	2a39      	cmp	r2, #57	; 0x39
 80069b0:	d06c      	beq.n	8006a8c <_dtoa_r+0xba4>
 80069b2:	3201      	adds	r2, #1
 80069b4:	701a      	strb	r2, [r3, #0]
 80069b6:	e747      	b.n	8006848 <_dtoa_r+0x960>
 80069b8:	2a00      	cmp	r2, #0
 80069ba:	dd07      	ble.n	80069cc <_dtoa_r+0xae4>
 80069bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80069c0:	d0ed      	beq.n	800699e <_dtoa_r+0xab6>
 80069c2:	9a01      	ldr	r2, [sp, #4]
 80069c4:	f109 0301 	add.w	r3, r9, #1
 80069c8:	7013      	strb	r3, [r2, #0]
 80069ca:	e73d      	b.n	8006848 <_dtoa_r+0x960>
 80069cc:	9b04      	ldr	r3, [sp, #16]
 80069ce:	9a08      	ldr	r2, [sp, #32]
 80069d0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d043      	beq.n	8006a60 <_dtoa_r+0xb78>
 80069d8:	4651      	mov	r1, sl
 80069da:	2300      	movs	r3, #0
 80069dc:	220a      	movs	r2, #10
 80069de:	4620      	mov	r0, r4
 80069e0:	f000 f9d6 	bl	8006d90 <__multadd>
 80069e4:	45b8      	cmp	r8, r7
 80069e6:	4682      	mov	sl, r0
 80069e8:	f04f 0300 	mov.w	r3, #0
 80069ec:	f04f 020a 	mov.w	r2, #10
 80069f0:	4641      	mov	r1, r8
 80069f2:	4620      	mov	r0, r4
 80069f4:	d107      	bne.n	8006a06 <_dtoa_r+0xb1e>
 80069f6:	f000 f9cb 	bl	8006d90 <__multadd>
 80069fa:	4680      	mov	r8, r0
 80069fc:	4607      	mov	r7, r0
 80069fe:	9b04      	ldr	r3, [sp, #16]
 8006a00:	3301      	adds	r3, #1
 8006a02:	9304      	str	r3, [sp, #16]
 8006a04:	e775      	b.n	80068f2 <_dtoa_r+0xa0a>
 8006a06:	f000 f9c3 	bl	8006d90 <__multadd>
 8006a0a:	4639      	mov	r1, r7
 8006a0c:	4680      	mov	r8, r0
 8006a0e:	2300      	movs	r3, #0
 8006a10:	220a      	movs	r2, #10
 8006a12:	4620      	mov	r0, r4
 8006a14:	f000 f9bc 	bl	8006d90 <__multadd>
 8006a18:	4607      	mov	r7, r0
 8006a1a:	e7f0      	b.n	80069fe <_dtoa_r+0xb16>
 8006a1c:	9b04      	ldr	r3, [sp, #16]
 8006a1e:	9301      	str	r3, [sp, #4]
 8006a20:	9d00      	ldr	r5, [sp, #0]
 8006a22:	4631      	mov	r1, r6
 8006a24:	4650      	mov	r0, sl
 8006a26:	f7ff f9d5 	bl	8005dd4 <quorem>
 8006a2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006a2e:	9b00      	ldr	r3, [sp, #0]
 8006a30:	f805 9b01 	strb.w	r9, [r5], #1
 8006a34:	1aea      	subs	r2, r5, r3
 8006a36:	9b01      	ldr	r3, [sp, #4]
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	dd07      	ble.n	8006a4c <_dtoa_r+0xb64>
 8006a3c:	4651      	mov	r1, sl
 8006a3e:	2300      	movs	r3, #0
 8006a40:	220a      	movs	r2, #10
 8006a42:	4620      	mov	r0, r4
 8006a44:	f000 f9a4 	bl	8006d90 <__multadd>
 8006a48:	4682      	mov	sl, r0
 8006a4a:	e7ea      	b.n	8006a22 <_dtoa_r+0xb3a>
 8006a4c:	9b01      	ldr	r3, [sp, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	bfc8      	it	gt
 8006a52:	461d      	movgt	r5, r3
 8006a54:	9b00      	ldr	r3, [sp, #0]
 8006a56:	bfd8      	it	le
 8006a58:	2501      	movle	r5, #1
 8006a5a:	441d      	add	r5, r3
 8006a5c:	f04f 0800 	mov.w	r8, #0
 8006a60:	4651      	mov	r1, sl
 8006a62:	2201      	movs	r2, #1
 8006a64:	4620      	mov	r0, r4
 8006a66:	f000 fb8b 	bl	8007180 <__lshift>
 8006a6a:	4631      	mov	r1, r6
 8006a6c:	4682      	mov	sl, r0
 8006a6e:	f000 fbf3 	bl	8007258 <__mcmp>
 8006a72:	2800      	cmp	r0, #0
 8006a74:	dc96      	bgt.n	80069a4 <_dtoa_r+0xabc>
 8006a76:	d102      	bne.n	8006a7e <_dtoa_r+0xb96>
 8006a78:	f019 0f01 	tst.w	r9, #1
 8006a7c:	d192      	bne.n	80069a4 <_dtoa_r+0xabc>
 8006a7e:	462b      	mov	r3, r5
 8006a80:	461d      	mov	r5, r3
 8006a82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a86:	2a30      	cmp	r2, #48	; 0x30
 8006a88:	d0fa      	beq.n	8006a80 <_dtoa_r+0xb98>
 8006a8a:	e6dd      	b.n	8006848 <_dtoa_r+0x960>
 8006a8c:	9a00      	ldr	r2, [sp, #0]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d189      	bne.n	80069a6 <_dtoa_r+0xabe>
 8006a92:	f10b 0b01 	add.w	fp, fp, #1
 8006a96:	2331      	movs	r3, #49	; 0x31
 8006a98:	e796      	b.n	80069c8 <_dtoa_r+0xae0>
 8006a9a:	4b0a      	ldr	r3, [pc, #40]	; (8006ac4 <_dtoa_r+0xbdc>)
 8006a9c:	f7ff ba99 	b.w	8005fd2 <_dtoa_r+0xea>
 8006aa0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f47f aa6d 	bne.w	8005f82 <_dtoa_r+0x9a>
 8006aa8:	4b07      	ldr	r3, [pc, #28]	; (8006ac8 <_dtoa_r+0xbe0>)
 8006aaa:	f7ff ba92 	b.w	8005fd2 <_dtoa_r+0xea>
 8006aae:	9b01      	ldr	r3, [sp, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	dcb5      	bgt.n	8006a20 <_dtoa_r+0xb38>
 8006ab4:	9b07      	ldr	r3, [sp, #28]
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	f73f aeb1 	bgt.w	800681e <_dtoa_r+0x936>
 8006abc:	e7b0      	b.n	8006a20 <_dtoa_r+0xb38>
 8006abe:	bf00      	nop
 8006ac0:	0800963d 	.word	0x0800963d
 8006ac4:	08009598 	.word	0x08009598
 8006ac8:	080095c1 	.word	0x080095c1

08006acc <_free_r>:
 8006acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ace:	2900      	cmp	r1, #0
 8006ad0:	d044      	beq.n	8006b5c <_free_r+0x90>
 8006ad2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ad6:	9001      	str	r0, [sp, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f1a1 0404 	sub.w	r4, r1, #4
 8006ade:	bfb8      	it	lt
 8006ae0:	18e4      	addlt	r4, r4, r3
 8006ae2:	f000 f8e7 	bl	8006cb4 <__malloc_lock>
 8006ae6:	4a1e      	ldr	r2, [pc, #120]	; (8006b60 <_free_r+0x94>)
 8006ae8:	9801      	ldr	r0, [sp, #4]
 8006aea:	6813      	ldr	r3, [r2, #0]
 8006aec:	b933      	cbnz	r3, 8006afc <_free_r+0x30>
 8006aee:	6063      	str	r3, [r4, #4]
 8006af0:	6014      	str	r4, [r2, #0]
 8006af2:	b003      	add	sp, #12
 8006af4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006af8:	f000 b8e2 	b.w	8006cc0 <__malloc_unlock>
 8006afc:	42a3      	cmp	r3, r4
 8006afe:	d908      	bls.n	8006b12 <_free_r+0x46>
 8006b00:	6825      	ldr	r5, [r4, #0]
 8006b02:	1961      	adds	r1, r4, r5
 8006b04:	428b      	cmp	r3, r1
 8006b06:	bf01      	itttt	eq
 8006b08:	6819      	ldreq	r1, [r3, #0]
 8006b0a:	685b      	ldreq	r3, [r3, #4]
 8006b0c:	1949      	addeq	r1, r1, r5
 8006b0e:	6021      	streq	r1, [r4, #0]
 8006b10:	e7ed      	b.n	8006aee <_free_r+0x22>
 8006b12:	461a      	mov	r2, r3
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	b10b      	cbz	r3, 8006b1c <_free_r+0x50>
 8006b18:	42a3      	cmp	r3, r4
 8006b1a:	d9fa      	bls.n	8006b12 <_free_r+0x46>
 8006b1c:	6811      	ldr	r1, [r2, #0]
 8006b1e:	1855      	adds	r5, r2, r1
 8006b20:	42a5      	cmp	r5, r4
 8006b22:	d10b      	bne.n	8006b3c <_free_r+0x70>
 8006b24:	6824      	ldr	r4, [r4, #0]
 8006b26:	4421      	add	r1, r4
 8006b28:	1854      	adds	r4, r2, r1
 8006b2a:	42a3      	cmp	r3, r4
 8006b2c:	6011      	str	r1, [r2, #0]
 8006b2e:	d1e0      	bne.n	8006af2 <_free_r+0x26>
 8006b30:	681c      	ldr	r4, [r3, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	6053      	str	r3, [r2, #4]
 8006b36:	440c      	add	r4, r1
 8006b38:	6014      	str	r4, [r2, #0]
 8006b3a:	e7da      	b.n	8006af2 <_free_r+0x26>
 8006b3c:	d902      	bls.n	8006b44 <_free_r+0x78>
 8006b3e:	230c      	movs	r3, #12
 8006b40:	6003      	str	r3, [r0, #0]
 8006b42:	e7d6      	b.n	8006af2 <_free_r+0x26>
 8006b44:	6825      	ldr	r5, [r4, #0]
 8006b46:	1961      	adds	r1, r4, r5
 8006b48:	428b      	cmp	r3, r1
 8006b4a:	bf04      	itt	eq
 8006b4c:	6819      	ldreq	r1, [r3, #0]
 8006b4e:	685b      	ldreq	r3, [r3, #4]
 8006b50:	6063      	str	r3, [r4, #4]
 8006b52:	bf04      	itt	eq
 8006b54:	1949      	addeq	r1, r1, r5
 8006b56:	6021      	streq	r1, [r4, #0]
 8006b58:	6054      	str	r4, [r2, #4]
 8006b5a:	e7ca      	b.n	8006af2 <_free_r+0x26>
 8006b5c:	b003      	add	sp, #12
 8006b5e:	bd30      	pop	{r4, r5, pc}
 8006b60:	2000090c 	.word	0x2000090c

08006b64 <malloc>:
 8006b64:	4b02      	ldr	r3, [pc, #8]	; (8006b70 <malloc+0xc>)
 8006b66:	4601      	mov	r1, r0
 8006b68:	6818      	ldr	r0, [r3, #0]
 8006b6a:	f000 b823 	b.w	8006bb4 <_malloc_r>
 8006b6e:	bf00      	nop
 8006b70:	200001f4 	.word	0x200001f4

08006b74 <sbrk_aligned>:
 8006b74:	b570      	push	{r4, r5, r6, lr}
 8006b76:	4e0e      	ldr	r6, [pc, #56]	; (8006bb0 <sbrk_aligned+0x3c>)
 8006b78:	460c      	mov	r4, r1
 8006b7a:	6831      	ldr	r1, [r6, #0]
 8006b7c:	4605      	mov	r5, r0
 8006b7e:	b911      	cbnz	r1, 8006b86 <sbrk_aligned+0x12>
 8006b80:	f001 fe1a 	bl	80087b8 <_sbrk_r>
 8006b84:	6030      	str	r0, [r6, #0]
 8006b86:	4621      	mov	r1, r4
 8006b88:	4628      	mov	r0, r5
 8006b8a:	f001 fe15 	bl	80087b8 <_sbrk_r>
 8006b8e:	1c43      	adds	r3, r0, #1
 8006b90:	d00a      	beq.n	8006ba8 <sbrk_aligned+0x34>
 8006b92:	1cc4      	adds	r4, r0, #3
 8006b94:	f024 0403 	bic.w	r4, r4, #3
 8006b98:	42a0      	cmp	r0, r4
 8006b9a:	d007      	beq.n	8006bac <sbrk_aligned+0x38>
 8006b9c:	1a21      	subs	r1, r4, r0
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	f001 fe0a 	bl	80087b8 <_sbrk_r>
 8006ba4:	3001      	adds	r0, #1
 8006ba6:	d101      	bne.n	8006bac <sbrk_aligned+0x38>
 8006ba8:	f04f 34ff 	mov.w	r4, #4294967295
 8006bac:	4620      	mov	r0, r4
 8006bae:	bd70      	pop	{r4, r5, r6, pc}
 8006bb0:	20000910 	.word	0x20000910

08006bb4 <_malloc_r>:
 8006bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bb8:	1ccd      	adds	r5, r1, #3
 8006bba:	f025 0503 	bic.w	r5, r5, #3
 8006bbe:	3508      	adds	r5, #8
 8006bc0:	2d0c      	cmp	r5, #12
 8006bc2:	bf38      	it	cc
 8006bc4:	250c      	movcc	r5, #12
 8006bc6:	2d00      	cmp	r5, #0
 8006bc8:	4607      	mov	r7, r0
 8006bca:	db01      	blt.n	8006bd0 <_malloc_r+0x1c>
 8006bcc:	42a9      	cmp	r1, r5
 8006bce:	d905      	bls.n	8006bdc <_malloc_r+0x28>
 8006bd0:	230c      	movs	r3, #12
 8006bd2:	603b      	str	r3, [r7, #0]
 8006bd4:	2600      	movs	r6, #0
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bdc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006cb0 <_malloc_r+0xfc>
 8006be0:	f000 f868 	bl	8006cb4 <__malloc_lock>
 8006be4:	f8d8 3000 	ldr.w	r3, [r8]
 8006be8:	461c      	mov	r4, r3
 8006bea:	bb5c      	cbnz	r4, 8006c44 <_malloc_r+0x90>
 8006bec:	4629      	mov	r1, r5
 8006bee:	4638      	mov	r0, r7
 8006bf0:	f7ff ffc0 	bl	8006b74 <sbrk_aligned>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	d155      	bne.n	8006ca6 <_malloc_r+0xf2>
 8006bfa:	f8d8 4000 	ldr.w	r4, [r8]
 8006bfe:	4626      	mov	r6, r4
 8006c00:	2e00      	cmp	r6, #0
 8006c02:	d145      	bne.n	8006c90 <_malloc_r+0xdc>
 8006c04:	2c00      	cmp	r4, #0
 8006c06:	d048      	beq.n	8006c9a <_malloc_r+0xe6>
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	4631      	mov	r1, r6
 8006c0c:	4638      	mov	r0, r7
 8006c0e:	eb04 0903 	add.w	r9, r4, r3
 8006c12:	f001 fdd1 	bl	80087b8 <_sbrk_r>
 8006c16:	4581      	cmp	r9, r0
 8006c18:	d13f      	bne.n	8006c9a <_malloc_r+0xe6>
 8006c1a:	6821      	ldr	r1, [r4, #0]
 8006c1c:	1a6d      	subs	r5, r5, r1
 8006c1e:	4629      	mov	r1, r5
 8006c20:	4638      	mov	r0, r7
 8006c22:	f7ff ffa7 	bl	8006b74 <sbrk_aligned>
 8006c26:	3001      	adds	r0, #1
 8006c28:	d037      	beq.n	8006c9a <_malloc_r+0xe6>
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	442b      	add	r3, r5
 8006c2e:	6023      	str	r3, [r4, #0]
 8006c30:	f8d8 3000 	ldr.w	r3, [r8]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d038      	beq.n	8006caa <_malloc_r+0xf6>
 8006c38:	685a      	ldr	r2, [r3, #4]
 8006c3a:	42a2      	cmp	r2, r4
 8006c3c:	d12b      	bne.n	8006c96 <_malloc_r+0xe2>
 8006c3e:	2200      	movs	r2, #0
 8006c40:	605a      	str	r2, [r3, #4]
 8006c42:	e00f      	b.n	8006c64 <_malloc_r+0xb0>
 8006c44:	6822      	ldr	r2, [r4, #0]
 8006c46:	1b52      	subs	r2, r2, r5
 8006c48:	d41f      	bmi.n	8006c8a <_malloc_r+0xd6>
 8006c4a:	2a0b      	cmp	r2, #11
 8006c4c:	d917      	bls.n	8006c7e <_malloc_r+0xca>
 8006c4e:	1961      	adds	r1, r4, r5
 8006c50:	42a3      	cmp	r3, r4
 8006c52:	6025      	str	r5, [r4, #0]
 8006c54:	bf18      	it	ne
 8006c56:	6059      	strne	r1, [r3, #4]
 8006c58:	6863      	ldr	r3, [r4, #4]
 8006c5a:	bf08      	it	eq
 8006c5c:	f8c8 1000 	streq.w	r1, [r8]
 8006c60:	5162      	str	r2, [r4, r5]
 8006c62:	604b      	str	r3, [r1, #4]
 8006c64:	4638      	mov	r0, r7
 8006c66:	f104 060b 	add.w	r6, r4, #11
 8006c6a:	f000 f829 	bl	8006cc0 <__malloc_unlock>
 8006c6e:	f026 0607 	bic.w	r6, r6, #7
 8006c72:	1d23      	adds	r3, r4, #4
 8006c74:	1af2      	subs	r2, r6, r3
 8006c76:	d0ae      	beq.n	8006bd6 <_malloc_r+0x22>
 8006c78:	1b9b      	subs	r3, r3, r6
 8006c7a:	50a3      	str	r3, [r4, r2]
 8006c7c:	e7ab      	b.n	8006bd6 <_malloc_r+0x22>
 8006c7e:	42a3      	cmp	r3, r4
 8006c80:	6862      	ldr	r2, [r4, #4]
 8006c82:	d1dd      	bne.n	8006c40 <_malloc_r+0x8c>
 8006c84:	f8c8 2000 	str.w	r2, [r8]
 8006c88:	e7ec      	b.n	8006c64 <_malloc_r+0xb0>
 8006c8a:	4623      	mov	r3, r4
 8006c8c:	6864      	ldr	r4, [r4, #4]
 8006c8e:	e7ac      	b.n	8006bea <_malloc_r+0x36>
 8006c90:	4634      	mov	r4, r6
 8006c92:	6876      	ldr	r6, [r6, #4]
 8006c94:	e7b4      	b.n	8006c00 <_malloc_r+0x4c>
 8006c96:	4613      	mov	r3, r2
 8006c98:	e7cc      	b.n	8006c34 <_malloc_r+0x80>
 8006c9a:	230c      	movs	r3, #12
 8006c9c:	603b      	str	r3, [r7, #0]
 8006c9e:	4638      	mov	r0, r7
 8006ca0:	f000 f80e 	bl	8006cc0 <__malloc_unlock>
 8006ca4:	e797      	b.n	8006bd6 <_malloc_r+0x22>
 8006ca6:	6025      	str	r5, [r4, #0]
 8006ca8:	e7dc      	b.n	8006c64 <_malloc_r+0xb0>
 8006caa:	605b      	str	r3, [r3, #4]
 8006cac:	deff      	udf	#255	; 0xff
 8006cae:	bf00      	nop
 8006cb0:	2000090c 	.word	0x2000090c

08006cb4 <__malloc_lock>:
 8006cb4:	4801      	ldr	r0, [pc, #4]	; (8006cbc <__malloc_lock+0x8>)
 8006cb6:	f7ff b884 	b.w	8005dc2 <__retarget_lock_acquire_recursive>
 8006cba:	bf00      	nop
 8006cbc:	20000908 	.word	0x20000908

08006cc0 <__malloc_unlock>:
 8006cc0:	4801      	ldr	r0, [pc, #4]	; (8006cc8 <__malloc_unlock+0x8>)
 8006cc2:	f7ff b87f 	b.w	8005dc4 <__retarget_lock_release_recursive>
 8006cc6:	bf00      	nop
 8006cc8:	20000908 	.word	0x20000908

08006ccc <_Balloc>:
 8006ccc:	b570      	push	{r4, r5, r6, lr}
 8006cce:	69c6      	ldr	r6, [r0, #28]
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	460d      	mov	r5, r1
 8006cd4:	b976      	cbnz	r6, 8006cf4 <_Balloc+0x28>
 8006cd6:	2010      	movs	r0, #16
 8006cd8:	f7ff ff44 	bl	8006b64 <malloc>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	61e0      	str	r0, [r4, #28]
 8006ce0:	b920      	cbnz	r0, 8006cec <_Balloc+0x20>
 8006ce2:	4b18      	ldr	r3, [pc, #96]	; (8006d44 <_Balloc+0x78>)
 8006ce4:	4818      	ldr	r0, [pc, #96]	; (8006d48 <_Balloc+0x7c>)
 8006ce6:	216b      	movs	r1, #107	; 0x6b
 8006ce8:	f001 fd8e 	bl	8008808 <__assert_func>
 8006cec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cf0:	6006      	str	r6, [r0, #0]
 8006cf2:	60c6      	str	r6, [r0, #12]
 8006cf4:	69e6      	ldr	r6, [r4, #28]
 8006cf6:	68f3      	ldr	r3, [r6, #12]
 8006cf8:	b183      	cbz	r3, 8006d1c <_Balloc+0x50>
 8006cfa:	69e3      	ldr	r3, [r4, #28]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d02:	b9b8      	cbnz	r0, 8006d34 <_Balloc+0x68>
 8006d04:	2101      	movs	r1, #1
 8006d06:	fa01 f605 	lsl.w	r6, r1, r5
 8006d0a:	1d72      	adds	r2, r6, #5
 8006d0c:	0092      	lsls	r2, r2, #2
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f001 fd98 	bl	8008844 <_calloc_r>
 8006d14:	b160      	cbz	r0, 8006d30 <_Balloc+0x64>
 8006d16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d1a:	e00e      	b.n	8006d3a <_Balloc+0x6e>
 8006d1c:	2221      	movs	r2, #33	; 0x21
 8006d1e:	2104      	movs	r1, #4
 8006d20:	4620      	mov	r0, r4
 8006d22:	f001 fd8f 	bl	8008844 <_calloc_r>
 8006d26:	69e3      	ldr	r3, [r4, #28]
 8006d28:	60f0      	str	r0, [r6, #12]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1e4      	bne.n	8006cfa <_Balloc+0x2e>
 8006d30:	2000      	movs	r0, #0
 8006d32:	bd70      	pop	{r4, r5, r6, pc}
 8006d34:	6802      	ldr	r2, [r0, #0]
 8006d36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d40:	e7f7      	b.n	8006d32 <_Balloc+0x66>
 8006d42:	bf00      	nop
 8006d44:	080095ce 	.word	0x080095ce
 8006d48:	0800964e 	.word	0x0800964e

08006d4c <_Bfree>:
 8006d4c:	b570      	push	{r4, r5, r6, lr}
 8006d4e:	69c6      	ldr	r6, [r0, #28]
 8006d50:	4605      	mov	r5, r0
 8006d52:	460c      	mov	r4, r1
 8006d54:	b976      	cbnz	r6, 8006d74 <_Bfree+0x28>
 8006d56:	2010      	movs	r0, #16
 8006d58:	f7ff ff04 	bl	8006b64 <malloc>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	61e8      	str	r0, [r5, #28]
 8006d60:	b920      	cbnz	r0, 8006d6c <_Bfree+0x20>
 8006d62:	4b09      	ldr	r3, [pc, #36]	; (8006d88 <_Bfree+0x3c>)
 8006d64:	4809      	ldr	r0, [pc, #36]	; (8006d8c <_Bfree+0x40>)
 8006d66:	218f      	movs	r1, #143	; 0x8f
 8006d68:	f001 fd4e 	bl	8008808 <__assert_func>
 8006d6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d70:	6006      	str	r6, [r0, #0]
 8006d72:	60c6      	str	r6, [r0, #12]
 8006d74:	b13c      	cbz	r4, 8006d86 <_Bfree+0x3a>
 8006d76:	69eb      	ldr	r3, [r5, #28]
 8006d78:	6862      	ldr	r2, [r4, #4]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d80:	6021      	str	r1, [r4, #0]
 8006d82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d86:	bd70      	pop	{r4, r5, r6, pc}
 8006d88:	080095ce 	.word	0x080095ce
 8006d8c:	0800964e 	.word	0x0800964e

08006d90 <__multadd>:
 8006d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d94:	690d      	ldr	r5, [r1, #16]
 8006d96:	4607      	mov	r7, r0
 8006d98:	460c      	mov	r4, r1
 8006d9a:	461e      	mov	r6, r3
 8006d9c:	f101 0c14 	add.w	ip, r1, #20
 8006da0:	2000      	movs	r0, #0
 8006da2:	f8dc 3000 	ldr.w	r3, [ip]
 8006da6:	b299      	uxth	r1, r3
 8006da8:	fb02 6101 	mla	r1, r2, r1, r6
 8006dac:	0c1e      	lsrs	r6, r3, #16
 8006dae:	0c0b      	lsrs	r3, r1, #16
 8006db0:	fb02 3306 	mla	r3, r2, r6, r3
 8006db4:	b289      	uxth	r1, r1
 8006db6:	3001      	adds	r0, #1
 8006db8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006dbc:	4285      	cmp	r5, r0
 8006dbe:	f84c 1b04 	str.w	r1, [ip], #4
 8006dc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006dc6:	dcec      	bgt.n	8006da2 <__multadd+0x12>
 8006dc8:	b30e      	cbz	r6, 8006e0e <__multadd+0x7e>
 8006dca:	68a3      	ldr	r3, [r4, #8]
 8006dcc:	42ab      	cmp	r3, r5
 8006dce:	dc19      	bgt.n	8006e04 <__multadd+0x74>
 8006dd0:	6861      	ldr	r1, [r4, #4]
 8006dd2:	4638      	mov	r0, r7
 8006dd4:	3101      	adds	r1, #1
 8006dd6:	f7ff ff79 	bl	8006ccc <_Balloc>
 8006dda:	4680      	mov	r8, r0
 8006ddc:	b928      	cbnz	r0, 8006dea <__multadd+0x5a>
 8006dde:	4602      	mov	r2, r0
 8006de0:	4b0c      	ldr	r3, [pc, #48]	; (8006e14 <__multadd+0x84>)
 8006de2:	480d      	ldr	r0, [pc, #52]	; (8006e18 <__multadd+0x88>)
 8006de4:	21ba      	movs	r1, #186	; 0xba
 8006de6:	f001 fd0f 	bl	8008808 <__assert_func>
 8006dea:	6922      	ldr	r2, [r4, #16]
 8006dec:	3202      	adds	r2, #2
 8006dee:	f104 010c 	add.w	r1, r4, #12
 8006df2:	0092      	lsls	r2, r2, #2
 8006df4:	300c      	adds	r0, #12
 8006df6:	f001 fcef 	bl	80087d8 <memcpy>
 8006dfa:	4621      	mov	r1, r4
 8006dfc:	4638      	mov	r0, r7
 8006dfe:	f7ff ffa5 	bl	8006d4c <_Bfree>
 8006e02:	4644      	mov	r4, r8
 8006e04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e08:	3501      	adds	r5, #1
 8006e0a:	615e      	str	r6, [r3, #20]
 8006e0c:	6125      	str	r5, [r4, #16]
 8006e0e:	4620      	mov	r0, r4
 8006e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e14:	0800963d 	.word	0x0800963d
 8006e18:	0800964e 	.word	0x0800964e

08006e1c <__s2b>:
 8006e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e20:	460c      	mov	r4, r1
 8006e22:	4615      	mov	r5, r2
 8006e24:	461f      	mov	r7, r3
 8006e26:	2209      	movs	r2, #9
 8006e28:	3308      	adds	r3, #8
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e30:	2100      	movs	r1, #0
 8006e32:	2201      	movs	r2, #1
 8006e34:	429a      	cmp	r2, r3
 8006e36:	db09      	blt.n	8006e4c <__s2b+0x30>
 8006e38:	4630      	mov	r0, r6
 8006e3a:	f7ff ff47 	bl	8006ccc <_Balloc>
 8006e3e:	b940      	cbnz	r0, 8006e52 <__s2b+0x36>
 8006e40:	4602      	mov	r2, r0
 8006e42:	4b19      	ldr	r3, [pc, #100]	; (8006ea8 <__s2b+0x8c>)
 8006e44:	4819      	ldr	r0, [pc, #100]	; (8006eac <__s2b+0x90>)
 8006e46:	21d3      	movs	r1, #211	; 0xd3
 8006e48:	f001 fcde 	bl	8008808 <__assert_func>
 8006e4c:	0052      	lsls	r2, r2, #1
 8006e4e:	3101      	adds	r1, #1
 8006e50:	e7f0      	b.n	8006e34 <__s2b+0x18>
 8006e52:	9b08      	ldr	r3, [sp, #32]
 8006e54:	6143      	str	r3, [r0, #20]
 8006e56:	2d09      	cmp	r5, #9
 8006e58:	f04f 0301 	mov.w	r3, #1
 8006e5c:	6103      	str	r3, [r0, #16]
 8006e5e:	dd16      	ble.n	8006e8e <__s2b+0x72>
 8006e60:	f104 0909 	add.w	r9, r4, #9
 8006e64:	46c8      	mov	r8, r9
 8006e66:	442c      	add	r4, r5
 8006e68:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006e6c:	4601      	mov	r1, r0
 8006e6e:	3b30      	subs	r3, #48	; 0x30
 8006e70:	220a      	movs	r2, #10
 8006e72:	4630      	mov	r0, r6
 8006e74:	f7ff ff8c 	bl	8006d90 <__multadd>
 8006e78:	45a0      	cmp	r8, r4
 8006e7a:	d1f5      	bne.n	8006e68 <__s2b+0x4c>
 8006e7c:	f1a5 0408 	sub.w	r4, r5, #8
 8006e80:	444c      	add	r4, r9
 8006e82:	1b2d      	subs	r5, r5, r4
 8006e84:	1963      	adds	r3, r4, r5
 8006e86:	42bb      	cmp	r3, r7
 8006e88:	db04      	blt.n	8006e94 <__s2b+0x78>
 8006e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e8e:	340a      	adds	r4, #10
 8006e90:	2509      	movs	r5, #9
 8006e92:	e7f6      	b.n	8006e82 <__s2b+0x66>
 8006e94:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006e98:	4601      	mov	r1, r0
 8006e9a:	3b30      	subs	r3, #48	; 0x30
 8006e9c:	220a      	movs	r2, #10
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	f7ff ff76 	bl	8006d90 <__multadd>
 8006ea4:	e7ee      	b.n	8006e84 <__s2b+0x68>
 8006ea6:	bf00      	nop
 8006ea8:	0800963d 	.word	0x0800963d
 8006eac:	0800964e 	.word	0x0800964e

08006eb0 <__hi0bits>:
 8006eb0:	0c03      	lsrs	r3, r0, #16
 8006eb2:	041b      	lsls	r3, r3, #16
 8006eb4:	b9d3      	cbnz	r3, 8006eec <__hi0bits+0x3c>
 8006eb6:	0400      	lsls	r0, r0, #16
 8006eb8:	2310      	movs	r3, #16
 8006eba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006ebe:	bf04      	itt	eq
 8006ec0:	0200      	lsleq	r0, r0, #8
 8006ec2:	3308      	addeq	r3, #8
 8006ec4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006ec8:	bf04      	itt	eq
 8006eca:	0100      	lsleq	r0, r0, #4
 8006ecc:	3304      	addeq	r3, #4
 8006ece:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006ed2:	bf04      	itt	eq
 8006ed4:	0080      	lsleq	r0, r0, #2
 8006ed6:	3302      	addeq	r3, #2
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	db05      	blt.n	8006ee8 <__hi0bits+0x38>
 8006edc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006ee0:	f103 0301 	add.w	r3, r3, #1
 8006ee4:	bf08      	it	eq
 8006ee6:	2320      	moveq	r3, #32
 8006ee8:	4618      	mov	r0, r3
 8006eea:	4770      	bx	lr
 8006eec:	2300      	movs	r3, #0
 8006eee:	e7e4      	b.n	8006eba <__hi0bits+0xa>

08006ef0 <__lo0bits>:
 8006ef0:	6803      	ldr	r3, [r0, #0]
 8006ef2:	f013 0207 	ands.w	r2, r3, #7
 8006ef6:	d00c      	beq.n	8006f12 <__lo0bits+0x22>
 8006ef8:	07d9      	lsls	r1, r3, #31
 8006efa:	d422      	bmi.n	8006f42 <__lo0bits+0x52>
 8006efc:	079a      	lsls	r2, r3, #30
 8006efe:	bf49      	itett	mi
 8006f00:	085b      	lsrmi	r3, r3, #1
 8006f02:	089b      	lsrpl	r3, r3, #2
 8006f04:	6003      	strmi	r3, [r0, #0]
 8006f06:	2201      	movmi	r2, #1
 8006f08:	bf5c      	itt	pl
 8006f0a:	6003      	strpl	r3, [r0, #0]
 8006f0c:	2202      	movpl	r2, #2
 8006f0e:	4610      	mov	r0, r2
 8006f10:	4770      	bx	lr
 8006f12:	b299      	uxth	r1, r3
 8006f14:	b909      	cbnz	r1, 8006f1a <__lo0bits+0x2a>
 8006f16:	0c1b      	lsrs	r3, r3, #16
 8006f18:	2210      	movs	r2, #16
 8006f1a:	b2d9      	uxtb	r1, r3
 8006f1c:	b909      	cbnz	r1, 8006f22 <__lo0bits+0x32>
 8006f1e:	3208      	adds	r2, #8
 8006f20:	0a1b      	lsrs	r3, r3, #8
 8006f22:	0719      	lsls	r1, r3, #28
 8006f24:	bf04      	itt	eq
 8006f26:	091b      	lsreq	r3, r3, #4
 8006f28:	3204      	addeq	r2, #4
 8006f2a:	0799      	lsls	r1, r3, #30
 8006f2c:	bf04      	itt	eq
 8006f2e:	089b      	lsreq	r3, r3, #2
 8006f30:	3202      	addeq	r2, #2
 8006f32:	07d9      	lsls	r1, r3, #31
 8006f34:	d403      	bmi.n	8006f3e <__lo0bits+0x4e>
 8006f36:	085b      	lsrs	r3, r3, #1
 8006f38:	f102 0201 	add.w	r2, r2, #1
 8006f3c:	d003      	beq.n	8006f46 <__lo0bits+0x56>
 8006f3e:	6003      	str	r3, [r0, #0]
 8006f40:	e7e5      	b.n	8006f0e <__lo0bits+0x1e>
 8006f42:	2200      	movs	r2, #0
 8006f44:	e7e3      	b.n	8006f0e <__lo0bits+0x1e>
 8006f46:	2220      	movs	r2, #32
 8006f48:	e7e1      	b.n	8006f0e <__lo0bits+0x1e>
	...

08006f4c <__i2b>:
 8006f4c:	b510      	push	{r4, lr}
 8006f4e:	460c      	mov	r4, r1
 8006f50:	2101      	movs	r1, #1
 8006f52:	f7ff febb 	bl	8006ccc <_Balloc>
 8006f56:	4602      	mov	r2, r0
 8006f58:	b928      	cbnz	r0, 8006f66 <__i2b+0x1a>
 8006f5a:	4b05      	ldr	r3, [pc, #20]	; (8006f70 <__i2b+0x24>)
 8006f5c:	4805      	ldr	r0, [pc, #20]	; (8006f74 <__i2b+0x28>)
 8006f5e:	f240 1145 	movw	r1, #325	; 0x145
 8006f62:	f001 fc51 	bl	8008808 <__assert_func>
 8006f66:	2301      	movs	r3, #1
 8006f68:	6144      	str	r4, [r0, #20]
 8006f6a:	6103      	str	r3, [r0, #16]
 8006f6c:	bd10      	pop	{r4, pc}
 8006f6e:	bf00      	nop
 8006f70:	0800963d 	.word	0x0800963d
 8006f74:	0800964e 	.word	0x0800964e

08006f78 <__multiply>:
 8006f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f7c:	4691      	mov	r9, r2
 8006f7e:	690a      	ldr	r2, [r1, #16]
 8006f80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	bfb8      	it	lt
 8006f88:	460b      	movlt	r3, r1
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	bfbc      	itt	lt
 8006f8e:	464c      	movlt	r4, r9
 8006f90:	4699      	movlt	r9, r3
 8006f92:	6927      	ldr	r7, [r4, #16]
 8006f94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006f98:	68a3      	ldr	r3, [r4, #8]
 8006f9a:	6861      	ldr	r1, [r4, #4]
 8006f9c:	eb07 060a 	add.w	r6, r7, sl
 8006fa0:	42b3      	cmp	r3, r6
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	bfb8      	it	lt
 8006fa6:	3101      	addlt	r1, #1
 8006fa8:	f7ff fe90 	bl	8006ccc <_Balloc>
 8006fac:	b930      	cbnz	r0, 8006fbc <__multiply+0x44>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	4b44      	ldr	r3, [pc, #272]	; (80070c4 <__multiply+0x14c>)
 8006fb2:	4845      	ldr	r0, [pc, #276]	; (80070c8 <__multiply+0x150>)
 8006fb4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006fb8:	f001 fc26 	bl	8008808 <__assert_func>
 8006fbc:	f100 0514 	add.w	r5, r0, #20
 8006fc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006fc4:	462b      	mov	r3, r5
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	4543      	cmp	r3, r8
 8006fca:	d321      	bcc.n	8007010 <__multiply+0x98>
 8006fcc:	f104 0314 	add.w	r3, r4, #20
 8006fd0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006fd4:	f109 0314 	add.w	r3, r9, #20
 8006fd8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006fdc:	9202      	str	r2, [sp, #8]
 8006fde:	1b3a      	subs	r2, r7, r4
 8006fe0:	3a15      	subs	r2, #21
 8006fe2:	f022 0203 	bic.w	r2, r2, #3
 8006fe6:	3204      	adds	r2, #4
 8006fe8:	f104 0115 	add.w	r1, r4, #21
 8006fec:	428f      	cmp	r7, r1
 8006fee:	bf38      	it	cc
 8006ff0:	2204      	movcc	r2, #4
 8006ff2:	9201      	str	r2, [sp, #4]
 8006ff4:	9a02      	ldr	r2, [sp, #8]
 8006ff6:	9303      	str	r3, [sp, #12]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d80c      	bhi.n	8007016 <__multiply+0x9e>
 8006ffc:	2e00      	cmp	r6, #0
 8006ffe:	dd03      	ble.n	8007008 <__multiply+0x90>
 8007000:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007004:	2b00      	cmp	r3, #0
 8007006:	d05b      	beq.n	80070c0 <__multiply+0x148>
 8007008:	6106      	str	r6, [r0, #16]
 800700a:	b005      	add	sp, #20
 800700c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007010:	f843 2b04 	str.w	r2, [r3], #4
 8007014:	e7d8      	b.n	8006fc8 <__multiply+0x50>
 8007016:	f8b3 a000 	ldrh.w	sl, [r3]
 800701a:	f1ba 0f00 	cmp.w	sl, #0
 800701e:	d024      	beq.n	800706a <__multiply+0xf2>
 8007020:	f104 0e14 	add.w	lr, r4, #20
 8007024:	46a9      	mov	r9, r5
 8007026:	f04f 0c00 	mov.w	ip, #0
 800702a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800702e:	f8d9 1000 	ldr.w	r1, [r9]
 8007032:	fa1f fb82 	uxth.w	fp, r2
 8007036:	b289      	uxth	r1, r1
 8007038:	fb0a 110b 	mla	r1, sl, fp, r1
 800703c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007040:	f8d9 2000 	ldr.w	r2, [r9]
 8007044:	4461      	add	r1, ip
 8007046:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800704a:	fb0a c20b 	mla	r2, sl, fp, ip
 800704e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007052:	b289      	uxth	r1, r1
 8007054:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007058:	4577      	cmp	r7, lr
 800705a:	f849 1b04 	str.w	r1, [r9], #4
 800705e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007062:	d8e2      	bhi.n	800702a <__multiply+0xb2>
 8007064:	9a01      	ldr	r2, [sp, #4]
 8007066:	f845 c002 	str.w	ip, [r5, r2]
 800706a:	9a03      	ldr	r2, [sp, #12]
 800706c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007070:	3304      	adds	r3, #4
 8007072:	f1b9 0f00 	cmp.w	r9, #0
 8007076:	d021      	beq.n	80070bc <__multiply+0x144>
 8007078:	6829      	ldr	r1, [r5, #0]
 800707a:	f104 0c14 	add.w	ip, r4, #20
 800707e:	46ae      	mov	lr, r5
 8007080:	f04f 0a00 	mov.w	sl, #0
 8007084:	f8bc b000 	ldrh.w	fp, [ip]
 8007088:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800708c:	fb09 220b 	mla	r2, r9, fp, r2
 8007090:	4452      	add	r2, sl
 8007092:	b289      	uxth	r1, r1
 8007094:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007098:	f84e 1b04 	str.w	r1, [lr], #4
 800709c:	f85c 1b04 	ldr.w	r1, [ip], #4
 80070a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070a4:	f8be 1000 	ldrh.w	r1, [lr]
 80070a8:	fb09 110a 	mla	r1, r9, sl, r1
 80070ac:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80070b0:	4567      	cmp	r7, ip
 80070b2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070b6:	d8e5      	bhi.n	8007084 <__multiply+0x10c>
 80070b8:	9a01      	ldr	r2, [sp, #4]
 80070ba:	50a9      	str	r1, [r5, r2]
 80070bc:	3504      	adds	r5, #4
 80070be:	e799      	b.n	8006ff4 <__multiply+0x7c>
 80070c0:	3e01      	subs	r6, #1
 80070c2:	e79b      	b.n	8006ffc <__multiply+0x84>
 80070c4:	0800963d 	.word	0x0800963d
 80070c8:	0800964e 	.word	0x0800964e

080070cc <__pow5mult>:
 80070cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070d0:	4615      	mov	r5, r2
 80070d2:	f012 0203 	ands.w	r2, r2, #3
 80070d6:	4606      	mov	r6, r0
 80070d8:	460f      	mov	r7, r1
 80070da:	d007      	beq.n	80070ec <__pow5mult+0x20>
 80070dc:	4c25      	ldr	r4, [pc, #148]	; (8007174 <__pow5mult+0xa8>)
 80070de:	3a01      	subs	r2, #1
 80070e0:	2300      	movs	r3, #0
 80070e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070e6:	f7ff fe53 	bl	8006d90 <__multadd>
 80070ea:	4607      	mov	r7, r0
 80070ec:	10ad      	asrs	r5, r5, #2
 80070ee:	d03d      	beq.n	800716c <__pow5mult+0xa0>
 80070f0:	69f4      	ldr	r4, [r6, #28]
 80070f2:	b97c      	cbnz	r4, 8007114 <__pow5mult+0x48>
 80070f4:	2010      	movs	r0, #16
 80070f6:	f7ff fd35 	bl	8006b64 <malloc>
 80070fa:	4602      	mov	r2, r0
 80070fc:	61f0      	str	r0, [r6, #28]
 80070fe:	b928      	cbnz	r0, 800710c <__pow5mult+0x40>
 8007100:	4b1d      	ldr	r3, [pc, #116]	; (8007178 <__pow5mult+0xac>)
 8007102:	481e      	ldr	r0, [pc, #120]	; (800717c <__pow5mult+0xb0>)
 8007104:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007108:	f001 fb7e 	bl	8008808 <__assert_func>
 800710c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007110:	6004      	str	r4, [r0, #0]
 8007112:	60c4      	str	r4, [r0, #12]
 8007114:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007118:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800711c:	b94c      	cbnz	r4, 8007132 <__pow5mult+0x66>
 800711e:	f240 2171 	movw	r1, #625	; 0x271
 8007122:	4630      	mov	r0, r6
 8007124:	f7ff ff12 	bl	8006f4c <__i2b>
 8007128:	2300      	movs	r3, #0
 800712a:	f8c8 0008 	str.w	r0, [r8, #8]
 800712e:	4604      	mov	r4, r0
 8007130:	6003      	str	r3, [r0, #0]
 8007132:	f04f 0900 	mov.w	r9, #0
 8007136:	07eb      	lsls	r3, r5, #31
 8007138:	d50a      	bpl.n	8007150 <__pow5mult+0x84>
 800713a:	4639      	mov	r1, r7
 800713c:	4622      	mov	r2, r4
 800713e:	4630      	mov	r0, r6
 8007140:	f7ff ff1a 	bl	8006f78 <__multiply>
 8007144:	4639      	mov	r1, r7
 8007146:	4680      	mov	r8, r0
 8007148:	4630      	mov	r0, r6
 800714a:	f7ff fdff 	bl	8006d4c <_Bfree>
 800714e:	4647      	mov	r7, r8
 8007150:	106d      	asrs	r5, r5, #1
 8007152:	d00b      	beq.n	800716c <__pow5mult+0xa0>
 8007154:	6820      	ldr	r0, [r4, #0]
 8007156:	b938      	cbnz	r0, 8007168 <__pow5mult+0x9c>
 8007158:	4622      	mov	r2, r4
 800715a:	4621      	mov	r1, r4
 800715c:	4630      	mov	r0, r6
 800715e:	f7ff ff0b 	bl	8006f78 <__multiply>
 8007162:	6020      	str	r0, [r4, #0]
 8007164:	f8c0 9000 	str.w	r9, [r0]
 8007168:	4604      	mov	r4, r0
 800716a:	e7e4      	b.n	8007136 <__pow5mult+0x6a>
 800716c:	4638      	mov	r0, r7
 800716e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007172:	bf00      	nop
 8007174:	08009798 	.word	0x08009798
 8007178:	080095ce 	.word	0x080095ce
 800717c:	0800964e 	.word	0x0800964e

08007180 <__lshift>:
 8007180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007184:	460c      	mov	r4, r1
 8007186:	6849      	ldr	r1, [r1, #4]
 8007188:	6923      	ldr	r3, [r4, #16]
 800718a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800718e:	68a3      	ldr	r3, [r4, #8]
 8007190:	4607      	mov	r7, r0
 8007192:	4691      	mov	r9, r2
 8007194:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007198:	f108 0601 	add.w	r6, r8, #1
 800719c:	42b3      	cmp	r3, r6
 800719e:	db0b      	blt.n	80071b8 <__lshift+0x38>
 80071a0:	4638      	mov	r0, r7
 80071a2:	f7ff fd93 	bl	8006ccc <_Balloc>
 80071a6:	4605      	mov	r5, r0
 80071a8:	b948      	cbnz	r0, 80071be <__lshift+0x3e>
 80071aa:	4602      	mov	r2, r0
 80071ac:	4b28      	ldr	r3, [pc, #160]	; (8007250 <__lshift+0xd0>)
 80071ae:	4829      	ldr	r0, [pc, #164]	; (8007254 <__lshift+0xd4>)
 80071b0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80071b4:	f001 fb28 	bl	8008808 <__assert_func>
 80071b8:	3101      	adds	r1, #1
 80071ba:	005b      	lsls	r3, r3, #1
 80071bc:	e7ee      	b.n	800719c <__lshift+0x1c>
 80071be:	2300      	movs	r3, #0
 80071c0:	f100 0114 	add.w	r1, r0, #20
 80071c4:	f100 0210 	add.w	r2, r0, #16
 80071c8:	4618      	mov	r0, r3
 80071ca:	4553      	cmp	r3, sl
 80071cc:	db33      	blt.n	8007236 <__lshift+0xb6>
 80071ce:	6920      	ldr	r0, [r4, #16]
 80071d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071d4:	f104 0314 	add.w	r3, r4, #20
 80071d8:	f019 091f 	ands.w	r9, r9, #31
 80071dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80071e4:	d02b      	beq.n	800723e <__lshift+0xbe>
 80071e6:	f1c9 0e20 	rsb	lr, r9, #32
 80071ea:	468a      	mov	sl, r1
 80071ec:	2200      	movs	r2, #0
 80071ee:	6818      	ldr	r0, [r3, #0]
 80071f0:	fa00 f009 	lsl.w	r0, r0, r9
 80071f4:	4310      	orrs	r0, r2
 80071f6:	f84a 0b04 	str.w	r0, [sl], #4
 80071fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80071fe:	459c      	cmp	ip, r3
 8007200:	fa22 f20e 	lsr.w	r2, r2, lr
 8007204:	d8f3      	bhi.n	80071ee <__lshift+0x6e>
 8007206:	ebac 0304 	sub.w	r3, ip, r4
 800720a:	3b15      	subs	r3, #21
 800720c:	f023 0303 	bic.w	r3, r3, #3
 8007210:	3304      	adds	r3, #4
 8007212:	f104 0015 	add.w	r0, r4, #21
 8007216:	4584      	cmp	ip, r0
 8007218:	bf38      	it	cc
 800721a:	2304      	movcc	r3, #4
 800721c:	50ca      	str	r2, [r1, r3]
 800721e:	b10a      	cbz	r2, 8007224 <__lshift+0xa4>
 8007220:	f108 0602 	add.w	r6, r8, #2
 8007224:	3e01      	subs	r6, #1
 8007226:	4638      	mov	r0, r7
 8007228:	612e      	str	r6, [r5, #16]
 800722a:	4621      	mov	r1, r4
 800722c:	f7ff fd8e 	bl	8006d4c <_Bfree>
 8007230:	4628      	mov	r0, r5
 8007232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007236:	f842 0f04 	str.w	r0, [r2, #4]!
 800723a:	3301      	adds	r3, #1
 800723c:	e7c5      	b.n	80071ca <__lshift+0x4a>
 800723e:	3904      	subs	r1, #4
 8007240:	f853 2b04 	ldr.w	r2, [r3], #4
 8007244:	f841 2f04 	str.w	r2, [r1, #4]!
 8007248:	459c      	cmp	ip, r3
 800724a:	d8f9      	bhi.n	8007240 <__lshift+0xc0>
 800724c:	e7ea      	b.n	8007224 <__lshift+0xa4>
 800724e:	bf00      	nop
 8007250:	0800963d 	.word	0x0800963d
 8007254:	0800964e 	.word	0x0800964e

08007258 <__mcmp>:
 8007258:	b530      	push	{r4, r5, lr}
 800725a:	6902      	ldr	r2, [r0, #16]
 800725c:	690c      	ldr	r4, [r1, #16]
 800725e:	1b12      	subs	r2, r2, r4
 8007260:	d10e      	bne.n	8007280 <__mcmp+0x28>
 8007262:	f100 0314 	add.w	r3, r0, #20
 8007266:	3114      	adds	r1, #20
 8007268:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800726c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007270:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007274:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007278:	42a5      	cmp	r5, r4
 800727a:	d003      	beq.n	8007284 <__mcmp+0x2c>
 800727c:	d305      	bcc.n	800728a <__mcmp+0x32>
 800727e:	2201      	movs	r2, #1
 8007280:	4610      	mov	r0, r2
 8007282:	bd30      	pop	{r4, r5, pc}
 8007284:	4283      	cmp	r3, r0
 8007286:	d3f3      	bcc.n	8007270 <__mcmp+0x18>
 8007288:	e7fa      	b.n	8007280 <__mcmp+0x28>
 800728a:	f04f 32ff 	mov.w	r2, #4294967295
 800728e:	e7f7      	b.n	8007280 <__mcmp+0x28>

08007290 <__mdiff>:
 8007290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007294:	460c      	mov	r4, r1
 8007296:	4606      	mov	r6, r0
 8007298:	4611      	mov	r1, r2
 800729a:	4620      	mov	r0, r4
 800729c:	4690      	mov	r8, r2
 800729e:	f7ff ffdb 	bl	8007258 <__mcmp>
 80072a2:	1e05      	subs	r5, r0, #0
 80072a4:	d110      	bne.n	80072c8 <__mdiff+0x38>
 80072a6:	4629      	mov	r1, r5
 80072a8:	4630      	mov	r0, r6
 80072aa:	f7ff fd0f 	bl	8006ccc <_Balloc>
 80072ae:	b930      	cbnz	r0, 80072be <__mdiff+0x2e>
 80072b0:	4b3a      	ldr	r3, [pc, #232]	; (800739c <__mdiff+0x10c>)
 80072b2:	4602      	mov	r2, r0
 80072b4:	f240 2137 	movw	r1, #567	; 0x237
 80072b8:	4839      	ldr	r0, [pc, #228]	; (80073a0 <__mdiff+0x110>)
 80072ba:	f001 faa5 	bl	8008808 <__assert_func>
 80072be:	2301      	movs	r3, #1
 80072c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80072c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c8:	bfa4      	itt	ge
 80072ca:	4643      	movge	r3, r8
 80072cc:	46a0      	movge	r8, r4
 80072ce:	4630      	mov	r0, r6
 80072d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80072d4:	bfa6      	itte	ge
 80072d6:	461c      	movge	r4, r3
 80072d8:	2500      	movge	r5, #0
 80072da:	2501      	movlt	r5, #1
 80072dc:	f7ff fcf6 	bl	8006ccc <_Balloc>
 80072e0:	b920      	cbnz	r0, 80072ec <__mdiff+0x5c>
 80072e2:	4b2e      	ldr	r3, [pc, #184]	; (800739c <__mdiff+0x10c>)
 80072e4:	4602      	mov	r2, r0
 80072e6:	f240 2145 	movw	r1, #581	; 0x245
 80072ea:	e7e5      	b.n	80072b8 <__mdiff+0x28>
 80072ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80072f0:	6926      	ldr	r6, [r4, #16]
 80072f2:	60c5      	str	r5, [r0, #12]
 80072f4:	f104 0914 	add.w	r9, r4, #20
 80072f8:	f108 0514 	add.w	r5, r8, #20
 80072fc:	f100 0e14 	add.w	lr, r0, #20
 8007300:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007304:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007308:	f108 0210 	add.w	r2, r8, #16
 800730c:	46f2      	mov	sl, lr
 800730e:	2100      	movs	r1, #0
 8007310:	f859 3b04 	ldr.w	r3, [r9], #4
 8007314:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007318:	fa11 f88b 	uxtah	r8, r1, fp
 800731c:	b299      	uxth	r1, r3
 800731e:	0c1b      	lsrs	r3, r3, #16
 8007320:	eba8 0801 	sub.w	r8, r8, r1
 8007324:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007328:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800732c:	fa1f f888 	uxth.w	r8, r8
 8007330:	1419      	asrs	r1, r3, #16
 8007332:	454e      	cmp	r6, r9
 8007334:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007338:	f84a 3b04 	str.w	r3, [sl], #4
 800733c:	d8e8      	bhi.n	8007310 <__mdiff+0x80>
 800733e:	1b33      	subs	r3, r6, r4
 8007340:	3b15      	subs	r3, #21
 8007342:	f023 0303 	bic.w	r3, r3, #3
 8007346:	3304      	adds	r3, #4
 8007348:	3415      	adds	r4, #21
 800734a:	42a6      	cmp	r6, r4
 800734c:	bf38      	it	cc
 800734e:	2304      	movcc	r3, #4
 8007350:	441d      	add	r5, r3
 8007352:	4473      	add	r3, lr
 8007354:	469e      	mov	lr, r3
 8007356:	462e      	mov	r6, r5
 8007358:	4566      	cmp	r6, ip
 800735a:	d30e      	bcc.n	800737a <__mdiff+0xea>
 800735c:	f10c 0203 	add.w	r2, ip, #3
 8007360:	1b52      	subs	r2, r2, r5
 8007362:	f022 0203 	bic.w	r2, r2, #3
 8007366:	3d03      	subs	r5, #3
 8007368:	45ac      	cmp	ip, r5
 800736a:	bf38      	it	cc
 800736c:	2200      	movcc	r2, #0
 800736e:	4413      	add	r3, r2
 8007370:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007374:	b17a      	cbz	r2, 8007396 <__mdiff+0x106>
 8007376:	6107      	str	r7, [r0, #16]
 8007378:	e7a4      	b.n	80072c4 <__mdiff+0x34>
 800737a:	f856 8b04 	ldr.w	r8, [r6], #4
 800737e:	fa11 f288 	uxtah	r2, r1, r8
 8007382:	1414      	asrs	r4, r2, #16
 8007384:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007388:	b292      	uxth	r2, r2
 800738a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800738e:	f84e 2b04 	str.w	r2, [lr], #4
 8007392:	1421      	asrs	r1, r4, #16
 8007394:	e7e0      	b.n	8007358 <__mdiff+0xc8>
 8007396:	3f01      	subs	r7, #1
 8007398:	e7ea      	b.n	8007370 <__mdiff+0xe0>
 800739a:	bf00      	nop
 800739c:	0800963d 	.word	0x0800963d
 80073a0:	0800964e 	.word	0x0800964e

080073a4 <__ulp>:
 80073a4:	b082      	sub	sp, #8
 80073a6:	ed8d 0b00 	vstr	d0, [sp]
 80073aa:	9a01      	ldr	r2, [sp, #4]
 80073ac:	4b0f      	ldr	r3, [pc, #60]	; (80073ec <__ulp+0x48>)
 80073ae:	4013      	ands	r3, r2
 80073b0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	dc08      	bgt.n	80073ca <__ulp+0x26>
 80073b8:	425b      	negs	r3, r3
 80073ba:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80073be:	ea4f 5223 	mov.w	r2, r3, asr #20
 80073c2:	da04      	bge.n	80073ce <__ulp+0x2a>
 80073c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80073c8:	4113      	asrs	r3, r2
 80073ca:	2200      	movs	r2, #0
 80073cc:	e008      	b.n	80073e0 <__ulp+0x3c>
 80073ce:	f1a2 0314 	sub.w	r3, r2, #20
 80073d2:	2b1e      	cmp	r3, #30
 80073d4:	bfda      	itte	le
 80073d6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80073da:	40da      	lsrle	r2, r3
 80073dc:	2201      	movgt	r2, #1
 80073de:	2300      	movs	r3, #0
 80073e0:	4619      	mov	r1, r3
 80073e2:	4610      	mov	r0, r2
 80073e4:	ec41 0b10 	vmov	d0, r0, r1
 80073e8:	b002      	add	sp, #8
 80073ea:	4770      	bx	lr
 80073ec:	7ff00000 	.word	0x7ff00000

080073f0 <__b2d>:
 80073f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073f4:	6906      	ldr	r6, [r0, #16]
 80073f6:	f100 0814 	add.w	r8, r0, #20
 80073fa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80073fe:	1f37      	subs	r7, r6, #4
 8007400:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007404:	4610      	mov	r0, r2
 8007406:	f7ff fd53 	bl	8006eb0 <__hi0bits>
 800740a:	f1c0 0320 	rsb	r3, r0, #32
 800740e:	280a      	cmp	r0, #10
 8007410:	600b      	str	r3, [r1, #0]
 8007412:	491b      	ldr	r1, [pc, #108]	; (8007480 <__b2d+0x90>)
 8007414:	dc15      	bgt.n	8007442 <__b2d+0x52>
 8007416:	f1c0 0c0b 	rsb	ip, r0, #11
 800741a:	fa22 f30c 	lsr.w	r3, r2, ip
 800741e:	45b8      	cmp	r8, r7
 8007420:	ea43 0501 	orr.w	r5, r3, r1
 8007424:	bf34      	ite	cc
 8007426:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800742a:	2300      	movcs	r3, #0
 800742c:	3015      	adds	r0, #21
 800742e:	fa02 f000 	lsl.w	r0, r2, r0
 8007432:	fa23 f30c 	lsr.w	r3, r3, ip
 8007436:	4303      	orrs	r3, r0
 8007438:	461c      	mov	r4, r3
 800743a:	ec45 4b10 	vmov	d0, r4, r5
 800743e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007442:	45b8      	cmp	r8, r7
 8007444:	bf3a      	itte	cc
 8007446:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800744a:	f1a6 0708 	subcc.w	r7, r6, #8
 800744e:	2300      	movcs	r3, #0
 8007450:	380b      	subs	r0, #11
 8007452:	d012      	beq.n	800747a <__b2d+0x8a>
 8007454:	f1c0 0120 	rsb	r1, r0, #32
 8007458:	fa23 f401 	lsr.w	r4, r3, r1
 800745c:	4082      	lsls	r2, r0
 800745e:	4322      	orrs	r2, r4
 8007460:	4547      	cmp	r7, r8
 8007462:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007466:	bf8c      	ite	hi
 8007468:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800746c:	2200      	movls	r2, #0
 800746e:	4083      	lsls	r3, r0
 8007470:	40ca      	lsrs	r2, r1
 8007472:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007476:	4313      	orrs	r3, r2
 8007478:	e7de      	b.n	8007438 <__b2d+0x48>
 800747a:	ea42 0501 	orr.w	r5, r2, r1
 800747e:	e7db      	b.n	8007438 <__b2d+0x48>
 8007480:	3ff00000 	.word	0x3ff00000

08007484 <__d2b>:
 8007484:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007488:	460f      	mov	r7, r1
 800748a:	2101      	movs	r1, #1
 800748c:	ec59 8b10 	vmov	r8, r9, d0
 8007490:	4616      	mov	r6, r2
 8007492:	f7ff fc1b 	bl	8006ccc <_Balloc>
 8007496:	4604      	mov	r4, r0
 8007498:	b930      	cbnz	r0, 80074a8 <__d2b+0x24>
 800749a:	4602      	mov	r2, r0
 800749c:	4b24      	ldr	r3, [pc, #144]	; (8007530 <__d2b+0xac>)
 800749e:	4825      	ldr	r0, [pc, #148]	; (8007534 <__d2b+0xb0>)
 80074a0:	f240 310f 	movw	r1, #783	; 0x30f
 80074a4:	f001 f9b0 	bl	8008808 <__assert_func>
 80074a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80074ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074b0:	bb2d      	cbnz	r5, 80074fe <__d2b+0x7a>
 80074b2:	9301      	str	r3, [sp, #4]
 80074b4:	f1b8 0300 	subs.w	r3, r8, #0
 80074b8:	d026      	beq.n	8007508 <__d2b+0x84>
 80074ba:	4668      	mov	r0, sp
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	f7ff fd17 	bl	8006ef0 <__lo0bits>
 80074c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80074c6:	b1e8      	cbz	r0, 8007504 <__d2b+0x80>
 80074c8:	f1c0 0320 	rsb	r3, r0, #32
 80074cc:	fa02 f303 	lsl.w	r3, r2, r3
 80074d0:	430b      	orrs	r3, r1
 80074d2:	40c2      	lsrs	r2, r0
 80074d4:	6163      	str	r3, [r4, #20]
 80074d6:	9201      	str	r2, [sp, #4]
 80074d8:	9b01      	ldr	r3, [sp, #4]
 80074da:	61a3      	str	r3, [r4, #24]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	bf14      	ite	ne
 80074e0:	2202      	movne	r2, #2
 80074e2:	2201      	moveq	r2, #1
 80074e4:	6122      	str	r2, [r4, #16]
 80074e6:	b1bd      	cbz	r5, 8007518 <__d2b+0x94>
 80074e8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80074ec:	4405      	add	r5, r0
 80074ee:	603d      	str	r5, [r7, #0]
 80074f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80074f4:	6030      	str	r0, [r6, #0]
 80074f6:	4620      	mov	r0, r4
 80074f8:	b003      	add	sp, #12
 80074fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007502:	e7d6      	b.n	80074b2 <__d2b+0x2e>
 8007504:	6161      	str	r1, [r4, #20]
 8007506:	e7e7      	b.n	80074d8 <__d2b+0x54>
 8007508:	a801      	add	r0, sp, #4
 800750a:	f7ff fcf1 	bl	8006ef0 <__lo0bits>
 800750e:	9b01      	ldr	r3, [sp, #4]
 8007510:	6163      	str	r3, [r4, #20]
 8007512:	3020      	adds	r0, #32
 8007514:	2201      	movs	r2, #1
 8007516:	e7e5      	b.n	80074e4 <__d2b+0x60>
 8007518:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800751c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007520:	6038      	str	r0, [r7, #0]
 8007522:	6918      	ldr	r0, [r3, #16]
 8007524:	f7ff fcc4 	bl	8006eb0 <__hi0bits>
 8007528:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800752c:	e7e2      	b.n	80074f4 <__d2b+0x70>
 800752e:	bf00      	nop
 8007530:	0800963d 	.word	0x0800963d
 8007534:	0800964e 	.word	0x0800964e

08007538 <__ratio>:
 8007538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800753c:	4688      	mov	r8, r1
 800753e:	4669      	mov	r1, sp
 8007540:	4681      	mov	r9, r0
 8007542:	f7ff ff55 	bl	80073f0 <__b2d>
 8007546:	a901      	add	r1, sp, #4
 8007548:	4640      	mov	r0, r8
 800754a:	ec55 4b10 	vmov	r4, r5, d0
 800754e:	f7ff ff4f 	bl	80073f0 <__b2d>
 8007552:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007556:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800755a:	eba3 0c02 	sub.w	ip, r3, r2
 800755e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007562:	1a9b      	subs	r3, r3, r2
 8007564:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007568:	ec51 0b10 	vmov	r0, r1, d0
 800756c:	2b00      	cmp	r3, #0
 800756e:	bfd6      	itet	le
 8007570:	460a      	movle	r2, r1
 8007572:	462a      	movgt	r2, r5
 8007574:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007578:	468b      	mov	fp, r1
 800757a:	462f      	mov	r7, r5
 800757c:	bfd4      	ite	le
 800757e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007582:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007586:	4620      	mov	r0, r4
 8007588:	ee10 2a10 	vmov	r2, s0
 800758c:	465b      	mov	r3, fp
 800758e:	4639      	mov	r1, r7
 8007590:	f7f9 f95c 	bl	800084c <__aeabi_ddiv>
 8007594:	ec41 0b10 	vmov	d0, r0, r1
 8007598:	b003      	add	sp, #12
 800759a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800759e <__copybits>:
 800759e:	3901      	subs	r1, #1
 80075a0:	b570      	push	{r4, r5, r6, lr}
 80075a2:	1149      	asrs	r1, r1, #5
 80075a4:	6914      	ldr	r4, [r2, #16]
 80075a6:	3101      	adds	r1, #1
 80075a8:	f102 0314 	add.w	r3, r2, #20
 80075ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80075b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80075b4:	1f05      	subs	r5, r0, #4
 80075b6:	42a3      	cmp	r3, r4
 80075b8:	d30c      	bcc.n	80075d4 <__copybits+0x36>
 80075ba:	1aa3      	subs	r3, r4, r2
 80075bc:	3b11      	subs	r3, #17
 80075be:	f023 0303 	bic.w	r3, r3, #3
 80075c2:	3211      	adds	r2, #17
 80075c4:	42a2      	cmp	r2, r4
 80075c6:	bf88      	it	hi
 80075c8:	2300      	movhi	r3, #0
 80075ca:	4418      	add	r0, r3
 80075cc:	2300      	movs	r3, #0
 80075ce:	4288      	cmp	r0, r1
 80075d0:	d305      	bcc.n	80075de <__copybits+0x40>
 80075d2:	bd70      	pop	{r4, r5, r6, pc}
 80075d4:	f853 6b04 	ldr.w	r6, [r3], #4
 80075d8:	f845 6f04 	str.w	r6, [r5, #4]!
 80075dc:	e7eb      	b.n	80075b6 <__copybits+0x18>
 80075de:	f840 3b04 	str.w	r3, [r0], #4
 80075e2:	e7f4      	b.n	80075ce <__copybits+0x30>

080075e4 <__any_on>:
 80075e4:	f100 0214 	add.w	r2, r0, #20
 80075e8:	6900      	ldr	r0, [r0, #16]
 80075ea:	114b      	asrs	r3, r1, #5
 80075ec:	4298      	cmp	r0, r3
 80075ee:	b510      	push	{r4, lr}
 80075f0:	db11      	blt.n	8007616 <__any_on+0x32>
 80075f2:	dd0a      	ble.n	800760a <__any_on+0x26>
 80075f4:	f011 011f 	ands.w	r1, r1, #31
 80075f8:	d007      	beq.n	800760a <__any_on+0x26>
 80075fa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80075fe:	fa24 f001 	lsr.w	r0, r4, r1
 8007602:	fa00 f101 	lsl.w	r1, r0, r1
 8007606:	428c      	cmp	r4, r1
 8007608:	d10b      	bne.n	8007622 <__any_on+0x3e>
 800760a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800760e:	4293      	cmp	r3, r2
 8007610:	d803      	bhi.n	800761a <__any_on+0x36>
 8007612:	2000      	movs	r0, #0
 8007614:	bd10      	pop	{r4, pc}
 8007616:	4603      	mov	r3, r0
 8007618:	e7f7      	b.n	800760a <__any_on+0x26>
 800761a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800761e:	2900      	cmp	r1, #0
 8007620:	d0f5      	beq.n	800760e <__any_on+0x2a>
 8007622:	2001      	movs	r0, #1
 8007624:	e7f6      	b.n	8007614 <__any_on+0x30>

08007626 <sulp>:
 8007626:	b570      	push	{r4, r5, r6, lr}
 8007628:	4604      	mov	r4, r0
 800762a:	460d      	mov	r5, r1
 800762c:	ec45 4b10 	vmov	d0, r4, r5
 8007630:	4616      	mov	r6, r2
 8007632:	f7ff feb7 	bl	80073a4 <__ulp>
 8007636:	ec51 0b10 	vmov	r0, r1, d0
 800763a:	b17e      	cbz	r6, 800765c <sulp+0x36>
 800763c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007640:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007644:	2b00      	cmp	r3, #0
 8007646:	dd09      	ble.n	800765c <sulp+0x36>
 8007648:	051b      	lsls	r3, r3, #20
 800764a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800764e:	2400      	movs	r4, #0
 8007650:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007654:	4622      	mov	r2, r4
 8007656:	462b      	mov	r3, r5
 8007658:	f7f8 ffce 	bl	80005f8 <__aeabi_dmul>
 800765c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007660 <_strtod_l>:
 8007660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007664:	ed2d 8b02 	vpush	{d8}
 8007668:	b09b      	sub	sp, #108	; 0x6c
 800766a:	4604      	mov	r4, r0
 800766c:	9213      	str	r2, [sp, #76]	; 0x4c
 800766e:	2200      	movs	r2, #0
 8007670:	9216      	str	r2, [sp, #88]	; 0x58
 8007672:	460d      	mov	r5, r1
 8007674:	f04f 0800 	mov.w	r8, #0
 8007678:	f04f 0900 	mov.w	r9, #0
 800767c:	460a      	mov	r2, r1
 800767e:	9215      	str	r2, [sp, #84]	; 0x54
 8007680:	7811      	ldrb	r1, [r2, #0]
 8007682:	292b      	cmp	r1, #43	; 0x2b
 8007684:	d04c      	beq.n	8007720 <_strtod_l+0xc0>
 8007686:	d83a      	bhi.n	80076fe <_strtod_l+0x9e>
 8007688:	290d      	cmp	r1, #13
 800768a:	d834      	bhi.n	80076f6 <_strtod_l+0x96>
 800768c:	2908      	cmp	r1, #8
 800768e:	d834      	bhi.n	80076fa <_strtod_l+0x9a>
 8007690:	2900      	cmp	r1, #0
 8007692:	d03d      	beq.n	8007710 <_strtod_l+0xb0>
 8007694:	2200      	movs	r2, #0
 8007696:	920a      	str	r2, [sp, #40]	; 0x28
 8007698:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800769a:	7832      	ldrb	r2, [r6, #0]
 800769c:	2a30      	cmp	r2, #48	; 0x30
 800769e:	f040 80b4 	bne.w	800780a <_strtod_l+0x1aa>
 80076a2:	7872      	ldrb	r2, [r6, #1]
 80076a4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80076a8:	2a58      	cmp	r2, #88	; 0x58
 80076aa:	d170      	bne.n	800778e <_strtod_l+0x12e>
 80076ac:	9302      	str	r3, [sp, #8]
 80076ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076b0:	9301      	str	r3, [sp, #4]
 80076b2:	ab16      	add	r3, sp, #88	; 0x58
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	4a8e      	ldr	r2, [pc, #568]	; (80078f0 <_strtod_l+0x290>)
 80076b8:	ab17      	add	r3, sp, #92	; 0x5c
 80076ba:	a915      	add	r1, sp, #84	; 0x54
 80076bc:	4620      	mov	r0, r4
 80076be:	f001 f93f 	bl	8008940 <__gethex>
 80076c2:	f010 070f 	ands.w	r7, r0, #15
 80076c6:	4605      	mov	r5, r0
 80076c8:	d005      	beq.n	80076d6 <_strtod_l+0x76>
 80076ca:	2f06      	cmp	r7, #6
 80076cc:	d12a      	bne.n	8007724 <_strtod_l+0xc4>
 80076ce:	3601      	adds	r6, #1
 80076d0:	2300      	movs	r3, #0
 80076d2:	9615      	str	r6, [sp, #84]	; 0x54
 80076d4:	930a      	str	r3, [sp, #40]	; 0x28
 80076d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f040 857f 	bne.w	80081dc <_strtod_l+0xb7c>
 80076de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076e0:	b1db      	cbz	r3, 800771a <_strtod_l+0xba>
 80076e2:	4642      	mov	r2, r8
 80076e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80076e8:	ec43 2b10 	vmov	d0, r2, r3
 80076ec:	b01b      	add	sp, #108	; 0x6c
 80076ee:	ecbd 8b02 	vpop	{d8}
 80076f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f6:	2920      	cmp	r1, #32
 80076f8:	d1cc      	bne.n	8007694 <_strtod_l+0x34>
 80076fa:	3201      	adds	r2, #1
 80076fc:	e7bf      	b.n	800767e <_strtod_l+0x1e>
 80076fe:	292d      	cmp	r1, #45	; 0x2d
 8007700:	d1c8      	bne.n	8007694 <_strtod_l+0x34>
 8007702:	2101      	movs	r1, #1
 8007704:	910a      	str	r1, [sp, #40]	; 0x28
 8007706:	1c51      	adds	r1, r2, #1
 8007708:	9115      	str	r1, [sp, #84]	; 0x54
 800770a:	7852      	ldrb	r2, [r2, #1]
 800770c:	2a00      	cmp	r2, #0
 800770e:	d1c3      	bne.n	8007698 <_strtod_l+0x38>
 8007710:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007712:	9515      	str	r5, [sp, #84]	; 0x54
 8007714:	2b00      	cmp	r3, #0
 8007716:	f040 855f 	bne.w	80081d8 <_strtod_l+0xb78>
 800771a:	4642      	mov	r2, r8
 800771c:	464b      	mov	r3, r9
 800771e:	e7e3      	b.n	80076e8 <_strtod_l+0x88>
 8007720:	2100      	movs	r1, #0
 8007722:	e7ef      	b.n	8007704 <_strtod_l+0xa4>
 8007724:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007726:	b13a      	cbz	r2, 8007738 <_strtod_l+0xd8>
 8007728:	2135      	movs	r1, #53	; 0x35
 800772a:	a818      	add	r0, sp, #96	; 0x60
 800772c:	f7ff ff37 	bl	800759e <__copybits>
 8007730:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007732:	4620      	mov	r0, r4
 8007734:	f7ff fb0a 	bl	8006d4c <_Bfree>
 8007738:	3f01      	subs	r7, #1
 800773a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800773c:	2f04      	cmp	r7, #4
 800773e:	d806      	bhi.n	800774e <_strtod_l+0xee>
 8007740:	e8df f007 	tbb	[pc, r7]
 8007744:	201d0314 	.word	0x201d0314
 8007748:	14          	.byte	0x14
 8007749:	00          	.byte	0x00
 800774a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800774e:	05e9      	lsls	r1, r5, #23
 8007750:	bf48      	it	mi
 8007752:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007756:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800775a:	0d1b      	lsrs	r3, r3, #20
 800775c:	051b      	lsls	r3, r3, #20
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1b9      	bne.n	80076d6 <_strtod_l+0x76>
 8007762:	f7fe fb03 	bl	8005d6c <__errno>
 8007766:	2322      	movs	r3, #34	; 0x22
 8007768:	6003      	str	r3, [r0, #0]
 800776a:	e7b4      	b.n	80076d6 <_strtod_l+0x76>
 800776c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007770:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007774:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007778:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800777c:	e7e7      	b.n	800774e <_strtod_l+0xee>
 800777e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80078f8 <_strtod_l+0x298>
 8007782:	e7e4      	b.n	800774e <_strtod_l+0xee>
 8007784:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007788:	f04f 38ff 	mov.w	r8, #4294967295
 800778c:	e7df      	b.n	800774e <_strtod_l+0xee>
 800778e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007790:	1c5a      	adds	r2, r3, #1
 8007792:	9215      	str	r2, [sp, #84]	; 0x54
 8007794:	785b      	ldrb	r3, [r3, #1]
 8007796:	2b30      	cmp	r3, #48	; 0x30
 8007798:	d0f9      	beq.n	800778e <_strtod_l+0x12e>
 800779a:	2b00      	cmp	r3, #0
 800779c:	d09b      	beq.n	80076d6 <_strtod_l+0x76>
 800779e:	2301      	movs	r3, #1
 80077a0:	f04f 0a00 	mov.w	sl, #0
 80077a4:	9304      	str	r3, [sp, #16]
 80077a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80077aa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80077ae:	46d3      	mov	fp, sl
 80077b0:	220a      	movs	r2, #10
 80077b2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80077b4:	7806      	ldrb	r6, [r0, #0]
 80077b6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80077ba:	b2d9      	uxtb	r1, r3
 80077bc:	2909      	cmp	r1, #9
 80077be:	d926      	bls.n	800780e <_strtod_l+0x1ae>
 80077c0:	494c      	ldr	r1, [pc, #304]	; (80078f4 <_strtod_l+0x294>)
 80077c2:	2201      	movs	r2, #1
 80077c4:	f000 ffe6 	bl	8008794 <strncmp>
 80077c8:	2800      	cmp	r0, #0
 80077ca:	d030      	beq.n	800782e <_strtod_l+0x1ce>
 80077cc:	2000      	movs	r0, #0
 80077ce:	4632      	mov	r2, r6
 80077d0:	9005      	str	r0, [sp, #20]
 80077d2:	465e      	mov	r6, fp
 80077d4:	4603      	mov	r3, r0
 80077d6:	2a65      	cmp	r2, #101	; 0x65
 80077d8:	d001      	beq.n	80077de <_strtod_l+0x17e>
 80077da:	2a45      	cmp	r2, #69	; 0x45
 80077dc:	d113      	bne.n	8007806 <_strtod_l+0x1a6>
 80077de:	b91e      	cbnz	r6, 80077e8 <_strtod_l+0x188>
 80077e0:	9a04      	ldr	r2, [sp, #16]
 80077e2:	4302      	orrs	r2, r0
 80077e4:	d094      	beq.n	8007710 <_strtod_l+0xb0>
 80077e6:	2600      	movs	r6, #0
 80077e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80077ea:	1c6a      	adds	r2, r5, #1
 80077ec:	9215      	str	r2, [sp, #84]	; 0x54
 80077ee:	786a      	ldrb	r2, [r5, #1]
 80077f0:	2a2b      	cmp	r2, #43	; 0x2b
 80077f2:	d074      	beq.n	80078de <_strtod_l+0x27e>
 80077f4:	2a2d      	cmp	r2, #45	; 0x2d
 80077f6:	d078      	beq.n	80078ea <_strtod_l+0x28a>
 80077f8:	f04f 0c00 	mov.w	ip, #0
 80077fc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007800:	2909      	cmp	r1, #9
 8007802:	d97f      	bls.n	8007904 <_strtod_l+0x2a4>
 8007804:	9515      	str	r5, [sp, #84]	; 0x54
 8007806:	2700      	movs	r7, #0
 8007808:	e09e      	b.n	8007948 <_strtod_l+0x2e8>
 800780a:	2300      	movs	r3, #0
 800780c:	e7c8      	b.n	80077a0 <_strtod_l+0x140>
 800780e:	f1bb 0f08 	cmp.w	fp, #8
 8007812:	bfd8      	it	le
 8007814:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007816:	f100 0001 	add.w	r0, r0, #1
 800781a:	bfda      	itte	le
 800781c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007820:	9309      	strle	r3, [sp, #36]	; 0x24
 8007822:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007826:	f10b 0b01 	add.w	fp, fp, #1
 800782a:	9015      	str	r0, [sp, #84]	; 0x54
 800782c:	e7c1      	b.n	80077b2 <_strtod_l+0x152>
 800782e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007830:	1c5a      	adds	r2, r3, #1
 8007832:	9215      	str	r2, [sp, #84]	; 0x54
 8007834:	785a      	ldrb	r2, [r3, #1]
 8007836:	f1bb 0f00 	cmp.w	fp, #0
 800783a:	d037      	beq.n	80078ac <_strtod_l+0x24c>
 800783c:	9005      	str	r0, [sp, #20]
 800783e:	465e      	mov	r6, fp
 8007840:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007844:	2b09      	cmp	r3, #9
 8007846:	d912      	bls.n	800786e <_strtod_l+0x20e>
 8007848:	2301      	movs	r3, #1
 800784a:	e7c4      	b.n	80077d6 <_strtod_l+0x176>
 800784c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800784e:	1c5a      	adds	r2, r3, #1
 8007850:	9215      	str	r2, [sp, #84]	; 0x54
 8007852:	785a      	ldrb	r2, [r3, #1]
 8007854:	3001      	adds	r0, #1
 8007856:	2a30      	cmp	r2, #48	; 0x30
 8007858:	d0f8      	beq.n	800784c <_strtod_l+0x1ec>
 800785a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800785e:	2b08      	cmp	r3, #8
 8007860:	f200 84c1 	bhi.w	80081e6 <_strtod_l+0xb86>
 8007864:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007866:	9005      	str	r0, [sp, #20]
 8007868:	2000      	movs	r0, #0
 800786a:	930b      	str	r3, [sp, #44]	; 0x2c
 800786c:	4606      	mov	r6, r0
 800786e:	3a30      	subs	r2, #48	; 0x30
 8007870:	f100 0301 	add.w	r3, r0, #1
 8007874:	d014      	beq.n	80078a0 <_strtod_l+0x240>
 8007876:	9905      	ldr	r1, [sp, #20]
 8007878:	4419      	add	r1, r3
 800787a:	9105      	str	r1, [sp, #20]
 800787c:	4633      	mov	r3, r6
 800787e:	eb00 0c06 	add.w	ip, r0, r6
 8007882:	210a      	movs	r1, #10
 8007884:	4563      	cmp	r3, ip
 8007886:	d113      	bne.n	80078b0 <_strtod_l+0x250>
 8007888:	1833      	adds	r3, r6, r0
 800788a:	2b08      	cmp	r3, #8
 800788c:	f106 0601 	add.w	r6, r6, #1
 8007890:	4406      	add	r6, r0
 8007892:	dc1a      	bgt.n	80078ca <_strtod_l+0x26a>
 8007894:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007896:	230a      	movs	r3, #10
 8007898:	fb03 2301 	mla	r3, r3, r1, r2
 800789c:	9309      	str	r3, [sp, #36]	; 0x24
 800789e:	2300      	movs	r3, #0
 80078a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80078a2:	1c51      	adds	r1, r2, #1
 80078a4:	9115      	str	r1, [sp, #84]	; 0x54
 80078a6:	7852      	ldrb	r2, [r2, #1]
 80078a8:	4618      	mov	r0, r3
 80078aa:	e7c9      	b.n	8007840 <_strtod_l+0x1e0>
 80078ac:	4658      	mov	r0, fp
 80078ae:	e7d2      	b.n	8007856 <_strtod_l+0x1f6>
 80078b0:	2b08      	cmp	r3, #8
 80078b2:	f103 0301 	add.w	r3, r3, #1
 80078b6:	dc03      	bgt.n	80078c0 <_strtod_l+0x260>
 80078b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80078ba:	434f      	muls	r7, r1
 80078bc:	9709      	str	r7, [sp, #36]	; 0x24
 80078be:	e7e1      	b.n	8007884 <_strtod_l+0x224>
 80078c0:	2b10      	cmp	r3, #16
 80078c2:	bfd8      	it	le
 80078c4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80078c8:	e7dc      	b.n	8007884 <_strtod_l+0x224>
 80078ca:	2e10      	cmp	r6, #16
 80078cc:	bfdc      	itt	le
 80078ce:	230a      	movle	r3, #10
 80078d0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80078d4:	e7e3      	b.n	800789e <_strtod_l+0x23e>
 80078d6:	2300      	movs	r3, #0
 80078d8:	9305      	str	r3, [sp, #20]
 80078da:	2301      	movs	r3, #1
 80078dc:	e780      	b.n	80077e0 <_strtod_l+0x180>
 80078de:	f04f 0c00 	mov.w	ip, #0
 80078e2:	1caa      	adds	r2, r5, #2
 80078e4:	9215      	str	r2, [sp, #84]	; 0x54
 80078e6:	78aa      	ldrb	r2, [r5, #2]
 80078e8:	e788      	b.n	80077fc <_strtod_l+0x19c>
 80078ea:	f04f 0c01 	mov.w	ip, #1
 80078ee:	e7f8      	b.n	80078e2 <_strtod_l+0x282>
 80078f0:	080097a8 	.word	0x080097a8
 80078f4:	080097a4 	.word	0x080097a4
 80078f8:	7ff00000 	.word	0x7ff00000
 80078fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80078fe:	1c51      	adds	r1, r2, #1
 8007900:	9115      	str	r1, [sp, #84]	; 0x54
 8007902:	7852      	ldrb	r2, [r2, #1]
 8007904:	2a30      	cmp	r2, #48	; 0x30
 8007906:	d0f9      	beq.n	80078fc <_strtod_l+0x29c>
 8007908:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800790c:	2908      	cmp	r1, #8
 800790e:	f63f af7a 	bhi.w	8007806 <_strtod_l+0x1a6>
 8007912:	3a30      	subs	r2, #48	; 0x30
 8007914:	9208      	str	r2, [sp, #32]
 8007916:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007918:	920c      	str	r2, [sp, #48]	; 0x30
 800791a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800791c:	1c57      	adds	r7, r2, #1
 800791e:	9715      	str	r7, [sp, #84]	; 0x54
 8007920:	7852      	ldrb	r2, [r2, #1]
 8007922:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007926:	f1be 0f09 	cmp.w	lr, #9
 800792a:	d938      	bls.n	800799e <_strtod_l+0x33e>
 800792c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800792e:	1a7f      	subs	r7, r7, r1
 8007930:	2f08      	cmp	r7, #8
 8007932:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007936:	dc03      	bgt.n	8007940 <_strtod_l+0x2e0>
 8007938:	9908      	ldr	r1, [sp, #32]
 800793a:	428f      	cmp	r7, r1
 800793c:	bfa8      	it	ge
 800793e:	460f      	movge	r7, r1
 8007940:	f1bc 0f00 	cmp.w	ip, #0
 8007944:	d000      	beq.n	8007948 <_strtod_l+0x2e8>
 8007946:	427f      	negs	r7, r7
 8007948:	2e00      	cmp	r6, #0
 800794a:	d14f      	bne.n	80079ec <_strtod_l+0x38c>
 800794c:	9904      	ldr	r1, [sp, #16]
 800794e:	4301      	orrs	r1, r0
 8007950:	f47f aec1 	bne.w	80076d6 <_strtod_l+0x76>
 8007954:	2b00      	cmp	r3, #0
 8007956:	f47f aedb 	bne.w	8007710 <_strtod_l+0xb0>
 800795a:	2a69      	cmp	r2, #105	; 0x69
 800795c:	d029      	beq.n	80079b2 <_strtod_l+0x352>
 800795e:	dc26      	bgt.n	80079ae <_strtod_l+0x34e>
 8007960:	2a49      	cmp	r2, #73	; 0x49
 8007962:	d026      	beq.n	80079b2 <_strtod_l+0x352>
 8007964:	2a4e      	cmp	r2, #78	; 0x4e
 8007966:	f47f aed3 	bne.w	8007710 <_strtod_l+0xb0>
 800796a:	499b      	ldr	r1, [pc, #620]	; (8007bd8 <_strtod_l+0x578>)
 800796c:	a815      	add	r0, sp, #84	; 0x54
 800796e:	f001 fa27 	bl	8008dc0 <__match>
 8007972:	2800      	cmp	r0, #0
 8007974:	f43f aecc 	beq.w	8007710 <_strtod_l+0xb0>
 8007978:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	2b28      	cmp	r3, #40	; 0x28
 800797e:	d12f      	bne.n	80079e0 <_strtod_l+0x380>
 8007980:	4996      	ldr	r1, [pc, #600]	; (8007bdc <_strtod_l+0x57c>)
 8007982:	aa18      	add	r2, sp, #96	; 0x60
 8007984:	a815      	add	r0, sp, #84	; 0x54
 8007986:	f001 fa2f 	bl	8008de8 <__hexnan>
 800798a:	2805      	cmp	r0, #5
 800798c:	d128      	bne.n	80079e0 <_strtod_l+0x380>
 800798e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007990:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007994:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007998:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800799c:	e69b      	b.n	80076d6 <_strtod_l+0x76>
 800799e:	9f08      	ldr	r7, [sp, #32]
 80079a0:	210a      	movs	r1, #10
 80079a2:	fb01 2107 	mla	r1, r1, r7, r2
 80079a6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80079aa:	9208      	str	r2, [sp, #32]
 80079ac:	e7b5      	b.n	800791a <_strtod_l+0x2ba>
 80079ae:	2a6e      	cmp	r2, #110	; 0x6e
 80079b0:	e7d9      	b.n	8007966 <_strtod_l+0x306>
 80079b2:	498b      	ldr	r1, [pc, #556]	; (8007be0 <_strtod_l+0x580>)
 80079b4:	a815      	add	r0, sp, #84	; 0x54
 80079b6:	f001 fa03 	bl	8008dc0 <__match>
 80079ba:	2800      	cmp	r0, #0
 80079bc:	f43f aea8 	beq.w	8007710 <_strtod_l+0xb0>
 80079c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079c2:	4988      	ldr	r1, [pc, #544]	; (8007be4 <_strtod_l+0x584>)
 80079c4:	3b01      	subs	r3, #1
 80079c6:	a815      	add	r0, sp, #84	; 0x54
 80079c8:	9315      	str	r3, [sp, #84]	; 0x54
 80079ca:	f001 f9f9 	bl	8008dc0 <__match>
 80079ce:	b910      	cbnz	r0, 80079d6 <_strtod_l+0x376>
 80079d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079d2:	3301      	adds	r3, #1
 80079d4:	9315      	str	r3, [sp, #84]	; 0x54
 80079d6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007bf4 <_strtod_l+0x594>
 80079da:	f04f 0800 	mov.w	r8, #0
 80079de:	e67a      	b.n	80076d6 <_strtod_l+0x76>
 80079e0:	4881      	ldr	r0, [pc, #516]	; (8007be8 <_strtod_l+0x588>)
 80079e2:	f000 ff09 	bl	80087f8 <nan>
 80079e6:	ec59 8b10 	vmov	r8, r9, d0
 80079ea:	e674      	b.n	80076d6 <_strtod_l+0x76>
 80079ec:	9b05      	ldr	r3, [sp, #20]
 80079ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079f0:	1afb      	subs	r3, r7, r3
 80079f2:	f1bb 0f00 	cmp.w	fp, #0
 80079f6:	bf08      	it	eq
 80079f8:	46b3      	moveq	fp, r6
 80079fa:	2e10      	cmp	r6, #16
 80079fc:	9308      	str	r3, [sp, #32]
 80079fe:	4635      	mov	r5, r6
 8007a00:	bfa8      	it	ge
 8007a02:	2510      	movge	r5, #16
 8007a04:	f7f8 fd7e 	bl	8000504 <__aeabi_ui2d>
 8007a08:	2e09      	cmp	r6, #9
 8007a0a:	4680      	mov	r8, r0
 8007a0c:	4689      	mov	r9, r1
 8007a0e:	dd13      	ble.n	8007a38 <_strtod_l+0x3d8>
 8007a10:	4b76      	ldr	r3, [pc, #472]	; (8007bec <_strtod_l+0x58c>)
 8007a12:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007a16:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007a1a:	f7f8 fded 	bl	80005f8 <__aeabi_dmul>
 8007a1e:	4680      	mov	r8, r0
 8007a20:	4650      	mov	r0, sl
 8007a22:	4689      	mov	r9, r1
 8007a24:	f7f8 fd6e 	bl	8000504 <__aeabi_ui2d>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4640      	mov	r0, r8
 8007a2e:	4649      	mov	r1, r9
 8007a30:	f7f8 fc2c 	bl	800028c <__adddf3>
 8007a34:	4680      	mov	r8, r0
 8007a36:	4689      	mov	r9, r1
 8007a38:	2e0f      	cmp	r6, #15
 8007a3a:	dc38      	bgt.n	8007aae <_strtod_l+0x44e>
 8007a3c:	9b08      	ldr	r3, [sp, #32]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f43f ae49 	beq.w	80076d6 <_strtod_l+0x76>
 8007a44:	dd24      	ble.n	8007a90 <_strtod_l+0x430>
 8007a46:	2b16      	cmp	r3, #22
 8007a48:	dc0b      	bgt.n	8007a62 <_strtod_l+0x402>
 8007a4a:	4968      	ldr	r1, [pc, #416]	; (8007bec <_strtod_l+0x58c>)
 8007a4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a54:	4642      	mov	r2, r8
 8007a56:	464b      	mov	r3, r9
 8007a58:	f7f8 fdce 	bl	80005f8 <__aeabi_dmul>
 8007a5c:	4680      	mov	r8, r0
 8007a5e:	4689      	mov	r9, r1
 8007a60:	e639      	b.n	80076d6 <_strtod_l+0x76>
 8007a62:	9a08      	ldr	r2, [sp, #32]
 8007a64:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	db20      	blt.n	8007aae <_strtod_l+0x44e>
 8007a6c:	4c5f      	ldr	r4, [pc, #380]	; (8007bec <_strtod_l+0x58c>)
 8007a6e:	f1c6 060f 	rsb	r6, r6, #15
 8007a72:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007a76:	4642      	mov	r2, r8
 8007a78:	464b      	mov	r3, r9
 8007a7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a7e:	f7f8 fdbb 	bl	80005f8 <__aeabi_dmul>
 8007a82:	9b08      	ldr	r3, [sp, #32]
 8007a84:	1b9e      	subs	r6, r3, r6
 8007a86:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007a8a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007a8e:	e7e3      	b.n	8007a58 <_strtod_l+0x3f8>
 8007a90:	9b08      	ldr	r3, [sp, #32]
 8007a92:	3316      	adds	r3, #22
 8007a94:	db0b      	blt.n	8007aae <_strtod_l+0x44e>
 8007a96:	9b05      	ldr	r3, [sp, #20]
 8007a98:	1bdf      	subs	r7, r3, r7
 8007a9a:	4b54      	ldr	r3, [pc, #336]	; (8007bec <_strtod_l+0x58c>)
 8007a9c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007aa4:	4640      	mov	r0, r8
 8007aa6:	4649      	mov	r1, r9
 8007aa8:	f7f8 fed0 	bl	800084c <__aeabi_ddiv>
 8007aac:	e7d6      	b.n	8007a5c <_strtod_l+0x3fc>
 8007aae:	9b08      	ldr	r3, [sp, #32]
 8007ab0:	1b75      	subs	r5, r6, r5
 8007ab2:	441d      	add	r5, r3
 8007ab4:	2d00      	cmp	r5, #0
 8007ab6:	dd70      	ble.n	8007b9a <_strtod_l+0x53a>
 8007ab8:	f015 030f 	ands.w	r3, r5, #15
 8007abc:	d00a      	beq.n	8007ad4 <_strtod_l+0x474>
 8007abe:	494b      	ldr	r1, [pc, #300]	; (8007bec <_strtod_l+0x58c>)
 8007ac0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ac4:	4642      	mov	r2, r8
 8007ac6:	464b      	mov	r3, r9
 8007ac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007acc:	f7f8 fd94 	bl	80005f8 <__aeabi_dmul>
 8007ad0:	4680      	mov	r8, r0
 8007ad2:	4689      	mov	r9, r1
 8007ad4:	f035 050f 	bics.w	r5, r5, #15
 8007ad8:	d04d      	beq.n	8007b76 <_strtod_l+0x516>
 8007ada:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007ade:	dd22      	ble.n	8007b26 <_strtod_l+0x4c6>
 8007ae0:	2500      	movs	r5, #0
 8007ae2:	46ab      	mov	fp, r5
 8007ae4:	9509      	str	r5, [sp, #36]	; 0x24
 8007ae6:	9505      	str	r5, [sp, #20]
 8007ae8:	2322      	movs	r3, #34	; 0x22
 8007aea:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007bf4 <_strtod_l+0x594>
 8007aee:	6023      	str	r3, [r4, #0]
 8007af0:	f04f 0800 	mov.w	r8, #0
 8007af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f43f aded 	beq.w	80076d6 <_strtod_l+0x76>
 8007afc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007afe:	4620      	mov	r0, r4
 8007b00:	f7ff f924 	bl	8006d4c <_Bfree>
 8007b04:	9905      	ldr	r1, [sp, #20]
 8007b06:	4620      	mov	r0, r4
 8007b08:	f7ff f920 	bl	8006d4c <_Bfree>
 8007b0c:	4659      	mov	r1, fp
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f7ff f91c 	bl	8006d4c <_Bfree>
 8007b14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b16:	4620      	mov	r0, r4
 8007b18:	f7ff f918 	bl	8006d4c <_Bfree>
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f7ff f914 	bl	8006d4c <_Bfree>
 8007b24:	e5d7      	b.n	80076d6 <_strtod_l+0x76>
 8007b26:	4b32      	ldr	r3, [pc, #200]	; (8007bf0 <_strtod_l+0x590>)
 8007b28:	9304      	str	r3, [sp, #16]
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	112d      	asrs	r5, r5, #4
 8007b2e:	4640      	mov	r0, r8
 8007b30:	4649      	mov	r1, r9
 8007b32:	469a      	mov	sl, r3
 8007b34:	2d01      	cmp	r5, #1
 8007b36:	dc21      	bgt.n	8007b7c <_strtod_l+0x51c>
 8007b38:	b10b      	cbz	r3, 8007b3e <_strtod_l+0x4de>
 8007b3a:	4680      	mov	r8, r0
 8007b3c:	4689      	mov	r9, r1
 8007b3e:	492c      	ldr	r1, [pc, #176]	; (8007bf0 <_strtod_l+0x590>)
 8007b40:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007b44:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007b48:	4642      	mov	r2, r8
 8007b4a:	464b      	mov	r3, r9
 8007b4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b50:	f7f8 fd52 	bl	80005f8 <__aeabi_dmul>
 8007b54:	4b27      	ldr	r3, [pc, #156]	; (8007bf4 <_strtod_l+0x594>)
 8007b56:	460a      	mov	r2, r1
 8007b58:	400b      	ands	r3, r1
 8007b5a:	4927      	ldr	r1, [pc, #156]	; (8007bf8 <_strtod_l+0x598>)
 8007b5c:	428b      	cmp	r3, r1
 8007b5e:	4680      	mov	r8, r0
 8007b60:	d8be      	bhi.n	8007ae0 <_strtod_l+0x480>
 8007b62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007b66:	428b      	cmp	r3, r1
 8007b68:	bf86      	itte	hi
 8007b6a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007bfc <_strtod_l+0x59c>
 8007b6e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007b72:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007b76:	2300      	movs	r3, #0
 8007b78:	9304      	str	r3, [sp, #16]
 8007b7a:	e07b      	b.n	8007c74 <_strtod_l+0x614>
 8007b7c:	07ea      	lsls	r2, r5, #31
 8007b7e:	d505      	bpl.n	8007b8c <_strtod_l+0x52c>
 8007b80:	9b04      	ldr	r3, [sp, #16]
 8007b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b86:	f7f8 fd37 	bl	80005f8 <__aeabi_dmul>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	9a04      	ldr	r2, [sp, #16]
 8007b8e:	3208      	adds	r2, #8
 8007b90:	f10a 0a01 	add.w	sl, sl, #1
 8007b94:	106d      	asrs	r5, r5, #1
 8007b96:	9204      	str	r2, [sp, #16]
 8007b98:	e7cc      	b.n	8007b34 <_strtod_l+0x4d4>
 8007b9a:	d0ec      	beq.n	8007b76 <_strtod_l+0x516>
 8007b9c:	426d      	negs	r5, r5
 8007b9e:	f015 020f 	ands.w	r2, r5, #15
 8007ba2:	d00a      	beq.n	8007bba <_strtod_l+0x55a>
 8007ba4:	4b11      	ldr	r3, [pc, #68]	; (8007bec <_strtod_l+0x58c>)
 8007ba6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007baa:	4640      	mov	r0, r8
 8007bac:	4649      	mov	r1, r9
 8007bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb2:	f7f8 fe4b 	bl	800084c <__aeabi_ddiv>
 8007bb6:	4680      	mov	r8, r0
 8007bb8:	4689      	mov	r9, r1
 8007bba:	112d      	asrs	r5, r5, #4
 8007bbc:	d0db      	beq.n	8007b76 <_strtod_l+0x516>
 8007bbe:	2d1f      	cmp	r5, #31
 8007bc0:	dd1e      	ble.n	8007c00 <_strtod_l+0x5a0>
 8007bc2:	2500      	movs	r5, #0
 8007bc4:	46ab      	mov	fp, r5
 8007bc6:	9509      	str	r5, [sp, #36]	; 0x24
 8007bc8:	9505      	str	r5, [sp, #20]
 8007bca:	2322      	movs	r3, #34	; 0x22
 8007bcc:	f04f 0800 	mov.w	r8, #0
 8007bd0:	f04f 0900 	mov.w	r9, #0
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	e78d      	b.n	8007af4 <_strtod_l+0x494>
 8007bd8:	08009595 	.word	0x08009595
 8007bdc:	080097bc 	.word	0x080097bc
 8007be0:	0800958d 	.word	0x0800958d
 8007be4:	080095c4 	.word	0x080095c4
 8007be8:	0800994d 	.word	0x0800994d
 8007bec:	080096d0 	.word	0x080096d0
 8007bf0:	080096a8 	.word	0x080096a8
 8007bf4:	7ff00000 	.word	0x7ff00000
 8007bf8:	7ca00000 	.word	0x7ca00000
 8007bfc:	7fefffff 	.word	0x7fefffff
 8007c00:	f015 0310 	ands.w	r3, r5, #16
 8007c04:	bf18      	it	ne
 8007c06:	236a      	movne	r3, #106	; 0x6a
 8007c08:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007fac <_strtod_l+0x94c>
 8007c0c:	9304      	str	r3, [sp, #16]
 8007c0e:	4640      	mov	r0, r8
 8007c10:	4649      	mov	r1, r9
 8007c12:	2300      	movs	r3, #0
 8007c14:	07ea      	lsls	r2, r5, #31
 8007c16:	d504      	bpl.n	8007c22 <_strtod_l+0x5c2>
 8007c18:	e9da 2300 	ldrd	r2, r3, [sl]
 8007c1c:	f7f8 fcec 	bl	80005f8 <__aeabi_dmul>
 8007c20:	2301      	movs	r3, #1
 8007c22:	106d      	asrs	r5, r5, #1
 8007c24:	f10a 0a08 	add.w	sl, sl, #8
 8007c28:	d1f4      	bne.n	8007c14 <_strtod_l+0x5b4>
 8007c2a:	b10b      	cbz	r3, 8007c30 <_strtod_l+0x5d0>
 8007c2c:	4680      	mov	r8, r0
 8007c2e:	4689      	mov	r9, r1
 8007c30:	9b04      	ldr	r3, [sp, #16]
 8007c32:	b1bb      	cbz	r3, 8007c64 <_strtod_l+0x604>
 8007c34:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007c38:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	4649      	mov	r1, r9
 8007c40:	dd10      	ble.n	8007c64 <_strtod_l+0x604>
 8007c42:	2b1f      	cmp	r3, #31
 8007c44:	f340 811e 	ble.w	8007e84 <_strtod_l+0x824>
 8007c48:	2b34      	cmp	r3, #52	; 0x34
 8007c4a:	bfde      	ittt	le
 8007c4c:	f04f 33ff 	movle.w	r3, #4294967295
 8007c50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007c54:	4093      	lslle	r3, r2
 8007c56:	f04f 0800 	mov.w	r8, #0
 8007c5a:	bfcc      	ite	gt
 8007c5c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007c60:	ea03 0901 	andle.w	r9, r3, r1
 8007c64:	2200      	movs	r2, #0
 8007c66:	2300      	movs	r3, #0
 8007c68:	4640      	mov	r0, r8
 8007c6a:	4649      	mov	r1, r9
 8007c6c:	f7f8 ff2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d1a6      	bne.n	8007bc2 <_strtod_l+0x562>
 8007c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c7a:	4633      	mov	r3, r6
 8007c7c:	465a      	mov	r2, fp
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f7ff f8cc 	bl	8006e1c <__s2b>
 8007c84:	9009      	str	r0, [sp, #36]	; 0x24
 8007c86:	2800      	cmp	r0, #0
 8007c88:	f43f af2a 	beq.w	8007ae0 <_strtod_l+0x480>
 8007c8c:	9a08      	ldr	r2, [sp, #32]
 8007c8e:	9b05      	ldr	r3, [sp, #20]
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	eba3 0307 	sub.w	r3, r3, r7
 8007c96:	bfa8      	it	ge
 8007c98:	2300      	movge	r3, #0
 8007c9a:	930c      	str	r3, [sp, #48]	; 0x30
 8007c9c:	2500      	movs	r5, #0
 8007c9e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007ca2:	9312      	str	r3, [sp, #72]	; 0x48
 8007ca4:	46ab      	mov	fp, r5
 8007ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ca8:	4620      	mov	r0, r4
 8007caa:	6859      	ldr	r1, [r3, #4]
 8007cac:	f7ff f80e 	bl	8006ccc <_Balloc>
 8007cb0:	9005      	str	r0, [sp, #20]
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	f43f af18 	beq.w	8007ae8 <_strtod_l+0x488>
 8007cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cba:	691a      	ldr	r2, [r3, #16]
 8007cbc:	3202      	adds	r2, #2
 8007cbe:	f103 010c 	add.w	r1, r3, #12
 8007cc2:	0092      	lsls	r2, r2, #2
 8007cc4:	300c      	adds	r0, #12
 8007cc6:	f000 fd87 	bl	80087d8 <memcpy>
 8007cca:	ec49 8b10 	vmov	d0, r8, r9
 8007cce:	aa18      	add	r2, sp, #96	; 0x60
 8007cd0:	a917      	add	r1, sp, #92	; 0x5c
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f7ff fbd6 	bl	8007484 <__d2b>
 8007cd8:	ec49 8b18 	vmov	d8, r8, r9
 8007cdc:	9016      	str	r0, [sp, #88]	; 0x58
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	f43f af02 	beq.w	8007ae8 <_strtod_l+0x488>
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f7ff f930 	bl	8006f4c <__i2b>
 8007cec:	4683      	mov	fp, r0
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	f43f aefa 	beq.w	8007ae8 <_strtod_l+0x488>
 8007cf4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007cf6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007cf8:	2e00      	cmp	r6, #0
 8007cfa:	bfab      	itete	ge
 8007cfc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007cfe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007d00:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007d02:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007d06:	bfac      	ite	ge
 8007d08:	eb06 0a03 	addge.w	sl, r6, r3
 8007d0c:	1b9f      	sublt	r7, r3, r6
 8007d0e:	9b04      	ldr	r3, [sp, #16]
 8007d10:	1af6      	subs	r6, r6, r3
 8007d12:	4416      	add	r6, r2
 8007d14:	4ba0      	ldr	r3, [pc, #640]	; (8007f98 <_strtod_l+0x938>)
 8007d16:	3e01      	subs	r6, #1
 8007d18:	429e      	cmp	r6, r3
 8007d1a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007d1e:	f280 80c4 	bge.w	8007eaa <_strtod_l+0x84a>
 8007d22:	1b9b      	subs	r3, r3, r6
 8007d24:	2b1f      	cmp	r3, #31
 8007d26:	eba2 0203 	sub.w	r2, r2, r3
 8007d2a:	f04f 0101 	mov.w	r1, #1
 8007d2e:	f300 80b0 	bgt.w	8007e92 <_strtod_l+0x832>
 8007d32:	fa01 f303 	lsl.w	r3, r1, r3
 8007d36:	930e      	str	r3, [sp, #56]	; 0x38
 8007d38:	2300      	movs	r3, #0
 8007d3a:	930d      	str	r3, [sp, #52]	; 0x34
 8007d3c:	eb0a 0602 	add.w	r6, sl, r2
 8007d40:	9b04      	ldr	r3, [sp, #16]
 8007d42:	45b2      	cmp	sl, r6
 8007d44:	4417      	add	r7, r2
 8007d46:	441f      	add	r7, r3
 8007d48:	4653      	mov	r3, sl
 8007d4a:	bfa8      	it	ge
 8007d4c:	4633      	movge	r3, r6
 8007d4e:	42bb      	cmp	r3, r7
 8007d50:	bfa8      	it	ge
 8007d52:	463b      	movge	r3, r7
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	bfc2      	ittt	gt
 8007d58:	1af6      	subgt	r6, r6, r3
 8007d5a:	1aff      	subgt	r7, r7, r3
 8007d5c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007d60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	dd17      	ble.n	8007d96 <_strtod_l+0x736>
 8007d66:	4659      	mov	r1, fp
 8007d68:	461a      	mov	r2, r3
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f7ff f9ae 	bl	80070cc <__pow5mult>
 8007d70:	4683      	mov	fp, r0
 8007d72:	2800      	cmp	r0, #0
 8007d74:	f43f aeb8 	beq.w	8007ae8 <_strtod_l+0x488>
 8007d78:	4601      	mov	r1, r0
 8007d7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	f7ff f8fb 	bl	8006f78 <__multiply>
 8007d82:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d84:	2800      	cmp	r0, #0
 8007d86:	f43f aeaf 	beq.w	8007ae8 <_strtod_l+0x488>
 8007d8a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	f7fe ffdd 	bl	8006d4c <_Bfree>
 8007d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d94:	9316      	str	r3, [sp, #88]	; 0x58
 8007d96:	2e00      	cmp	r6, #0
 8007d98:	f300 808c 	bgt.w	8007eb4 <_strtod_l+0x854>
 8007d9c:	9b08      	ldr	r3, [sp, #32]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	dd08      	ble.n	8007db4 <_strtod_l+0x754>
 8007da2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007da4:	9905      	ldr	r1, [sp, #20]
 8007da6:	4620      	mov	r0, r4
 8007da8:	f7ff f990 	bl	80070cc <__pow5mult>
 8007dac:	9005      	str	r0, [sp, #20]
 8007dae:	2800      	cmp	r0, #0
 8007db0:	f43f ae9a 	beq.w	8007ae8 <_strtod_l+0x488>
 8007db4:	2f00      	cmp	r7, #0
 8007db6:	dd08      	ble.n	8007dca <_strtod_l+0x76a>
 8007db8:	9905      	ldr	r1, [sp, #20]
 8007dba:	463a      	mov	r2, r7
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	f7ff f9df 	bl	8007180 <__lshift>
 8007dc2:	9005      	str	r0, [sp, #20]
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	f43f ae8f 	beq.w	8007ae8 <_strtod_l+0x488>
 8007dca:	f1ba 0f00 	cmp.w	sl, #0
 8007dce:	dd08      	ble.n	8007de2 <_strtod_l+0x782>
 8007dd0:	4659      	mov	r1, fp
 8007dd2:	4652      	mov	r2, sl
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f7ff f9d3 	bl	8007180 <__lshift>
 8007dda:	4683      	mov	fp, r0
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	f43f ae83 	beq.w	8007ae8 <_strtod_l+0x488>
 8007de2:	9a05      	ldr	r2, [sp, #20]
 8007de4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007de6:	4620      	mov	r0, r4
 8007de8:	f7ff fa52 	bl	8007290 <__mdiff>
 8007dec:	4605      	mov	r5, r0
 8007dee:	2800      	cmp	r0, #0
 8007df0:	f43f ae7a 	beq.w	8007ae8 <_strtod_l+0x488>
 8007df4:	68c3      	ldr	r3, [r0, #12]
 8007df6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007df8:	2300      	movs	r3, #0
 8007dfa:	60c3      	str	r3, [r0, #12]
 8007dfc:	4659      	mov	r1, fp
 8007dfe:	f7ff fa2b 	bl	8007258 <__mcmp>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	da60      	bge.n	8007ec8 <_strtod_l+0x868>
 8007e06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e08:	ea53 0308 	orrs.w	r3, r3, r8
 8007e0c:	f040 8084 	bne.w	8007f18 <_strtod_l+0x8b8>
 8007e10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d17f      	bne.n	8007f18 <_strtod_l+0x8b8>
 8007e18:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e1c:	0d1b      	lsrs	r3, r3, #20
 8007e1e:	051b      	lsls	r3, r3, #20
 8007e20:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007e24:	d978      	bls.n	8007f18 <_strtod_l+0x8b8>
 8007e26:	696b      	ldr	r3, [r5, #20]
 8007e28:	b913      	cbnz	r3, 8007e30 <_strtod_l+0x7d0>
 8007e2a:	692b      	ldr	r3, [r5, #16]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	dd73      	ble.n	8007f18 <_strtod_l+0x8b8>
 8007e30:	4629      	mov	r1, r5
 8007e32:	2201      	movs	r2, #1
 8007e34:	4620      	mov	r0, r4
 8007e36:	f7ff f9a3 	bl	8007180 <__lshift>
 8007e3a:	4659      	mov	r1, fp
 8007e3c:	4605      	mov	r5, r0
 8007e3e:	f7ff fa0b 	bl	8007258 <__mcmp>
 8007e42:	2800      	cmp	r0, #0
 8007e44:	dd68      	ble.n	8007f18 <_strtod_l+0x8b8>
 8007e46:	9904      	ldr	r1, [sp, #16]
 8007e48:	4a54      	ldr	r2, [pc, #336]	; (8007f9c <_strtod_l+0x93c>)
 8007e4a:	464b      	mov	r3, r9
 8007e4c:	2900      	cmp	r1, #0
 8007e4e:	f000 8084 	beq.w	8007f5a <_strtod_l+0x8fa>
 8007e52:	ea02 0109 	and.w	r1, r2, r9
 8007e56:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007e5a:	dc7e      	bgt.n	8007f5a <_strtod_l+0x8fa>
 8007e5c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007e60:	f77f aeb3 	ble.w	8007bca <_strtod_l+0x56a>
 8007e64:	4b4e      	ldr	r3, [pc, #312]	; (8007fa0 <_strtod_l+0x940>)
 8007e66:	4640      	mov	r0, r8
 8007e68:	4649      	mov	r1, r9
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f7f8 fbc4 	bl	80005f8 <__aeabi_dmul>
 8007e70:	4b4a      	ldr	r3, [pc, #296]	; (8007f9c <_strtod_l+0x93c>)
 8007e72:	400b      	ands	r3, r1
 8007e74:	4680      	mov	r8, r0
 8007e76:	4689      	mov	r9, r1
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f47f ae3f 	bne.w	8007afc <_strtod_l+0x49c>
 8007e7e:	2322      	movs	r3, #34	; 0x22
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	e63b      	b.n	8007afc <_strtod_l+0x49c>
 8007e84:	f04f 32ff 	mov.w	r2, #4294967295
 8007e88:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8c:	ea03 0808 	and.w	r8, r3, r8
 8007e90:	e6e8      	b.n	8007c64 <_strtod_l+0x604>
 8007e92:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007e96:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007e9a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007e9e:	36e2      	adds	r6, #226	; 0xe2
 8007ea0:	fa01 f306 	lsl.w	r3, r1, r6
 8007ea4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007ea8:	e748      	b.n	8007d3c <_strtod_l+0x6dc>
 8007eaa:	2100      	movs	r1, #0
 8007eac:	2301      	movs	r3, #1
 8007eae:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8007eb2:	e743      	b.n	8007d3c <_strtod_l+0x6dc>
 8007eb4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007eb6:	4632      	mov	r2, r6
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f7ff f961 	bl	8007180 <__lshift>
 8007ebe:	9016      	str	r0, [sp, #88]	; 0x58
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	f47f af6b 	bne.w	8007d9c <_strtod_l+0x73c>
 8007ec6:	e60f      	b.n	8007ae8 <_strtod_l+0x488>
 8007ec8:	46ca      	mov	sl, r9
 8007eca:	d171      	bne.n	8007fb0 <_strtod_l+0x950>
 8007ecc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ece:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ed2:	b352      	cbz	r2, 8007f2a <_strtod_l+0x8ca>
 8007ed4:	4a33      	ldr	r2, [pc, #204]	; (8007fa4 <_strtod_l+0x944>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d12a      	bne.n	8007f30 <_strtod_l+0x8d0>
 8007eda:	9b04      	ldr	r3, [sp, #16]
 8007edc:	4641      	mov	r1, r8
 8007ede:	b1fb      	cbz	r3, 8007f20 <_strtod_l+0x8c0>
 8007ee0:	4b2e      	ldr	r3, [pc, #184]	; (8007f9c <_strtod_l+0x93c>)
 8007ee2:	ea09 0303 	and.w	r3, r9, r3
 8007ee6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007eea:	f04f 32ff 	mov.w	r2, #4294967295
 8007eee:	d81a      	bhi.n	8007f26 <_strtod_l+0x8c6>
 8007ef0:	0d1b      	lsrs	r3, r3, #20
 8007ef2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8007efa:	4299      	cmp	r1, r3
 8007efc:	d118      	bne.n	8007f30 <_strtod_l+0x8d0>
 8007efe:	4b2a      	ldr	r3, [pc, #168]	; (8007fa8 <_strtod_l+0x948>)
 8007f00:	459a      	cmp	sl, r3
 8007f02:	d102      	bne.n	8007f0a <_strtod_l+0x8aa>
 8007f04:	3101      	adds	r1, #1
 8007f06:	f43f adef 	beq.w	8007ae8 <_strtod_l+0x488>
 8007f0a:	4b24      	ldr	r3, [pc, #144]	; (8007f9c <_strtod_l+0x93c>)
 8007f0c:	ea0a 0303 	and.w	r3, sl, r3
 8007f10:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007f14:	f04f 0800 	mov.w	r8, #0
 8007f18:	9b04      	ldr	r3, [sp, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1a2      	bne.n	8007e64 <_strtod_l+0x804>
 8007f1e:	e5ed      	b.n	8007afc <_strtod_l+0x49c>
 8007f20:	f04f 33ff 	mov.w	r3, #4294967295
 8007f24:	e7e9      	b.n	8007efa <_strtod_l+0x89a>
 8007f26:	4613      	mov	r3, r2
 8007f28:	e7e7      	b.n	8007efa <_strtod_l+0x89a>
 8007f2a:	ea53 0308 	orrs.w	r3, r3, r8
 8007f2e:	d08a      	beq.n	8007e46 <_strtod_l+0x7e6>
 8007f30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f32:	b1e3      	cbz	r3, 8007f6e <_strtod_l+0x90e>
 8007f34:	ea13 0f0a 	tst.w	r3, sl
 8007f38:	d0ee      	beq.n	8007f18 <_strtod_l+0x8b8>
 8007f3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f3c:	9a04      	ldr	r2, [sp, #16]
 8007f3e:	4640      	mov	r0, r8
 8007f40:	4649      	mov	r1, r9
 8007f42:	b1c3      	cbz	r3, 8007f76 <_strtod_l+0x916>
 8007f44:	f7ff fb6f 	bl	8007626 <sulp>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	ec51 0b18 	vmov	r0, r1, d8
 8007f50:	f7f8 f99c 	bl	800028c <__adddf3>
 8007f54:	4680      	mov	r8, r0
 8007f56:	4689      	mov	r9, r1
 8007f58:	e7de      	b.n	8007f18 <_strtod_l+0x8b8>
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007f60:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007f64:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007f68:	f04f 38ff 	mov.w	r8, #4294967295
 8007f6c:	e7d4      	b.n	8007f18 <_strtod_l+0x8b8>
 8007f6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f70:	ea13 0f08 	tst.w	r3, r8
 8007f74:	e7e0      	b.n	8007f38 <_strtod_l+0x8d8>
 8007f76:	f7ff fb56 	bl	8007626 <sulp>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	ec51 0b18 	vmov	r0, r1, d8
 8007f82:	f7f8 f981 	bl	8000288 <__aeabi_dsub>
 8007f86:	2200      	movs	r2, #0
 8007f88:	2300      	movs	r3, #0
 8007f8a:	4680      	mov	r8, r0
 8007f8c:	4689      	mov	r9, r1
 8007f8e:	f7f8 fd9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f92:	2800      	cmp	r0, #0
 8007f94:	d0c0      	beq.n	8007f18 <_strtod_l+0x8b8>
 8007f96:	e618      	b.n	8007bca <_strtod_l+0x56a>
 8007f98:	fffffc02 	.word	0xfffffc02
 8007f9c:	7ff00000 	.word	0x7ff00000
 8007fa0:	39500000 	.word	0x39500000
 8007fa4:	000fffff 	.word	0x000fffff
 8007fa8:	7fefffff 	.word	0x7fefffff
 8007fac:	080097d0 	.word	0x080097d0
 8007fb0:	4659      	mov	r1, fp
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	f7ff fac0 	bl	8007538 <__ratio>
 8007fb8:	ec57 6b10 	vmov	r6, r7, d0
 8007fbc:	ee10 0a10 	vmov	r0, s0
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fc6:	4639      	mov	r1, r7
 8007fc8:	f7f8 fd92 	bl	8000af0 <__aeabi_dcmple>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d071      	beq.n	80080b4 <_strtod_l+0xa54>
 8007fd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d17c      	bne.n	80080d0 <_strtod_l+0xa70>
 8007fd6:	f1b8 0f00 	cmp.w	r8, #0
 8007fda:	d15a      	bne.n	8008092 <_strtod_l+0xa32>
 8007fdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d15d      	bne.n	80080a0 <_strtod_l+0xa40>
 8007fe4:	4b90      	ldr	r3, [pc, #576]	; (8008228 <_strtod_l+0xbc8>)
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	4630      	mov	r0, r6
 8007fea:	4639      	mov	r1, r7
 8007fec:	f7f8 fd76 	bl	8000adc <__aeabi_dcmplt>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d15c      	bne.n	80080ae <_strtod_l+0xa4e>
 8007ff4:	4630      	mov	r0, r6
 8007ff6:	4639      	mov	r1, r7
 8007ff8:	4b8c      	ldr	r3, [pc, #560]	; (800822c <_strtod_l+0xbcc>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f7f8 fafc 	bl	80005f8 <__aeabi_dmul>
 8008000:	4606      	mov	r6, r0
 8008002:	460f      	mov	r7, r1
 8008004:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008008:	9606      	str	r6, [sp, #24]
 800800a:	9307      	str	r3, [sp, #28]
 800800c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008010:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008014:	4b86      	ldr	r3, [pc, #536]	; (8008230 <_strtod_l+0xbd0>)
 8008016:	ea0a 0303 	and.w	r3, sl, r3
 800801a:	930d      	str	r3, [sp, #52]	; 0x34
 800801c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800801e:	4b85      	ldr	r3, [pc, #532]	; (8008234 <_strtod_l+0xbd4>)
 8008020:	429a      	cmp	r2, r3
 8008022:	f040 8090 	bne.w	8008146 <_strtod_l+0xae6>
 8008026:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800802a:	ec49 8b10 	vmov	d0, r8, r9
 800802e:	f7ff f9b9 	bl	80073a4 <__ulp>
 8008032:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008036:	ec51 0b10 	vmov	r0, r1, d0
 800803a:	f7f8 fadd 	bl	80005f8 <__aeabi_dmul>
 800803e:	4642      	mov	r2, r8
 8008040:	464b      	mov	r3, r9
 8008042:	f7f8 f923 	bl	800028c <__adddf3>
 8008046:	460b      	mov	r3, r1
 8008048:	4979      	ldr	r1, [pc, #484]	; (8008230 <_strtod_l+0xbd0>)
 800804a:	4a7b      	ldr	r2, [pc, #492]	; (8008238 <_strtod_l+0xbd8>)
 800804c:	4019      	ands	r1, r3
 800804e:	4291      	cmp	r1, r2
 8008050:	4680      	mov	r8, r0
 8008052:	d944      	bls.n	80080de <_strtod_l+0xa7e>
 8008054:	ee18 2a90 	vmov	r2, s17
 8008058:	4b78      	ldr	r3, [pc, #480]	; (800823c <_strtod_l+0xbdc>)
 800805a:	429a      	cmp	r2, r3
 800805c:	d104      	bne.n	8008068 <_strtod_l+0xa08>
 800805e:	ee18 3a10 	vmov	r3, s16
 8008062:	3301      	adds	r3, #1
 8008064:	f43f ad40 	beq.w	8007ae8 <_strtod_l+0x488>
 8008068:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800823c <_strtod_l+0xbdc>
 800806c:	f04f 38ff 	mov.w	r8, #4294967295
 8008070:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008072:	4620      	mov	r0, r4
 8008074:	f7fe fe6a 	bl	8006d4c <_Bfree>
 8008078:	9905      	ldr	r1, [sp, #20]
 800807a:	4620      	mov	r0, r4
 800807c:	f7fe fe66 	bl	8006d4c <_Bfree>
 8008080:	4659      	mov	r1, fp
 8008082:	4620      	mov	r0, r4
 8008084:	f7fe fe62 	bl	8006d4c <_Bfree>
 8008088:	4629      	mov	r1, r5
 800808a:	4620      	mov	r0, r4
 800808c:	f7fe fe5e 	bl	8006d4c <_Bfree>
 8008090:	e609      	b.n	8007ca6 <_strtod_l+0x646>
 8008092:	f1b8 0f01 	cmp.w	r8, #1
 8008096:	d103      	bne.n	80080a0 <_strtod_l+0xa40>
 8008098:	f1b9 0f00 	cmp.w	r9, #0
 800809c:	f43f ad95 	beq.w	8007bca <_strtod_l+0x56a>
 80080a0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80081f8 <_strtod_l+0xb98>
 80080a4:	4f60      	ldr	r7, [pc, #384]	; (8008228 <_strtod_l+0xbc8>)
 80080a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80080aa:	2600      	movs	r6, #0
 80080ac:	e7ae      	b.n	800800c <_strtod_l+0x9ac>
 80080ae:	4f5f      	ldr	r7, [pc, #380]	; (800822c <_strtod_l+0xbcc>)
 80080b0:	2600      	movs	r6, #0
 80080b2:	e7a7      	b.n	8008004 <_strtod_l+0x9a4>
 80080b4:	4b5d      	ldr	r3, [pc, #372]	; (800822c <_strtod_l+0xbcc>)
 80080b6:	4630      	mov	r0, r6
 80080b8:	4639      	mov	r1, r7
 80080ba:	2200      	movs	r2, #0
 80080bc:	f7f8 fa9c 	bl	80005f8 <__aeabi_dmul>
 80080c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080c2:	4606      	mov	r6, r0
 80080c4:	460f      	mov	r7, r1
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d09c      	beq.n	8008004 <_strtod_l+0x9a4>
 80080ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80080ce:	e79d      	b.n	800800c <_strtod_l+0x9ac>
 80080d0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008200 <_strtod_l+0xba0>
 80080d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80080d8:	ec57 6b17 	vmov	r6, r7, d7
 80080dc:	e796      	b.n	800800c <_strtod_l+0x9ac>
 80080de:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80080e2:	9b04      	ldr	r3, [sp, #16]
 80080e4:	46ca      	mov	sl, r9
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1c2      	bne.n	8008070 <_strtod_l+0xa10>
 80080ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80080ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80080f0:	0d1b      	lsrs	r3, r3, #20
 80080f2:	051b      	lsls	r3, r3, #20
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d1bb      	bne.n	8008070 <_strtod_l+0xa10>
 80080f8:	4630      	mov	r0, r6
 80080fa:	4639      	mov	r1, r7
 80080fc:	f7f8 fdc4 	bl	8000c88 <__aeabi_d2lz>
 8008100:	f7f8 fa4c 	bl	800059c <__aeabi_l2d>
 8008104:	4602      	mov	r2, r0
 8008106:	460b      	mov	r3, r1
 8008108:	4630      	mov	r0, r6
 800810a:	4639      	mov	r1, r7
 800810c:	f7f8 f8bc 	bl	8000288 <__aeabi_dsub>
 8008110:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008112:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008116:	ea43 0308 	orr.w	r3, r3, r8
 800811a:	4313      	orrs	r3, r2
 800811c:	4606      	mov	r6, r0
 800811e:	460f      	mov	r7, r1
 8008120:	d054      	beq.n	80081cc <_strtod_l+0xb6c>
 8008122:	a339      	add	r3, pc, #228	; (adr r3, 8008208 <_strtod_l+0xba8>)
 8008124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008128:	f7f8 fcd8 	bl	8000adc <__aeabi_dcmplt>
 800812c:	2800      	cmp	r0, #0
 800812e:	f47f ace5 	bne.w	8007afc <_strtod_l+0x49c>
 8008132:	a337      	add	r3, pc, #220	; (adr r3, 8008210 <_strtod_l+0xbb0>)
 8008134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008138:	4630      	mov	r0, r6
 800813a:	4639      	mov	r1, r7
 800813c:	f7f8 fcec 	bl	8000b18 <__aeabi_dcmpgt>
 8008140:	2800      	cmp	r0, #0
 8008142:	d095      	beq.n	8008070 <_strtod_l+0xa10>
 8008144:	e4da      	b.n	8007afc <_strtod_l+0x49c>
 8008146:	9b04      	ldr	r3, [sp, #16]
 8008148:	b333      	cbz	r3, 8008198 <_strtod_l+0xb38>
 800814a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800814c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008150:	d822      	bhi.n	8008198 <_strtod_l+0xb38>
 8008152:	a331      	add	r3, pc, #196	; (adr r3, 8008218 <_strtod_l+0xbb8>)
 8008154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008158:	4630      	mov	r0, r6
 800815a:	4639      	mov	r1, r7
 800815c:	f7f8 fcc8 	bl	8000af0 <__aeabi_dcmple>
 8008160:	b1a0      	cbz	r0, 800818c <_strtod_l+0xb2c>
 8008162:	4639      	mov	r1, r7
 8008164:	4630      	mov	r0, r6
 8008166:	f7f8 fd1f 	bl	8000ba8 <__aeabi_d2uiz>
 800816a:	2801      	cmp	r0, #1
 800816c:	bf38      	it	cc
 800816e:	2001      	movcc	r0, #1
 8008170:	f7f8 f9c8 	bl	8000504 <__aeabi_ui2d>
 8008174:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008176:	4606      	mov	r6, r0
 8008178:	460f      	mov	r7, r1
 800817a:	bb23      	cbnz	r3, 80081c6 <_strtod_l+0xb66>
 800817c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008180:	9010      	str	r0, [sp, #64]	; 0x40
 8008182:	9311      	str	r3, [sp, #68]	; 0x44
 8008184:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008188:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800818c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800818e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008190:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008194:	1a9b      	subs	r3, r3, r2
 8008196:	930f      	str	r3, [sp, #60]	; 0x3c
 8008198:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800819c:	eeb0 0a48 	vmov.f32	s0, s16
 80081a0:	eef0 0a68 	vmov.f32	s1, s17
 80081a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80081a8:	f7ff f8fc 	bl	80073a4 <__ulp>
 80081ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80081b0:	ec53 2b10 	vmov	r2, r3, d0
 80081b4:	f7f8 fa20 	bl	80005f8 <__aeabi_dmul>
 80081b8:	ec53 2b18 	vmov	r2, r3, d8
 80081bc:	f7f8 f866 	bl	800028c <__adddf3>
 80081c0:	4680      	mov	r8, r0
 80081c2:	4689      	mov	r9, r1
 80081c4:	e78d      	b.n	80080e2 <_strtod_l+0xa82>
 80081c6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80081ca:	e7db      	b.n	8008184 <_strtod_l+0xb24>
 80081cc:	a314      	add	r3, pc, #80	; (adr r3, 8008220 <_strtod_l+0xbc0>)
 80081ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d2:	f7f8 fc83 	bl	8000adc <__aeabi_dcmplt>
 80081d6:	e7b3      	b.n	8008140 <_strtod_l+0xae0>
 80081d8:	2300      	movs	r3, #0
 80081da:	930a      	str	r3, [sp, #40]	; 0x28
 80081dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80081de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081e0:	6013      	str	r3, [r2, #0]
 80081e2:	f7ff ba7c 	b.w	80076de <_strtod_l+0x7e>
 80081e6:	2a65      	cmp	r2, #101	; 0x65
 80081e8:	f43f ab75 	beq.w	80078d6 <_strtod_l+0x276>
 80081ec:	2a45      	cmp	r2, #69	; 0x45
 80081ee:	f43f ab72 	beq.w	80078d6 <_strtod_l+0x276>
 80081f2:	2301      	movs	r3, #1
 80081f4:	f7ff bbaa 	b.w	800794c <_strtod_l+0x2ec>
 80081f8:	00000000 	.word	0x00000000
 80081fc:	bff00000 	.word	0xbff00000
 8008200:	00000000 	.word	0x00000000
 8008204:	3ff00000 	.word	0x3ff00000
 8008208:	94a03595 	.word	0x94a03595
 800820c:	3fdfffff 	.word	0x3fdfffff
 8008210:	35afe535 	.word	0x35afe535
 8008214:	3fe00000 	.word	0x3fe00000
 8008218:	ffc00000 	.word	0xffc00000
 800821c:	41dfffff 	.word	0x41dfffff
 8008220:	94a03595 	.word	0x94a03595
 8008224:	3fcfffff 	.word	0x3fcfffff
 8008228:	3ff00000 	.word	0x3ff00000
 800822c:	3fe00000 	.word	0x3fe00000
 8008230:	7ff00000 	.word	0x7ff00000
 8008234:	7fe00000 	.word	0x7fe00000
 8008238:	7c9fffff 	.word	0x7c9fffff
 800823c:	7fefffff 	.word	0x7fefffff

08008240 <_strtod_r>:
 8008240:	4b01      	ldr	r3, [pc, #4]	; (8008248 <_strtod_r+0x8>)
 8008242:	f7ff ba0d 	b.w	8007660 <_strtod_l>
 8008246:	bf00      	nop
 8008248:	200001f8 	.word	0x200001f8

0800824c <_strtol_l.constprop.0>:
 800824c:	2b01      	cmp	r3, #1
 800824e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008252:	d001      	beq.n	8008258 <_strtol_l.constprop.0+0xc>
 8008254:	2b24      	cmp	r3, #36	; 0x24
 8008256:	d906      	bls.n	8008266 <_strtol_l.constprop.0+0x1a>
 8008258:	f7fd fd88 	bl	8005d6c <__errno>
 800825c:	2316      	movs	r3, #22
 800825e:	6003      	str	r3, [r0, #0]
 8008260:	2000      	movs	r0, #0
 8008262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008266:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800834c <_strtol_l.constprop.0+0x100>
 800826a:	460d      	mov	r5, r1
 800826c:	462e      	mov	r6, r5
 800826e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008272:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008276:	f017 0708 	ands.w	r7, r7, #8
 800827a:	d1f7      	bne.n	800826c <_strtol_l.constprop.0+0x20>
 800827c:	2c2d      	cmp	r4, #45	; 0x2d
 800827e:	d132      	bne.n	80082e6 <_strtol_l.constprop.0+0x9a>
 8008280:	782c      	ldrb	r4, [r5, #0]
 8008282:	2701      	movs	r7, #1
 8008284:	1cb5      	adds	r5, r6, #2
 8008286:	2b00      	cmp	r3, #0
 8008288:	d05b      	beq.n	8008342 <_strtol_l.constprop.0+0xf6>
 800828a:	2b10      	cmp	r3, #16
 800828c:	d109      	bne.n	80082a2 <_strtol_l.constprop.0+0x56>
 800828e:	2c30      	cmp	r4, #48	; 0x30
 8008290:	d107      	bne.n	80082a2 <_strtol_l.constprop.0+0x56>
 8008292:	782c      	ldrb	r4, [r5, #0]
 8008294:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008298:	2c58      	cmp	r4, #88	; 0x58
 800829a:	d14d      	bne.n	8008338 <_strtol_l.constprop.0+0xec>
 800829c:	786c      	ldrb	r4, [r5, #1]
 800829e:	2310      	movs	r3, #16
 80082a0:	3502      	adds	r5, #2
 80082a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80082a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80082aa:	f04f 0e00 	mov.w	lr, #0
 80082ae:	fbb8 f9f3 	udiv	r9, r8, r3
 80082b2:	4676      	mov	r6, lr
 80082b4:	fb03 8a19 	mls	sl, r3, r9, r8
 80082b8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80082bc:	f1bc 0f09 	cmp.w	ip, #9
 80082c0:	d816      	bhi.n	80082f0 <_strtol_l.constprop.0+0xa4>
 80082c2:	4664      	mov	r4, ip
 80082c4:	42a3      	cmp	r3, r4
 80082c6:	dd24      	ble.n	8008312 <_strtol_l.constprop.0+0xc6>
 80082c8:	f1be 3fff 	cmp.w	lr, #4294967295
 80082cc:	d008      	beq.n	80082e0 <_strtol_l.constprop.0+0x94>
 80082ce:	45b1      	cmp	r9, r6
 80082d0:	d31c      	bcc.n	800830c <_strtol_l.constprop.0+0xc0>
 80082d2:	d101      	bne.n	80082d8 <_strtol_l.constprop.0+0x8c>
 80082d4:	45a2      	cmp	sl, r4
 80082d6:	db19      	blt.n	800830c <_strtol_l.constprop.0+0xc0>
 80082d8:	fb06 4603 	mla	r6, r6, r3, r4
 80082dc:	f04f 0e01 	mov.w	lr, #1
 80082e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80082e4:	e7e8      	b.n	80082b8 <_strtol_l.constprop.0+0x6c>
 80082e6:	2c2b      	cmp	r4, #43	; 0x2b
 80082e8:	bf04      	itt	eq
 80082ea:	782c      	ldrbeq	r4, [r5, #0]
 80082ec:	1cb5      	addeq	r5, r6, #2
 80082ee:	e7ca      	b.n	8008286 <_strtol_l.constprop.0+0x3a>
 80082f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80082f4:	f1bc 0f19 	cmp.w	ip, #25
 80082f8:	d801      	bhi.n	80082fe <_strtol_l.constprop.0+0xb2>
 80082fa:	3c37      	subs	r4, #55	; 0x37
 80082fc:	e7e2      	b.n	80082c4 <_strtol_l.constprop.0+0x78>
 80082fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008302:	f1bc 0f19 	cmp.w	ip, #25
 8008306:	d804      	bhi.n	8008312 <_strtol_l.constprop.0+0xc6>
 8008308:	3c57      	subs	r4, #87	; 0x57
 800830a:	e7db      	b.n	80082c4 <_strtol_l.constprop.0+0x78>
 800830c:	f04f 3eff 	mov.w	lr, #4294967295
 8008310:	e7e6      	b.n	80082e0 <_strtol_l.constprop.0+0x94>
 8008312:	f1be 3fff 	cmp.w	lr, #4294967295
 8008316:	d105      	bne.n	8008324 <_strtol_l.constprop.0+0xd8>
 8008318:	2322      	movs	r3, #34	; 0x22
 800831a:	6003      	str	r3, [r0, #0]
 800831c:	4646      	mov	r6, r8
 800831e:	b942      	cbnz	r2, 8008332 <_strtol_l.constprop.0+0xe6>
 8008320:	4630      	mov	r0, r6
 8008322:	e79e      	b.n	8008262 <_strtol_l.constprop.0+0x16>
 8008324:	b107      	cbz	r7, 8008328 <_strtol_l.constprop.0+0xdc>
 8008326:	4276      	negs	r6, r6
 8008328:	2a00      	cmp	r2, #0
 800832a:	d0f9      	beq.n	8008320 <_strtol_l.constprop.0+0xd4>
 800832c:	f1be 0f00 	cmp.w	lr, #0
 8008330:	d000      	beq.n	8008334 <_strtol_l.constprop.0+0xe8>
 8008332:	1e69      	subs	r1, r5, #1
 8008334:	6011      	str	r1, [r2, #0]
 8008336:	e7f3      	b.n	8008320 <_strtol_l.constprop.0+0xd4>
 8008338:	2430      	movs	r4, #48	; 0x30
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1b1      	bne.n	80082a2 <_strtol_l.constprop.0+0x56>
 800833e:	2308      	movs	r3, #8
 8008340:	e7af      	b.n	80082a2 <_strtol_l.constprop.0+0x56>
 8008342:	2c30      	cmp	r4, #48	; 0x30
 8008344:	d0a5      	beq.n	8008292 <_strtol_l.constprop.0+0x46>
 8008346:	230a      	movs	r3, #10
 8008348:	e7ab      	b.n	80082a2 <_strtol_l.constprop.0+0x56>
 800834a:	bf00      	nop
 800834c:	080097f9 	.word	0x080097f9

08008350 <_strtol_r>:
 8008350:	f7ff bf7c 	b.w	800824c <_strtol_l.constprop.0>

08008354 <__ssputs_r>:
 8008354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008358:	688e      	ldr	r6, [r1, #8]
 800835a:	461f      	mov	r7, r3
 800835c:	42be      	cmp	r6, r7
 800835e:	680b      	ldr	r3, [r1, #0]
 8008360:	4682      	mov	sl, r0
 8008362:	460c      	mov	r4, r1
 8008364:	4690      	mov	r8, r2
 8008366:	d82c      	bhi.n	80083c2 <__ssputs_r+0x6e>
 8008368:	898a      	ldrh	r2, [r1, #12]
 800836a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800836e:	d026      	beq.n	80083be <__ssputs_r+0x6a>
 8008370:	6965      	ldr	r5, [r4, #20]
 8008372:	6909      	ldr	r1, [r1, #16]
 8008374:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008378:	eba3 0901 	sub.w	r9, r3, r1
 800837c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008380:	1c7b      	adds	r3, r7, #1
 8008382:	444b      	add	r3, r9
 8008384:	106d      	asrs	r5, r5, #1
 8008386:	429d      	cmp	r5, r3
 8008388:	bf38      	it	cc
 800838a:	461d      	movcc	r5, r3
 800838c:	0553      	lsls	r3, r2, #21
 800838e:	d527      	bpl.n	80083e0 <__ssputs_r+0x8c>
 8008390:	4629      	mov	r1, r5
 8008392:	f7fe fc0f 	bl	8006bb4 <_malloc_r>
 8008396:	4606      	mov	r6, r0
 8008398:	b360      	cbz	r0, 80083f4 <__ssputs_r+0xa0>
 800839a:	6921      	ldr	r1, [r4, #16]
 800839c:	464a      	mov	r2, r9
 800839e:	f000 fa1b 	bl	80087d8 <memcpy>
 80083a2:	89a3      	ldrh	r3, [r4, #12]
 80083a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ac:	81a3      	strh	r3, [r4, #12]
 80083ae:	6126      	str	r6, [r4, #16]
 80083b0:	6165      	str	r5, [r4, #20]
 80083b2:	444e      	add	r6, r9
 80083b4:	eba5 0509 	sub.w	r5, r5, r9
 80083b8:	6026      	str	r6, [r4, #0]
 80083ba:	60a5      	str	r5, [r4, #8]
 80083bc:	463e      	mov	r6, r7
 80083be:	42be      	cmp	r6, r7
 80083c0:	d900      	bls.n	80083c4 <__ssputs_r+0x70>
 80083c2:	463e      	mov	r6, r7
 80083c4:	6820      	ldr	r0, [r4, #0]
 80083c6:	4632      	mov	r2, r6
 80083c8:	4641      	mov	r1, r8
 80083ca:	f000 f9c9 	bl	8008760 <memmove>
 80083ce:	68a3      	ldr	r3, [r4, #8]
 80083d0:	1b9b      	subs	r3, r3, r6
 80083d2:	60a3      	str	r3, [r4, #8]
 80083d4:	6823      	ldr	r3, [r4, #0]
 80083d6:	4433      	add	r3, r6
 80083d8:	6023      	str	r3, [r4, #0]
 80083da:	2000      	movs	r0, #0
 80083dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e0:	462a      	mov	r2, r5
 80083e2:	f000 fdae 	bl	8008f42 <_realloc_r>
 80083e6:	4606      	mov	r6, r0
 80083e8:	2800      	cmp	r0, #0
 80083ea:	d1e0      	bne.n	80083ae <__ssputs_r+0x5a>
 80083ec:	6921      	ldr	r1, [r4, #16]
 80083ee:	4650      	mov	r0, sl
 80083f0:	f7fe fb6c 	bl	8006acc <_free_r>
 80083f4:	230c      	movs	r3, #12
 80083f6:	f8ca 3000 	str.w	r3, [sl]
 80083fa:	89a3      	ldrh	r3, [r4, #12]
 80083fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008400:	81a3      	strh	r3, [r4, #12]
 8008402:	f04f 30ff 	mov.w	r0, #4294967295
 8008406:	e7e9      	b.n	80083dc <__ssputs_r+0x88>

08008408 <_svfiprintf_r>:
 8008408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840c:	4698      	mov	r8, r3
 800840e:	898b      	ldrh	r3, [r1, #12]
 8008410:	061b      	lsls	r3, r3, #24
 8008412:	b09d      	sub	sp, #116	; 0x74
 8008414:	4607      	mov	r7, r0
 8008416:	460d      	mov	r5, r1
 8008418:	4614      	mov	r4, r2
 800841a:	d50e      	bpl.n	800843a <_svfiprintf_r+0x32>
 800841c:	690b      	ldr	r3, [r1, #16]
 800841e:	b963      	cbnz	r3, 800843a <_svfiprintf_r+0x32>
 8008420:	2140      	movs	r1, #64	; 0x40
 8008422:	f7fe fbc7 	bl	8006bb4 <_malloc_r>
 8008426:	6028      	str	r0, [r5, #0]
 8008428:	6128      	str	r0, [r5, #16]
 800842a:	b920      	cbnz	r0, 8008436 <_svfiprintf_r+0x2e>
 800842c:	230c      	movs	r3, #12
 800842e:	603b      	str	r3, [r7, #0]
 8008430:	f04f 30ff 	mov.w	r0, #4294967295
 8008434:	e0d0      	b.n	80085d8 <_svfiprintf_r+0x1d0>
 8008436:	2340      	movs	r3, #64	; 0x40
 8008438:	616b      	str	r3, [r5, #20]
 800843a:	2300      	movs	r3, #0
 800843c:	9309      	str	r3, [sp, #36]	; 0x24
 800843e:	2320      	movs	r3, #32
 8008440:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008444:	f8cd 800c 	str.w	r8, [sp, #12]
 8008448:	2330      	movs	r3, #48	; 0x30
 800844a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80085f0 <_svfiprintf_r+0x1e8>
 800844e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008452:	f04f 0901 	mov.w	r9, #1
 8008456:	4623      	mov	r3, r4
 8008458:	469a      	mov	sl, r3
 800845a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800845e:	b10a      	cbz	r2, 8008464 <_svfiprintf_r+0x5c>
 8008460:	2a25      	cmp	r2, #37	; 0x25
 8008462:	d1f9      	bne.n	8008458 <_svfiprintf_r+0x50>
 8008464:	ebba 0b04 	subs.w	fp, sl, r4
 8008468:	d00b      	beq.n	8008482 <_svfiprintf_r+0x7a>
 800846a:	465b      	mov	r3, fp
 800846c:	4622      	mov	r2, r4
 800846e:	4629      	mov	r1, r5
 8008470:	4638      	mov	r0, r7
 8008472:	f7ff ff6f 	bl	8008354 <__ssputs_r>
 8008476:	3001      	adds	r0, #1
 8008478:	f000 80a9 	beq.w	80085ce <_svfiprintf_r+0x1c6>
 800847c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800847e:	445a      	add	r2, fp
 8008480:	9209      	str	r2, [sp, #36]	; 0x24
 8008482:	f89a 3000 	ldrb.w	r3, [sl]
 8008486:	2b00      	cmp	r3, #0
 8008488:	f000 80a1 	beq.w	80085ce <_svfiprintf_r+0x1c6>
 800848c:	2300      	movs	r3, #0
 800848e:	f04f 32ff 	mov.w	r2, #4294967295
 8008492:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008496:	f10a 0a01 	add.w	sl, sl, #1
 800849a:	9304      	str	r3, [sp, #16]
 800849c:	9307      	str	r3, [sp, #28]
 800849e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084a2:	931a      	str	r3, [sp, #104]	; 0x68
 80084a4:	4654      	mov	r4, sl
 80084a6:	2205      	movs	r2, #5
 80084a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ac:	4850      	ldr	r0, [pc, #320]	; (80085f0 <_svfiprintf_r+0x1e8>)
 80084ae:	f7f7 fe8f 	bl	80001d0 <memchr>
 80084b2:	9a04      	ldr	r2, [sp, #16]
 80084b4:	b9d8      	cbnz	r0, 80084ee <_svfiprintf_r+0xe6>
 80084b6:	06d0      	lsls	r0, r2, #27
 80084b8:	bf44      	itt	mi
 80084ba:	2320      	movmi	r3, #32
 80084bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084c0:	0711      	lsls	r1, r2, #28
 80084c2:	bf44      	itt	mi
 80084c4:	232b      	movmi	r3, #43	; 0x2b
 80084c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084ca:	f89a 3000 	ldrb.w	r3, [sl]
 80084ce:	2b2a      	cmp	r3, #42	; 0x2a
 80084d0:	d015      	beq.n	80084fe <_svfiprintf_r+0xf6>
 80084d2:	9a07      	ldr	r2, [sp, #28]
 80084d4:	4654      	mov	r4, sl
 80084d6:	2000      	movs	r0, #0
 80084d8:	f04f 0c0a 	mov.w	ip, #10
 80084dc:	4621      	mov	r1, r4
 80084de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084e2:	3b30      	subs	r3, #48	; 0x30
 80084e4:	2b09      	cmp	r3, #9
 80084e6:	d94d      	bls.n	8008584 <_svfiprintf_r+0x17c>
 80084e8:	b1b0      	cbz	r0, 8008518 <_svfiprintf_r+0x110>
 80084ea:	9207      	str	r2, [sp, #28]
 80084ec:	e014      	b.n	8008518 <_svfiprintf_r+0x110>
 80084ee:	eba0 0308 	sub.w	r3, r0, r8
 80084f2:	fa09 f303 	lsl.w	r3, r9, r3
 80084f6:	4313      	orrs	r3, r2
 80084f8:	9304      	str	r3, [sp, #16]
 80084fa:	46a2      	mov	sl, r4
 80084fc:	e7d2      	b.n	80084a4 <_svfiprintf_r+0x9c>
 80084fe:	9b03      	ldr	r3, [sp, #12]
 8008500:	1d19      	adds	r1, r3, #4
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	9103      	str	r1, [sp, #12]
 8008506:	2b00      	cmp	r3, #0
 8008508:	bfbb      	ittet	lt
 800850a:	425b      	neglt	r3, r3
 800850c:	f042 0202 	orrlt.w	r2, r2, #2
 8008510:	9307      	strge	r3, [sp, #28]
 8008512:	9307      	strlt	r3, [sp, #28]
 8008514:	bfb8      	it	lt
 8008516:	9204      	strlt	r2, [sp, #16]
 8008518:	7823      	ldrb	r3, [r4, #0]
 800851a:	2b2e      	cmp	r3, #46	; 0x2e
 800851c:	d10c      	bne.n	8008538 <_svfiprintf_r+0x130>
 800851e:	7863      	ldrb	r3, [r4, #1]
 8008520:	2b2a      	cmp	r3, #42	; 0x2a
 8008522:	d134      	bne.n	800858e <_svfiprintf_r+0x186>
 8008524:	9b03      	ldr	r3, [sp, #12]
 8008526:	1d1a      	adds	r2, r3, #4
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	9203      	str	r2, [sp, #12]
 800852c:	2b00      	cmp	r3, #0
 800852e:	bfb8      	it	lt
 8008530:	f04f 33ff 	movlt.w	r3, #4294967295
 8008534:	3402      	adds	r4, #2
 8008536:	9305      	str	r3, [sp, #20]
 8008538:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008600 <_svfiprintf_r+0x1f8>
 800853c:	7821      	ldrb	r1, [r4, #0]
 800853e:	2203      	movs	r2, #3
 8008540:	4650      	mov	r0, sl
 8008542:	f7f7 fe45 	bl	80001d0 <memchr>
 8008546:	b138      	cbz	r0, 8008558 <_svfiprintf_r+0x150>
 8008548:	9b04      	ldr	r3, [sp, #16]
 800854a:	eba0 000a 	sub.w	r0, r0, sl
 800854e:	2240      	movs	r2, #64	; 0x40
 8008550:	4082      	lsls	r2, r0
 8008552:	4313      	orrs	r3, r2
 8008554:	3401      	adds	r4, #1
 8008556:	9304      	str	r3, [sp, #16]
 8008558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800855c:	4825      	ldr	r0, [pc, #148]	; (80085f4 <_svfiprintf_r+0x1ec>)
 800855e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008562:	2206      	movs	r2, #6
 8008564:	f7f7 fe34 	bl	80001d0 <memchr>
 8008568:	2800      	cmp	r0, #0
 800856a:	d038      	beq.n	80085de <_svfiprintf_r+0x1d6>
 800856c:	4b22      	ldr	r3, [pc, #136]	; (80085f8 <_svfiprintf_r+0x1f0>)
 800856e:	bb1b      	cbnz	r3, 80085b8 <_svfiprintf_r+0x1b0>
 8008570:	9b03      	ldr	r3, [sp, #12]
 8008572:	3307      	adds	r3, #7
 8008574:	f023 0307 	bic.w	r3, r3, #7
 8008578:	3308      	adds	r3, #8
 800857a:	9303      	str	r3, [sp, #12]
 800857c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800857e:	4433      	add	r3, r6
 8008580:	9309      	str	r3, [sp, #36]	; 0x24
 8008582:	e768      	b.n	8008456 <_svfiprintf_r+0x4e>
 8008584:	fb0c 3202 	mla	r2, ip, r2, r3
 8008588:	460c      	mov	r4, r1
 800858a:	2001      	movs	r0, #1
 800858c:	e7a6      	b.n	80084dc <_svfiprintf_r+0xd4>
 800858e:	2300      	movs	r3, #0
 8008590:	3401      	adds	r4, #1
 8008592:	9305      	str	r3, [sp, #20]
 8008594:	4619      	mov	r1, r3
 8008596:	f04f 0c0a 	mov.w	ip, #10
 800859a:	4620      	mov	r0, r4
 800859c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085a0:	3a30      	subs	r2, #48	; 0x30
 80085a2:	2a09      	cmp	r2, #9
 80085a4:	d903      	bls.n	80085ae <_svfiprintf_r+0x1a6>
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d0c6      	beq.n	8008538 <_svfiprintf_r+0x130>
 80085aa:	9105      	str	r1, [sp, #20]
 80085ac:	e7c4      	b.n	8008538 <_svfiprintf_r+0x130>
 80085ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80085b2:	4604      	mov	r4, r0
 80085b4:	2301      	movs	r3, #1
 80085b6:	e7f0      	b.n	800859a <_svfiprintf_r+0x192>
 80085b8:	ab03      	add	r3, sp, #12
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	462a      	mov	r2, r5
 80085be:	4b0f      	ldr	r3, [pc, #60]	; (80085fc <_svfiprintf_r+0x1f4>)
 80085c0:	a904      	add	r1, sp, #16
 80085c2:	4638      	mov	r0, r7
 80085c4:	f7fc fc84 	bl	8004ed0 <_printf_float>
 80085c8:	1c42      	adds	r2, r0, #1
 80085ca:	4606      	mov	r6, r0
 80085cc:	d1d6      	bne.n	800857c <_svfiprintf_r+0x174>
 80085ce:	89ab      	ldrh	r3, [r5, #12]
 80085d0:	065b      	lsls	r3, r3, #25
 80085d2:	f53f af2d 	bmi.w	8008430 <_svfiprintf_r+0x28>
 80085d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085d8:	b01d      	add	sp, #116	; 0x74
 80085da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085de:	ab03      	add	r3, sp, #12
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	462a      	mov	r2, r5
 80085e4:	4b05      	ldr	r3, [pc, #20]	; (80085fc <_svfiprintf_r+0x1f4>)
 80085e6:	a904      	add	r1, sp, #16
 80085e8:	4638      	mov	r0, r7
 80085ea:	f7fc ff15 	bl	8005418 <_printf_i>
 80085ee:	e7eb      	b.n	80085c8 <_svfiprintf_r+0x1c0>
 80085f0:	080098f9 	.word	0x080098f9
 80085f4:	08009903 	.word	0x08009903
 80085f8:	08004ed1 	.word	0x08004ed1
 80085fc:	08008355 	.word	0x08008355
 8008600:	080098ff 	.word	0x080098ff

08008604 <__sflush_r>:
 8008604:	898a      	ldrh	r2, [r1, #12]
 8008606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800860a:	4605      	mov	r5, r0
 800860c:	0710      	lsls	r0, r2, #28
 800860e:	460c      	mov	r4, r1
 8008610:	d458      	bmi.n	80086c4 <__sflush_r+0xc0>
 8008612:	684b      	ldr	r3, [r1, #4]
 8008614:	2b00      	cmp	r3, #0
 8008616:	dc05      	bgt.n	8008624 <__sflush_r+0x20>
 8008618:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800861a:	2b00      	cmp	r3, #0
 800861c:	dc02      	bgt.n	8008624 <__sflush_r+0x20>
 800861e:	2000      	movs	r0, #0
 8008620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008626:	2e00      	cmp	r6, #0
 8008628:	d0f9      	beq.n	800861e <__sflush_r+0x1a>
 800862a:	2300      	movs	r3, #0
 800862c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008630:	682f      	ldr	r7, [r5, #0]
 8008632:	6a21      	ldr	r1, [r4, #32]
 8008634:	602b      	str	r3, [r5, #0]
 8008636:	d032      	beq.n	800869e <__sflush_r+0x9a>
 8008638:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800863a:	89a3      	ldrh	r3, [r4, #12]
 800863c:	075a      	lsls	r2, r3, #29
 800863e:	d505      	bpl.n	800864c <__sflush_r+0x48>
 8008640:	6863      	ldr	r3, [r4, #4]
 8008642:	1ac0      	subs	r0, r0, r3
 8008644:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008646:	b10b      	cbz	r3, 800864c <__sflush_r+0x48>
 8008648:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800864a:	1ac0      	subs	r0, r0, r3
 800864c:	2300      	movs	r3, #0
 800864e:	4602      	mov	r2, r0
 8008650:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008652:	6a21      	ldr	r1, [r4, #32]
 8008654:	4628      	mov	r0, r5
 8008656:	47b0      	blx	r6
 8008658:	1c43      	adds	r3, r0, #1
 800865a:	89a3      	ldrh	r3, [r4, #12]
 800865c:	d106      	bne.n	800866c <__sflush_r+0x68>
 800865e:	6829      	ldr	r1, [r5, #0]
 8008660:	291d      	cmp	r1, #29
 8008662:	d82b      	bhi.n	80086bc <__sflush_r+0xb8>
 8008664:	4a29      	ldr	r2, [pc, #164]	; (800870c <__sflush_r+0x108>)
 8008666:	410a      	asrs	r2, r1
 8008668:	07d6      	lsls	r6, r2, #31
 800866a:	d427      	bmi.n	80086bc <__sflush_r+0xb8>
 800866c:	2200      	movs	r2, #0
 800866e:	6062      	str	r2, [r4, #4]
 8008670:	04d9      	lsls	r1, r3, #19
 8008672:	6922      	ldr	r2, [r4, #16]
 8008674:	6022      	str	r2, [r4, #0]
 8008676:	d504      	bpl.n	8008682 <__sflush_r+0x7e>
 8008678:	1c42      	adds	r2, r0, #1
 800867a:	d101      	bne.n	8008680 <__sflush_r+0x7c>
 800867c:	682b      	ldr	r3, [r5, #0]
 800867e:	b903      	cbnz	r3, 8008682 <__sflush_r+0x7e>
 8008680:	6560      	str	r0, [r4, #84]	; 0x54
 8008682:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008684:	602f      	str	r7, [r5, #0]
 8008686:	2900      	cmp	r1, #0
 8008688:	d0c9      	beq.n	800861e <__sflush_r+0x1a>
 800868a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800868e:	4299      	cmp	r1, r3
 8008690:	d002      	beq.n	8008698 <__sflush_r+0x94>
 8008692:	4628      	mov	r0, r5
 8008694:	f7fe fa1a 	bl	8006acc <_free_r>
 8008698:	2000      	movs	r0, #0
 800869a:	6360      	str	r0, [r4, #52]	; 0x34
 800869c:	e7c0      	b.n	8008620 <__sflush_r+0x1c>
 800869e:	2301      	movs	r3, #1
 80086a0:	4628      	mov	r0, r5
 80086a2:	47b0      	blx	r6
 80086a4:	1c41      	adds	r1, r0, #1
 80086a6:	d1c8      	bne.n	800863a <__sflush_r+0x36>
 80086a8:	682b      	ldr	r3, [r5, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d0c5      	beq.n	800863a <__sflush_r+0x36>
 80086ae:	2b1d      	cmp	r3, #29
 80086b0:	d001      	beq.n	80086b6 <__sflush_r+0xb2>
 80086b2:	2b16      	cmp	r3, #22
 80086b4:	d101      	bne.n	80086ba <__sflush_r+0xb6>
 80086b6:	602f      	str	r7, [r5, #0]
 80086b8:	e7b1      	b.n	800861e <__sflush_r+0x1a>
 80086ba:	89a3      	ldrh	r3, [r4, #12]
 80086bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086c0:	81a3      	strh	r3, [r4, #12]
 80086c2:	e7ad      	b.n	8008620 <__sflush_r+0x1c>
 80086c4:	690f      	ldr	r7, [r1, #16]
 80086c6:	2f00      	cmp	r7, #0
 80086c8:	d0a9      	beq.n	800861e <__sflush_r+0x1a>
 80086ca:	0793      	lsls	r3, r2, #30
 80086cc:	680e      	ldr	r6, [r1, #0]
 80086ce:	bf08      	it	eq
 80086d0:	694b      	ldreq	r3, [r1, #20]
 80086d2:	600f      	str	r7, [r1, #0]
 80086d4:	bf18      	it	ne
 80086d6:	2300      	movne	r3, #0
 80086d8:	eba6 0807 	sub.w	r8, r6, r7
 80086dc:	608b      	str	r3, [r1, #8]
 80086de:	f1b8 0f00 	cmp.w	r8, #0
 80086e2:	dd9c      	ble.n	800861e <__sflush_r+0x1a>
 80086e4:	6a21      	ldr	r1, [r4, #32]
 80086e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80086e8:	4643      	mov	r3, r8
 80086ea:	463a      	mov	r2, r7
 80086ec:	4628      	mov	r0, r5
 80086ee:	47b0      	blx	r6
 80086f0:	2800      	cmp	r0, #0
 80086f2:	dc06      	bgt.n	8008702 <__sflush_r+0xfe>
 80086f4:	89a3      	ldrh	r3, [r4, #12]
 80086f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086fa:	81a3      	strh	r3, [r4, #12]
 80086fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008700:	e78e      	b.n	8008620 <__sflush_r+0x1c>
 8008702:	4407      	add	r7, r0
 8008704:	eba8 0800 	sub.w	r8, r8, r0
 8008708:	e7e9      	b.n	80086de <__sflush_r+0xda>
 800870a:	bf00      	nop
 800870c:	dfbffffe 	.word	0xdfbffffe

08008710 <_fflush_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	690b      	ldr	r3, [r1, #16]
 8008714:	4605      	mov	r5, r0
 8008716:	460c      	mov	r4, r1
 8008718:	b913      	cbnz	r3, 8008720 <_fflush_r+0x10>
 800871a:	2500      	movs	r5, #0
 800871c:	4628      	mov	r0, r5
 800871e:	bd38      	pop	{r3, r4, r5, pc}
 8008720:	b118      	cbz	r0, 800872a <_fflush_r+0x1a>
 8008722:	6a03      	ldr	r3, [r0, #32]
 8008724:	b90b      	cbnz	r3, 800872a <_fflush_r+0x1a>
 8008726:	f7fd fa35 	bl	8005b94 <__sinit>
 800872a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d0f3      	beq.n	800871a <_fflush_r+0xa>
 8008732:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008734:	07d0      	lsls	r0, r2, #31
 8008736:	d404      	bmi.n	8008742 <_fflush_r+0x32>
 8008738:	0599      	lsls	r1, r3, #22
 800873a:	d402      	bmi.n	8008742 <_fflush_r+0x32>
 800873c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800873e:	f7fd fb40 	bl	8005dc2 <__retarget_lock_acquire_recursive>
 8008742:	4628      	mov	r0, r5
 8008744:	4621      	mov	r1, r4
 8008746:	f7ff ff5d 	bl	8008604 <__sflush_r>
 800874a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800874c:	07da      	lsls	r2, r3, #31
 800874e:	4605      	mov	r5, r0
 8008750:	d4e4      	bmi.n	800871c <_fflush_r+0xc>
 8008752:	89a3      	ldrh	r3, [r4, #12]
 8008754:	059b      	lsls	r3, r3, #22
 8008756:	d4e1      	bmi.n	800871c <_fflush_r+0xc>
 8008758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800875a:	f7fd fb33 	bl	8005dc4 <__retarget_lock_release_recursive>
 800875e:	e7dd      	b.n	800871c <_fflush_r+0xc>

08008760 <memmove>:
 8008760:	4288      	cmp	r0, r1
 8008762:	b510      	push	{r4, lr}
 8008764:	eb01 0402 	add.w	r4, r1, r2
 8008768:	d902      	bls.n	8008770 <memmove+0x10>
 800876a:	4284      	cmp	r4, r0
 800876c:	4623      	mov	r3, r4
 800876e:	d807      	bhi.n	8008780 <memmove+0x20>
 8008770:	1e43      	subs	r3, r0, #1
 8008772:	42a1      	cmp	r1, r4
 8008774:	d008      	beq.n	8008788 <memmove+0x28>
 8008776:	f811 2b01 	ldrb.w	r2, [r1], #1
 800877a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800877e:	e7f8      	b.n	8008772 <memmove+0x12>
 8008780:	4402      	add	r2, r0
 8008782:	4601      	mov	r1, r0
 8008784:	428a      	cmp	r2, r1
 8008786:	d100      	bne.n	800878a <memmove+0x2a>
 8008788:	bd10      	pop	{r4, pc}
 800878a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800878e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008792:	e7f7      	b.n	8008784 <memmove+0x24>

08008794 <strncmp>:
 8008794:	b510      	push	{r4, lr}
 8008796:	b16a      	cbz	r2, 80087b4 <strncmp+0x20>
 8008798:	3901      	subs	r1, #1
 800879a:	1884      	adds	r4, r0, r2
 800879c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d103      	bne.n	80087b0 <strncmp+0x1c>
 80087a8:	42a0      	cmp	r0, r4
 80087aa:	d001      	beq.n	80087b0 <strncmp+0x1c>
 80087ac:	2a00      	cmp	r2, #0
 80087ae:	d1f5      	bne.n	800879c <strncmp+0x8>
 80087b0:	1ad0      	subs	r0, r2, r3
 80087b2:	bd10      	pop	{r4, pc}
 80087b4:	4610      	mov	r0, r2
 80087b6:	e7fc      	b.n	80087b2 <strncmp+0x1e>

080087b8 <_sbrk_r>:
 80087b8:	b538      	push	{r3, r4, r5, lr}
 80087ba:	4d06      	ldr	r5, [pc, #24]	; (80087d4 <_sbrk_r+0x1c>)
 80087bc:	2300      	movs	r3, #0
 80087be:	4604      	mov	r4, r0
 80087c0:	4608      	mov	r0, r1
 80087c2:	602b      	str	r3, [r5, #0]
 80087c4:	f7f9 fa14 	bl	8001bf0 <_sbrk>
 80087c8:	1c43      	adds	r3, r0, #1
 80087ca:	d102      	bne.n	80087d2 <_sbrk_r+0x1a>
 80087cc:	682b      	ldr	r3, [r5, #0]
 80087ce:	b103      	cbz	r3, 80087d2 <_sbrk_r+0x1a>
 80087d0:	6023      	str	r3, [r4, #0]
 80087d2:	bd38      	pop	{r3, r4, r5, pc}
 80087d4:	20000904 	.word	0x20000904

080087d8 <memcpy>:
 80087d8:	440a      	add	r2, r1
 80087da:	4291      	cmp	r1, r2
 80087dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80087e0:	d100      	bne.n	80087e4 <memcpy+0xc>
 80087e2:	4770      	bx	lr
 80087e4:	b510      	push	{r4, lr}
 80087e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087ee:	4291      	cmp	r1, r2
 80087f0:	d1f9      	bne.n	80087e6 <memcpy+0xe>
 80087f2:	bd10      	pop	{r4, pc}
 80087f4:	0000      	movs	r0, r0
	...

080087f8 <nan>:
 80087f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008800 <nan+0x8>
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	00000000 	.word	0x00000000
 8008804:	7ff80000 	.word	0x7ff80000

08008808 <__assert_func>:
 8008808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800880a:	4614      	mov	r4, r2
 800880c:	461a      	mov	r2, r3
 800880e:	4b09      	ldr	r3, [pc, #36]	; (8008834 <__assert_func+0x2c>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4605      	mov	r5, r0
 8008814:	68d8      	ldr	r0, [r3, #12]
 8008816:	b14c      	cbz	r4, 800882c <__assert_func+0x24>
 8008818:	4b07      	ldr	r3, [pc, #28]	; (8008838 <__assert_func+0x30>)
 800881a:	9100      	str	r1, [sp, #0]
 800881c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008820:	4906      	ldr	r1, [pc, #24]	; (800883c <__assert_func+0x34>)
 8008822:	462b      	mov	r3, r5
 8008824:	f000 fbca 	bl	8008fbc <fiprintf>
 8008828:	f000 fbda 	bl	8008fe0 <abort>
 800882c:	4b04      	ldr	r3, [pc, #16]	; (8008840 <__assert_func+0x38>)
 800882e:	461c      	mov	r4, r3
 8008830:	e7f3      	b.n	800881a <__assert_func+0x12>
 8008832:	bf00      	nop
 8008834:	200001f4 	.word	0x200001f4
 8008838:	08009912 	.word	0x08009912
 800883c:	0800991f 	.word	0x0800991f
 8008840:	0800994d 	.word	0x0800994d

08008844 <_calloc_r>:
 8008844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008846:	fba1 2402 	umull	r2, r4, r1, r2
 800884a:	b94c      	cbnz	r4, 8008860 <_calloc_r+0x1c>
 800884c:	4611      	mov	r1, r2
 800884e:	9201      	str	r2, [sp, #4]
 8008850:	f7fe f9b0 	bl	8006bb4 <_malloc_r>
 8008854:	9a01      	ldr	r2, [sp, #4]
 8008856:	4605      	mov	r5, r0
 8008858:	b930      	cbnz	r0, 8008868 <_calloc_r+0x24>
 800885a:	4628      	mov	r0, r5
 800885c:	b003      	add	sp, #12
 800885e:	bd30      	pop	{r4, r5, pc}
 8008860:	220c      	movs	r2, #12
 8008862:	6002      	str	r2, [r0, #0]
 8008864:	2500      	movs	r5, #0
 8008866:	e7f8      	b.n	800885a <_calloc_r+0x16>
 8008868:	4621      	mov	r1, r4
 800886a:	f7fd fa2c 	bl	8005cc6 <memset>
 800886e:	e7f4      	b.n	800885a <_calloc_r+0x16>

08008870 <rshift>:
 8008870:	6903      	ldr	r3, [r0, #16]
 8008872:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008876:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800887a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800887e:	f100 0414 	add.w	r4, r0, #20
 8008882:	dd45      	ble.n	8008910 <rshift+0xa0>
 8008884:	f011 011f 	ands.w	r1, r1, #31
 8008888:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800888c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008890:	d10c      	bne.n	80088ac <rshift+0x3c>
 8008892:	f100 0710 	add.w	r7, r0, #16
 8008896:	4629      	mov	r1, r5
 8008898:	42b1      	cmp	r1, r6
 800889a:	d334      	bcc.n	8008906 <rshift+0x96>
 800889c:	1a9b      	subs	r3, r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	1eea      	subs	r2, r5, #3
 80088a2:	4296      	cmp	r6, r2
 80088a4:	bf38      	it	cc
 80088a6:	2300      	movcc	r3, #0
 80088a8:	4423      	add	r3, r4
 80088aa:	e015      	b.n	80088d8 <rshift+0x68>
 80088ac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80088b0:	f1c1 0820 	rsb	r8, r1, #32
 80088b4:	40cf      	lsrs	r7, r1
 80088b6:	f105 0e04 	add.w	lr, r5, #4
 80088ba:	46a1      	mov	r9, r4
 80088bc:	4576      	cmp	r6, lr
 80088be:	46f4      	mov	ip, lr
 80088c0:	d815      	bhi.n	80088ee <rshift+0x7e>
 80088c2:	1a9a      	subs	r2, r3, r2
 80088c4:	0092      	lsls	r2, r2, #2
 80088c6:	3a04      	subs	r2, #4
 80088c8:	3501      	adds	r5, #1
 80088ca:	42ae      	cmp	r6, r5
 80088cc:	bf38      	it	cc
 80088ce:	2200      	movcc	r2, #0
 80088d0:	18a3      	adds	r3, r4, r2
 80088d2:	50a7      	str	r7, [r4, r2]
 80088d4:	b107      	cbz	r7, 80088d8 <rshift+0x68>
 80088d6:	3304      	adds	r3, #4
 80088d8:	1b1a      	subs	r2, r3, r4
 80088da:	42a3      	cmp	r3, r4
 80088dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80088e0:	bf08      	it	eq
 80088e2:	2300      	moveq	r3, #0
 80088e4:	6102      	str	r2, [r0, #16]
 80088e6:	bf08      	it	eq
 80088e8:	6143      	streq	r3, [r0, #20]
 80088ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088ee:	f8dc c000 	ldr.w	ip, [ip]
 80088f2:	fa0c fc08 	lsl.w	ip, ip, r8
 80088f6:	ea4c 0707 	orr.w	r7, ip, r7
 80088fa:	f849 7b04 	str.w	r7, [r9], #4
 80088fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008902:	40cf      	lsrs	r7, r1
 8008904:	e7da      	b.n	80088bc <rshift+0x4c>
 8008906:	f851 cb04 	ldr.w	ip, [r1], #4
 800890a:	f847 cf04 	str.w	ip, [r7, #4]!
 800890e:	e7c3      	b.n	8008898 <rshift+0x28>
 8008910:	4623      	mov	r3, r4
 8008912:	e7e1      	b.n	80088d8 <rshift+0x68>

08008914 <__hexdig_fun>:
 8008914:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008918:	2b09      	cmp	r3, #9
 800891a:	d802      	bhi.n	8008922 <__hexdig_fun+0xe>
 800891c:	3820      	subs	r0, #32
 800891e:	b2c0      	uxtb	r0, r0
 8008920:	4770      	bx	lr
 8008922:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008926:	2b05      	cmp	r3, #5
 8008928:	d801      	bhi.n	800892e <__hexdig_fun+0x1a>
 800892a:	3847      	subs	r0, #71	; 0x47
 800892c:	e7f7      	b.n	800891e <__hexdig_fun+0xa>
 800892e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008932:	2b05      	cmp	r3, #5
 8008934:	d801      	bhi.n	800893a <__hexdig_fun+0x26>
 8008936:	3827      	subs	r0, #39	; 0x27
 8008938:	e7f1      	b.n	800891e <__hexdig_fun+0xa>
 800893a:	2000      	movs	r0, #0
 800893c:	4770      	bx	lr
	...

08008940 <__gethex>:
 8008940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008944:	4617      	mov	r7, r2
 8008946:	680a      	ldr	r2, [r1, #0]
 8008948:	b085      	sub	sp, #20
 800894a:	f102 0b02 	add.w	fp, r2, #2
 800894e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008952:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008956:	4681      	mov	r9, r0
 8008958:	468a      	mov	sl, r1
 800895a:	9302      	str	r3, [sp, #8]
 800895c:	32fe      	adds	r2, #254	; 0xfe
 800895e:	eb02 030b 	add.w	r3, r2, fp
 8008962:	46d8      	mov	r8, fp
 8008964:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008968:	9301      	str	r3, [sp, #4]
 800896a:	2830      	cmp	r0, #48	; 0x30
 800896c:	d0f7      	beq.n	800895e <__gethex+0x1e>
 800896e:	f7ff ffd1 	bl	8008914 <__hexdig_fun>
 8008972:	4604      	mov	r4, r0
 8008974:	2800      	cmp	r0, #0
 8008976:	d138      	bne.n	80089ea <__gethex+0xaa>
 8008978:	49a7      	ldr	r1, [pc, #668]	; (8008c18 <__gethex+0x2d8>)
 800897a:	2201      	movs	r2, #1
 800897c:	4640      	mov	r0, r8
 800897e:	f7ff ff09 	bl	8008794 <strncmp>
 8008982:	4606      	mov	r6, r0
 8008984:	2800      	cmp	r0, #0
 8008986:	d169      	bne.n	8008a5c <__gethex+0x11c>
 8008988:	f898 0001 	ldrb.w	r0, [r8, #1]
 800898c:	465d      	mov	r5, fp
 800898e:	f7ff ffc1 	bl	8008914 <__hexdig_fun>
 8008992:	2800      	cmp	r0, #0
 8008994:	d064      	beq.n	8008a60 <__gethex+0x120>
 8008996:	465a      	mov	r2, fp
 8008998:	7810      	ldrb	r0, [r2, #0]
 800899a:	2830      	cmp	r0, #48	; 0x30
 800899c:	4690      	mov	r8, r2
 800899e:	f102 0201 	add.w	r2, r2, #1
 80089a2:	d0f9      	beq.n	8008998 <__gethex+0x58>
 80089a4:	f7ff ffb6 	bl	8008914 <__hexdig_fun>
 80089a8:	2301      	movs	r3, #1
 80089aa:	fab0 f480 	clz	r4, r0
 80089ae:	0964      	lsrs	r4, r4, #5
 80089b0:	465e      	mov	r6, fp
 80089b2:	9301      	str	r3, [sp, #4]
 80089b4:	4642      	mov	r2, r8
 80089b6:	4615      	mov	r5, r2
 80089b8:	3201      	adds	r2, #1
 80089ba:	7828      	ldrb	r0, [r5, #0]
 80089bc:	f7ff ffaa 	bl	8008914 <__hexdig_fun>
 80089c0:	2800      	cmp	r0, #0
 80089c2:	d1f8      	bne.n	80089b6 <__gethex+0x76>
 80089c4:	4994      	ldr	r1, [pc, #592]	; (8008c18 <__gethex+0x2d8>)
 80089c6:	2201      	movs	r2, #1
 80089c8:	4628      	mov	r0, r5
 80089ca:	f7ff fee3 	bl	8008794 <strncmp>
 80089ce:	b978      	cbnz	r0, 80089f0 <__gethex+0xb0>
 80089d0:	b946      	cbnz	r6, 80089e4 <__gethex+0xa4>
 80089d2:	1c6e      	adds	r6, r5, #1
 80089d4:	4632      	mov	r2, r6
 80089d6:	4615      	mov	r5, r2
 80089d8:	3201      	adds	r2, #1
 80089da:	7828      	ldrb	r0, [r5, #0]
 80089dc:	f7ff ff9a 	bl	8008914 <__hexdig_fun>
 80089e0:	2800      	cmp	r0, #0
 80089e2:	d1f8      	bne.n	80089d6 <__gethex+0x96>
 80089e4:	1b73      	subs	r3, r6, r5
 80089e6:	009e      	lsls	r6, r3, #2
 80089e8:	e004      	b.n	80089f4 <__gethex+0xb4>
 80089ea:	2400      	movs	r4, #0
 80089ec:	4626      	mov	r6, r4
 80089ee:	e7e1      	b.n	80089b4 <__gethex+0x74>
 80089f0:	2e00      	cmp	r6, #0
 80089f2:	d1f7      	bne.n	80089e4 <__gethex+0xa4>
 80089f4:	782b      	ldrb	r3, [r5, #0]
 80089f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80089fa:	2b50      	cmp	r3, #80	; 0x50
 80089fc:	d13d      	bne.n	8008a7a <__gethex+0x13a>
 80089fe:	786b      	ldrb	r3, [r5, #1]
 8008a00:	2b2b      	cmp	r3, #43	; 0x2b
 8008a02:	d02f      	beq.n	8008a64 <__gethex+0x124>
 8008a04:	2b2d      	cmp	r3, #45	; 0x2d
 8008a06:	d031      	beq.n	8008a6c <__gethex+0x12c>
 8008a08:	1c69      	adds	r1, r5, #1
 8008a0a:	f04f 0b00 	mov.w	fp, #0
 8008a0e:	7808      	ldrb	r0, [r1, #0]
 8008a10:	f7ff ff80 	bl	8008914 <__hexdig_fun>
 8008a14:	1e42      	subs	r2, r0, #1
 8008a16:	b2d2      	uxtb	r2, r2
 8008a18:	2a18      	cmp	r2, #24
 8008a1a:	d82e      	bhi.n	8008a7a <__gethex+0x13a>
 8008a1c:	f1a0 0210 	sub.w	r2, r0, #16
 8008a20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008a24:	f7ff ff76 	bl	8008914 <__hexdig_fun>
 8008a28:	f100 3cff 	add.w	ip, r0, #4294967295
 8008a2c:	fa5f fc8c 	uxtb.w	ip, ip
 8008a30:	f1bc 0f18 	cmp.w	ip, #24
 8008a34:	d91d      	bls.n	8008a72 <__gethex+0x132>
 8008a36:	f1bb 0f00 	cmp.w	fp, #0
 8008a3a:	d000      	beq.n	8008a3e <__gethex+0xfe>
 8008a3c:	4252      	negs	r2, r2
 8008a3e:	4416      	add	r6, r2
 8008a40:	f8ca 1000 	str.w	r1, [sl]
 8008a44:	b1dc      	cbz	r4, 8008a7e <__gethex+0x13e>
 8008a46:	9b01      	ldr	r3, [sp, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	bf14      	ite	ne
 8008a4c:	f04f 0800 	movne.w	r8, #0
 8008a50:	f04f 0806 	moveq.w	r8, #6
 8008a54:	4640      	mov	r0, r8
 8008a56:	b005      	add	sp, #20
 8008a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a5c:	4645      	mov	r5, r8
 8008a5e:	4626      	mov	r6, r4
 8008a60:	2401      	movs	r4, #1
 8008a62:	e7c7      	b.n	80089f4 <__gethex+0xb4>
 8008a64:	f04f 0b00 	mov.w	fp, #0
 8008a68:	1ca9      	adds	r1, r5, #2
 8008a6a:	e7d0      	b.n	8008a0e <__gethex+0xce>
 8008a6c:	f04f 0b01 	mov.w	fp, #1
 8008a70:	e7fa      	b.n	8008a68 <__gethex+0x128>
 8008a72:	230a      	movs	r3, #10
 8008a74:	fb03 0002 	mla	r0, r3, r2, r0
 8008a78:	e7d0      	b.n	8008a1c <__gethex+0xdc>
 8008a7a:	4629      	mov	r1, r5
 8008a7c:	e7e0      	b.n	8008a40 <__gethex+0x100>
 8008a7e:	eba5 0308 	sub.w	r3, r5, r8
 8008a82:	3b01      	subs	r3, #1
 8008a84:	4621      	mov	r1, r4
 8008a86:	2b07      	cmp	r3, #7
 8008a88:	dc0a      	bgt.n	8008aa0 <__gethex+0x160>
 8008a8a:	4648      	mov	r0, r9
 8008a8c:	f7fe f91e 	bl	8006ccc <_Balloc>
 8008a90:	4604      	mov	r4, r0
 8008a92:	b940      	cbnz	r0, 8008aa6 <__gethex+0x166>
 8008a94:	4b61      	ldr	r3, [pc, #388]	; (8008c1c <__gethex+0x2dc>)
 8008a96:	4602      	mov	r2, r0
 8008a98:	21e4      	movs	r1, #228	; 0xe4
 8008a9a:	4861      	ldr	r0, [pc, #388]	; (8008c20 <__gethex+0x2e0>)
 8008a9c:	f7ff feb4 	bl	8008808 <__assert_func>
 8008aa0:	3101      	adds	r1, #1
 8008aa2:	105b      	asrs	r3, r3, #1
 8008aa4:	e7ef      	b.n	8008a86 <__gethex+0x146>
 8008aa6:	f100 0a14 	add.w	sl, r0, #20
 8008aaa:	2300      	movs	r3, #0
 8008aac:	495a      	ldr	r1, [pc, #360]	; (8008c18 <__gethex+0x2d8>)
 8008aae:	f8cd a004 	str.w	sl, [sp, #4]
 8008ab2:	469b      	mov	fp, r3
 8008ab4:	45a8      	cmp	r8, r5
 8008ab6:	d342      	bcc.n	8008b3e <__gethex+0x1fe>
 8008ab8:	9801      	ldr	r0, [sp, #4]
 8008aba:	f840 bb04 	str.w	fp, [r0], #4
 8008abe:	eba0 000a 	sub.w	r0, r0, sl
 8008ac2:	1080      	asrs	r0, r0, #2
 8008ac4:	6120      	str	r0, [r4, #16]
 8008ac6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8008aca:	4658      	mov	r0, fp
 8008acc:	f7fe f9f0 	bl	8006eb0 <__hi0bits>
 8008ad0:	683d      	ldr	r5, [r7, #0]
 8008ad2:	eba8 0000 	sub.w	r0, r8, r0
 8008ad6:	42a8      	cmp	r0, r5
 8008ad8:	dd59      	ble.n	8008b8e <__gethex+0x24e>
 8008ada:	eba0 0805 	sub.w	r8, r0, r5
 8008ade:	4641      	mov	r1, r8
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f7fe fd7f 	bl	80075e4 <__any_on>
 8008ae6:	4683      	mov	fp, r0
 8008ae8:	b1b8      	cbz	r0, 8008b1a <__gethex+0x1da>
 8008aea:	f108 33ff 	add.w	r3, r8, #4294967295
 8008aee:	1159      	asrs	r1, r3, #5
 8008af0:	f003 021f 	and.w	r2, r3, #31
 8008af4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008af8:	f04f 0b01 	mov.w	fp, #1
 8008afc:	fa0b f202 	lsl.w	r2, fp, r2
 8008b00:	420a      	tst	r2, r1
 8008b02:	d00a      	beq.n	8008b1a <__gethex+0x1da>
 8008b04:	455b      	cmp	r3, fp
 8008b06:	dd06      	ble.n	8008b16 <__gethex+0x1d6>
 8008b08:	f1a8 0102 	sub.w	r1, r8, #2
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	f7fe fd69 	bl	80075e4 <__any_on>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d138      	bne.n	8008b88 <__gethex+0x248>
 8008b16:	f04f 0b02 	mov.w	fp, #2
 8008b1a:	4641      	mov	r1, r8
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f7ff fea7 	bl	8008870 <rshift>
 8008b22:	4446      	add	r6, r8
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	42b3      	cmp	r3, r6
 8008b28:	da41      	bge.n	8008bae <__gethex+0x26e>
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	4648      	mov	r0, r9
 8008b2e:	f7fe f90d 	bl	8006d4c <_Bfree>
 8008b32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b34:	2300      	movs	r3, #0
 8008b36:	6013      	str	r3, [r2, #0]
 8008b38:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008b3c:	e78a      	b.n	8008a54 <__gethex+0x114>
 8008b3e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008b42:	2a2e      	cmp	r2, #46	; 0x2e
 8008b44:	d014      	beq.n	8008b70 <__gethex+0x230>
 8008b46:	2b20      	cmp	r3, #32
 8008b48:	d106      	bne.n	8008b58 <__gethex+0x218>
 8008b4a:	9b01      	ldr	r3, [sp, #4]
 8008b4c:	f843 bb04 	str.w	fp, [r3], #4
 8008b50:	f04f 0b00 	mov.w	fp, #0
 8008b54:	9301      	str	r3, [sp, #4]
 8008b56:	465b      	mov	r3, fp
 8008b58:	7828      	ldrb	r0, [r5, #0]
 8008b5a:	9303      	str	r3, [sp, #12]
 8008b5c:	f7ff feda 	bl	8008914 <__hexdig_fun>
 8008b60:	9b03      	ldr	r3, [sp, #12]
 8008b62:	f000 000f 	and.w	r0, r0, #15
 8008b66:	4098      	lsls	r0, r3
 8008b68:	ea4b 0b00 	orr.w	fp, fp, r0
 8008b6c:	3304      	adds	r3, #4
 8008b6e:	e7a1      	b.n	8008ab4 <__gethex+0x174>
 8008b70:	45a8      	cmp	r8, r5
 8008b72:	d8e8      	bhi.n	8008b46 <__gethex+0x206>
 8008b74:	2201      	movs	r2, #1
 8008b76:	4628      	mov	r0, r5
 8008b78:	9303      	str	r3, [sp, #12]
 8008b7a:	f7ff fe0b 	bl	8008794 <strncmp>
 8008b7e:	4926      	ldr	r1, [pc, #152]	; (8008c18 <__gethex+0x2d8>)
 8008b80:	9b03      	ldr	r3, [sp, #12]
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d1df      	bne.n	8008b46 <__gethex+0x206>
 8008b86:	e795      	b.n	8008ab4 <__gethex+0x174>
 8008b88:	f04f 0b03 	mov.w	fp, #3
 8008b8c:	e7c5      	b.n	8008b1a <__gethex+0x1da>
 8008b8e:	da0b      	bge.n	8008ba8 <__gethex+0x268>
 8008b90:	eba5 0800 	sub.w	r8, r5, r0
 8008b94:	4621      	mov	r1, r4
 8008b96:	4642      	mov	r2, r8
 8008b98:	4648      	mov	r0, r9
 8008b9a:	f7fe faf1 	bl	8007180 <__lshift>
 8008b9e:	eba6 0608 	sub.w	r6, r6, r8
 8008ba2:	4604      	mov	r4, r0
 8008ba4:	f100 0a14 	add.w	sl, r0, #20
 8008ba8:	f04f 0b00 	mov.w	fp, #0
 8008bac:	e7ba      	b.n	8008b24 <__gethex+0x1e4>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	42b3      	cmp	r3, r6
 8008bb2:	dd73      	ble.n	8008c9c <__gethex+0x35c>
 8008bb4:	1b9e      	subs	r6, r3, r6
 8008bb6:	42b5      	cmp	r5, r6
 8008bb8:	dc34      	bgt.n	8008c24 <__gethex+0x2e4>
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d023      	beq.n	8008c08 <__gethex+0x2c8>
 8008bc0:	2b03      	cmp	r3, #3
 8008bc2:	d025      	beq.n	8008c10 <__gethex+0x2d0>
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d115      	bne.n	8008bf4 <__gethex+0x2b4>
 8008bc8:	42b5      	cmp	r5, r6
 8008bca:	d113      	bne.n	8008bf4 <__gethex+0x2b4>
 8008bcc:	2d01      	cmp	r5, #1
 8008bce:	d10b      	bne.n	8008be8 <__gethex+0x2a8>
 8008bd0:	9a02      	ldr	r2, [sp, #8]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6013      	str	r3, [r2, #0]
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	6123      	str	r3, [r4, #16]
 8008bda:	f8ca 3000 	str.w	r3, [sl]
 8008bde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008be0:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008be4:	601c      	str	r4, [r3, #0]
 8008be6:	e735      	b.n	8008a54 <__gethex+0x114>
 8008be8:	1e69      	subs	r1, r5, #1
 8008bea:	4620      	mov	r0, r4
 8008bec:	f7fe fcfa 	bl	80075e4 <__any_on>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	d1ed      	bne.n	8008bd0 <__gethex+0x290>
 8008bf4:	4621      	mov	r1, r4
 8008bf6:	4648      	mov	r0, r9
 8008bf8:	f7fe f8a8 	bl	8006d4c <_Bfree>
 8008bfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bfe:	2300      	movs	r3, #0
 8008c00:	6013      	str	r3, [r2, #0]
 8008c02:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008c06:	e725      	b.n	8008a54 <__gethex+0x114>
 8008c08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1f2      	bne.n	8008bf4 <__gethex+0x2b4>
 8008c0e:	e7df      	b.n	8008bd0 <__gethex+0x290>
 8008c10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1dc      	bne.n	8008bd0 <__gethex+0x290>
 8008c16:	e7ed      	b.n	8008bf4 <__gethex+0x2b4>
 8008c18:	080097a4 	.word	0x080097a4
 8008c1c:	0800963d 	.word	0x0800963d
 8008c20:	0800994e 	.word	0x0800994e
 8008c24:	f106 38ff 	add.w	r8, r6, #4294967295
 8008c28:	f1bb 0f00 	cmp.w	fp, #0
 8008c2c:	d133      	bne.n	8008c96 <__gethex+0x356>
 8008c2e:	f1b8 0f00 	cmp.w	r8, #0
 8008c32:	d004      	beq.n	8008c3e <__gethex+0x2fe>
 8008c34:	4641      	mov	r1, r8
 8008c36:	4620      	mov	r0, r4
 8008c38:	f7fe fcd4 	bl	80075e4 <__any_on>
 8008c3c:	4683      	mov	fp, r0
 8008c3e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008c42:	2301      	movs	r3, #1
 8008c44:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008c48:	f008 081f 	and.w	r8, r8, #31
 8008c4c:	fa03 f308 	lsl.w	r3, r3, r8
 8008c50:	4213      	tst	r3, r2
 8008c52:	4631      	mov	r1, r6
 8008c54:	4620      	mov	r0, r4
 8008c56:	bf18      	it	ne
 8008c58:	f04b 0b02 	orrne.w	fp, fp, #2
 8008c5c:	1bad      	subs	r5, r5, r6
 8008c5e:	f7ff fe07 	bl	8008870 <rshift>
 8008c62:	687e      	ldr	r6, [r7, #4]
 8008c64:	f04f 0802 	mov.w	r8, #2
 8008c68:	f1bb 0f00 	cmp.w	fp, #0
 8008c6c:	d04a      	beq.n	8008d04 <__gethex+0x3c4>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d016      	beq.n	8008ca2 <__gethex+0x362>
 8008c74:	2b03      	cmp	r3, #3
 8008c76:	d018      	beq.n	8008caa <__gethex+0x36a>
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d109      	bne.n	8008c90 <__gethex+0x350>
 8008c7c:	f01b 0f02 	tst.w	fp, #2
 8008c80:	d006      	beq.n	8008c90 <__gethex+0x350>
 8008c82:	f8da 3000 	ldr.w	r3, [sl]
 8008c86:	ea4b 0b03 	orr.w	fp, fp, r3
 8008c8a:	f01b 0f01 	tst.w	fp, #1
 8008c8e:	d10f      	bne.n	8008cb0 <__gethex+0x370>
 8008c90:	f048 0810 	orr.w	r8, r8, #16
 8008c94:	e036      	b.n	8008d04 <__gethex+0x3c4>
 8008c96:	f04f 0b01 	mov.w	fp, #1
 8008c9a:	e7d0      	b.n	8008c3e <__gethex+0x2fe>
 8008c9c:	f04f 0801 	mov.w	r8, #1
 8008ca0:	e7e2      	b.n	8008c68 <__gethex+0x328>
 8008ca2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ca4:	f1c3 0301 	rsb	r3, r3, #1
 8008ca8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008caa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d0ef      	beq.n	8008c90 <__gethex+0x350>
 8008cb0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008cb4:	f104 0214 	add.w	r2, r4, #20
 8008cb8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008cbc:	9301      	str	r3, [sp, #4]
 8008cbe:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	4694      	mov	ip, r2
 8008cc6:	f852 1b04 	ldr.w	r1, [r2], #4
 8008cca:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008cce:	d01e      	beq.n	8008d0e <__gethex+0x3ce>
 8008cd0:	3101      	adds	r1, #1
 8008cd2:	f8cc 1000 	str.w	r1, [ip]
 8008cd6:	f1b8 0f02 	cmp.w	r8, #2
 8008cda:	f104 0214 	add.w	r2, r4, #20
 8008cde:	d13d      	bne.n	8008d5c <__gethex+0x41c>
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	42ab      	cmp	r3, r5
 8008ce6:	d10b      	bne.n	8008d00 <__gethex+0x3c0>
 8008ce8:	1169      	asrs	r1, r5, #5
 8008cea:	2301      	movs	r3, #1
 8008cec:	f005 051f 	and.w	r5, r5, #31
 8008cf0:	fa03 f505 	lsl.w	r5, r3, r5
 8008cf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008cf8:	421d      	tst	r5, r3
 8008cfa:	bf18      	it	ne
 8008cfc:	f04f 0801 	movne.w	r8, #1
 8008d00:	f048 0820 	orr.w	r8, r8, #32
 8008d04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d06:	601c      	str	r4, [r3, #0]
 8008d08:	9b02      	ldr	r3, [sp, #8]
 8008d0a:	601e      	str	r6, [r3, #0]
 8008d0c:	e6a2      	b.n	8008a54 <__gethex+0x114>
 8008d0e:	4290      	cmp	r0, r2
 8008d10:	f842 3c04 	str.w	r3, [r2, #-4]
 8008d14:	d8d6      	bhi.n	8008cc4 <__gethex+0x384>
 8008d16:	68a2      	ldr	r2, [r4, #8]
 8008d18:	4593      	cmp	fp, r2
 8008d1a:	db17      	blt.n	8008d4c <__gethex+0x40c>
 8008d1c:	6861      	ldr	r1, [r4, #4]
 8008d1e:	4648      	mov	r0, r9
 8008d20:	3101      	adds	r1, #1
 8008d22:	f7fd ffd3 	bl	8006ccc <_Balloc>
 8008d26:	4682      	mov	sl, r0
 8008d28:	b918      	cbnz	r0, 8008d32 <__gethex+0x3f2>
 8008d2a:	4b1b      	ldr	r3, [pc, #108]	; (8008d98 <__gethex+0x458>)
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	2184      	movs	r1, #132	; 0x84
 8008d30:	e6b3      	b.n	8008a9a <__gethex+0x15a>
 8008d32:	6922      	ldr	r2, [r4, #16]
 8008d34:	3202      	adds	r2, #2
 8008d36:	f104 010c 	add.w	r1, r4, #12
 8008d3a:	0092      	lsls	r2, r2, #2
 8008d3c:	300c      	adds	r0, #12
 8008d3e:	f7ff fd4b 	bl	80087d8 <memcpy>
 8008d42:	4621      	mov	r1, r4
 8008d44:	4648      	mov	r0, r9
 8008d46:	f7fe f801 	bl	8006d4c <_Bfree>
 8008d4a:	4654      	mov	r4, sl
 8008d4c:	6922      	ldr	r2, [r4, #16]
 8008d4e:	1c51      	adds	r1, r2, #1
 8008d50:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008d54:	6121      	str	r1, [r4, #16]
 8008d56:	2101      	movs	r1, #1
 8008d58:	6151      	str	r1, [r2, #20]
 8008d5a:	e7bc      	b.n	8008cd6 <__gethex+0x396>
 8008d5c:	6921      	ldr	r1, [r4, #16]
 8008d5e:	4559      	cmp	r1, fp
 8008d60:	dd0b      	ble.n	8008d7a <__gethex+0x43a>
 8008d62:	2101      	movs	r1, #1
 8008d64:	4620      	mov	r0, r4
 8008d66:	f7ff fd83 	bl	8008870 <rshift>
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	3601      	adds	r6, #1
 8008d6e:	42b3      	cmp	r3, r6
 8008d70:	f6ff aedb 	blt.w	8008b2a <__gethex+0x1ea>
 8008d74:	f04f 0801 	mov.w	r8, #1
 8008d78:	e7c2      	b.n	8008d00 <__gethex+0x3c0>
 8008d7a:	f015 051f 	ands.w	r5, r5, #31
 8008d7e:	d0f9      	beq.n	8008d74 <__gethex+0x434>
 8008d80:	9b01      	ldr	r3, [sp, #4]
 8008d82:	441a      	add	r2, r3
 8008d84:	f1c5 0520 	rsb	r5, r5, #32
 8008d88:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008d8c:	f7fe f890 	bl	8006eb0 <__hi0bits>
 8008d90:	42a8      	cmp	r0, r5
 8008d92:	dbe6      	blt.n	8008d62 <__gethex+0x422>
 8008d94:	e7ee      	b.n	8008d74 <__gethex+0x434>
 8008d96:	bf00      	nop
 8008d98:	0800963d 	.word	0x0800963d

08008d9c <L_shift>:
 8008d9c:	f1c2 0208 	rsb	r2, r2, #8
 8008da0:	0092      	lsls	r2, r2, #2
 8008da2:	b570      	push	{r4, r5, r6, lr}
 8008da4:	f1c2 0620 	rsb	r6, r2, #32
 8008da8:	6843      	ldr	r3, [r0, #4]
 8008daa:	6804      	ldr	r4, [r0, #0]
 8008dac:	fa03 f506 	lsl.w	r5, r3, r6
 8008db0:	432c      	orrs	r4, r5
 8008db2:	40d3      	lsrs	r3, r2
 8008db4:	6004      	str	r4, [r0, #0]
 8008db6:	f840 3f04 	str.w	r3, [r0, #4]!
 8008dba:	4288      	cmp	r0, r1
 8008dbc:	d3f4      	bcc.n	8008da8 <L_shift+0xc>
 8008dbe:	bd70      	pop	{r4, r5, r6, pc}

08008dc0 <__match>:
 8008dc0:	b530      	push	{r4, r5, lr}
 8008dc2:	6803      	ldr	r3, [r0, #0]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dca:	b914      	cbnz	r4, 8008dd2 <__match+0x12>
 8008dcc:	6003      	str	r3, [r0, #0]
 8008dce:	2001      	movs	r0, #1
 8008dd0:	bd30      	pop	{r4, r5, pc}
 8008dd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dd6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008dda:	2d19      	cmp	r5, #25
 8008ddc:	bf98      	it	ls
 8008dde:	3220      	addls	r2, #32
 8008de0:	42a2      	cmp	r2, r4
 8008de2:	d0f0      	beq.n	8008dc6 <__match+0x6>
 8008de4:	2000      	movs	r0, #0
 8008de6:	e7f3      	b.n	8008dd0 <__match+0x10>

08008de8 <__hexnan>:
 8008de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dec:	680b      	ldr	r3, [r1, #0]
 8008dee:	6801      	ldr	r1, [r0, #0]
 8008df0:	115e      	asrs	r6, r3, #5
 8008df2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008df6:	f013 031f 	ands.w	r3, r3, #31
 8008dfa:	b087      	sub	sp, #28
 8008dfc:	bf18      	it	ne
 8008dfe:	3604      	addne	r6, #4
 8008e00:	2500      	movs	r5, #0
 8008e02:	1f37      	subs	r7, r6, #4
 8008e04:	4682      	mov	sl, r0
 8008e06:	4690      	mov	r8, r2
 8008e08:	9301      	str	r3, [sp, #4]
 8008e0a:	f846 5c04 	str.w	r5, [r6, #-4]
 8008e0e:	46b9      	mov	r9, r7
 8008e10:	463c      	mov	r4, r7
 8008e12:	9502      	str	r5, [sp, #8]
 8008e14:	46ab      	mov	fp, r5
 8008e16:	784a      	ldrb	r2, [r1, #1]
 8008e18:	1c4b      	adds	r3, r1, #1
 8008e1a:	9303      	str	r3, [sp, #12]
 8008e1c:	b342      	cbz	r2, 8008e70 <__hexnan+0x88>
 8008e1e:	4610      	mov	r0, r2
 8008e20:	9105      	str	r1, [sp, #20]
 8008e22:	9204      	str	r2, [sp, #16]
 8008e24:	f7ff fd76 	bl	8008914 <__hexdig_fun>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	d14f      	bne.n	8008ecc <__hexnan+0xe4>
 8008e2c:	9a04      	ldr	r2, [sp, #16]
 8008e2e:	9905      	ldr	r1, [sp, #20]
 8008e30:	2a20      	cmp	r2, #32
 8008e32:	d818      	bhi.n	8008e66 <__hexnan+0x7e>
 8008e34:	9b02      	ldr	r3, [sp, #8]
 8008e36:	459b      	cmp	fp, r3
 8008e38:	dd13      	ble.n	8008e62 <__hexnan+0x7a>
 8008e3a:	454c      	cmp	r4, r9
 8008e3c:	d206      	bcs.n	8008e4c <__hexnan+0x64>
 8008e3e:	2d07      	cmp	r5, #7
 8008e40:	dc04      	bgt.n	8008e4c <__hexnan+0x64>
 8008e42:	462a      	mov	r2, r5
 8008e44:	4649      	mov	r1, r9
 8008e46:	4620      	mov	r0, r4
 8008e48:	f7ff ffa8 	bl	8008d9c <L_shift>
 8008e4c:	4544      	cmp	r4, r8
 8008e4e:	d950      	bls.n	8008ef2 <__hexnan+0x10a>
 8008e50:	2300      	movs	r3, #0
 8008e52:	f1a4 0904 	sub.w	r9, r4, #4
 8008e56:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e5a:	f8cd b008 	str.w	fp, [sp, #8]
 8008e5e:	464c      	mov	r4, r9
 8008e60:	461d      	mov	r5, r3
 8008e62:	9903      	ldr	r1, [sp, #12]
 8008e64:	e7d7      	b.n	8008e16 <__hexnan+0x2e>
 8008e66:	2a29      	cmp	r2, #41	; 0x29
 8008e68:	d155      	bne.n	8008f16 <__hexnan+0x12e>
 8008e6a:	3102      	adds	r1, #2
 8008e6c:	f8ca 1000 	str.w	r1, [sl]
 8008e70:	f1bb 0f00 	cmp.w	fp, #0
 8008e74:	d04f      	beq.n	8008f16 <__hexnan+0x12e>
 8008e76:	454c      	cmp	r4, r9
 8008e78:	d206      	bcs.n	8008e88 <__hexnan+0xa0>
 8008e7a:	2d07      	cmp	r5, #7
 8008e7c:	dc04      	bgt.n	8008e88 <__hexnan+0xa0>
 8008e7e:	462a      	mov	r2, r5
 8008e80:	4649      	mov	r1, r9
 8008e82:	4620      	mov	r0, r4
 8008e84:	f7ff ff8a 	bl	8008d9c <L_shift>
 8008e88:	4544      	cmp	r4, r8
 8008e8a:	d934      	bls.n	8008ef6 <__hexnan+0x10e>
 8008e8c:	f1a8 0204 	sub.w	r2, r8, #4
 8008e90:	4623      	mov	r3, r4
 8008e92:	f853 1b04 	ldr.w	r1, [r3], #4
 8008e96:	f842 1f04 	str.w	r1, [r2, #4]!
 8008e9a:	429f      	cmp	r7, r3
 8008e9c:	d2f9      	bcs.n	8008e92 <__hexnan+0xaa>
 8008e9e:	1b3b      	subs	r3, r7, r4
 8008ea0:	f023 0303 	bic.w	r3, r3, #3
 8008ea4:	3304      	adds	r3, #4
 8008ea6:	3e03      	subs	r6, #3
 8008ea8:	3401      	adds	r4, #1
 8008eaa:	42a6      	cmp	r6, r4
 8008eac:	bf38      	it	cc
 8008eae:	2304      	movcc	r3, #4
 8008eb0:	4443      	add	r3, r8
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f843 2b04 	str.w	r2, [r3], #4
 8008eb8:	429f      	cmp	r7, r3
 8008eba:	d2fb      	bcs.n	8008eb4 <__hexnan+0xcc>
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	b91b      	cbnz	r3, 8008ec8 <__hexnan+0xe0>
 8008ec0:	4547      	cmp	r7, r8
 8008ec2:	d126      	bne.n	8008f12 <__hexnan+0x12a>
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	603b      	str	r3, [r7, #0]
 8008ec8:	2005      	movs	r0, #5
 8008eca:	e025      	b.n	8008f18 <__hexnan+0x130>
 8008ecc:	3501      	adds	r5, #1
 8008ece:	2d08      	cmp	r5, #8
 8008ed0:	f10b 0b01 	add.w	fp, fp, #1
 8008ed4:	dd06      	ble.n	8008ee4 <__hexnan+0xfc>
 8008ed6:	4544      	cmp	r4, r8
 8008ed8:	d9c3      	bls.n	8008e62 <__hexnan+0x7a>
 8008eda:	2300      	movs	r3, #0
 8008edc:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ee0:	2501      	movs	r5, #1
 8008ee2:	3c04      	subs	r4, #4
 8008ee4:	6822      	ldr	r2, [r4, #0]
 8008ee6:	f000 000f 	and.w	r0, r0, #15
 8008eea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008eee:	6020      	str	r0, [r4, #0]
 8008ef0:	e7b7      	b.n	8008e62 <__hexnan+0x7a>
 8008ef2:	2508      	movs	r5, #8
 8008ef4:	e7b5      	b.n	8008e62 <__hexnan+0x7a>
 8008ef6:	9b01      	ldr	r3, [sp, #4]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d0df      	beq.n	8008ebc <__hexnan+0xd4>
 8008efc:	f1c3 0320 	rsb	r3, r3, #32
 8008f00:	f04f 32ff 	mov.w	r2, #4294967295
 8008f04:	40da      	lsrs	r2, r3
 8008f06:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008f10:	e7d4      	b.n	8008ebc <__hexnan+0xd4>
 8008f12:	3f04      	subs	r7, #4
 8008f14:	e7d2      	b.n	8008ebc <__hexnan+0xd4>
 8008f16:	2004      	movs	r0, #4
 8008f18:	b007      	add	sp, #28
 8008f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f1e <__ascii_mbtowc>:
 8008f1e:	b082      	sub	sp, #8
 8008f20:	b901      	cbnz	r1, 8008f24 <__ascii_mbtowc+0x6>
 8008f22:	a901      	add	r1, sp, #4
 8008f24:	b142      	cbz	r2, 8008f38 <__ascii_mbtowc+0x1a>
 8008f26:	b14b      	cbz	r3, 8008f3c <__ascii_mbtowc+0x1e>
 8008f28:	7813      	ldrb	r3, [r2, #0]
 8008f2a:	600b      	str	r3, [r1, #0]
 8008f2c:	7812      	ldrb	r2, [r2, #0]
 8008f2e:	1e10      	subs	r0, r2, #0
 8008f30:	bf18      	it	ne
 8008f32:	2001      	movne	r0, #1
 8008f34:	b002      	add	sp, #8
 8008f36:	4770      	bx	lr
 8008f38:	4610      	mov	r0, r2
 8008f3a:	e7fb      	b.n	8008f34 <__ascii_mbtowc+0x16>
 8008f3c:	f06f 0001 	mvn.w	r0, #1
 8008f40:	e7f8      	b.n	8008f34 <__ascii_mbtowc+0x16>

08008f42 <_realloc_r>:
 8008f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f46:	4680      	mov	r8, r0
 8008f48:	4614      	mov	r4, r2
 8008f4a:	460e      	mov	r6, r1
 8008f4c:	b921      	cbnz	r1, 8008f58 <_realloc_r+0x16>
 8008f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f52:	4611      	mov	r1, r2
 8008f54:	f7fd be2e 	b.w	8006bb4 <_malloc_r>
 8008f58:	b92a      	cbnz	r2, 8008f66 <_realloc_r+0x24>
 8008f5a:	f7fd fdb7 	bl	8006acc <_free_r>
 8008f5e:	4625      	mov	r5, r4
 8008f60:	4628      	mov	r0, r5
 8008f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f66:	f000 f842 	bl	8008fee <_malloc_usable_size_r>
 8008f6a:	4284      	cmp	r4, r0
 8008f6c:	4607      	mov	r7, r0
 8008f6e:	d802      	bhi.n	8008f76 <_realloc_r+0x34>
 8008f70:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f74:	d812      	bhi.n	8008f9c <_realloc_r+0x5a>
 8008f76:	4621      	mov	r1, r4
 8008f78:	4640      	mov	r0, r8
 8008f7a:	f7fd fe1b 	bl	8006bb4 <_malloc_r>
 8008f7e:	4605      	mov	r5, r0
 8008f80:	2800      	cmp	r0, #0
 8008f82:	d0ed      	beq.n	8008f60 <_realloc_r+0x1e>
 8008f84:	42bc      	cmp	r4, r7
 8008f86:	4622      	mov	r2, r4
 8008f88:	4631      	mov	r1, r6
 8008f8a:	bf28      	it	cs
 8008f8c:	463a      	movcs	r2, r7
 8008f8e:	f7ff fc23 	bl	80087d8 <memcpy>
 8008f92:	4631      	mov	r1, r6
 8008f94:	4640      	mov	r0, r8
 8008f96:	f7fd fd99 	bl	8006acc <_free_r>
 8008f9a:	e7e1      	b.n	8008f60 <_realloc_r+0x1e>
 8008f9c:	4635      	mov	r5, r6
 8008f9e:	e7df      	b.n	8008f60 <_realloc_r+0x1e>

08008fa0 <__ascii_wctomb>:
 8008fa0:	b149      	cbz	r1, 8008fb6 <__ascii_wctomb+0x16>
 8008fa2:	2aff      	cmp	r2, #255	; 0xff
 8008fa4:	bf85      	ittet	hi
 8008fa6:	238a      	movhi	r3, #138	; 0x8a
 8008fa8:	6003      	strhi	r3, [r0, #0]
 8008faa:	700a      	strbls	r2, [r1, #0]
 8008fac:	f04f 30ff 	movhi.w	r0, #4294967295
 8008fb0:	bf98      	it	ls
 8008fb2:	2001      	movls	r0, #1
 8008fb4:	4770      	bx	lr
 8008fb6:	4608      	mov	r0, r1
 8008fb8:	4770      	bx	lr
	...

08008fbc <fiprintf>:
 8008fbc:	b40e      	push	{r1, r2, r3}
 8008fbe:	b503      	push	{r0, r1, lr}
 8008fc0:	4601      	mov	r1, r0
 8008fc2:	ab03      	add	r3, sp, #12
 8008fc4:	4805      	ldr	r0, [pc, #20]	; (8008fdc <fiprintf+0x20>)
 8008fc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fca:	6800      	ldr	r0, [r0, #0]
 8008fcc:	9301      	str	r3, [sp, #4]
 8008fce:	f000 f83f 	bl	8009050 <_vfiprintf_r>
 8008fd2:	b002      	add	sp, #8
 8008fd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fd8:	b003      	add	sp, #12
 8008fda:	4770      	bx	lr
 8008fdc:	200001f4 	.word	0x200001f4

08008fe0 <abort>:
 8008fe0:	b508      	push	{r3, lr}
 8008fe2:	2006      	movs	r0, #6
 8008fe4:	f000 fa0c 	bl	8009400 <raise>
 8008fe8:	2001      	movs	r0, #1
 8008fea:	f7f8 fd89 	bl	8001b00 <_exit>

08008fee <_malloc_usable_size_r>:
 8008fee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ff2:	1f18      	subs	r0, r3, #4
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	bfbc      	itt	lt
 8008ff8:	580b      	ldrlt	r3, [r1, r0]
 8008ffa:	18c0      	addlt	r0, r0, r3
 8008ffc:	4770      	bx	lr

08008ffe <__sfputc_r>:
 8008ffe:	6893      	ldr	r3, [r2, #8]
 8009000:	3b01      	subs	r3, #1
 8009002:	2b00      	cmp	r3, #0
 8009004:	b410      	push	{r4}
 8009006:	6093      	str	r3, [r2, #8]
 8009008:	da08      	bge.n	800901c <__sfputc_r+0x1e>
 800900a:	6994      	ldr	r4, [r2, #24]
 800900c:	42a3      	cmp	r3, r4
 800900e:	db01      	blt.n	8009014 <__sfputc_r+0x16>
 8009010:	290a      	cmp	r1, #10
 8009012:	d103      	bne.n	800901c <__sfputc_r+0x1e>
 8009014:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009018:	f000 b934 	b.w	8009284 <__swbuf_r>
 800901c:	6813      	ldr	r3, [r2, #0]
 800901e:	1c58      	adds	r0, r3, #1
 8009020:	6010      	str	r0, [r2, #0]
 8009022:	7019      	strb	r1, [r3, #0]
 8009024:	4608      	mov	r0, r1
 8009026:	f85d 4b04 	ldr.w	r4, [sp], #4
 800902a:	4770      	bx	lr

0800902c <__sfputs_r>:
 800902c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902e:	4606      	mov	r6, r0
 8009030:	460f      	mov	r7, r1
 8009032:	4614      	mov	r4, r2
 8009034:	18d5      	adds	r5, r2, r3
 8009036:	42ac      	cmp	r4, r5
 8009038:	d101      	bne.n	800903e <__sfputs_r+0x12>
 800903a:	2000      	movs	r0, #0
 800903c:	e007      	b.n	800904e <__sfputs_r+0x22>
 800903e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009042:	463a      	mov	r2, r7
 8009044:	4630      	mov	r0, r6
 8009046:	f7ff ffda 	bl	8008ffe <__sfputc_r>
 800904a:	1c43      	adds	r3, r0, #1
 800904c:	d1f3      	bne.n	8009036 <__sfputs_r+0xa>
 800904e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009050 <_vfiprintf_r>:
 8009050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009054:	460d      	mov	r5, r1
 8009056:	b09d      	sub	sp, #116	; 0x74
 8009058:	4614      	mov	r4, r2
 800905a:	4698      	mov	r8, r3
 800905c:	4606      	mov	r6, r0
 800905e:	b118      	cbz	r0, 8009068 <_vfiprintf_r+0x18>
 8009060:	6a03      	ldr	r3, [r0, #32]
 8009062:	b90b      	cbnz	r3, 8009068 <_vfiprintf_r+0x18>
 8009064:	f7fc fd96 	bl	8005b94 <__sinit>
 8009068:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800906a:	07d9      	lsls	r1, r3, #31
 800906c:	d405      	bmi.n	800907a <_vfiprintf_r+0x2a>
 800906e:	89ab      	ldrh	r3, [r5, #12]
 8009070:	059a      	lsls	r2, r3, #22
 8009072:	d402      	bmi.n	800907a <_vfiprintf_r+0x2a>
 8009074:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009076:	f7fc fea4 	bl	8005dc2 <__retarget_lock_acquire_recursive>
 800907a:	89ab      	ldrh	r3, [r5, #12]
 800907c:	071b      	lsls	r3, r3, #28
 800907e:	d501      	bpl.n	8009084 <_vfiprintf_r+0x34>
 8009080:	692b      	ldr	r3, [r5, #16]
 8009082:	b99b      	cbnz	r3, 80090ac <_vfiprintf_r+0x5c>
 8009084:	4629      	mov	r1, r5
 8009086:	4630      	mov	r0, r6
 8009088:	f000 f93a 	bl	8009300 <__swsetup_r>
 800908c:	b170      	cbz	r0, 80090ac <_vfiprintf_r+0x5c>
 800908e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009090:	07dc      	lsls	r4, r3, #31
 8009092:	d504      	bpl.n	800909e <_vfiprintf_r+0x4e>
 8009094:	f04f 30ff 	mov.w	r0, #4294967295
 8009098:	b01d      	add	sp, #116	; 0x74
 800909a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800909e:	89ab      	ldrh	r3, [r5, #12]
 80090a0:	0598      	lsls	r0, r3, #22
 80090a2:	d4f7      	bmi.n	8009094 <_vfiprintf_r+0x44>
 80090a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090a6:	f7fc fe8d 	bl	8005dc4 <__retarget_lock_release_recursive>
 80090aa:	e7f3      	b.n	8009094 <_vfiprintf_r+0x44>
 80090ac:	2300      	movs	r3, #0
 80090ae:	9309      	str	r3, [sp, #36]	; 0x24
 80090b0:	2320      	movs	r3, #32
 80090b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80090ba:	2330      	movs	r3, #48	; 0x30
 80090bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009270 <_vfiprintf_r+0x220>
 80090c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090c4:	f04f 0901 	mov.w	r9, #1
 80090c8:	4623      	mov	r3, r4
 80090ca:	469a      	mov	sl, r3
 80090cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090d0:	b10a      	cbz	r2, 80090d6 <_vfiprintf_r+0x86>
 80090d2:	2a25      	cmp	r2, #37	; 0x25
 80090d4:	d1f9      	bne.n	80090ca <_vfiprintf_r+0x7a>
 80090d6:	ebba 0b04 	subs.w	fp, sl, r4
 80090da:	d00b      	beq.n	80090f4 <_vfiprintf_r+0xa4>
 80090dc:	465b      	mov	r3, fp
 80090de:	4622      	mov	r2, r4
 80090e0:	4629      	mov	r1, r5
 80090e2:	4630      	mov	r0, r6
 80090e4:	f7ff ffa2 	bl	800902c <__sfputs_r>
 80090e8:	3001      	adds	r0, #1
 80090ea:	f000 80a9 	beq.w	8009240 <_vfiprintf_r+0x1f0>
 80090ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090f0:	445a      	add	r2, fp
 80090f2:	9209      	str	r2, [sp, #36]	; 0x24
 80090f4:	f89a 3000 	ldrb.w	r3, [sl]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f000 80a1 	beq.w	8009240 <_vfiprintf_r+0x1f0>
 80090fe:	2300      	movs	r3, #0
 8009100:	f04f 32ff 	mov.w	r2, #4294967295
 8009104:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009108:	f10a 0a01 	add.w	sl, sl, #1
 800910c:	9304      	str	r3, [sp, #16]
 800910e:	9307      	str	r3, [sp, #28]
 8009110:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009114:	931a      	str	r3, [sp, #104]	; 0x68
 8009116:	4654      	mov	r4, sl
 8009118:	2205      	movs	r2, #5
 800911a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800911e:	4854      	ldr	r0, [pc, #336]	; (8009270 <_vfiprintf_r+0x220>)
 8009120:	f7f7 f856 	bl	80001d0 <memchr>
 8009124:	9a04      	ldr	r2, [sp, #16]
 8009126:	b9d8      	cbnz	r0, 8009160 <_vfiprintf_r+0x110>
 8009128:	06d1      	lsls	r1, r2, #27
 800912a:	bf44      	itt	mi
 800912c:	2320      	movmi	r3, #32
 800912e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009132:	0713      	lsls	r3, r2, #28
 8009134:	bf44      	itt	mi
 8009136:	232b      	movmi	r3, #43	; 0x2b
 8009138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800913c:	f89a 3000 	ldrb.w	r3, [sl]
 8009140:	2b2a      	cmp	r3, #42	; 0x2a
 8009142:	d015      	beq.n	8009170 <_vfiprintf_r+0x120>
 8009144:	9a07      	ldr	r2, [sp, #28]
 8009146:	4654      	mov	r4, sl
 8009148:	2000      	movs	r0, #0
 800914a:	f04f 0c0a 	mov.w	ip, #10
 800914e:	4621      	mov	r1, r4
 8009150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009154:	3b30      	subs	r3, #48	; 0x30
 8009156:	2b09      	cmp	r3, #9
 8009158:	d94d      	bls.n	80091f6 <_vfiprintf_r+0x1a6>
 800915a:	b1b0      	cbz	r0, 800918a <_vfiprintf_r+0x13a>
 800915c:	9207      	str	r2, [sp, #28]
 800915e:	e014      	b.n	800918a <_vfiprintf_r+0x13a>
 8009160:	eba0 0308 	sub.w	r3, r0, r8
 8009164:	fa09 f303 	lsl.w	r3, r9, r3
 8009168:	4313      	orrs	r3, r2
 800916a:	9304      	str	r3, [sp, #16]
 800916c:	46a2      	mov	sl, r4
 800916e:	e7d2      	b.n	8009116 <_vfiprintf_r+0xc6>
 8009170:	9b03      	ldr	r3, [sp, #12]
 8009172:	1d19      	adds	r1, r3, #4
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	9103      	str	r1, [sp, #12]
 8009178:	2b00      	cmp	r3, #0
 800917a:	bfbb      	ittet	lt
 800917c:	425b      	neglt	r3, r3
 800917e:	f042 0202 	orrlt.w	r2, r2, #2
 8009182:	9307      	strge	r3, [sp, #28]
 8009184:	9307      	strlt	r3, [sp, #28]
 8009186:	bfb8      	it	lt
 8009188:	9204      	strlt	r2, [sp, #16]
 800918a:	7823      	ldrb	r3, [r4, #0]
 800918c:	2b2e      	cmp	r3, #46	; 0x2e
 800918e:	d10c      	bne.n	80091aa <_vfiprintf_r+0x15a>
 8009190:	7863      	ldrb	r3, [r4, #1]
 8009192:	2b2a      	cmp	r3, #42	; 0x2a
 8009194:	d134      	bne.n	8009200 <_vfiprintf_r+0x1b0>
 8009196:	9b03      	ldr	r3, [sp, #12]
 8009198:	1d1a      	adds	r2, r3, #4
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	9203      	str	r2, [sp, #12]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	bfb8      	it	lt
 80091a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80091a6:	3402      	adds	r4, #2
 80091a8:	9305      	str	r3, [sp, #20]
 80091aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009280 <_vfiprintf_r+0x230>
 80091ae:	7821      	ldrb	r1, [r4, #0]
 80091b0:	2203      	movs	r2, #3
 80091b2:	4650      	mov	r0, sl
 80091b4:	f7f7 f80c 	bl	80001d0 <memchr>
 80091b8:	b138      	cbz	r0, 80091ca <_vfiprintf_r+0x17a>
 80091ba:	9b04      	ldr	r3, [sp, #16]
 80091bc:	eba0 000a 	sub.w	r0, r0, sl
 80091c0:	2240      	movs	r2, #64	; 0x40
 80091c2:	4082      	lsls	r2, r0
 80091c4:	4313      	orrs	r3, r2
 80091c6:	3401      	adds	r4, #1
 80091c8:	9304      	str	r3, [sp, #16]
 80091ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ce:	4829      	ldr	r0, [pc, #164]	; (8009274 <_vfiprintf_r+0x224>)
 80091d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091d4:	2206      	movs	r2, #6
 80091d6:	f7f6 fffb 	bl	80001d0 <memchr>
 80091da:	2800      	cmp	r0, #0
 80091dc:	d03f      	beq.n	800925e <_vfiprintf_r+0x20e>
 80091de:	4b26      	ldr	r3, [pc, #152]	; (8009278 <_vfiprintf_r+0x228>)
 80091e0:	bb1b      	cbnz	r3, 800922a <_vfiprintf_r+0x1da>
 80091e2:	9b03      	ldr	r3, [sp, #12]
 80091e4:	3307      	adds	r3, #7
 80091e6:	f023 0307 	bic.w	r3, r3, #7
 80091ea:	3308      	adds	r3, #8
 80091ec:	9303      	str	r3, [sp, #12]
 80091ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091f0:	443b      	add	r3, r7
 80091f2:	9309      	str	r3, [sp, #36]	; 0x24
 80091f4:	e768      	b.n	80090c8 <_vfiprintf_r+0x78>
 80091f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80091fa:	460c      	mov	r4, r1
 80091fc:	2001      	movs	r0, #1
 80091fe:	e7a6      	b.n	800914e <_vfiprintf_r+0xfe>
 8009200:	2300      	movs	r3, #0
 8009202:	3401      	adds	r4, #1
 8009204:	9305      	str	r3, [sp, #20]
 8009206:	4619      	mov	r1, r3
 8009208:	f04f 0c0a 	mov.w	ip, #10
 800920c:	4620      	mov	r0, r4
 800920e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009212:	3a30      	subs	r2, #48	; 0x30
 8009214:	2a09      	cmp	r2, #9
 8009216:	d903      	bls.n	8009220 <_vfiprintf_r+0x1d0>
 8009218:	2b00      	cmp	r3, #0
 800921a:	d0c6      	beq.n	80091aa <_vfiprintf_r+0x15a>
 800921c:	9105      	str	r1, [sp, #20]
 800921e:	e7c4      	b.n	80091aa <_vfiprintf_r+0x15a>
 8009220:	fb0c 2101 	mla	r1, ip, r1, r2
 8009224:	4604      	mov	r4, r0
 8009226:	2301      	movs	r3, #1
 8009228:	e7f0      	b.n	800920c <_vfiprintf_r+0x1bc>
 800922a:	ab03      	add	r3, sp, #12
 800922c:	9300      	str	r3, [sp, #0]
 800922e:	462a      	mov	r2, r5
 8009230:	4b12      	ldr	r3, [pc, #72]	; (800927c <_vfiprintf_r+0x22c>)
 8009232:	a904      	add	r1, sp, #16
 8009234:	4630      	mov	r0, r6
 8009236:	f7fb fe4b 	bl	8004ed0 <_printf_float>
 800923a:	4607      	mov	r7, r0
 800923c:	1c78      	adds	r0, r7, #1
 800923e:	d1d6      	bne.n	80091ee <_vfiprintf_r+0x19e>
 8009240:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009242:	07d9      	lsls	r1, r3, #31
 8009244:	d405      	bmi.n	8009252 <_vfiprintf_r+0x202>
 8009246:	89ab      	ldrh	r3, [r5, #12]
 8009248:	059a      	lsls	r2, r3, #22
 800924a:	d402      	bmi.n	8009252 <_vfiprintf_r+0x202>
 800924c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800924e:	f7fc fdb9 	bl	8005dc4 <__retarget_lock_release_recursive>
 8009252:	89ab      	ldrh	r3, [r5, #12]
 8009254:	065b      	lsls	r3, r3, #25
 8009256:	f53f af1d 	bmi.w	8009094 <_vfiprintf_r+0x44>
 800925a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800925c:	e71c      	b.n	8009098 <_vfiprintf_r+0x48>
 800925e:	ab03      	add	r3, sp, #12
 8009260:	9300      	str	r3, [sp, #0]
 8009262:	462a      	mov	r2, r5
 8009264:	4b05      	ldr	r3, [pc, #20]	; (800927c <_vfiprintf_r+0x22c>)
 8009266:	a904      	add	r1, sp, #16
 8009268:	4630      	mov	r0, r6
 800926a:	f7fc f8d5 	bl	8005418 <_printf_i>
 800926e:	e7e4      	b.n	800923a <_vfiprintf_r+0x1ea>
 8009270:	080098f9 	.word	0x080098f9
 8009274:	08009903 	.word	0x08009903
 8009278:	08004ed1 	.word	0x08004ed1
 800927c:	0800902d 	.word	0x0800902d
 8009280:	080098ff 	.word	0x080098ff

08009284 <__swbuf_r>:
 8009284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009286:	460e      	mov	r6, r1
 8009288:	4614      	mov	r4, r2
 800928a:	4605      	mov	r5, r0
 800928c:	b118      	cbz	r0, 8009296 <__swbuf_r+0x12>
 800928e:	6a03      	ldr	r3, [r0, #32]
 8009290:	b90b      	cbnz	r3, 8009296 <__swbuf_r+0x12>
 8009292:	f7fc fc7f 	bl	8005b94 <__sinit>
 8009296:	69a3      	ldr	r3, [r4, #24]
 8009298:	60a3      	str	r3, [r4, #8]
 800929a:	89a3      	ldrh	r3, [r4, #12]
 800929c:	071a      	lsls	r2, r3, #28
 800929e:	d525      	bpl.n	80092ec <__swbuf_r+0x68>
 80092a0:	6923      	ldr	r3, [r4, #16]
 80092a2:	b31b      	cbz	r3, 80092ec <__swbuf_r+0x68>
 80092a4:	6823      	ldr	r3, [r4, #0]
 80092a6:	6922      	ldr	r2, [r4, #16]
 80092a8:	1a98      	subs	r0, r3, r2
 80092aa:	6963      	ldr	r3, [r4, #20]
 80092ac:	b2f6      	uxtb	r6, r6
 80092ae:	4283      	cmp	r3, r0
 80092b0:	4637      	mov	r7, r6
 80092b2:	dc04      	bgt.n	80092be <__swbuf_r+0x3a>
 80092b4:	4621      	mov	r1, r4
 80092b6:	4628      	mov	r0, r5
 80092b8:	f7ff fa2a 	bl	8008710 <_fflush_r>
 80092bc:	b9e0      	cbnz	r0, 80092f8 <__swbuf_r+0x74>
 80092be:	68a3      	ldr	r3, [r4, #8]
 80092c0:	3b01      	subs	r3, #1
 80092c2:	60a3      	str	r3, [r4, #8]
 80092c4:	6823      	ldr	r3, [r4, #0]
 80092c6:	1c5a      	adds	r2, r3, #1
 80092c8:	6022      	str	r2, [r4, #0]
 80092ca:	701e      	strb	r6, [r3, #0]
 80092cc:	6962      	ldr	r2, [r4, #20]
 80092ce:	1c43      	adds	r3, r0, #1
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d004      	beq.n	80092de <__swbuf_r+0x5a>
 80092d4:	89a3      	ldrh	r3, [r4, #12]
 80092d6:	07db      	lsls	r3, r3, #31
 80092d8:	d506      	bpl.n	80092e8 <__swbuf_r+0x64>
 80092da:	2e0a      	cmp	r6, #10
 80092dc:	d104      	bne.n	80092e8 <__swbuf_r+0x64>
 80092de:	4621      	mov	r1, r4
 80092e0:	4628      	mov	r0, r5
 80092e2:	f7ff fa15 	bl	8008710 <_fflush_r>
 80092e6:	b938      	cbnz	r0, 80092f8 <__swbuf_r+0x74>
 80092e8:	4638      	mov	r0, r7
 80092ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092ec:	4621      	mov	r1, r4
 80092ee:	4628      	mov	r0, r5
 80092f0:	f000 f806 	bl	8009300 <__swsetup_r>
 80092f4:	2800      	cmp	r0, #0
 80092f6:	d0d5      	beq.n	80092a4 <__swbuf_r+0x20>
 80092f8:	f04f 37ff 	mov.w	r7, #4294967295
 80092fc:	e7f4      	b.n	80092e8 <__swbuf_r+0x64>
	...

08009300 <__swsetup_r>:
 8009300:	b538      	push	{r3, r4, r5, lr}
 8009302:	4b2a      	ldr	r3, [pc, #168]	; (80093ac <__swsetup_r+0xac>)
 8009304:	4605      	mov	r5, r0
 8009306:	6818      	ldr	r0, [r3, #0]
 8009308:	460c      	mov	r4, r1
 800930a:	b118      	cbz	r0, 8009314 <__swsetup_r+0x14>
 800930c:	6a03      	ldr	r3, [r0, #32]
 800930e:	b90b      	cbnz	r3, 8009314 <__swsetup_r+0x14>
 8009310:	f7fc fc40 	bl	8005b94 <__sinit>
 8009314:	89a3      	ldrh	r3, [r4, #12]
 8009316:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800931a:	0718      	lsls	r0, r3, #28
 800931c:	d422      	bmi.n	8009364 <__swsetup_r+0x64>
 800931e:	06d9      	lsls	r1, r3, #27
 8009320:	d407      	bmi.n	8009332 <__swsetup_r+0x32>
 8009322:	2309      	movs	r3, #9
 8009324:	602b      	str	r3, [r5, #0]
 8009326:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800932a:	81a3      	strh	r3, [r4, #12]
 800932c:	f04f 30ff 	mov.w	r0, #4294967295
 8009330:	e034      	b.n	800939c <__swsetup_r+0x9c>
 8009332:	0758      	lsls	r0, r3, #29
 8009334:	d512      	bpl.n	800935c <__swsetup_r+0x5c>
 8009336:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009338:	b141      	cbz	r1, 800934c <__swsetup_r+0x4c>
 800933a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800933e:	4299      	cmp	r1, r3
 8009340:	d002      	beq.n	8009348 <__swsetup_r+0x48>
 8009342:	4628      	mov	r0, r5
 8009344:	f7fd fbc2 	bl	8006acc <_free_r>
 8009348:	2300      	movs	r3, #0
 800934a:	6363      	str	r3, [r4, #52]	; 0x34
 800934c:	89a3      	ldrh	r3, [r4, #12]
 800934e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009352:	81a3      	strh	r3, [r4, #12]
 8009354:	2300      	movs	r3, #0
 8009356:	6063      	str	r3, [r4, #4]
 8009358:	6923      	ldr	r3, [r4, #16]
 800935a:	6023      	str	r3, [r4, #0]
 800935c:	89a3      	ldrh	r3, [r4, #12]
 800935e:	f043 0308 	orr.w	r3, r3, #8
 8009362:	81a3      	strh	r3, [r4, #12]
 8009364:	6923      	ldr	r3, [r4, #16]
 8009366:	b94b      	cbnz	r3, 800937c <__swsetup_r+0x7c>
 8009368:	89a3      	ldrh	r3, [r4, #12]
 800936a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800936e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009372:	d003      	beq.n	800937c <__swsetup_r+0x7c>
 8009374:	4621      	mov	r1, r4
 8009376:	4628      	mov	r0, r5
 8009378:	f000 f884 	bl	8009484 <__smakebuf_r>
 800937c:	89a0      	ldrh	r0, [r4, #12]
 800937e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009382:	f010 0301 	ands.w	r3, r0, #1
 8009386:	d00a      	beq.n	800939e <__swsetup_r+0x9e>
 8009388:	2300      	movs	r3, #0
 800938a:	60a3      	str	r3, [r4, #8]
 800938c:	6963      	ldr	r3, [r4, #20]
 800938e:	425b      	negs	r3, r3
 8009390:	61a3      	str	r3, [r4, #24]
 8009392:	6923      	ldr	r3, [r4, #16]
 8009394:	b943      	cbnz	r3, 80093a8 <__swsetup_r+0xa8>
 8009396:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800939a:	d1c4      	bne.n	8009326 <__swsetup_r+0x26>
 800939c:	bd38      	pop	{r3, r4, r5, pc}
 800939e:	0781      	lsls	r1, r0, #30
 80093a0:	bf58      	it	pl
 80093a2:	6963      	ldrpl	r3, [r4, #20]
 80093a4:	60a3      	str	r3, [r4, #8]
 80093a6:	e7f4      	b.n	8009392 <__swsetup_r+0x92>
 80093a8:	2000      	movs	r0, #0
 80093aa:	e7f7      	b.n	800939c <__swsetup_r+0x9c>
 80093ac:	200001f4 	.word	0x200001f4

080093b0 <_raise_r>:
 80093b0:	291f      	cmp	r1, #31
 80093b2:	b538      	push	{r3, r4, r5, lr}
 80093b4:	4604      	mov	r4, r0
 80093b6:	460d      	mov	r5, r1
 80093b8:	d904      	bls.n	80093c4 <_raise_r+0x14>
 80093ba:	2316      	movs	r3, #22
 80093bc:	6003      	str	r3, [r0, #0]
 80093be:	f04f 30ff 	mov.w	r0, #4294967295
 80093c2:	bd38      	pop	{r3, r4, r5, pc}
 80093c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80093c6:	b112      	cbz	r2, 80093ce <_raise_r+0x1e>
 80093c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093cc:	b94b      	cbnz	r3, 80093e2 <_raise_r+0x32>
 80093ce:	4620      	mov	r0, r4
 80093d0:	f000 f830 	bl	8009434 <_getpid_r>
 80093d4:	462a      	mov	r2, r5
 80093d6:	4601      	mov	r1, r0
 80093d8:	4620      	mov	r0, r4
 80093da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093de:	f000 b817 	b.w	8009410 <_kill_r>
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d00a      	beq.n	80093fc <_raise_r+0x4c>
 80093e6:	1c59      	adds	r1, r3, #1
 80093e8:	d103      	bne.n	80093f2 <_raise_r+0x42>
 80093ea:	2316      	movs	r3, #22
 80093ec:	6003      	str	r3, [r0, #0]
 80093ee:	2001      	movs	r0, #1
 80093f0:	e7e7      	b.n	80093c2 <_raise_r+0x12>
 80093f2:	2400      	movs	r4, #0
 80093f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093f8:	4628      	mov	r0, r5
 80093fa:	4798      	blx	r3
 80093fc:	2000      	movs	r0, #0
 80093fe:	e7e0      	b.n	80093c2 <_raise_r+0x12>

08009400 <raise>:
 8009400:	4b02      	ldr	r3, [pc, #8]	; (800940c <raise+0xc>)
 8009402:	4601      	mov	r1, r0
 8009404:	6818      	ldr	r0, [r3, #0]
 8009406:	f7ff bfd3 	b.w	80093b0 <_raise_r>
 800940a:	bf00      	nop
 800940c:	200001f4 	.word	0x200001f4

08009410 <_kill_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	4d07      	ldr	r5, [pc, #28]	; (8009430 <_kill_r+0x20>)
 8009414:	2300      	movs	r3, #0
 8009416:	4604      	mov	r4, r0
 8009418:	4608      	mov	r0, r1
 800941a:	4611      	mov	r1, r2
 800941c:	602b      	str	r3, [r5, #0]
 800941e:	f7f8 fb5f 	bl	8001ae0 <_kill>
 8009422:	1c43      	adds	r3, r0, #1
 8009424:	d102      	bne.n	800942c <_kill_r+0x1c>
 8009426:	682b      	ldr	r3, [r5, #0]
 8009428:	b103      	cbz	r3, 800942c <_kill_r+0x1c>
 800942a:	6023      	str	r3, [r4, #0]
 800942c:	bd38      	pop	{r3, r4, r5, pc}
 800942e:	bf00      	nop
 8009430:	20000904 	.word	0x20000904

08009434 <_getpid_r>:
 8009434:	f7f8 bb4c 	b.w	8001ad0 <_getpid>

08009438 <__swhatbuf_r>:
 8009438:	b570      	push	{r4, r5, r6, lr}
 800943a:	460c      	mov	r4, r1
 800943c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009440:	2900      	cmp	r1, #0
 8009442:	b096      	sub	sp, #88	; 0x58
 8009444:	4615      	mov	r5, r2
 8009446:	461e      	mov	r6, r3
 8009448:	da0d      	bge.n	8009466 <__swhatbuf_r+0x2e>
 800944a:	89a3      	ldrh	r3, [r4, #12]
 800944c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009450:	f04f 0100 	mov.w	r1, #0
 8009454:	bf0c      	ite	eq
 8009456:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800945a:	2340      	movne	r3, #64	; 0x40
 800945c:	2000      	movs	r0, #0
 800945e:	6031      	str	r1, [r6, #0]
 8009460:	602b      	str	r3, [r5, #0]
 8009462:	b016      	add	sp, #88	; 0x58
 8009464:	bd70      	pop	{r4, r5, r6, pc}
 8009466:	466a      	mov	r2, sp
 8009468:	f000 f848 	bl	80094fc <_fstat_r>
 800946c:	2800      	cmp	r0, #0
 800946e:	dbec      	blt.n	800944a <__swhatbuf_r+0x12>
 8009470:	9901      	ldr	r1, [sp, #4]
 8009472:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009476:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800947a:	4259      	negs	r1, r3
 800947c:	4159      	adcs	r1, r3
 800947e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009482:	e7eb      	b.n	800945c <__swhatbuf_r+0x24>

08009484 <__smakebuf_r>:
 8009484:	898b      	ldrh	r3, [r1, #12]
 8009486:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009488:	079d      	lsls	r5, r3, #30
 800948a:	4606      	mov	r6, r0
 800948c:	460c      	mov	r4, r1
 800948e:	d507      	bpl.n	80094a0 <__smakebuf_r+0x1c>
 8009490:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009494:	6023      	str	r3, [r4, #0]
 8009496:	6123      	str	r3, [r4, #16]
 8009498:	2301      	movs	r3, #1
 800949a:	6163      	str	r3, [r4, #20]
 800949c:	b002      	add	sp, #8
 800949e:	bd70      	pop	{r4, r5, r6, pc}
 80094a0:	ab01      	add	r3, sp, #4
 80094a2:	466a      	mov	r2, sp
 80094a4:	f7ff ffc8 	bl	8009438 <__swhatbuf_r>
 80094a8:	9900      	ldr	r1, [sp, #0]
 80094aa:	4605      	mov	r5, r0
 80094ac:	4630      	mov	r0, r6
 80094ae:	f7fd fb81 	bl	8006bb4 <_malloc_r>
 80094b2:	b948      	cbnz	r0, 80094c8 <__smakebuf_r+0x44>
 80094b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094b8:	059a      	lsls	r2, r3, #22
 80094ba:	d4ef      	bmi.n	800949c <__smakebuf_r+0x18>
 80094bc:	f023 0303 	bic.w	r3, r3, #3
 80094c0:	f043 0302 	orr.w	r3, r3, #2
 80094c4:	81a3      	strh	r3, [r4, #12]
 80094c6:	e7e3      	b.n	8009490 <__smakebuf_r+0xc>
 80094c8:	89a3      	ldrh	r3, [r4, #12]
 80094ca:	6020      	str	r0, [r4, #0]
 80094cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094d0:	81a3      	strh	r3, [r4, #12]
 80094d2:	9b00      	ldr	r3, [sp, #0]
 80094d4:	6163      	str	r3, [r4, #20]
 80094d6:	9b01      	ldr	r3, [sp, #4]
 80094d8:	6120      	str	r0, [r4, #16]
 80094da:	b15b      	cbz	r3, 80094f4 <__smakebuf_r+0x70>
 80094dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094e0:	4630      	mov	r0, r6
 80094e2:	f000 f81d 	bl	8009520 <_isatty_r>
 80094e6:	b128      	cbz	r0, 80094f4 <__smakebuf_r+0x70>
 80094e8:	89a3      	ldrh	r3, [r4, #12]
 80094ea:	f023 0303 	bic.w	r3, r3, #3
 80094ee:	f043 0301 	orr.w	r3, r3, #1
 80094f2:	81a3      	strh	r3, [r4, #12]
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	431d      	orrs	r5, r3
 80094f8:	81a5      	strh	r5, [r4, #12]
 80094fa:	e7cf      	b.n	800949c <__smakebuf_r+0x18>

080094fc <_fstat_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	4d07      	ldr	r5, [pc, #28]	; (800951c <_fstat_r+0x20>)
 8009500:	2300      	movs	r3, #0
 8009502:	4604      	mov	r4, r0
 8009504:	4608      	mov	r0, r1
 8009506:	4611      	mov	r1, r2
 8009508:	602b      	str	r3, [r5, #0]
 800950a:	f7f8 fb48 	bl	8001b9e <_fstat>
 800950e:	1c43      	adds	r3, r0, #1
 8009510:	d102      	bne.n	8009518 <_fstat_r+0x1c>
 8009512:	682b      	ldr	r3, [r5, #0]
 8009514:	b103      	cbz	r3, 8009518 <_fstat_r+0x1c>
 8009516:	6023      	str	r3, [r4, #0]
 8009518:	bd38      	pop	{r3, r4, r5, pc}
 800951a:	bf00      	nop
 800951c:	20000904 	.word	0x20000904

08009520 <_isatty_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4d06      	ldr	r5, [pc, #24]	; (800953c <_isatty_r+0x1c>)
 8009524:	2300      	movs	r3, #0
 8009526:	4604      	mov	r4, r0
 8009528:	4608      	mov	r0, r1
 800952a:	602b      	str	r3, [r5, #0]
 800952c:	f7f8 fb47 	bl	8001bbe <_isatty>
 8009530:	1c43      	adds	r3, r0, #1
 8009532:	d102      	bne.n	800953a <_isatty_r+0x1a>
 8009534:	682b      	ldr	r3, [r5, #0]
 8009536:	b103      	cbz	r3, 800953a <_isatty_r+0x1a>
 8009538:	6023      	str	r3, [r4, #0]
 800953a:	bd38      	pop	{r3, r4, r5, pc}
 800953c:	20000904 	.word	0x20000904

08009540 <_init>:
 8009540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009542:	bf00      	nop
 8009544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009546:	bc08      	pop	{r3}
 8009548:	469e      	mov	lr, r3
 800954a:	4770      	bx	lr

0800954c <_fini>:
 800954c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800954e:	bf00      	nop
 8009550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009552:	bc08      	pop	{r3}
 8009554:	469e      	mov	lr, r3
 8009556:	4770      	bx	lr
