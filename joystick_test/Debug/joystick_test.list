
joystick_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009398  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08009528  08009528  00019528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009980  08009980  00020364  2**0
                  CONTENTS
  4 .ARM          00000000  08009980  08009980  00020364  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009980  08009980  00020364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009980  08009980  00019980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009984  08009984  00019984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000364  20000000  08009988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020364  2**0
                  CONTENTS
 10 .bss          000005ac  20000364  20000364  00020364  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000910  20000910  00020364  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020394  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013485  00000000  00000000  000203d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002c7b  00000000  00000000  0003385c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012a8  00000000  00000000  000364d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e6f  00000000  00000000  00037780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fdfb  00000000  00000000  000385ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017349  00000000  00000000  000583ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bada8  00000000  00000000  0006f733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006444  00000000  00000000  0012a4dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00130920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000364 	.word	0x20000364
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009510 	.word	0x08009510

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000368 	.word	0x20000368
 80001cc:	08009510 	.word	0x08009510

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <InitialiseADC>:
	while((ADC1->ISR &= ADC_ISR_EOS) != ADC_ISR_EOS);

	return ADC1->DR;
}

void InitialiseADC() {
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

	// enable the clock for ADC1
	RCC->AHBENR |= RCC_AHBENR_ADC12EN;
 8000cf8:	4b56      	ldr	r3, [pc, #344]	; (8000e54 <InitialiseADC+0x160>)
 8000cfa:	695b      	ldr	r3, [r3, #20]
 8000cfc:	4a55      	ldr	r2, [pc, #340]	; (8000e54 <InitialiseADC+0x160>)
 8000cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d02:	6153      	str	r3, [r2, #20]

	// set to synchronise the ADC with the clock
	ADC12_COMMON->CCR |= ADC12_CCR_CKMODE_0;
 8000d04:	4b54      	ldr	r3, [pc, #336]	; (8000e58 <InitialiseADC+0x164>)
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	4a53      	ldr	r2, [pc, #332]	; (8000e58 <InitialiseADC+0x164>)
 8000d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d0e:	6093      	str	r3, [r2, #8]

	// ADEN must be = 0 for configuration (is the default)
	ADC1->CR &= ~ADC_CR_ADVREGEN; // clear voltage regulator enable
 8000d10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d1a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000d1e:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADVREGEN_0; // set ADVREGEN TO 01
 8000d20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	6093      	str	r3, [r2, #8]
	ADC1->CR &= ~ADC_CR_ADCALDIF; // clear bit to enable Single-ended-input
 8000d30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000d3e:	6093      	str	r3, [r2, #8]

	// calibrate the ADC (self calibration routine)
	ADC1->CR |= ADC_CR_ADCAL;
 8000d40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d4e:	6093      	str	r3, [r2, #8]
	while((ADC1->CR & ADC_CR_ADCAL) == ADC_CR_ADCAL); // Waiting for the calibration to finish
 8000d50:	bf00      	nop
 8000d52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000d5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d60:	d0f7      	beq.n	8000d52 <InitialiseADC+0x5e>

	// select the channel, only one conversion so it goes in
	//  the first conversion slot (SQ1)
	//  and the L value should be 0 (L=0000 does one conversion only)
	ADC1->SQR1 = 0; // clear any existing channel requests
 8000d62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d66:	2200      	movs	r2, #0
 8000d68:	631a      	str	r2, [r3, #48]	; 0x30
	ADC1->SQR1 |= 0x02 << ADC_SQR1_SQ1_Pos; // request channel 2
 8000d6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SQR1 |= 0x00 << ADC_SQR1_L_Pos; // set the number of channels to read
 8000d7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30

	// continuous mode
	ADC1->CFGR |= ADC_CFGR_CONT;
 8000d86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d94:	60d3      	str	r3, [r2, #12]

	// Enable ADC
	ADC1->CR |= ADC_CR_ADEN;
 8000d96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6093      	str	r3, [r2, #8]

	while (ADC1->ISR == 0); //Wait the ADC to be ready.
 8000da6:	bf00      	nop
 8000da8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d0fa      	beq.n	8000da8 <InitialiseADC+0xb4>

	// request the process to start
	// only need once in continuous mode
	ADC1->CR |= ADC_CR_ADSTART;
 8000db2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dbc:	f043 0304 	orr.w	r3, r3, #4
 8000dc0:	6093      	str	r3, [r2, #8]

	ADC2->CR &= ~ADC_CR_ADVREGEN; // clear voltage regulator enable
 8000dc2:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <InitialiseADC+0x168>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	4a25      	ldr	r2, [pc, #148]	; (8000e5c <InitialiseADC+0x168>)
 8000dc8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000dcc:	6093      	str	r3, [r2, #8]
	ADC2->CR |= ADC_CR_ADVREGEN_0; // set ADVREGEN TO 01
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <InitialiseADC+0x168>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	4a22      	ldr	r2, [pc, #136]	; (8000e5c <InitialiseADC+0x168>)
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	6093      	str	r3, [r2, #8]
	ADC2->CR &= ~ADC_CR_ADCALDIF; // clear bit to enable Single-ended-input
 8000dda:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <InitialiseADC+0x168>)
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	4a1f      	ldr	r2, [pc, #124]	; (8000e5c <InitialiseADC+0x168>)
 8000de0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000de4:	6093      	str	r3, [r2, #8]

	// calibrate the ADC (self calibration routine)
	ADC2->CR |= ADC_CR_ADCAL;
 8000de6:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <InitialiseADC+0x168>)
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	4a1c      	ldr	r2, [pc, #112]	; (8000e5c <InitialiseADC+0x168>)
 8000dec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000df0:	6093      	str	r3, [r2, #8]
	while((ADC2->CR & ADC_CR_ADCAL) == ADC_CR_ADCAL); // Waiting for the calibration to finish
 8000df2:	bf00      	nop
 8000df4:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <InitialiseADC+0x168>)
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e00:	d0f8      	beq.n	8000df4 <InitialiseADC+0x100>

	// select the channel, only one conversion so it goes in
	//  the first conversion slot (SQ1)
	//  and the L value should be 0 (L=0000 does one conversion only)
	ADC2->SQR1 = 0; // clear any existing channel requests
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <InitialiseADC+0x168>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	631a      	str	r2, [r3, #48]	; 0x30
	ADC2->SQR1 |= 0x02 << ADC_SQR1_SQ1_Pos; // request channel 2
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <InitialiseADC+0x168>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0c:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <InitialiseADC+0x168>)
 8000e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e12:	6313      	str	r3, [r2, #48]	; 0x30
	ADC2->SQR1 |= 0x00 << ADC_SQR1_L_Pos; // set the number of channels to read
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <InitialiseADC+0x168>)
 8000e16:	4a11      	ldr	r2, [pc, #68]	; (8000e5c <InitialiseADC+0x168>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	6313      	str	r3, [r2, #48]	; 0x30

	// continuous mode
	ADC2->CFGR |= ADC_CFGR_CONT;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <InitialiseADC+0x168>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <InitialiseADC+0x168>)
 8000e22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e26:	60d3      	str	r3, [r2, #12]

	// Enable ADC
	ADC2->CR |= ADC_CR_ADEN;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <InitialiseADC+0x168>)
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	4a0b      	ldr	r2, [pc, #44]	; (8000e5c <InitialiseADC+0x168>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	6093      	str	r3, [r2, #8]

	while (ADC2->ISR == 0); //Wait the ADC to be ready.
 8000e34:	bf00      	nop
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <InitialiseADC+0x168>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d0fb      	beq.n	8000e36 <InitialiseADC+0x142>

	// request the process to start
	// only need once in continuous mode
	ADC2->CR |= ADC_CR_ADSTART;
 8000e3e:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <InitialiseADC+0x168>)
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <InitialiseADC+0x168>)
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	6093      	str	r3, [r2, #8]

}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	40021000 	.word	0x40021000
 8000e58:	50000300 	.word	0x50000300
 8000e5c:	50000100 	.word	0x50000100

08000e60 <get_joystick_values>:

void get_joystick_values(struct joystick_coordinates* joystick) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	uint16_t value_1 = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	81bb      	strh	r3, [r7, #12]
	uint16_t value_2 = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	817b      	strh	r3, [r7, #10]

	while(!(ADC1->ISR &= ADC_ISR_EOC));
 8000e70:	bf00      	nop
 8000e72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d0f5      	beq.n	8000e72 <get_joystick_values+0x12>
	value_1 = ADC1->DR;
 8000e86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	81bb      	strh	r3, [r7, #12]

	while(!(ADC2->ISR &= ADC_ISR_EOC));
 8000e8e:	bf00      	nop
 8000e90:	4b31      	ldr	r3, [pc, #196]	; (8000f58 <get_joystick_values+0xf8>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a30      	ldr	r2, [pc, #192]	; (8000f58 <get_joystick_values+0xf8>)
 8000e96:	f003 0304 	and.w	r3, r3, #4
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d0f7      	beq.n	8000e90 <get_joystick_values+0x30>
	value_2 = ADC2->DR;
 8000ea0:	4b2d      	ldr	r3, [pc, #180]	; (8000f58 <get_joystick_values+0xf8>)
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea4:	817b      	strh	r3, [r7, #10]

	uint16_t mapped_value_1 = (1000.0 / (3650.0- 2800.0)) * (value_1 - 2800.0);
 8000ea6:	89bb      	ldrh	r3, [r7, #12]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fb3b 	bl	8000524 <__aeabi_i2d>
 8000eae:	a322      	add	r3, pc, #136	; (adr r3, 8000f38 <get_joystick_values+0xd8>)
 8000eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb4:	f7ff f9e8 	bl	8000288 <__aeabi_dsub>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	a31f      	add	r3, pc, #124	; (adr r3, 8000f40 <get_joystick_values+0xe0>)
 8000ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec6:	f7ff fb97 	bl	80005f8 <__aeabi_dmul>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	4610      	mov	r0, r2
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f7ff fe69 	bl	8000ba8 <__aeabi_d2uiz>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	813b      	strh	r3, [r7, #8]

	uint16_t mapped_value_2 = (1000.0 / (3900.0- 2200.0)) * (value_2 - 2200.0);
 8000eda:	897b      	ldrh	r3, [r7, #10]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fb21 	bl	8000524 <__aeabi_i2d>
 8000ee2:	a319      	add	r3, pc, #100	; (adr r3, 8000f48 <get_joystick_values+0xe8>)
 8000ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee8:	f7ff f9ce 	bl	8000288 <__aeabi_dsub>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	4610      	mov	r0, r2
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	a316      	add	r3, pc, #88	; (adr r3, 8000f50 <get_joystick_values+0xf0>)
 8000ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efa:	f7ff fb7d 	bl	80005f8 <__aeabi_dmul>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	4610      	mov	r0, r2
 8000f04:	4619      	mov	r1, r3
 8000f06:	f7ff fe4f 	bl	8000ba8 <__aeabi_d2uiz>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	81fb      	strh	r3, [r7, #14]
	mapped_value_2 = 1000 - mapped_value_2;
 8000f0e:	89fb      	ldrh	r3, [r7, #14]
 8000f10:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8000f14:	81fb      	strh	r3, [r7, #14]
	if (mapped_value_2 > 1000) {
 8000f16:	89fb      	ldrh	r3, [r7, #14]
 8000f18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f1c:	d901      	bls.n	8000f22 <get_joystick_values+0xc2>
		mapped_value_2 = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	81fb      	strh	r3, [r7, #14]
	}
	joystick->x_coordinate = mapped_value_1;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	893a      	ldrh	r2, [r7, #8]
 8000f26:	801a      	strh	r2, [r3, #0]
	joystick->y_coordinate = mapped_value_2;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	89fa      	ldrh	r2, [r7, #14]
 8000f2c:	805a      	strh	r2, [r3, #2]

}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	00000000 	.word	0x00000000
 8000f3c:	40a5e000 	.word	0x40a5e000
 8000f40:	d2d2d2d3 	.word	0xd2d2d2d3
 8000f44:	3ff2d2d2 	.word	0x3ff2d2d2
 8000f48:	00000000 	.word	0x00000000
 8000f4c:	40a13000 	.word	0x40a13000
 8000f50:	d2d2d2d3 	.word	0xd2d2d2d3
 8000f54:	3fe2d2d2 	.word	0x3fe2d2d2
 8000f58:	50000100 	.word	0x50000100
 8000f5c:	00000000 	.word	0x00000000

08000f60 <joystickToServos>:

void joystickToServos(struct joystick_coordinates* joystick) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	// get joystick values

	// map values
	float x_pos = (float)(joystick->x_coordinate)/1000;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	ee07 3a90 	vmov	s15, r3
 8000f70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f74:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80010a0 <joystickToServos+0x140>
 8000f78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f7c:	edc7 7a04 	vstr	s15, [r7, #16]
	float y_pos = (float)(joystick->y_coordinate)/1000;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	885b      	ldrh	r3, [r3, #2]
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f8c:	eddf 6a44 	vldr	s13, [pc, #272]	; 80010a0 <joystickToServos+0x140>
 8000f90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f94:	edc7 7a03 	vstr	s15, [r7, #12]

	float x_pos_invert = 1-x_pos + 0.15;
 8000f98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa4:	ee17 0a90 	vmov	r0, s15
 8000fa8:	f7ff face 	bl	8000548 <__aeabi_f2d>
 8000fac:	a338      	add	r3, pc, #224	; (adr r3, 8001090 <joystickToServos+0x130>)
 8000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb2:	f7ff f96b 	bl	800028c <__adddf3>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff fe13 	bl	8000be8 <__aeabi_d2f>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	617b      	str	r3, [r7, #20]
	if (x_pos_invert > 1) {
 8000fc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd6:	dd03      	ble.n	8000fe0 <joystickToServos+0x80>
		x_pos_invert = (float) 1.0;
 8000fd8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	e009      	b.n	8000ff4 <joystickToServos+0x94>
	}
	else if (x_pos_invert < 0) {
 8000fe0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fe4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fec:	d502      	bpl.n	8000ff4 <joystickToServos+0x94>
		x_pos_invert = (float) 0.0;
 8000fee:	f04f 0300 	mov.w	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
	}

	// send axis 1 to position
	servoGoToFractionalPosition(&Servo1, x_pos + 0.1);
 8000ff4:	6938      	ldr	r0, [r7, #16]
 8000ff6:	f7ff faa7 	bl	8000548 <__aeabi_f2d>
 8000ffa:	a327      	add	r3, pc, #156	; (adr r3, 8001098 <joystickToServos+0x138>)
 8000ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001000:	f7ff f944 	bl	800028c <__adddf3>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4610      	mov	r0, r2
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff fdec 	bl	8000be8 <__aeabi_d2f>
 8001010:	4603      	mov	r3, r0
 8001012:	ee00 3a10 	vmov	s0, r3
 8001016:	4823      	ldr	r0, [pc, #140]	; (80010a4 <joystickToServos+0x144>)
 8001018:	f000 fb03 	bl	8001622 <servoGoToFractionalPosition>
	servoGoToFractionalPosition(&Servo2, x_pos_invert - 0.1);  // inverse
 800101c:	6978      	ldr	r0, [r7, #20]
 800101e:	f7ff fa93 	bl	8000548 <__aeabi_f2d>
 8001022:	a31d      	add	r3, pc, #116	; (adr r3, 8001098 <joystickToServos+0x138>)
 8001024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001028:	f7ff f92e 	bl	8000288 <__aeabi_dsub>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fdd8 	bl	8000be8 <__aeabi_d2f>
 8001038:	4603      	mov	r3, r0
 800103a:	ee00 3a10 	vmov	s0, r3
 800103e:	481a      	ldr	r0, [pc, #104]	; (80010a8 <joystickToServos+0x148>)
 8001040:	f000 faef 	bl	8001622 <servoGoToFractionalPosition>

	// send axis 2 to position
	servoGoToFractionalPosition(&Servo3, y_pos-0.1);
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f7ff fa7f 	bl	8000548 <__aeabi_f2d>
 800104a:	a313      	add	r3, pc, #76	; (adr r3, 8001098 <joystickToServos+0x138>)
 800104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001050:	f7ff f91a 	bl	8000288 <__aeabi_dsub>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	f7ff fdc4 	bl	8000be8 <__aeabi_d2f>
 8001060:	4603      	mov	r3, r0
 8001062:	ee00 3a10 	vmov	s0, r3
 8001066:	4811      	ldr	r0, [pc, #68]	; (80010ac <joystickToServos+0x14c>)
 8001068:	f000 fadb 	bl	8001622 <servoGoToFractionalPosition>
	servoGoToFractionalPosition(&Servo4, 1-y_pos);  // inverse
 800106c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001070:	edd7 7a03 	vldr	s15, [r7, #12]
 8001074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001078:	eeb0 0a67 	vmov.f32	s0, s15
 800107c:	480c      	ldr	r0, [pc, #48]	; (80010b0 <joystickToServos+0x150>)
 800107e:	f000 fad0 	bl	8001622 <servoGoToFractionalPosition>
}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	f3af 8000 	nop.w
 8001090:	33333333 	.word	0x33333333
 8001094:	3fc33333 	.word	0x3fc33333
 8001098:	9999999a 	.word	0x9999999a
 800109c:	3fb99999 	.word	0x3fb99999
 80010a0:	447a0000 	.word	0x447a0000
 80010a4:	20000000 	.word	0x20000000
 80010a8:	20000050 	.word	0x20000050
 80010ac:	200000a0 	.word	0x200000a0
 80010b0:	200000f0 	.word	0x200000f0

080010b4 <run>:


void run() {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
	InitialiseADC();
 80010ba:	f7ff fe1b 	bl	8000cf4 <InitialiseADC>
	struct joystick_coordinates joystick = {0, 0};
 80010be:	2300      	movs	r3, #0
 80010c0:	80bb      	strh	r3, [r7, #4]
 80010c2:	2300      	movs	r3, #0
 80010c4:	80fb      	strh	r3, [r7, #6]
	for(;;) {
		get_joystick_values(&joystick);
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fec9 	bl	8000e60 <get_joystick_values>
		joystickToServos(&joystick);
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff45 	bl	8000f60 <joystickToServos>
		get_joystick_values(&joystick);
 80010d6:	e7f6      	b.n	80010c6 <run+0x12>

080010d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010dc:	f000 fe3a 	bl	8001d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e0:	f000 f824 	bl	800112c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e4:	f000 fa1a 	bl	800151c <MX_GPIO_Init>
  MX_I2C1_Init();
 80010e8:	f000 f882 	bl	80011f0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80010ec:	f000 f8c0 	bl	8001270 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80010f0:	f000 f9f2 	bl	80014d8 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 80010f4:	f000 f8fa 	bl	80012ec <MX_TIM2_Init>
  MX_TIM3_Init();
 80010f8:	f000 f972 	bl	80013e0 <MX_TIM3_Init>

//  // initialise the gyros
//  BSP_GYRO_Init();

  // start the timers
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80010fc:	2100      	movs	r1, #0
 80010fe:	4809      	ldr	r0, [pc, #36]	; (8001124 <main+0x4c>)
 8001100:	f002 ffd4 	bl	80040ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001104:	210c      	movs	r1, #12
 8001106:	4807      	ldr	r0, [pc, #28]	; (8001124 <main+0x4c>)
 8001108:	f002 ffd0 	bl	80040ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800110c:	2100      	movs	r1, #0
 800110e:	4806      	ldr	r0, [pc, #24]	; (8001128 <main+0x50>)
 8001110:	f002 ffcc 	bl	80040ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001114:	2104      	movs	r1, #4
 8001116:	4804      	ldr	r0, [pc, #16]	; (8001128 <main+0x50>)
 8001118:	f002 ffc8 	bl	80040ac <HAL_TIM_PWM_Start>

  // init the adc module
  run();
 800111c:	f7ff ffca 	bl	80010b4 <run>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001120:	e7fe      	b.n	8001120 <main+0x48>
 8001122:	bf00      	nop
 8001124:	20000438 	.word	0x20000438
 8001128:	20000484 	.word	0x20000484

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b09e      	sub	sp, #120	; 0x78
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001136:	2228      	movs	r2, #40	; 0x28
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f004 fdad 	bl	8005c9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001150:	463b      	mov	r3, r7
 8001152:	223c      	movs	r2, #60	; 0x3c
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f004 fd9f 	bl	8005c9a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800115c:	2303      	movs	r3, #3
 800115e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001160:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001164:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800116a:	2301      	movs	r3, #1
 800116c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800116e:	2310      	movs	r3, #16
 8001170:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001172:	2302      	movs	r3, #2
 8001174:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001176:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800117a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800117c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001180:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001182:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001186:	4618      	mov	r0, r3
 8001188:	f001 faba 	bl	8002700 <HAL_RCC_OscConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001192:	f000 fa41 	bl	8001618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001196:	230f      	movs	r3, #15
 8001198:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800119a:	2302      	movs	r3, #2
 800119c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011b0:	2101      	movs	r1, #1
 80011b2:	4618      	mov	r0, r3
 80011b4:	f002 fae2 	bl	800377c <HAL_RCC_ClockConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011be:	f000 fa2b 	bl	8001618 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <SystemClock_Config+0xc0>)
 80011c4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80011ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011ce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d0:	463b      	mov	r3, r7
 80011d2:	4618      	mov	r0, r3
 80011d4:	f002 fcb8 	bl	8003b48 <HAL_RCCEx_PeriphCLKConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80011de:	f000 fa1b 	bl	8001618 <Error_Handler>
  }
}
 80011e2:	bf00      	nop
 80011e4:	3778      	adds	r7, #120	; 0x78
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	00020020 	.word	0x00020020

080011f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <MX_I2C1_Init+0x74>)
 80011f6:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <MX_I2C1_Init+0x78>)
 80011f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_I2C1_Init+0x74>)
 80011fc:	4a1b      	ldr	r2, [pc, #108]	; (800126c <MX_I2C1_Init+0x7c>)
 80011fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001200:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_I2C1_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001206:	4b17      	ldr	r3, [pc, #92]	; (8001264 <MX_I2C1_Init+0x74>)
 8001208:	2201      	movs	r2, #1
 800120a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <MX_I2C1_Init+0x74>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_I2C1_Init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <MX_I2C1_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_I2C1_Init+0x74>)
 8001220:	2200      	movs	r2, #0
 8001222:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_I2C1_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800122a:	480e      	ldr	r0, [pc, #56]	; (8001264 <MX_I2C1_Init+0x74>)
 800122c:	f001 f870 	bl	8002310 <HAL_I2C_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001236:	f000 f9ef 	bl	8001618 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800123a:	2100      	movs	r1, #0
 800123c:	4809      	ldr	r0, [pc, #36]	; (8001264 <MX_I2C1_Init+0x74>)
 800123e:	f001 f8f6 	bl	800242e <HAL_I2CEx_ConfigAnalogFilter>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001248:	f000 f9e6 	bl	8001618 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800124c:	2100      	movs	r1, #0
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_I2C1_Init+0x74>)
 8001250:	f001 f938 	bl	80024c4 <HAL_I2CEx_ConfigDigitalFilter>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800125a:	f000 f9dd 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000380 	.word	0x20000380
 8001268:	40005400 	.word	0x40005400
 800126c:	2000090e 	.word	0x2000090e

08001270 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <MX_SPI1_Init+0x74>)
 8001276:	4a1c      	ldr	r2, [pc, #112]	; (80012e8 <MX_SPI1_Init+0x78>)
 8001278:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_SPI1_Init+0x74>)
 800127c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001280:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <MX_SPI1_Init+0x74>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001288:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <MX_SPI1_Init+0x74>)
 800128a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800128e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_SPI1_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001296:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <MX_SPI1_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_SPI1_Init+0x74>)
 800129e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_SPI1_Init+0x74>)
 80012a6:	2208      	movs	r2, #8
 80012a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_SPI1_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <MX_SPI1_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <MX_SPI1_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <MX_SPI1_Init+0x74>)
 80012be:	2207      	movs	r2, #7
 80012c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <MX_SPI1_Init+0x74>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <MX_SPI1_Init+0x74>)
 80012ca:	2208      	movs	r2, #8
 80012cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_SPI1_Init+0x74>)
 80012d0:	f002 fdea 	bl	8003ea8 <HAL_SPI_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012da:	f000 f99d 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200003d4 	.word	0x200003d4
 80012e8:	40013000 	.word	0x40013000

080012ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012fe:	463b      	mov	r3, r7
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
 800130c:	615a      	str	r2, [r3, #20]
 800130e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001310:	4b32      	ldr	r3, [pc, #200]	; (80013dc <MX_TIM2_Init+0xf0>)
 8001312:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001316:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001318:	4b30      	ldr	r3, [pc, #192]	; (80013dc <MX_TIM2_Init+0xf0>)
 800131a:	222f      	movs	r2, #47	; 0x2f
 800131c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131e:	4b2f      	ldr	r3, [pc, #188]	; (80013dc <MX_TIM2_Init+0xf0>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8001324:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <MX_TIM2_Init+0xf0>)
 8001326:	f644 6220 	movw	r2, #20000	; 0x4e20
 800132a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132c:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <MX_TIM2_Init+0xf0>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001332:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <MX_TIM2_Init+0xf0>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001338:	4828      	ldr	r0, [pc, #160]	; (80013dc <MX_TIM2_Init+0xf0>)
 800133a:	f002 fe60 	bl	8003ffe <HAL_TIM_PWM_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001344:	f000 f968 	bl	8001618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001350:	f107 031c 	add.w	r3, r7, #28
 8001354:	4619      	mov	r1, r3
 8001356:	4821      	ldr	r0, [pc, #132]	; (80013dc <MX_TIM2_Init+0xf0>)
 8001358:	f003 fc48 	bl	8004bec <HAL_TIMEx_MasterConfigSynchronization>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001362:	f000 f959 	bl	8001618 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001366:	2360      	movs	r3, #96	; 0x60
 8001368:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001376:	463b      	mov	r3, r7
 8001378:	2200      	movs	r2, #0
 800137a:	4619      	mov	r1, r3
 800137c:	4817      	ldr	r0, [pc, #92]	; (80013dc <MX_TIM2_Init+0xf0>)
 800137e:	f002 ff95 	bl	80042ac <HAL_TIM_PWM_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001388:	f000 f946 	bl	8001618 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800138c:	463b      	mov	r3, r7
 800138e:	2204      	movs	r2, #4
 8001390:	4619      	mov	r1, r3
 8001392:	4812      	ldr	r0, [pc, #72]	; (80013dc <MX_TIM2_Init+0xf0>)
 8001394:	f002 ff8a 	bl	80042ac <HAL_TIM_PWM_ConfigChannel>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800139e:	f000 f93b 	bl	8001618 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013a2:	463b      	mov	r3, r7
 80013a4:	2208      	movs	r2, #8
 80013a6:	4619      	mov	r1, r3
 80013a8:	480c      	ldr	r0, [pc, #48]	; (80013dc <MX_TIM2_Init+0xf0>)
 80013aa:	f002 ff7f 	bl	80042ac <HAL_TIM_PWM_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80013b4:	f000 f930 	bl	8001618 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013b8:	463b      	mov	r3, r7
 80013ba:	220c      	movs	r2, #12
 80013bc:	4619      	mov	r1, r3
 80013be:	4807      	ldr	r0, [pc, #28]	; (80013dc <MX_TIM2_Init+0xf0>)
 80013c0:	f002 ff74 	bl	80042ac <HAL_TIM_PWM_ConfigChannel>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 80013ca:	f000 f925 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013ce:	4803      	ldr	r0, [pc, #12]	; (80013dc <MX_TIM2_Init+0xf0>)
 80013d0:	f000 fa64 	bl	800189c <HAL_TIM_MspPostInit>

}
 80013d4:	bf00      	nop
 80013d6:	3728      	adds	r7, #40	; 0x28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000438 	.word	0x20000438

080013e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e6:	f107 031c 	add.w	r3, r7, #28
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f2:	463b      	mov	r3, r7
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
 8001400:	615a      	str	r2, [r3, #20]
 8001402:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001404:	4b32      	ldr	r3, [pc, #200]	; (80014d0 <MX_TIM3_Init+0xf0>)
 8001406:	4a33      	ldr	r2, [pc, #204]	; (80014d4 <MX_TIM3_Init+0xf4>)
 8001408:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 800140a:	4b31      	ldr	r3, [pc, #196]	; (80014d0 <MX_TIM3_Init+0xf0>)
 800140c:	222f      	movs	r2, #47	; 0x2f
 800140e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001410:	4b2f      	ldr	r3, [pc, #188]	; (80014d0 <MX_TIM3_Init+0xf0>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8001416:	4b2e      	ldr	r3, [pc, #184]	; (80014d0 <MX_TIM3_Init+0xf0>)
 8001418:	f644 6220 	movw	r2, #20000	; 0x4e20
 800141c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141e:	4b2c      	ldr	r3, [pc, #176]	; (80014d0 <MX_TIM3_Init+0xf0>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001424:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <MX_TIM3_Init+0xf0>)
 8001426:	2200      	movs	r2, #0
 8001428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800142a:	4829      	ldr	r0, [pc, #164]	; (80014d0 <MX_TIM3_Init+0xf0>)
 800142c:	f002 fde7 	bl	8003ffe <HAL_TIM_PWM_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001436:	f000 f8ef 	bl	8001618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001442:	f107 031c 	add.w	r3, r7, #28
 8001446:	4619      	mov	r1, r3
 8001448:	4821      	ldr	r0, [pc, #132]	; (80014d0 <MX_TIM3_Init+0xf0>)
 800144a:	f003 fbcf 	bl	8004bec <HAL_TIMEx_MasterConfigSynchronization>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001454:	f000 f8e0 	bl	8001618 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001458:	2360      	movs	r3, #96	; 0x60
 800145a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001468:	463b      	mov	r3, r7
 800146a:	2200      	movs	r2, #0
 800146c:	4619      	mov	r1, r3
 800146e:	4818      	ldr	r0, [pc, #96]	; (80014d0 <MX_TIM3_Init+0xf0>)
 8001470:	f002 ff1c 	bl	80042ac <HAL_TIM_PWM_ConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800147a:	f000 f8cd 	bl	8001618 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800147e:	463b      	mov	r3, r7
 8001480:	2204      	movs	r2, #4
 8001482:	4619      	mov	r1, r3
 8001484:	4812      	ldr	r0, [pc, #72]	; (80014d0 <MX_TIM3_Init+0xf0>)
 8001486:	f002 ff11 	bl	80042ac <HAL_TIM_PWM_ConfigChannel>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001490:	f000 f8c2 	bl	8001618 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001494:	463b      	mov	r3, r7
 8001496:	2208      	movs	r2, #8
 8001498:	4619      	mov	r1, r3
 800149a:	480d      	ldr	r0, [pc, #52]	; (80014d0 <MX_TIM3_Init+0xf0>)
 800149c:	f002 ff06 	bl	80042ac <HAL_TIM_PWM_ConfigChannel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80014a6:	f000 f8b7 	bl	8001618 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014aa:	463b      	mov	r3, r7
 80014ac:	220c      	movs	r2, #12
 80014ae:	4619      	mov	r1, r3
 80014b0:	4807      	ldr	r0, [pc, #28]	; (80014d0 <MX_TIM3_Init+0xf0>)
 80014b2:	f002 fefb 	bl	80042ac <HAL_TIM_PWM_ConfigChannel>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80014bc:	f000 f8ac 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014c0:	4803      	ldr	r0, [pc, #12]	; (80014d0 <MX_TIM3_Init+0xf0>)
 80014c2:	f000 f9eb 	bl	800189c <HAL_TIM_MspPostInit>

}
 80014c6:	bf00      	nop
 80014c8:	3728      	adds	r7, #40	; 0x28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000484 	.word	0x20000484
 80014d4:	40000400 	.word	0x40000400

080014d8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80014dc:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <MX_USB_PCD_Init+0x3c>)
 80014de:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <MX_USB_PCD_Init+0x40>)
 80014e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_USB_PCD_Init+0x3c>)
 80014e4:	2208      	movs	r2, #8
 80014e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <MX_USB_PCD_Init+0x3c>)
 80014ea:	2202      	movs	r2, #2
 80014ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_USB_PCD_Init+0x3c>)
 80014f0:	2202      	movs	r2, #2
 80014f2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <MX_USB_PCD_Init+0x3c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_USB_PCD_Init+0x3c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <MX_USB_PCD_Init+0x3c>)
 8001502:	f001 f82b 	bl	800255c <HAL_PCD_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800150c:	f000 f884 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200004d0 	.word	0x200004d0
 8001518:	40005c00 	.word	0x40005c00

0800151c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001532:	4b37      	ldr	r3, [pc, #220]	; (8001610 <MX_GPIO_Init+0xf4>)
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	4a36      	ldr	r2, [pc, #216]	; (8001610 <MX_GPIO_Init+0xf4>)
 8001538:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800153c:	6153      	str	r3, [r2, #20]
 800153e:	4b34      	ldr	r3, [pc, #208]	; (8001610 <MX_GPIO_Init+0xf4>)
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	4b31      	ldr	r3, [pc, #196]	; (8001610 <MX_GPIO_Init+0xf4>)
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	4a30      	ldr	r2, [pc, #192]	; (8001610 <MX_GPIO_Init+0xf4>)
 8001550:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001554:	6153      	str	r3, [r2, #20]
 8001556:	4b2e      	ldr	r3, [pc, #184]	; (8001610 <MX_GPIO_Init+0xf4>)
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001562:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <MX_GPIO_Init+0xf4>)
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	4a2a      	ldr	r2, [pc, #168]	; (8001610 <MX_GPIO_Init+0xf4>)
 8001568:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800156c:	6153      	str	r3, [r2, #20]
 800156e:	4b28      	ldr	r3, [pc, #160]	; (8001610 <MX_GPIO_Init+0xf4>)
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	4b25      	ldr	r3, [pc, #148]	; (8001610 <MX_GPIO_Init+0xf4>)
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	4a24      	ldr	r2, [pc, #144]	; (8001610 <MX_GPIO_Init+0xf4>)
 8001580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001584:	6153      	str	r3, [r2, #20]
 8001586:	4b22      	ldr	r3, [pc, #136]	; (8001610 <MX_GPIO_Init+0xf4>)
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <MX_GPIO_Init+0xf4>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	4a1e      	ldr	r2, [pc, #120]	; (8001610 <MX_GPIO_Init+0xf4>)
 8001598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800159c:	6153      	str	r3, [r2, #20]
 800159e:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <MX_GPIO_Init+0xf4>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80015aa:	2200      	movs	r2, #0
 80015ac:	f64f 7108 	movw	r1, #65288	; 0xff08
 80015b0:	4818      	ldr	r0, [pc, #96]	; (8001614 <MX_GPIO_Init+0xf8>)
 80015b2:	f000 fe95 	bl	80022e0 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80015b6:	2337      	movs	r3, #55	; 0x37
 80015b8:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015ba:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80015be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	4812      	ldr	r0, [pc, #72]	; (8001614 <MX_GPIO_Init+0xf8>)
 80015cc:	f000 fd0e 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80015d0:	f64f 7308 	movw	r3, #65288	; 0xff08
 80015d4:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	480a      	ldr	r0, [pc, #40]	; (8001614 <MX_GPIO_Init+0xf8>)
 80015ea:	f000 fcff 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015ee:	2301      	movs	r3, #1
 80015f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001604:	f000 fcf2 	bl	8001fec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001608:	bf00      	nop
 800160a:	3728      	adds	r7, #40	; 0x28
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40021000 	.word	0x40021000
 8001614:	48001000 	.word	0x48001000

08001618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800161c:	b672      	cpsid	i
}
 800161e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001620:	e7fe      	b.n	8001620 <Error_Handler+0x8>

08001622 <servoGoToFractionalPosition>:

// a function to make servo move to a point in its range of motion
// Inputs:
// - Servo*: address of the servo struct being used
// - frac: the fraction of the servos range to go to (0 to 1)
void servoGoToFractionalPosition(Servo *servo, float frac) {
 8001622:	b580      	push	{r7, lr}
 8001624:	b088      	sub	sp, #32
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	ed87 0a00 	vstr	s0, [r7]
	uint32_t max = servo->max_pwm;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	61fb      	str	r3, [r7, #28]
	uint32_t min = servo->min_pwm;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	61bb      	str	r3, [r7, #24]
	float range = (float)(max - min);
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	ee07 3a90 	vmov	s15, r3
 8001644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001648:	edc7 7a05 	vstr	s15, [r7, #20]

	// map to pwm range
	float pwm = (float)min + range*frac;
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	ee07 3a90 	vmov	s15, r3
 8001652:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001656:	edd7 6a05 	vldr	s13, [r7, #20]
 800165a:	edd7 7a00 	vldr	s15, [r7]
 800165e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001666:	edc7 7a04 	vstr	s15, [r7, #16]
	uint32_t pwm_int = (uint32_t)pwm;
 800166a:	edd7 7a04 	vldr	s15, [r7, #16]
 800166e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001672:	ee17 3a90 	vmov	r3, s15
 8001676:	60fb      	str	r3, [r7, #12]

	// set the pwm val
	setServoPWM(servo, pwm_int);
 8001678:	68f9      	ldr	r1, [r7, #12]
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f804 	bl	8001688 <setServoPWM>
}
 8001680:	bf00      	nop
 8001682:	3720      	adds	r7, #32
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <setServoPWM>:

void setServoPWM(Servo *servo, uint32_t pwm){
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]

	if (servo->channel == 1) {
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	791b      	ldrb	r3, [r3, #4]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d104      	bne.n	80016a4 <setServoPWM+0x1c>
		servo->TIMx->CCR1 = pwm;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	635a      	str	r2, [r3, #52]	; 0x34
		servo->TIMx->CCR3 = pwm;
	}
	else if (servo->channel == 4) {
		servo->TIMx->CCR4 = pwm;
	}
}
 80016a2:	e019      	b.n	80016d8 <setServoPWM+0x50>
	else if (servo->channel == 2) {
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	791b      	ldrb	r3, [r3, #4]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d104      	bne.n	80016b6 <setServoPWM+0x2e>
		servo->TIMx->CCR2 = pwm;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80016b4:	e010      	b.n	80016d8 <setServoPWM+0x50>
	else if (servo->channel == 3) {
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	791b      	ldrb	r3, [r3, #4]
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d104      	bne.n	80016c8 <setServoPWM+0x40>
		servo->TIMx->CCR3 = pwm;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80016c6:	e007      	b.n	80016d8 <setServoPWM+0x50>
	else if (servo->channel == 4) {
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	791b      	ldrb	r3, [r3, #4]
 80016cc:	2b04      	cmp	r3, #4
 80016ce:	d103      	bne.n	80016d8 <setServoPWM+0x50>
		servo->TIMx->CCR4 = pwm;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_MspInit+0x44>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <HAL_MspInit+0x44>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6193      	str	r3, [r2, #24]
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <HAL_MspInit+0x44>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_MspInit+0x44>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	4a08      	ldr	r2, [pc, #32]	; (8001728 <HAL_MspInit+0x44>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	61d3      	str	r3, [r2, #28]
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_MspInit+0x44>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800171a:	2007      	movs	r0, #7
 800171c:	f000 fc32 	bl	8001f84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40021000 	.word	0x40021000

0800172c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	; 0x28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a17      	ldr	r2, [pc, #92]	; (80017a8 <HAL_I2C_MspInit+0x7c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d127      	bne.n	800179e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	4b17      	ldr	r3, [pc, #92]	; (80017ac <HAL_I2C_MspInit+0x80>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	4a16      	ldr	r2, [pc, #88]	; (80017ac <HAL_I2C_MspInit+0x80>)
 8001754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001758:	6153      	str	r3, [r2, #20]
 800175a:	4b14      	ldr	r3, [pc, #80]	; (80017ac <HAL_I2C_MspInit+0x80>)
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001766:	23c0      	movs	r3, #192	; 0xc0
 8001768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176a:	2312      	movs	r3, #18
 800176c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800176e:	2301      	movs	r3, #1
 8001770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001776:	2304      	movs	r3, #4
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	480b      	ldr	r0, [pc, #44]	; (80017b0 <HAL_I2C_MspInit+0x84>)
 8001782:	f000 fc33 	bl	8001fec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_I2C_MspInit+0x80>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	4a08      	ldr	r2, [pc, #32]	; (80017ac <HAL_I2C_MspInit+0x80>)
 800178c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001790:	61d3      	str	r3, [r2, #28]
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_I2C_MspInit+0x80>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800179e:	bf00      	nop
 80017a0:	3728      	adds	r7, #40	; 0x28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40005400 	.word	0x40005400
 80017ac:	40021000 	.word	0x40021000
 80017b0:	48000400 	.word	0x48000400

080017b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a17      	ldr	r2, [pc, #92]	; (8001830 <HAL_SPI_MspInit+0x7c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d128      	bne.n	8001828 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017d6:	4b17      	ldr	r3, [pc, #92]	; (8001834 <HAL_SPI_MspInit+0x80>)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	4a16      	ldr	r2, [pc, #88]	; (8001834 <HAL_SPI_MspInit+0x80>)
 80017dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017e0:	6193      	str	r3, [r2, #24]
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <HAL_SPI_MspInit+0x80>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <HAL_SPI_MspInit+0x80>)
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	4a10      	ldr	r2, [pc, #64]	; (8001834 <HAL_SPI_MspInit+0x80>)
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f8:	6153      	str	r3, [r2, #20]
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <HAL_SPI_MspInit+0x80>)
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001806:	23e0      	movs	r3, #224	; 0xe0
 8001808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001812:	2303      	movs	r3, #3
 8001814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001816:	2305      	movs	r3, #5
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4619      	mov	r1, r3
 8001820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001824:	f000 fbe2 	bl	8001fec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001828:	bf00      	nop
 800182a:	3728      	adds	r7, #40	; 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40013000 	.word	0x40013000
 8001834:	40021000 	.word	0x40021000

08001838 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001848:	d10c      	bne.n	8001864 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800184a:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_TIM_PWM_MspInit+0x5c>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	4a11      	ldr	r2, [pc, #68]	; (8001894 <HAL_TIM_PWM_MspInit+0x5c>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	61d3      	str	r3, [r2, #28]
 8001856:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <HAL_TIM_PWM_MspInit+0x5c>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001862:	e010      	b.n	8001886 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <HAL_TIM_PWM_MspInit+0x60>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d10b      	bne.n	8001886 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_TIM_PWM_MspInit+0x5c>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	4a08      	ldr	r2, [pc, #32]	; (8001894 <HAL_TIM_PWM_MspInit+0x5c>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	61d3      	str	r3, [r2, #28]
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_TIM_PWM_MspInit+0x5c>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000
 8001898:	40000400 	.word	0x40000400

0800189c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018bc:	d11e      	bne.n	80018fc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	4b3e      	ldr	r3, [pc, #248]	; (80019b8 <HAL_TIM_MspPostInit+0x11c>)
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	4a3d      	ldr	r2, [pc, #244]	; (80019b8 <HAL_TIM_MspPostInit+0x11c>)
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c8:	6153      	str	r3, [r2, #20]
 80018ca:	4b3b      	ldr	r3, [pc, #236]	; (80019b8 <HAL_TIM_MspPostInit+0x11c>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	61bb      	str	r3, [r7, #24]
 80018d4:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 80018d6:	f248 030e 	movw	r3, #32782	; 0x800e
 80018da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018e8:	2301      	movs	r3, #1
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f6:	f000 fb79 	bl	8001fec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018fa:	e059      	b.n	80019b0 <HAL_TIM_MspPostInit+0x114>
  else if(htim->Instance==TIM3)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a2e      	ldr	r2, [pc, #184]	; (80019bc <HAL_TIM_MspPostInit+0x120>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d154      	bne.n	80019b0 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	4b2c      	ldr	r3, [pc, #176]	; (80019b8 <HAL_TIM_MspPostInit+0x11c>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	4a2b      	ldr	r2, [pc, #172]	; (80019b8 <HAL_TIM_MspPostInit+0x11c>)
 800190c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001910:	6153      	str	r3, [r2, #20]
 8001912:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <HAL_TIM_MspPostInit+0x11c>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <HAL_TIM_MspPostInit+0x11c>)
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	4a25      	ldr	r2, [pc, #148]	; (80019b8 <HAL_TIM_MspPostInit+0x11c>)
 8001924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001928:	6153      	str	r3, [r2, #20]
 800192a:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <HAL_TIM_MspPostInit+0x11c>)
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001936:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <HAL_TIM_MspPostInit+0x11c>)
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	4a1f      	ldr	r2, [pc, #124]	; (80019b8 <HAL_TIM_MspPostInit+0x11c>)
 800193c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001940:	6153      	str	r3, [r2, #20]
 8001942:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <HAL_TIM_MspPostInit+0x11c>)
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800194e:	2310      	movs	r3, #16
 8001950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800195e:	2302      	movs	r3, #2
 8001960:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001962:	f107 031c 	add.w	r3, r7, #28
 8001966:	4619      	mov	r1, r3
 8001968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196c:	f000 fb3e 	bl	8001fec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001970:	2303      	movs	r3, #3
 8001972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001980:	2302      	movs	r3, #2
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	4619      	mov	r1, r3
 800198a:	480d      	ldr	r0, [pc, #52]	; (80019c0 <HAL_TIM_MspPostInit+0x124>)
 800198c:	f000 fb2e 	bl	8001fec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001990:	2340      	movs	r3, #64	; 0x40
 8001992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019a0:	2302      	movs	r3, #2
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	4619      	mov	r1, r3
 80019aa:	4806      	ldr	r0, [pc, #24]	; (80019c4 <HAL_TIM_MspPostInit+0x128>)
 80019ac:	f000 fb1e 	bl	8001fec <HAL_GPIO_Init>
}
 80019b0:	bf00      	nop
 80019b2:	3730      	adds	r7, #48	; 0x30
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40000400 	.word	0x40000400
 80019c0:	48000400 	.word	0x48000400
 80019c4:	48000800 	.word	0x48000800

080019c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a18      	ldr	r2, [pc, #96]	; (8001a48 <HAL_PCD_MspInit+0x80>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d129      	bne.n	8001a3e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <HAL_PCD_MspInit+0x84>)
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	4a17      	ldr	r2, [pc, #92]	; (8001a4c <HAL_PCD_MspInit+0x84>)
 80019f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f4:	6153      	str	r3, [r2, #20]
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_PCD_MspInit+0x84>)
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001a02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a10:	2303      	movs	r3, #3
 8001a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001a14:	230e      	movs	r3, #14
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a22:	f000 fae3 	bl	8001fec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_PCD_MspInit+0x84>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	4a08      	ldr	r2, [pc, #32]	; (8001a4c <HAL_PCD_MspInit+0x84>)
 8001a2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a30:	61d3      	str	r3, [r2, #28]
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_PCD_MspInit+0x84>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001a3e:	bf00      	nop
 8001a40:	3728      	adds	r7, #40	; 0x28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40005c00 	.word	0x40005c00
 8001a4c:	40021000 	.word	0x40021000

08001a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a54:	e7fe      	b.n	8001a54 <NMI_Handler+0x4>

08001a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5a:	e7fe      	b.n	8001a5a <HardFault_Handler+0x4>

08001a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <MemManage_Handler+0x4>

08001a62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <BusFault_Handler+0x4>

08001a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <UsageFault_Handler+0x4>

08001a6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a9c:	f000 f9a0 	bl	8001de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return 1;
 8001aa8:	2301      	movs	r3, #1
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <_kill>:

int _kill(int pid, int sig)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001abe:	f004 f93f 	bl	8005d40 <__errno>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2216      	movs	r2, #22
 8001ac6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ac8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <_exit>:

void _exit (int status)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001adc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ffe7 	bl	8001ab4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ae6:	e7fe      	b.n	8001ae6 <_exit+0x12>

08001ae8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	e00a      	b.n	8001b10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001afa:	f3af 8000 	nop.w
 8001afe:	4601      	mov	r1, r0
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	60ba      	str	r2, [r7, #8]
 8001b06:	b2ca      	uxtb	r2, r1
 8001b08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	dbf0      	blt.n	8001afa <_read+0x12>
  }

  return len;
 8001b18:	687b      	ldr	r3, [r7, #4]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	e009      	b.n	8001b48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	60ba      	str	r2, [r7, #8]
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	3301      	adds	r3, #1
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	dbf1      	blt.n	8001b34 <_write+0x12>
  }
  return len;
 8001b50:	687b      	ldr	r3, [r7, #4]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <_close>:

int _close(int file)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b82:	605a      	str	r2, [r3, #4]
  return 0;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <_isatty>:

int _isatty(int file)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b9a:	2301      	movs	r3, #1
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bcc:	4a14      	ldr	r2, [pc, #80]	; (8001c20 <_sbrk+0x5c>)
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <_sbrk+0x60>)
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd8:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <_sbrk+0x64>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d102      	bne.n	8001be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <_sbrk+0x64>)
 8001be2:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <_sbrk+0x68>)
 8001be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <_sbrk+0x64>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d207      	bcs.n	8001c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf4:	f004 f8a4 	bl	8005d40 <__errno>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001c02:	e009      	b.n	8001c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <_sbrk+0x64>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c0a:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <_sbrk+0x64>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <_sbrk+0x64>)
 8001c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c16:	68fb      	ldr	r3, [r7, #12]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	2000a000 	.word	0x2000a000
 8001c24:	00000400 	.word	0x00000400
 8001c28:	200007bc 	.word	0x200007bc
 8001c2c:	20000910 	.word	0x20000910

08001c30 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <SystemInit+0x20>)
 8001c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c3a:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <SystemInit+0x20>)
 8001c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <TIM2_IRQHandler>:
    hardware_timer->timer_completion_function = completion_function;

}

// tim2 overflow handler
void TIM2_IRQHandler(void) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 8001c58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d01e      	beq.n	8001ca4 <TIM2_IRQHandler+0x50>
        TIM2->SR &= ~TIM_SR_UIF; // Clear the interrupt flag
 8001c66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	6113      	str	r3, [r2, #16]

        if (TIM2_init.oneShotMode) {
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <TIM2_IRQHandler+0x54>)
 8001c78:	7b1b      	ldrb	r3, [r3, #12]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00a      	beq.n	8001c96 <TIM2_IRQHandler+0x42>
            TIM2->CR1 &= ~TIM_CR1_CEN; // Stop the timer if in one-shot mode
 8001c80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c8a:	f023 0301 	bic.w	r3, r3, #1
 8001c8e:	6013      	str	r3, [r2, #0]

            TIM2_init.oneShotMode = 0; // turn off the oneshot mode
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <TIM2_IRQHandler+0x54>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	731a      	strb	r2, [r3, #12]
        }

        if (TIM2_init.timer_completion_function != NULL) {
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <TIM2_IRQHandler+0x54>)
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <TIM2_IRQHandler+0x50>
            TIM2_init.timer_completion_function();
 8001c9e:	4b02      	ldr	r3, [pc, #8]	; (8001ca8 <TIM2_IRQHandler+0x54>)
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	4798      	blx	r3
        }
    }
}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000144 	.word	0x20000144

08001cac <TIM4_IRQHandler>:

// tim4 overflow handler
void TIM4_IRQHandler(void) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
    if (TIM4->SR & TIM_SR_UIF) {
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <TIM4_IRQHandler+0x4c>)
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d01a      	beq.n	8001cf2 <TIM4_IRQHandler+0x46>
        TIM4->SR &= ~TIM_SR_UIF; // Clear the interrupt flag
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <TIM4_IRQHandler+0x4c>)
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	; (8001cf8 <TIM4_IRQHandler+0x4c>)
 8001cc2:	f023 0301 	bic.w	r3, r3, #1
 8001cc6:	6113      	str	r3, [r2, #16]

        if (TIM4_init.oneShotMode) {
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <TIM4_IRQHandler+0x50>)
 8001cca:	7b1b      	ldrb	r3, [r3, #12]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d008      	beq.n	8001ce4 <TIM4_IRQHandler+0x38>
            TIM4->CR1 &= ~TIM_CR1_CEN; // Stop the timer if in one-shot mode
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <TIM4_IRQHandler+0x4c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a08      	ldr	r2, [pc, #32]	; (8001cf8 <TIM4_IRQHandler+0x4c>)
 8001cd8:	f023 0301 	bic.w	r3, r3, #1
 8001cdc:	6013      	str	r3, [r2, #0]

            TIM4_init.oneShotMode = 0; // turn off the oneshot mode
 8001cde:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <TIM4_IRQHandler+0x50>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	731a      	strb	r2, [r3, #12]
        }

        if (TIM4_init.timer_completion_function != NULL) {
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <TIM4_IRQHandler+0x50>)
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d002      	beq.n	8001cf2 <TIM4_IRQHandler+0x46>
            TIM4_init.timer_completion_function();
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <TIM4_IRQHandler+0x50>)
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	4798      	blx	r3
        }
    }
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40000800 	.word	0x40000800
 8001cfc:	2000016c 	.word	0x2000016c

08001d00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d38 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d04:	f7ff ff94 	bl	8001c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d08:	480c      	ldr	r0, [pc, #48]	; (8001d3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001d0a:	490d      	ldr	r1, [pc, #52]	; (8001d40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d0c:	4a0d      	ldr	r2, [pc, #52]	; (8001d44 <LoopForever+0xe>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d10:	e002      	b.n	8001d18 <LoopCopyDataInit>

08001d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d16:	3304      	adds	r3, #4

08001d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d1c:	d3f9      	bcc.n	8001d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d20:	4c0a      	ldr	r4, [pc, #40]	; (8001d4c <LoopForever+0x16>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d24:	e001      	b.n	8001d2a <LoopFillZerobss>

08001d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d28:	3204      	adds	r2, #4

08001d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d2c:	d3fb      	bcc.n	8001d26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d2e:	f004 f80d 	bl	8005d4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d32:	f7ff f9d1 	bl	80010d8 <main>

08001d36 <LoopForever>:

LoopForever:
    b LoopForever
 8001d36:	e7fe      	b.n	8001d36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d38:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d40:	20000364 	.word	0x20000364
  ldr r2, =_sidata
 8001d44:	08009988 	.word	0x08009988
  ldr r2, =_sbss
 8001d48:	20000364 	.word	0x20000364
  ldr r4, =_ebss
 8001d4c:	20000910 	.word	0x20000910

08001d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d50:	e7fe      	b.n	8001d50 <ADC1_2_IRQHandler>
	...

08001d54 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <HAL_Init+0x28>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a07      	ldr	r2, [pc, #28]	; (8001d7c <HAL_Init+0x28>)
 8001d5e:	f043 0310 	orr.w	r3, r3, #16
 8001d62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d64:	2003      	movs	r0, #3
 8001d66:	f000 f90d 	bl	8001f84 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f000 f808 	bl	8001d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d70:	f7ff fcb8 	bl	80016e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40022000 	.word	0x40022000

08001d80 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_InitTick+0x54>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_InitTick+0x58>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	4619      	mov	r1, r3
 8001d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 f917 	bl	8001fd2 <HAL_SYSTICK_Config>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00e      	b.n	8001dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b0f      	cmp	r3, #15
 8001db2:	d80a      	bhi.n	8001dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db4:	2200      	movs	r2, #0
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f000 f8ed 	bl	8001f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc0:	4a06      	ldr	r2, [pc, #24]	; (8001ddc <HAL_InitTick+0x5c>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e000      	b.n	8001dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000140 	.word	0x20000140
 8001dd8:	20000198 	.word	0x20000198
 8001ddc:	20000194 	.word	0x20000194

08001de0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_IncTick+0x20>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_IncTick+0x24>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	4a04      	ldr	r2, [pc, #16]	; (8001e04 <HAL_IncTick+0x24>)
 8001df2:	6013      	str	r3, [r2, #0]
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	20000198 	.word	0x20000198
 8001e04:	200007c0 	.word	0x200007c0

08001e08 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <HAL_GetTick+0x14>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	200007c0 	.word	0x200007c0

08001e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e52:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	60d3      	str	r3, [r2, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <__NVIC_GetPriorityGrouping+0x18>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	f003 0307 	and.w	r3, r3, #7
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	6039      	str	r1, [r7, #0]
 8001e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	db0a      	blt.n	8001eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	490c      	ldr	r1, [pc, #48]	; (8001ed0 <__NVIC_SetPriority+0x4c>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	0112      	lsls	r2, r2, #4
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eac:	e00a      	b.n	8001ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4908      	ldr	r1, [pc, #32]	; (8001ed4 <__NVIC_SetPriority+0x50>)
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	3b04      	subs	r3, #4
 8001ebc:	0112      	lsls	r2, r2, #4
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	761a      	strb	r2, [r3, #24]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000e100 	.word	0xe000e100
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b089      	sub	sp, #36	; 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f1c3 0307 	rsb	r3, r3, #7
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	bf28      	it	cs
 8001ef6:	2304      	movcs	r3, #4
 8001ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3304      	adds	r3, #4
 8001efe:	2b06      	cmp	r3, #6
 8001f00:	d902      	bls.n	8001f08 <NVIC_EncodePriority+0x30>
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3b03      	subs	r3, #3
 8001f06:	e000      	b.n	8001f0a <NVIC_EncodePriority+0x32>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43da      	mvns	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f20:	f04f 31ff 	mov.w	r1, #4294967295
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2a:	43d9      	mvns	r1, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	4313      	orrs	r3, r2
         );
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3724      	adds	r7, #36	; 0x24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
	...

08001f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f50:	d301      	bcc.n	8001f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f52:	2301      	movs	r3, #1
 8001f54:	e00f      	b.n	8001f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f56:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <SysTick_Config+0x40>)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f5e:	210f      	movs	r1, #15
 8001f60:	f04f 30ff 	mov.w	r0, #4294967295
 8001f64:	f7ff ff8e 	bl	8001e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <SysTick_Config+0x40>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f6e:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <SysTick_Config+0x40>)
 8001f70:	2207      	movs	r2, #7
 8001f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	e000e010 	.word	0xe000e010

08001f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff ff47 	bl	8001e20 <__NVIC_SetPriorityGrouping>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b086      	sub	sp, #24
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fac:	f7ff ff5c 	bl	8001e68 <__NVIC_GetPriorityGrouping>
 8001fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	6978      	ldr	r0, [r7, #20]
 8001fb8:	f7ff ff8e 	bl	8001ed8 <NVIC_EncodePriority>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff5d 	bl	8001e84 <__NVIC_SetPriority>
}
 8001fca:	bf00      	nop
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ffb0 	bl	8001f40 <SysTick_Config>
 8001fe0:	4603      	mov	r3, r0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ffa:	e154      	b.n	80022a6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	2101      	movs	r1, #1
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	fa01 f303 	lsl.w	r3, r1, r3
 8002008:	4013      	ands	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 8146 	beq.w	80022a0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d005      	beq.n	800202c <HAL_GPIO_Init+0x40>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d130      	bne.n	800208e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	2203      	movs	r2, #3
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4313      	orrs	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002062:	2201      	movs	r2, #1
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	091b      	lsrs	r3, r3, #4
 8002078:	f003 0201 	and.w	r2, r3, #1
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b03      	cmp	r3, #3
 8002098:	d017      	beq.n	80020ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	2203      	movs	r2, #3
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d123      	bne.n	800211e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	08da      	lsrs	r2, r3, #3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3208      	adds	r2, #8
 80020de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	220f      	movs	r2, #15
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	08da      	lsrs	r2, r3, #3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3208      	adds	r2, #8
 8002118:	6939      	ldr	r1, [r7, #16]
 800211a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	2203      	movs	r2, #3
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4013      	ands	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 0203 	and.w	r2, r3, #3
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 80a0 	beq.w	80022a0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002160:	4b58      	ldr	r3, [pc, #352]	; (80022c4 <HAL_GPIO_Init+0x2d8>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	4a57      	ldr	r2, [pc, #348]	; (80022c4 <HAL_GPIO_Init+0x2d8>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	6193      	str	r3, [r2, #24]
 800216c:	4b55      	ldr	r3, [pc, #340]	; (80022c4 <HAL_GPIO_Init+0x2d8>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002178:	4a53      	ldr	r2, [pc, #332]	; (80022c8 <HAL_GPIO_Init+0x2dc>)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	089b      	lsrs	r3, r3, #2
 800217e:	3302      	adds	r3, #2
 8002180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002184:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	220f      	movs	r2, #15
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021a2:	d019      	beq.n	80021d8 <HAL_GPIO_Init+0x1ec>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a49      	ldr	r2, [pc, #292]	; (80022cc <HAL_GPIO_Init+0x2e0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d013      	beq.n	80021d4 <HAL_GPIO_Init+0x1e8>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a48      	ldr	r2, [pc, #288]	; (80022d0 <HAL_GPIO_Init+0x2e4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d00d      	beq.n	80021d0 <HAL_GPIO_Init+0x1e4>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a47      	ldr	r2, [pc, #284]	; (80022d4 <HAL_GPIO_Init+0x2e8>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d007      	beq.n	80021cc <HAL_GPIO_Init+0x1e0>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a46      	ldr	r2, [pc, #280]	; (80022d8 <HAL_GPIO_Init+0x2ec>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d101      	bne.n	80021c8 <HAL_GPIO_Init+0x1dc>
 80021c4:	2304      	movs	r3, #4
 80021c6:	e008      	b.n	80021da <HAL_GPIO_Init+0x1ee>
 80021c8:	2305      	movs	r3, #5
 80021ca:	e006      	b.n	80021da <HAL_GPIO_Init+0x1ee>
 80021cc:	2303      	movs	r3, #3
 80021ce:	e004      	b.n	80021da <HAL_GPIO_Init+0x1ee>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e002      	b.n	80021da <HAL_GPIO_Init+0x1ee>
 80021d4:	2301      	movs	r3, #1
 80021d6:	e000      	b.n	80021da <HAL_GPIO_Init+0x1ee>
 80021d8:	2300      	movs	r3, #0
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	f002 0203 	and.w	r2, r2, #3
 80021e0:	0092      	lsls	r2, r2, #2
 80021e2:	4093      	lsls	r3, r2
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021ea:	4937      	ldr	r1, [pc, #220]	; (80022c8 <HAL_GPIO_Init+0x2dc>)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	089b      	lsrs	r3, r3, #2
 80021f0:	3302      	adds	r3, #2
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021f8:	4b38      	ldr	r3, [pc, #224]	; (80022dc <HAL_GPIO_Init+0x2f0>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	43db      	mvns	r3, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800221c:	4a2f      	ldr	r2, [pc, #188]	; (80022dc <HAL_GPIO_Init+0x2f0>)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002222:	4b2e      	ldr	r3, [pc, #184]	; (80022dc <HAL_GPIO_Init+0x2f0>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	43db      	mvns	r3, r3
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4013      	ands	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002246:	4a25      	ldr	r2, [pc, #148]	; (80022dc <HAL_GPIO_Init+0x2f0>)
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800224c:	4b23      	ldr	r3, [pc, #140]	; (80022dc <HAL_GPIO_Init+0x2f0>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	43db      	mvns	r3, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4313      	orrs	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002270:	4a1a      	ldr	r2, [pc, #104]	; (80022dc <HAL_GPIO_Init+0x2f0>)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002276:	4b19      	ldr	r3, [pc, #100]	; (80022dc <HAL_GPIO_Init+0x2f0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	43db      	mvns	r3, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800229a:	4a10      	ldr	r2, [pc, #64]	; (80022dc <HAL_GPIO_Init+0x2f0>)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	3301      	adds	r3, #1
 80022a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f47f aea3 	bne.w	8001ffc <HAL_GPIO_Init+0x10>
  }
}
 80022b6:	bf00      	nop
 80022b8:	bf00      	nop
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40010000 	.word	0x40010000
 80022cc:	48000400 	.word	0x48000400
 80022d0:	48000800 	.word	0x48000800
 80022d4:	48000c00 	.word	0x48000c00
 80022d8:	48001000 	.word	0x48001000
 80022dc:	40010400 	.word	0x40010400

080022e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	807b      	strh	r3, [r7, #2]
 80022ec:	4613      	mov	r3, r2
 80022ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022f0:	787b      	ldrb	r3, [r7, #1]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022f6:	887a      	ldrh	r2, [r7, #2]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022fc:	e002      	b.n	8002304 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022fe:	887a      	ldrh	r2, [r7, #2]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e081      	b.n	8002426 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d106      	bne.n	800233c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff f9f8 	bl	800172c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2224      	movs	r2, #36	; 0x24
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0201 	bic.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002360:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002370:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d107      	bne.n	800238a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	e006      	b.n	8002398 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002396:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d104      	bne.n	80023aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69d9      	ldr	r1, [r3, #28]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a1a      	ldr	r2, [r3, #32]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2220      	movs	r2, #32
 8002412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b20      	cmp	r3, #32
 8002442:	d138      	bne.n	80024b6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800244a:	2b01      	cmp	r3, #1
 800244c:	d101      	bne.n	8002452 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800244e:	2302      	movs	r3, #2
 8002450:	e032      	b.n	80024b8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2224      	movs	r2, #36	; 0x24
 800245e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0201 	bic.w	r2, r2, #1
 8002470:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002480:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6819      	ldr	r1, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0201 	orr.w	r2, r2, #1
 80024a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2220      	movs	r2, #32
 80024a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	e000      	b.n	80024b8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024b6:	2302      	movs	r3, #2
  }
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b20      	cmp	r3, #32
 80024d8:	d139      	bne.n	800254e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e033      	b.n	8002550 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2224      	movs	r2, #36	; 0x24
 80024f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0201 	bic.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002516:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	021b      	lsls	r3, r3, #8
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4313      	orrs	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0201 	orr.w	r2, r2, #1
 8002538:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2220      	movs	r2, #32
 800253e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	e000      	b.n	8002550 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800254e:	2302      	movs	r3, #2
  }
}
 8002550:	4618      	mov	r0, r3
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800255c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255e:	b08b      	sub	sp, #44	; 0x2c
 8002560:	af06      	add	r7, sp, #24
 8002562:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e0c4      	b.n	80026f8 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff fa20 	bl	80019c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2203      	movs	r2, #3
 800258c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f002 fba9 	bl	8004cec <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	e040      	b.n	8002622 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	440b      	add	r3, r1
 80025b0:	3301      	adds	r3, #1
 80025b2:	2201      	movs	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	440b      	add	r3, r1
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	1c5a      	adds	r2, r3, #1
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	440b      	add	r3, r1
 80025da:	3303      	adds	r3, #3
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025e0:	7bfa      	ldrb	r2, [r7, #15]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	440b      	add	r3, r1
 80025ee:	3338      	adds	r3, #56	; 0x38
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025f4:	7bfa      	ldrb	r2, [r7, #15]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	440b      	add	r3, r1
 8002602:	333c      	adds	r3, #60	; 0x3c
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	440b      	add	r3, r1
 8002616:	3340      	adds	r3, #64	; 0x40
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	3301      	adds	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
 8002622:	7bfa      	ldrb	r2, [r7, #15]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	429a      	cmp	r2, r3
 800262a:	d3b9      	bcc.n	80025a0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800262c:	2300      	movs	r3, #0
 800262e:	73fb      	strb	r3, [r7, #15]
 8002630:	e044      	b.n	80026bc <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002632:	7bfa      	ldrb	r2, [r7, #15]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	440b      	add	r3, r1
 8002640:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002648:	7bfa      	ldrb	r2, [r7, #15]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	440b      	add	r3, r1
 8002656:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800265a:	7bfa      	ldrb	r2, [r7, #15]
 800265c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800265e:	7bfa      	ldrb	r2, [r7, #15]
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	440b      	add	r3, r1
 800266c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002674:	7bfa      	ldrb	r2, [r7, #15]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	440b      	add	r3, r1
 8002682:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800268a:	7bfa      	ldrb	r2, [r7, #15]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	440b      	add	r3, r1
 8002698:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	440b      	add	r3, r1
 80026ae:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	3301      	adds	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
 80026bc:	7bfa      	ldrb	r2, [r7, #15]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d3b5      	bcc.n	8002632 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	687e      	ldr	r6, [r7, #4]
 80026ce:	466d      	mov	r5, sp
 80026d0:	f106 0410 	add.w	r4, r6, #16
 80026d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026d8:	6823      	ldr	r3, [r4, #0]
 80026da:	602b      	str	r3, [r5, #0]
 80026dc:	1d33      	adds	r3, r6, #4
 80026de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026e0:	6838      	ldr	r0, [r7, #0]
 80026e2:	f002 fb1e 	bl	8004d22 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002700 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002706:	af00      	add	r7, sp, #0
 8002708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002710:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002716:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d102      	bne.n	8002726 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	f001 b823 	b.w	800376c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 817d 	beq.w	8002a36 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800273c:	4bbc      	ldr	r3, [pc, #752]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 030c 	and.w	r3, r3, #12
 8002744:	2b04      	cmp	r3, #4
 8002746:	d00c      	beq.n	8002762 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002748:	4bb9      	ldr	r3, [pc, #740]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 030c 	and.w	r3, r3, #12
 8002750:	2b08      	cmp	r3, #8
 8002752:	d15c      	bne.n	800280e <HAL_RCC_OscConfig+0x10e>
 8002754:	4bb6      	ldr	r3, [pc, #728]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002760:	d155      	bne.n	800280e <HAL_RCC_OscConfig+0x10e>
 8002762:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002766:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800276e:	fa93 f3a3 	rbit	r3, r3
 8002772:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002776:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277a:	fab3 f383 	clz	r3, r3
 800277e:	b2db      	uxtb	r3, r3
 8002780:	095b      	lsrs	r3, r3, #5
 8002782:	b2db      	uxtb	r3, r3
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b01      	cmp	r3, #1
 800278c:	d102      	bne.n	8002794 <HAL_RCC_OscConfig+0x94>
 800278e:	4ba8      	ldr	r3, [pc, #672]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	e015      	b.n	80027c0 <HAL_RCC_OscConfig+0xc0>
 8002794:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002798:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80027a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027ac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80027b0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80027b4:	fa93 f3a3 	rbit	r3, r3
 80027b8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80027bc:	4b9c      	ldr	r3, [pc, #624]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027c4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80027c8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80027cc:	fa92 f2a2 	rbit	r2, r2
 80027d0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80027d4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80027d8:	fab2 f282 	clz	r2, r2
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	f042 0220 	orr.w	r2, r2, #32
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	f002 021f 	and.w	r2, r2, #31
 80027e8:	2101      	movs	r1, #1
 80027ea:	fa01 f202 	lsl.w	r2, r1, r2
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 811f 	beq.w	8002a34 <HAL_RCC_OscConfig+0x334>
 80027f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	f040 8116 	bne.w	8002a34 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	f000 bfaf 	b.w	800376c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800280e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002812:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800281e:	d106      	bne.n	800282e <HAL_RCC_OscConfig+0x12e>
 8002820:	4b83      	ldr	r3, [pc, #524]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a82      	ldr	r2, [pc, #520]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	e036      	b.n	800289c <HAL_RCC_OscConfig+0x19c>
 800282e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002832:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0x158>
 800283e:	4b7c      	ldr	r3, [pc, #496]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a7b      	ldr	r2, [pc, #492]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	4b79      	ldr	r3, [pc, #484]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a78      	ldr	r2, [pc, #480]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002850:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e021      	b.n	800289c <HAL_RCC_OscConfig+0x19c>
 8002858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002868:	d10c      	bne.n	8002884 <HAL_RCC_OscConfig+0x184>
 800286a:	4b71      	ldr	r3, [pc, #452]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a70      	ldr	r2, [pc, #448]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b6e      	ldr	r3, [pc, #440]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a6d      	ldr	r2, [pc, #436]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 800287c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e00b      	b.n	800289c <HAL_RCC_OscConfig+0x19c>
 8002884:	4b6a      	ldr	r3, [pc, #424]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a69      	ldr	r2, [pc, #420]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 800288a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	4b67      	ldr	r3, [pc, #412]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a66      	ldr	r2, [pc, #408]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800289a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800289c:	4b64      	ldr	r3, [pc, #400]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	f023 020f 	bic.w	r2, r3, #15
 80028a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	495f      	ldr	r1, [pc, #380]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d059      	beq.n	800297a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c6:	f7ff fa9f 	bl	8001e08 <HAL_GetTick>
 80028ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d0:	f7ff fa9a 	bl	8001e08 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b64      	cmp	r3, #100	; 0x64
 80028de:	d902      	bls.n	80028e6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	f000 bf43 	b.w	800376c <HAL_RCC_OscConfig+0x106c>
 80028e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ea:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80028fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fe:	fab3 f383 	clz	r3, r3
 8002902:	b2db      	uxtb	r3, r3
 8002904:	095b      	lsrs	r3, r3, #5
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b01      	cmp	r3, #1
 8002910:	d102      	bne.n	8002918 <HAL_RCC_OscConfig+0x218>
 8002912:	4b47      	ldr	r3, [pc, #284]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	e015      	b.n	8002944 <HAL_RCC_OscConfig+0x244>
 8002918:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800291c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002924:	fa93 f3a3 	rbit	r3, r3
 8002928:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800292c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002930:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002934:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002938:	fa93 f3a3 	rbit	r3, r3
 800293c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002940:	4b3b      	ldr	r3, [pc, #236]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002948:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800294c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002950:	fa92 f2a2 	rbit	r2, r2
 8002954:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002958:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800295c:	fab2 f282 	clz	r2, r2
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	f042 0220 	orr.w	r2, r2, #32
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	f002 021f 	and.w	r2, r2, #31
 800296c:	2101      	movs	r1, #1
 800296e:	fa01 f202 	lsl.w	r2, r1, r2
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0ab      	beq.n	80028d0 <HAL_RCC_OscConfig+0x1d0>
 8002978:	e05d      	b.n	8002a36 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297a:	f7ff fa45 	bl	8001e08 <HAL_GetTick>
 800297e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002982:	e00a      	b.n	800299a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002984:	f7ff fa40 	bl	8001e08 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b64      	cmp	r3, #100	; 0x64
 8002992:	d902      	bls.n	800299a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	f000 bee9 	b.w	800376c <HAL_RCC_OscConfig+0x106c>
 800299a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800299e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80029ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	095b      	lsrs	r3, r3, #5
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d102      	bne.n	80029cc <HAL_RCC_OscConfig+0x2cc>
 80029c6:	4b1a      	ldr	r3, [pc, #104]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	e015      	b.n	80029f8 <HAL_RCC_OscConfig+0x2f8>
 80029cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029d0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80029e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029e4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80029e8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80029ec:	fa93 f3a3 	rbit	r3, r3
 80029f0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80029f4:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <HAL_RCC_OscConfig+0x330>)
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029fc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002a00:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a04:	fa92 f2a2 	rbit	r2, r2
 8002a08:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002a0c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002a10:	fab2 f282 	clz	r2, r2
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	f042 0220 	orr.w	r2, r2, #32
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	f002 021f 	and.w	r2, r2, #31
 8002a20:	2101      	movs	r1, #1
 8002a22:	fa01 f202 	lsl.w	r2, r1, r2
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1ab      	bne.n	8002984 <HAL_RCC_OscConfig+0x284>
 8002a2c:	e003      	b.n	8002a36 <HAL_RCC_OscConfig+0x336>
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 817d 	beq.w	8002d46 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a4c:	4ba6      	ldr	r3, [pc, #664]	; (8002ce8 <HAL_RCC_OscConfig+0x5e8>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00b      	beq.n	8002a70 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a58:	4ba3      	ldr	r3, [pc, #652]	; (8002ce8 <HAL_RCC_OscConfig+0x5e8>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d172      	bne.n	8002b4a <HAL_RCC_OscConfig+0x44a>
 8002a64:	4ba0      	ldr	r3, [pc, #640]	; (8002ce8 <HAL_RCC_OscConfig+0x5e8>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d16c      	bne.n	8002b4a <HAL_RCC_OscConfig+0x44a>
 8002a70:	2302      	movs	r3, #2
 8002a72:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002a82:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a86:	fab3 f383 	clz	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	095b      	lsrs	r3, r3, #5
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d102      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x3a0>
 8002a9a:	4b93      	ldr	r3, [pc, #588]	; (8002ce8 <HAL_RCC_OscConfig+0x5e8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	e013      	b.n	8002ac8 <HAL_RCC_OscConfig+0x3c8>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002ab8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002ac4:	4b88      	ldr	r3, [pc, #544]	; (8002ce8 <HAL_RCC_OscConfig+0x5e8>)
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	2202      	movs	r2, #2
 8002aca:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002ace:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002ad2:	fa92 f2a2 	rbit	r2, r2
 8002ad6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002ada:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002ade:	fab2 f282 	clz	r2, r2
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	f042 0220 	orr.w	r2, r2, #32
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	f002 021f 	and.w	r2, r2, #31
 8002aee:	2101      	movs	r1, #1
 8002af0:	fa01 f202 	lsl.w	r2, r1, r2
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <HAL_RCC_OscConfig+0x410>
 8002afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d002      	beq.n	8002b10 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f000 be2e 	b.w	800376c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b10:	4b75      	ldr	r3, [pc, #468]	; (8002ce8 <HAL_RCC_OscConfig+0x5e8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	21f8      	movs	r1, #248	; 0xf8
 8002b26:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002b2e:	fa91 f1a1 	rbit	r1, r1
 8002b32:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002b36:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002b3a:	fab1 f181 	clz	r1, r1
 8002b3e:	b2c9      	uxtb	r1, r1
 8002b40:	408b      	lsls	r3, r1
 8002b42:	4969      	ldr	r1, [pc, #420]	; (8002ce8 <HAL_RCC_OscConfig+0x5e8>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b48:	e0fd      	b.n	8002d46 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 8088 	beq.w	8002c6c <HAL_RCC_OscConfig+0x56c>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b62:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002b66:	fa93 f3a3 	rbit	r3, r3
 8002b6a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002b6e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b72:	fab3 f383 	clz	r3, r3
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	461a      	mov	r2, r3
 8002b84:	2301      	movs	r3, #1
 8002b86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7ff f93e 	bl	8001e08 <HAL_GetTick>
 8002b8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b90:	e00a      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b92:	f7ff f939 	bl	8001e08 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d902      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	f000 bde2 	b.w	800376c <HAL_RCC_OscConfig+0x106c>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002bba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	095b      	lsrs	r3, r3, #5
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d102      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x4d8>
 8002bd2:	4b45      	ldr	r3, [pc, #276]	; (8002ce8 <HAL_RCC_OscConfig+0x5e8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	e013      	b.n	8002c00 <HAL_RCC_OscConfig+0x500>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002bea:	2302      	movs	r3, #2
 8002bec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002bf0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002bf4:	fa93 f3a3 	rbit	r3, r3
 8002bf8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002bfc:	4b3a      	ldr	r3, [pc, #232]	; (8002ce8 <HAL_RCC_OscConfig+0x5e8>)
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	2202      	movs	r2, #2
 8002c02:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002c06:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002c0a:	fa92 f2a2 	rbit	r2, r2
 8002c0e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002c12:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002c16:	fab2 f282 	clz	r2, r2
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	f042 0220 	orr.w	r2, r2, #32
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	f002 021f 	and.w	r2, r2, #31
 8002c26:	2101      	movs	r1, #1
 8002c28:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0af      	beq.n	8002b92 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c32:	4b2d      	ldr	r3, [pc, #180]	; (8002ce8 <HAL_RCC_OscConfig+0x5e8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	21f8      	movs	r1, #248	; 0xf8
 8002c48:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002c50:	fa91 f1a1 	rbit	r1, r1
 8002c54:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002c58:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002c5c:	fab1 f181 	clz	r1, r1
 8002c60:	b2c9      	uxtb	r1, r1
 8002c62:	408b      	lsls	r3, r1
 8002c64:	4920      	ldr	r1, [pc, #128]	; (8002ce8 <HAL_RCC_OscConfig+0x5e8>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	600b      	str	r3, [r1, #0]
 8002c6a:	e06c      	b.n	8002d46 <HAL_RCC_OscConfig+0x646>
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002c7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	461a      	mov	r2, r3
 8002c94:	2300      	movs	r3, #0
 8002c96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7ff f8b6 	bl	8001e08 <HAL_GetTick>
 8002c9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca0:	e00a      	b.n	8002cb8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ca2:	f7ff f8b1 	bl	8001e08 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d902      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	f000 bd5a 	b.w	800376c <HAL_RCC_OscConfig+0x106c>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002cc2:	fa93 f3a3 	rbit	r3, r3
 8002cc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d104      	bne.n	8002cec <HAL_RCC_OscConfig+0x5ec>
 8002ce2:	4b01      	ldr	r3, [pc, #4]	; (8002ce8 <HAL_RCC_OscConfig+0x5e8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	e015      	b.n	8002d14 <HAL_RCC_OscConfig+0x614>
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	2302      	movs	r3, #2
 8002cee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002cfe:	2302      	movs	r3, #2
 8002d00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d04:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002d08:	fa93 f3a3 	rbit	r3, r3
 8002d0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002d10:	4bc8      	ldr	r3, [pc, #800]	; (8003034 <HAL_RCC_OscConfig+0x934>)
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	2202      	movs	r2, #2
 8002d16:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002d1a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002d1e:	fa92 f2a2 	rbit	r2, r2
 8002d22:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002d26:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002d2a:	fab2 f282 	clz	r2, r2
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	f042 0220 	orr.w	r2, r2, #32
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	f002 021f 	and.w	r2, r2, #31
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1ad      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 8110 	beq.w	8002f7c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d079      	beq.n	8002e60 <HAL_RCC_OscConfig+0x760>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4bab      	ldr	r3, [pc, #684]	; (8003038 <HAL_RCC_OscConfig+0x938>)
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	461a      	mov	r2, r3
 8002d92:	2301      	movs	r3, #1
 8002d94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d96:	f7ff f837 	bl	8001e08 <HAL_GetTick>
 8002d9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9e:	e00a      	b.n	8002db6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002da0:	f7ff f832 	bl	8001e08 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d902      	bls.n	8002db6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	f000 bcdb 	b.w	800376c <HAL_RCC_OscConfig+0x106c>
 8002db6:	2302      	movs	r3, #2
 8002db8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dcc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	fa93 f2a3 	rbit	r2, r3
 8002de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002df4:	2202      	movs	r2, #2
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	fa93 f2a3 	rbit	r2, r3
 8002e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e0e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e10:	4b88      	ldr	r3, [pc, #544]	; (8003034 <HAL_RCC_OscConfig+0x934>)
 8002e12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e1c:	2102      	movs	r1, #2
 8002e1e:	6019      	str	r1, [r3, #0]
 8002e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e24:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	fa93 f1a3 	rbit	r1, r3
 8002e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e32:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e36:	6019      	str	r1, [r3, #0]
  return result;
 8002e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	f003 031f 	and.w	r3, r3, #31
 8002e52:	2101      	movs	r1, #1
 8002e54:	fa01 f303 	lsl.w	r3, r1, r3
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0a0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x6a0>
 8002e5e:	e08d      	b.n	8002f7c <HAL_RCC_OscConfig+0x87c>
 8002e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e64:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e68:	2201      	movs	r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e70:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	fa93 f2a3 	rbit	r2, r3
 8002e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e82:	601a      	str	r2, [r3, #0]
  return result;
 8002e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e88:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e8c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e8e:	fab3 f383 	clz	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b68      	ldr	r3, [pc, #416]	; (8003038 <HAL_RCC_OscConfig+0x938>)
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea2:	f7fe ffb1 	bl	8001e08 <HAL_GetTick>
 8002ea6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eaa:	e00a      	b.n	8002ec2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eac:	f7fe ffac 	bl	8001e08 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d902      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	f000 bc55 	b.w	800376c <HAL_RCC_OscConfig+0x106c>
 8002ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002eca:	2202      	movs	r2, #2
 8002ecc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	fa93 f2a3 	rbit	r2, r3
 8002edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002eee:	2202      	movs	r2, #2
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	fa93 f2a3 	rbit	r2, r3
 8002f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f12:	2202      	movs	r2, #2
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	fa93 f2a3 	rbit	r2, r3
 8002f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f28:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f2c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f2e:	4b41      	ldr	r3, [pc, #260]	; (8003034 <HAL_RCC_OscConfig+0x934>)
 8002f30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f36:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f3a:	2102      	movs	r1, #2
 8002f3c:	6019      	str	r1, [r3, #0]
 8002f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f42:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	fa93 f1a3 	rbit	r1, r3
 8002f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f50:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f54:	6019      	str	r1, [r3, #0]
  return result;
 8002f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	fab3 f383 	clz	r3, r3
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	f003 031f 	and.w	r3, r3, #31
 8002f70:	2101      	movs	r1, #1
 8002f72:	fa01 f303 	lsl.w	r3, r1, r3
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d197      	bne.n	8002eac <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 81a1 	beq.w	80032d4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f92:	2300      	movs	r3, #0
 8002f94:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f98:	4b26      	ldr	r3, [pc, #152]	; (8003034 <HAL_RCC_OscConfig+0x934>)
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d116      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa4:	4b23      	ldr	r3, [pc, #140]	; (8003034 <HAL_RCC_OscConfig+0x934>)
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	4a22      	ldr	r2, [pc, #136]	; (8003034 <HAL_RCC_OscConfig+0x934>)
 8002faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fae:	61d3      	str	r3, [r2, #28]
 8002fb0:	4b20      	ldr	r3, [pc, #128]	; (8003034 <HAL_RCC_OscConfig+0x934>)
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fbc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002fca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd2:	4b1a      	ldr	r3, [pc, #104]	; (800303c <HAL_RCC_OscConfig+0x93c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d11a      	bne.n	8003014 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fde:	4b17      	ldr	r3, [pc, #92]	; (800303c <HAL_RCC_OscConfig+0x93c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a16      	ldr	r2, [pc, #88]	; (800303c <HAL_RCC_OscConfig+0x93c>)
 8002fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fea:	f7fe ff0d 	bl	8001e08 <HAL_GetTick>
 8002fee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff2:	e009      	b.n	8003008 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff4:	f7fe ff08 	bl	8001e08 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b64      	cmp	r3, #100	; 0x64
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e3b1      	b.n	800376c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <HAL_RCC_OscConfig+0x93c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0ef      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003018:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d10d      	bne.n	8003040 <HAL_RCC_OscConfig+0x940>
 8003024:	4b03      	ldr	r3, [pc, #12]	; (8003034 <HAL_RCC_OscConfig+0x934>)
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	4a02      	ldr	r2, [pc, #8]	; (8003034 <HAL_RCC_OscConfig+0x934>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	6213      	str	r3, [r2, #32]
 8003030:	e03c      	b.n	80030ac <HAL_RCC_OscConfig+0x9ac>
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
 8003038:	10908120 	.word	0x10908120
 800303c:	40007000 	.word	0x40007000
 8003040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003044:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10c      	bne.n	800306a <HAL_RCC_OscConfig+0x96a>
 8003050:	4bc1      	ldr	r3, [pc, #772]	; (8003358 <HAL_RCC_OscConfig+0xc58>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	4ac0      	ldr	r2, [pc, #768]	; (8003358 <HAL_RCC_OscConfig+0xc58>)
 8003056:	f023 0301 	bic.w	r3, r3, #1
 800305a:	6213      	str	r3, [r2, #32]
 800305c:	4bbe      	ldr	r3, [pc, #760]	; (8003358 <HAL_RCC_OscConfig+0xc58>)
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	4abd      	ldr	r2, [pc, #756]	; (8003358 <HAL_RCC_OscConfig+0xc58>)
 8003062:	f023 0304 	bic.w	r3, r3, #4
 8003066:	6213      	str	r3, [r2, #32]
 8003068:	e020      	b.n	80030ac <HAL_RCC_OscConfig+0x9ac>
 800306a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	2b05      	cmp	r3, #5
 8003078:	d10c      	bne.n	8003094 <HAL_RCC_OscConfig+0x994>
 800307a:	4bb7      	ldr	r3, [pc, #732]	; (8003358 <HAL_RCC_OscConfig+0xc58>)
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	4ab6      	ldr	r2, [pc, #728]	; (8003358 <HAL_RCC_OscConfig+0xc58>)
 8003080:	f043 0304 	orr.w	r3, r3, #4
 8003084:	6213      	str	r3, [r2, #32]
 8003086:	4bb4      	ldr	r3, [pc, #720]	; (8003358 <HAL_RCC_OscConfig+0xc58>)
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	4ab3      	ldr	r2, [pc, #716]	; (8003358 <HAL_RCC_OscConfig+0xc58>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	6213      	str	r3, [r2, #32]
 8003092:	e00b      	b.n	80030ac <HAL_RCC_OscConfig+0x9ac>
 8003094:	4bb0      	ldr	r3, [pc, #704]	; (8003358 <HAL_RCC_OscConfig+0xc58>)
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	4aaf      	ldr	r2, [pc, #700]	; (8003358 <HAL_RCC_OscConfig+0xc58>)
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	6213      	str	r3, [r2, #32]
 80030a0:	4bad      	ldr	r3, [pc, #692]	; (8003358 <HAL_RCC_OscConfig+0xc58>)
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	4aac      	ldr	r2, [pc, #688]	; (8003358 <HAL_RCC_OscConfig+0xc58>)
 80030a6:	f023 0304 	bic.w	r3, r3, #4
 80030aa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 8081 	beq.w	80031c0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030be:	f7fe fea3 	bl	8001e08 <HAL_GetTick>
 80030c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c6:	e00b      	b.n	80030e0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c8:	f7fe fe9e 	bl	8001e08 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d8:	4293      	cmp	r3, r2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e345      	b.n	800376c <HAL_RCC_OscConfig+0x106c>
 80030e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80030e8:	2202      	movs	r2, #2
 80030ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	fa93 f2a3 	rbit	r2, r3
 80030fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003108:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800310c:	2202      	movs	r2, #2
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003114:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	fa93 f2a3 	rbit	r2, r3
 800311e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003122:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003126:	601a      	str	r2, [r3, #0]
  return result;
 8003128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003130:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	095b      	lsrs	r3, r3, #5
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f043 0302 	orr.w	r3, r3, #2
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d102      	bne.n	800314c <HAL_RCC_OscConfig+0xa4c>
 8003146:	4b84      	ldr	r3, [pc, #528]	; (8003358 <HAL_RCC_OscConfig+0xc58>)
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	e013      	b.n	8003174 <HAL_RCC_OscConfig+0xa74>
 800314c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003150:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003154:	2202      	movs	r2, #2
 8003156:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	fa93 f2a3 	rbit	r2, r3
 8003166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	4b79      	ldr	r3, [pc, #484]	; (8003358 <HAL_RCC_OscConfig+0xc58>)
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003178:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800317c:	2102      	movs	r1, #2
 800317e:	6011      	str	r1, [r2, #0]
 8003180:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003184:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003188:	6812      	ldr	r2, [r2, #0]
 800318a:	fa92 f1a2 	rbit	r1, r2
 800318e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003192:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003196:	6011      	str	r1, [r2, #0]
  return result;
 8003198:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800319c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80031a0:	6812      	ldr	r2, [r2, #0]
 80031a2:	fab2 f282 	clz	r2, r2
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	f002 021f 	and.w	r2, r2, #31
 80031b2:	2101      	movs	r1, #1
 80031b4:	fa01 f202 	lsl.w	r2, r1, r2
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d084      	beq.n	80030c8 <HAL_RCC_OscConfig+0x9c8>
 80031be:	e07f      	b.n	80032c0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c0:	f7fe fe22 	bl	8001e08 <HAL_GetTick>
 80031c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c8:	e00b      	b.n	80031e2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ca:	f7fe fe1d 	bl	8001e08 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e2c4      	b.n	800376c <HAL_RCC_OscConfig+0x106c>
 80031e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80031ea:	2202      	movs	r2, #2
 80031ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	fa93 f2a3 	rbit	r2, r3
 80031fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003200:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800320e:	2202      	movs	r2, #2
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003216:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	fa93 f2a3 	rbit	r2, r3
 8003220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003224:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003228:	601a      	str	r2, [r3, #0]
  return result;
 800322a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003232:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003234:	fab3 f383 	clz	r3, r3
 8003238:	b2db      	uxtb	r3, r3
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	b2db      	uxtb	r3, r3
 800323e:	f043 0302 	orr.w	r3, r3, #2
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d102      	bne.n	800324e <HAL_RCC_OscConfig+0xb4e>
 8003248:	4b43      	ldr	r3, [pc, #268]	; (8003358 <HAL_RCC_OscConfig+0xc58>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	e013      	b.n	8003276 <HAL_RCC_OscConfig+0xb76>
 800324e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003252:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003256:	2202      	movs	r2, #2
 8003258:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	fa93 f2a3 	rbit	r2, r3
 8003268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	4b39      	ldr	r3, [pc, #228]	; (8003358 <HAL_RCC_OscConfig+0xc58>)
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800327a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800327e:	2102      	movs	r1, #2
 8003280:	6011      	str	r1, [r2, #0]
 8003282:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003286:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	fa92 f1a2 	rbit	r1, r2
 8003290:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003294:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003298:	6011      	str	r1, [r2, #0]
  return result;
 800329a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800329e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	fab2 f282 	clz	r2, r2
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	f002 021f 	and.w	r2, r2, #31
 80032b4:	2101      	movs	r1, #1
 80032b6:	fa01 f202 	lsl.w	r2, r1, r2
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d184      	bne.n	80031ca <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032c0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d105      	bne.n	80032d4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c8:	4b23      	ldr	r3, [pc, #140]	; (8003358 <HAL_RCC_OscConfig+0xc58>)
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	4a22      	ldr	r2, [pc, #136]	; (8003358 <HAL_RCC_OscConfig+0xc58>)
 80032ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 8242 	beq.w	800376a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e6:	4b1c      	ldr	r3, [pc, #112]	; (8003358 <HAL_RCC_OscConfig+0xc58>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	f000 8213 	beq.w	800371a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	2b02      	cmp	r3, #2
 8003302:	f040 8162 	bne.w	80035ca <HAL_RCC_OscConfig+0xeca>
 8003306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800330e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003312:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003318:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	fa93 f2a3 	rbit	r2, r3
 8003322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003326:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800332a:	601a      	str	r2, [r3, #0]
  return result;
 800332c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003330:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003334:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003336:	fab3 f383 	clz	r3, r3
 800333a:	b2db      	uxtb	r3, r3
 800333c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003340:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	461a      	mov	r2, r3
 8003348:	2300      	movs	r3, #0
 800334a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334c:	f7fe fd5c 	bl	8001e08 <HAL_GetTick>
 8003350:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003354:	e00c      	b.n	8003370 <HAL_RCC_OscConfig+0xc70>
 8003356:	bf00      	nop
 8003358:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800335c:	f7fe fd54 	bl	8001e08 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e1fd      	b.n	800376c <HAL_RCC_OscConfig+0x106c>
 8003370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003374:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003378:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800337c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003382:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	fa93 f2a3 	rbit	r2, r3
 800338c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003390:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003394:	601a      	str	r2, [r3, #0]
  return result;
 8003396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800339e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a0:	fab3 f383 	clz	r3, r3
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f043 0301 	orr.w	r3, r3, #1
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d102      	bne.n	80033ba <HAL_RCC_OscConfig+0xcba>
 80033b4:	4bb0      	ldr	r3, [pc, #704]	; (8003678 <HAL_RCC_OscConfig+0xf78>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	e027      	b.n	800340a <HAL_RCC_OscConfig+0xd0a>
 80033ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033be:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80033c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033cc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	fa93 f2a3 	rbit	r2, r3
 80033d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033da:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80033e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	fa93 f2a3 	rbit	r2, r3
 80033fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003400:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	4b9c      	ldr	r3, [pc, #624]	; (8003678 <HAL_RCC_OscConfig+0xf78>)
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800340e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003412:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003416:	6011      	str	r1, [r2, #0]
 8003418:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800341c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003420:	6812      	ldr	r2, [r2, #0]
 8003422:	fa92 f1a2 	rbit	r1, r2
 8003426:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800342a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800342e:	6011      	str	r1, [r2, #0]
  return result;
 8003430:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003434:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	fab2 f282 	clz	r2, r2
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	f042 0220 	orr.w	r2, r2, #32
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	f002 021f 	and.w	r2, r2, #31
 800344a:	2101      	movs	r1, #1
 800344c:	fa01 f202 	lsl.w	r2, r1, r2
 8003450:	4013      	ands	r3, r2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d182      	bne.n	800335c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003456:	4b88      	ldr	r3, [pc, #544]	; (8003678 <HAL_RCC_OscConfig+0xf78>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800345e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003462:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800346a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	430b      	orrs	r3, r1
 8003478:	497f      	ldr	r1, [pc, #508]	; (8003678 <HAL_RCC_OscConfig+0xf78>)
 800347a:	4313      	orrs	r3, r2
 800347c:	604b      	str	r3, [r1, #4]
 800347e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003482:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003486:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800348a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003490:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	fa93 f2a3 	rbit	r2, r3
 800349a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80034a2:	601a      	str	r2, [r3, #0]
  return result;
 80034a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80034ac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ae:	fab3 f383 	clz	r3, r3
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	461a      	mov	r2, r3
 80034c0:	2301      	movs	r3, #1
 80034c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7fe fca0 	bl	8001e08 <HAL_GetTick>
 80034c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034cc:	e009      	b.n	80034e2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ce:	f7fe fc9b 	bl	8001e08 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e144      	b.n	800376c <HAL_RCC_OscConfig+0x106c>
 80034e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80034ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	fa93 f2a3 	rbit	r2, r3
 80034fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003502:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003506:	601a      	str	r2, [r3, #0]
  return result;
 8003508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003510:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003512:	fab3 f383 	clz	r3, r3
 8003516:	b2db      	uxtb	r3, r3
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b01      	cmp	r3, #1
 8003524:	d102      	bne.n	800352c <HAL_RCC_OscConfig+0xe2c>
 8003526:	4b54      	ldr	r3, [pc, #336]	; (8003678 <HAL_RCC_OscConfig+0xf78>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	e027      	b.n	800357c <HAL_RCC_OscConfig+0xe7c>
 800352c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003530:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003534:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003538:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	fa93 f2a3 	rbit	r2, r3
 8003548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003556:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800355a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003564:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	fa93 f2a3 	rbit	r2, r3
 800356e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003572:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	4b3f      	ldr	r3, [pc, #252]	; (8003678 <HAL_RCC_OscConfig+0xf78>)
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003580:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003584:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003588:	6011      	str	r1, [r2, #0]
 800358a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800358e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	fa92 f1a2 	rbit	r1, r2
 8003598:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800359c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80035a0:	6011      	str	r1, [r2, #0]
  return result;
 80035a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035a6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80035aa:	6812      	ldr	r2, [r2, #0]
 80035ac:	fab2 f282 	clz	r2, r2
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	f042 0220 	orr.w	r2, r2, #32
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	f002 021f 	and.w	r2, r2, #31
 80035bc:	2101      	movs	r1, #1
 80035be:	fa01 f202 	lsl.w	r2, r1, r2
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d082      	beq.n	80034ce <HAL_RCC_OscConfig+0xdce>
 80035c8:	e0cf      	b.n	800376a <HAL_RCC_OscConfig+0x106a>
 80035ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ce:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80035d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035dc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	fa93 f2a3 	rbit	r2, r3
 80035e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ea:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80035ee:	601a      	str	r2, [r3, #0]
  return result;
 80035f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80035f8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003604:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	461a      	mov	r2, r3
 800360c:	2300      	movs	r3, #0
 800360e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7fe fbfa 	bl	8001e08 <HAL_GetTick>
 8003614:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003618:	e009      	b.n	800362e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800361a:	f7fe fbf5 	bl	8001e08 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e09e      	b.n	800376c <HAL_RCC_OscConfig+0x106c>
 800362e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003632:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003636:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800363a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003640:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	fa93 f2a3 	rbit	r2, r3
 800364a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003652:	601a      	str	r2, [r3, #0]
  return result;
 8003654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003658:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800365c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800365e:	fab3 f383 	clz	r3, r3
 8003662:	b2db      	uxtb	r3, r3
 8003664:	095b      	lsrs	r3, r3, #5
 8003666:	b2db      	uxtb	r3, r3
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b01      	cmp	r3, #1
 8003670:	d104      	bne.n	800367c <HAL_RCC_OscConfig+0xf7c>
 8003672:	4b01      	ldr	r3, [pc, #4]	; (8003678 <HAL_RCC_OscConfig+0xf78>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	e029      	b.n	80036cc <HAL_RCC_OscConfig+0xfcc>
 8003678:	40021000 	.word	0x40021000
 800367c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003680:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003684:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003688:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	fa93 f2a3 	rbit	r2, r3
 8003698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80036aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	fa93 f2a3 	rbit	r2, r3
 80036be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	4b2b      	ldr	r3, [pc, #172]	; (8003778 <HAL_RCC_OscConfig+0x1078>)
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036d0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80036d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036d8:	6011      	str	r1, [r2, #0]
 80036da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036de:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	fa92 f1a2 	rbit	r1, r2
 80036e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036ec:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80036f0:	6011      	str	r1, [r2, #0]
  return result;
 80036f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036f6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	fab2 f282 	clz	r2, r2
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	f042 0220 	orr.w	r2, r2, #32
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	f002 021f 	and.w	r2, r2, #31
 800370c:	2101      	movs	r1, #1
 800370e:	fa01 f202 	lsl.w	r2, r1, r2
 8003712:	4013      	ands	r3, r2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d180      	bne.n	800361a <HAL_RCC_OscConfig+0xf1a>
 8003718:	e027      	b.n	800376a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800371a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800371e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e01e      	b.n	800376c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800372e:	4b12      	ldr	r3, [pc, #72]	; (8003778 <HAL_RCC_OscConfig+0x1078>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003736:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800373a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800373e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003742:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	429a      	cmp	r2, r3
 800374c:	d10b      	bne.n	8003766 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800374e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003752:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003762:	429a      	cmp	r2, r3
 8003764:	d001      	beq.n	800376a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40021000 	.word	0x40021000

0800377c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b09e      	sub	sp, #120	; 0x78
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003786:	2300      	movs	r3, #0
 8003788:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e162      	b.n	8003a5a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003794:	4b90      	ldr	r3, [pc, #576]	; (80039d8 <HAL_RCC_ClockConfig+0x25c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d910      	bls.n	80037c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a2:	4b8d      	ldr	r3, [pc, #564]	; (80039d8 <HAL_RCC_ClockConfig+0x25c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 0207 	bic.w	r2, r3, #7
 80037aa:	498b      	ldr	r1, [pc, #556]	; (80039d8 <HAL_RCC_ClockConfig+0x25c>)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b2:	4b89      	ldr	r3, [pc, #548]	; (80039d8 <HAL_RCC_ClockConfig+0x25c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e14a      	b.n	8003a5a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d0:	4b82      	ldr	r3, [pc, #520]	; (80039dc <HAL_RCC_ClockConfig+0x260>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	497f      	ldr	r1, [pc, #508]	; (80039dc <HAL_RCC_ClockConfig+0x260>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 80dc 	beq.w	80039a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d13c      	bne.n	8003872 <HAL_RCC_ClockConfig+0xf6>
 80037f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003800:	fa93 f3a3 	rbit	r3, r3
 8003804:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003808:	fab3 f383 	clz	r3, r3
 800380c:	b2db      	uxtb	r3, r3
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	d102      	bne.n	8003822 <HAL_RCC_ClockConfig+0xa6>
 800381c:	4b6f      	ldr	r3, [pc, #444]	; (80039dc <HAL_RCC_ClockConfig+0x260>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	e00f      	b.n	8003842 <HAL_RCC_ClockConfig+0xc6>
 8003822:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003826:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800382a:	fa93 f3a3 	rbit	r3, r3
 800382e:	667b      	str	r3, [r7, #100]	; 0x64
 8003830:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003834:	663b      	str	r3, [r7, #96]	; 0x60
 8003836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003838:	fa93 f3a3 	rbit	r3, r3
 800383c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800383e:	4b67      	ldr	r3, [pc, #412]	; (80039dc <HAL_RCC_ClockConfig+0x260>)
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003846:	65ba      	str	r2, [r7, #88]	; 0x58
 8003848:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800384a:	fa92 f2a2 	rbit	r2, r2
 800384e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003850:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003852:	fab2 f282 	clz	r2, r2
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	f042 0220 	orr.w	r2, r2, #32
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	f002 021f 	and.w	r2, r2, #31
 8003862:	2101      	movs	r1, #1
 8003864:	fa01 f202 	lsl.w	r2, r1, r2
 8003868:	4013      	ands	r3, r2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d17b      	bne.n	8003966 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e0f3      	b.n	8003a5a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d13c      	bne.n	80038f4 <HAL_RCC_ClockConfig+0x178>
 800387a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800387e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003882:	fa93 f3a3 	rbit	r3, r3
 8003886:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388a:	fab3 f383 	clz	r3, r3
 800388e:	b2db      	uxtb	r3, r3
 8003890:	095b      	lsrs	r3, r3, #5
 8003892:	b2db      	uxtb	r3, r3
 8003894:	f043 0301 	orr.w	r3, r3, #1
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b01      	cmp	r3, #1
 800389c:	d102      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x128>
 800389e:	4b4f      	ldr	r3, [pc, #316]	; (80039dc <HAL_RCC_ClockConfig+0x260>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	e00f      	b.n	80038c4 <HAL_RCC_ClockConfig+0x148>
 80038a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ac:	fa93 f3a3 	rbit	r3, r3
 80038b0:	647b      	str	r3, [r7, #68]	; 0x44
 80038b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038b6:	643b      	str	r3, [r7, #64]	; 0x40
 80038b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ba:	fa93 f3a3 	rbit	r3, r3
 80038be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038c0:	4b46      	ldr	r3, [pc, #280]	; (80039dc <HAL_RCC_ClockConfig+0x260>)
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80038ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038cc:	fa92 f2a2 	rbit	r2, r2
 80038d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80038d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038d4:	fab2 f282 	clz	r2, r2
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	f042 0220 	orr.w	r2, r2, #32
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	f002 021f 	and.w	r2, r2, #31
 80038e4:	2101      	movs	r1, #1
 80038e6:	fa01 f202 	lsl.w	r2, r1, r2
 80038ea:	4013      	ands	r3, r2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d13a      	bne.n	8003966 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0b2      	b.n	8003a5a <HAL_RCC_ClockConfig+0x2de>
 80038f4:	2302      	movs	r3, #2
 80038f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fa:	fa93 f3a3 	rbit	r3, r3
 80038fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003902:	fab3 f383 	clz	r3, r3
 8003906:	b2db      	uxtb	r3, r3
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	b2db      	uxtb	r3, r3
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b01      	cmp	r3, #1
 8003914:	d102      	bne.n	800391c <HAL_RCC_ClockConfig+0x1a0>
 8003916:	4b31      	ldr	r3, [pc, #196]	; (80039dc <HAL_RCC_ClockConfig+0x260>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	e00d      	b.n	8003938 <HAL_RCC_ClockConfig+0x1bc>
 800391c:	2302      	movs	r3, #2
 800391e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003922:	fa93 f3a3 	rbit	r3, r3
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
 8003928:	2302      	movs	r3, #2
 800392a:	623b      	str	r3, [r7, #32]
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	fa93 f3a3 	rbit	r3, r3
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	4b29      	ldr	r3, [pc, #164]	; (80039dc <HAL_RCC_ClockConfig+0x260>)
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	2202      	movs	r2, #2
 800393a:	61ba      	str	r2, [r7, #24]
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	fa92 f2a2 	rbit	r2, r2
 8003942:	617a      	str	r2, [r7, #20]
  return result;
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	fab2 f282 	clz	r2, r2
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	f042 0220 	orr.w	r2, r2, #32
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	f002 021f 	and.w	r2, r2, #31
 8003956:	2101      	movs	r1, #1
 8003958:	fa01 f202 	lsl.w	r2, r1, r2
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e079      	b.n	8003a5a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003966:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <HAL_RCC_ClockConfig+0x260>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f023 0203 	bic.w	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	491a      	ldr	r1, [pc, #104]	; (80039dc <HAL_RCC_ClockConfig+0x260>)
 8003974:	4313      	orrs	r3, r2
 8003976:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003978:	f7fe fa46 	bl	8001e08 <HAL_GetTick>
 800397c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397e:	e00a      	b.n	8003996 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003980:	f7fe fa42 	bl	8001e08 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f241 3288 	movw	r2, #5000	; 0x1388
 800398e:	4293      	cmp	r3, r2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e061      	b.n	8003a5a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003996:	4b11      	ldr	r3, [pc, #68]	; (80039dc <HAL_RCC_ClockConfig+0x260>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f003 020c 	and.w	r2, r3, #12
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d1eb      	bne.n	8003980 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039a8:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <HAL_RCC_ClockConfig+0x25c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d214      	bcs.n	80039e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b6:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <HAL_RCC_ClockConfig+0x25c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 0207 	bic.w	r2, r3, #7
 80039be:	4906      	ldr	r1, [pc, #24]	; (80039d8 <HAL_RCC_ClockConfig+0x25c>)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c6:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <HAL_RCC_ClockConfig+0x25c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d005      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e040      	b.n	8003a5a <HAL_RCC_ClockConfig+0x2de>
 80039d8:	40022000 	.word	0x40022000
 80039dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ec:	4b1d      	ldr	r3, [pc, #116]	; (8003a64 <HAL_RCC_ClockConfig+0x2e8>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	491a      	ldr	r1, [pc, #104]	; (8003a64 <HAL_RCC_ClockConfig+0x2e8>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d009      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a0a:	4b16      	ldr	r3, [pc, #88]	; (8003a64 <HAL_RCC_ClockConfig+0x2e8>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4912      	ldr	r1, [pc, #72]	; (8003a64 <HAL_RCC_ClockConfig+0x2e8>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a1e:	f000 f829 	bl	8003a74 <HAL_RCC_GetSysClockFreq>
 8003a22:	4601      	mov	r1, r0
 8003a24:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <HAL_RCC_ClockConfig+0x2e8>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a2c:	22f0      	movs	r2, #240	; 0xf0
 8003a2e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	fa92 f2a2 	rbit	r2, r2
 8003a36:	60fa      	str	r2, [r7, #12]
  return result;
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	fab2 f282 	clz	r2, r2
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	40d3      	lsrs	r3, r2
 8003a42:	4a09      	ldr	r2, [pc, #36]	; (8003a68 <HAL_RCC_ClockConfig+0x2ec>)
 8003a44:	5cd3      	ldrb	r3, [r2, r3]
 8003a46:	fa21 f303 	lsr.w	r3, r1, r3
 8003a4a:	4a08      	ldr	r2, [pc, #32]	; (8003a6c <HAL_RCC_ClockConfig+0x2f0>)
 8003a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a4e:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <HAL_RCC_ClockConfig+0x2f4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe f994 	bl	8001d80 <HAL_InitTick>
  
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3778      	adds	r7, #120	; 0x78
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40021000 	.word	0x40021000
 8003a68:	08009528 	.word	0x08009528
 8003a6c:	20000140 	.word	0x20000140
 8003a70:	20000194 	.word	0x20000194

08003a74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b08b      	sub	sp, #44	; 0x2c
 8003a78:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61fb      	str	r3, [r7, #28]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61bb      	str	r3, [r7, #24]
 8003a82:	2300      	movs	r3, #0
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a8e:	4b29      	ldr	r3, [pc, #164]	; (8003b34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f003 030c 	and.w	r3, r3, #12
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d002      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x30>
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d003      	beq.n	8003aaa <HAL_RCC_GetSysClockFreq+0x36>
 8003aa2:	e03c      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003aa4:	4b24      	ldr	r3, [pc, #144]	; (8003b38 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003aa6:	623b      	str	r3, [r7, #32]
      break;
 8003aa8:	e03c      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003ab0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003ab4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	fa92 f2a2 	rbit	r2, r2
 8003abc:	607a      	str	r2, [r7, #4]
  return result;
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	fab2 f282 	clz	r2, r2
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	40d3      	lsrs	r3, r2
 8003ac8:	4a1c      	ldr	r2, [pc, #112]	; (8003b3c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003aca:	5cd3      	ldrb	r3, [r2, r3]
 8003acc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003ace:	4b19      	ldr	r3, [pc, #100]	; (8003b34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	220f      	movs	r2, #15
 8003ad8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	fa92 f2a2 	rbit	r2, r2
 8003ae0:	60fa      	str	r2, [r7, #12]
  return result;
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	fab2 f282 	clz	r2, r2
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	40d3      	lsrs	r3, r2
 8003aec:	4a14      	ldr	r2, [pc, #80]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003aee:	5cd3      	ldrb	r3, [r2, r3]
 8003af0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003afc:	4a0e      	ldr	r2, [pc, #56]	; (8003b38 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0c:	e004      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	4a0c      	ldr	r2, [pc, #48]	; (8003b44 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b12:	fb02 f303 	mul.w	r3, r2, r3
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	623b      	str	r3, [r7, #32]
      break;
 8003b1c:	e002      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b1e:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b20:	623b      	str	r3, [r7, #32]
      break;
 8003b22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b24:	6a3b      	ldr	r3, [r7, #32]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	372c      	adds	r7, #44	; 0x2c
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40021000 	.word	0x40021000
 8003b38:	007a1200 	.word	0x007a1200
 8003b3c:	08009538 	.word	0x08009538
 8003b40:	08009548 	.word	0x08009548
 8003b44:	003d0900 	.word	0x003d0900

08003b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b092      	sub	sp, #72	; 0x48
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 80d4 	beq.w	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b6c:	4b4e      	ldr	r3, [pc, #312]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10e      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b78:	4b4b      	ldr	r3, [pc, #300]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	4a4a      	ldr	r2, [pc, #296]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b82:	61d3      	str	r3, [r2, #28]
 8003b84:	4b48      	ldr	r3, [pc, #288]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b90:	2301      	movs	r3, #1
 8003b92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b96:	4b45      	ldr	r3, [pc, #276]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d118      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ba2:	4b42      	ldr	r3, [pc, #264]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a41      	ldr	r2, [pc, #260]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bae:	f7fe f92b 	bl	8001e08 <HAL_GetTick>
 8003bb2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb6:	f7fe f927 	bl	8001e08 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b64      	cmp	r3, #100	; 0x64
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e169      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc8:	4b38      	ldr	r3, [pc, #224]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0f0      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bd4:	4b34      	ldr	r3, [pc, #208]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 8084 	beq.w	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d07c      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bf4:	4b2c      	ldr	r3, [pc, #176]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	fa93 f3a3 	rbit	r3, r3
 8003c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c0e:	fab3 f383 	clz	r3, r3
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	4b26      	ldr	r3, [pc, #152]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	2301      	movs	r3, #1
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2a:	fa93 f3a3 	rbit	r3, r3
 8003c2e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c32:	fab3 f383 	clz	r3, r3
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4b1d      	ldr	r3, [pc, #116]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	461a      	mov	r2, r3
 8003c42:	2300      	movs	r3, #0
 8003c44:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c46:	4a18      	ldr	r2, [pc, #96]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c4a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d04b      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c56:	f7fe f8d7 	bl	8001e08 <HAL_GetTick>
 8003c5a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5c:	e00a      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5e:	f7fe f8d3 	bl	8001e08 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e113      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003c74:	2302      	movs	r3, #2
 8003c76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7a:	fa93 f3a3 	rbit	r3, r3
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c80:	2302      	movs	r3, #2
 8003c82:	623b      	str	r3, [r7, #32]
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	fa93 f3a3 	rbit	r3, r3
 8003c8a:	61fb      	str	r3, [r7, #28]
  return result;
 8003c8c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c8e:	fab3 f383 	clz	r3, r3
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	095b      	lsrs	r3, r3, #5
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f043 0302 	orr.w	r3, r3, #2
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d108      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003ca2:	4b01      	ldr	r3, [pc, #4]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	e00d      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	40007000 	.word	0x40007000
 8003cb0:	10908100 	.word	0x10908100
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	fa93 f3a3 	rbit	r3, r3
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	4b78      	ldr	r3, [pc, #480]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	613a      	str	r2, [r7, #16]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	fa92 f2a2 	rbit	r2, r2
 8003cce:	60fa      	str	r2, [r7, #12]
  return result;
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	fab2 f282 	clz	r2, r2
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	f002 021f 	and.w	r2, r2, #31
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0b7      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003cee:	4b6d      	ldr	r3, [pc, #436]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	496a      	ldr	r1, [pc, #424]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d105      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d08:	4b66      	ldr	r3, [pc, #408]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	4a65      	ldr	r2, [pc, #404]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d008      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d20:	4b60      	ldr	r3, [pc, #384]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	f023 0203 	bic.w	r2, r3, #3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	495d      	ldr	r1, [pc, #372]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d008      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d3e:	4b59      	ldr	r3, [pc, #356]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	4956      	ldr	r1, [pc, #344]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d5c:	4b51      	ldr	r3, [pc, #324]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	494e      	ldr	r1, [pc, #312]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d008      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d7a:	4b4a      	ldr	r3, [pc, #296]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	f023 0210 	bic.w	r2, r3, #16
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	4947      	ldr	r1, [pc, #284]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d008      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003d98:	4b42      	ldr	r3, [pc, #264]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	493f      	ldr	r1, [pc, #252]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d008      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003db6:	4b3b      	ldr	r3, [pc, #236]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	f023 0220 	bic.w	r2, r3, #32
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	4938      	ldr	r1, [pc, #224]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d008      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003dd4:	4b33      	ldr	r3, [pc, #204]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	4930      	ldr	r1, [pc, #192]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d008      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003df2:	4b2c      	ldr	r3, [pc, #176]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	4929      	ldr	r1, [pc, #164]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e10:	4b24      	ldr	r3, [pc, #144]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	4921      	ldr	r1, [pc, #132]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e32:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	491a      	ldr	r1, [pc, #104]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d008      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003e4c:	4b15      	ldr	r3, [pc, #84]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	4912      	ldr	r1, [pc, #72]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d008      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	490b      	ldr	r1, [pc, #44]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d008      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003e88:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e94:	4903      	ldr	r1, [pc, #12]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3748      	adds	r7, #72	; 0x48
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40021000 	.word	0x40021000

08003ea8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e09d      	b.n	8003ff6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d108      	bne.n	8003ed4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eca:	d009      	beq.n	8003ee0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	61da      	str	r2, [r3, #28]
 8003ed2:	e005      	b.n	8003ee0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d106      	bne.n	8003f00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7fd fc5a 	bl	80017b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f20:	d902      	bls.n	8003f28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	e002      	b.n	8003f2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003f36:	d007      	beq.n	8003f48 <HAL_SPI_Init+0xa0>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f40:	d002      	beq.n	8003f48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8a:	ea42 0103 	orr.w	r1, r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	0c1b      	lsrs	r3, r3, #16
 8003fa4:	f003 0204 	and.w	r2, r3, #4
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	f003 0310 	and.w	r3, r3, #16
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003fc4:	ea42 0103 	orr.w	r1, r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	69da      	ldr	r2, [r3, #28]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fe4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b082      	sub	sp, #8
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e049      	b.n	80040a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d106      	bne.n	800402a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7fd fc07 	bl	8001838 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2202      	movs	r2, #2
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3304      	adds	r3, #4
 800403a:	4619      	mov	r1, r3
 800403c:	4610      	mov	r0, r2
 800403e:	f000 fa49 	bl	80044d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d109      	bne.n	80040d0 <HAL_TIM_PWM_Start+0x24>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	bf14      	ite	ne
 80040c8:	2301      	movne	r3, #1
 80040ca:	2300      	moveq	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	e03c      	b.n	800414a <HAL_TIM_PWM_Start+0x9e>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d109      	bne.n	80040ea <HAL_TIM_PWM_Start+0x3e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b01      	cmp	r3, #1
 80040e0:	bf14      	ite	ne
 80040e2:	2301      	movne	r3, #1
 80040e4:	2300      	moveq	r3, #0
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	e02f      	b.n	800414a <HAL_TIM_PWM_Start+0x9e>
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d109      	bne.n	8004104 <HAL_TIM_PWM_Start+0x58>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	bf14      	ite	ne
 80040fc:	2301      	movne	r3, #1
 80040fe:	2300      	moveq	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	e022      	b.n	800414a <HAL_TIM_PWM_Start+0x9e>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2b0c      	cmp	r3, #12
 8004108:	d109      	bne.n	800411e <HAL_TIM_PWM_Start+0x72>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b01      	cmp	r3, #1
 8004114:	bf14      	ite	ne
 8004116:	2301      	movne	r3, #1
 8004118:	2300      	moveq	r3, #0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	e015      	b.n	800414a <HAL_TIM_PWM_Start+0x9e>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b10      	cmp	r3, #16
 8004122:	d109      	bne.n	8004138 <HAL_TIM_PWM_Start+0x8c>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b01      	cmp	r3, #1
 800412e:	bf14      	ite	ne
 8004130:	2301      	movne	r3, #1
 8004132:	2300      	moveq	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	e008      	b.n	800414a <HAL_TIM_PWM_Start+0x9e>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b01      	cmp	r3, #1
 8004142:	bf14      	ite	ne
 8004144:	2301      	movne	r3, #1
 8004146:	2300      	moveq	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e097      	b.n	8004282 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d104      	bne.n	8004162 <HAL_TIM_PWM_Start+0xb6>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004160:	e023      	b.n	80041aa <HAL_TIM_PWM_Start+0xfe>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b04      	cmp	r3, #4
 8004166:	d104      	bne.n	8004172 <HAL_TIM_PWM_Start+0xc6>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004170:	e01b      	b.n	80041aa <HAL_TIM_PWM_Start+0xfe>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b08      	cmp	r3, #8
 8004176:	d104      	bne.n	8004182 <HAL_TIM_PWM_Start+0xd6>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004180:	e013      	b.n	80041aa <HAL_TIM_PWM_Start+0xfe>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b0c      	cmp	r3, #12
 8004186:	d104      	bne.n	8004192 <HAL_TIM_PWM_Start+0xe6>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004190:	e00b      	b.n	80041aa <HAL_TIM_PWM_Start+0xfe>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b10      	cmp	r3, #16
 8004196:	d104      	bne.n	80041a2 <HAL_TIM_PWM_Start+0xf6>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041a0:	e003      	b.n	80041aa <HAL_TIM_PWM_Start+0xfe>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2202      	movs	r2, #2
 80041a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2201      	movs	r2, #1
 80041b0:	6839      	ldr	r1, [r7, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 fcf4 	bl	8004ba0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a33      	ldr	r2, [pc, #204]	; (800428c <HAL_TIM_PWM_Start+0x1e0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d013      	beq.n	80041ea <HAL_TIM_PWM_Start+0x13e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a32      	ldr	r2, [pc, #200]	; (8004290 <HAL_TIM_PWM_Start+0x1e4>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00e      	beq.n	80041ea <HAL_TIM_PWM_Start+0x13e>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a30      	ldr	r2, [pc, #192]	; (8004294 <HAL_TIM_PWM_Start+0x1e8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d009      	beq.n	80041ea <HAL_TIM_PWM_Start+0x13e>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a2f      	ldr	r2, [pc, #188]	; (8004298 <HAL_TIM_PWM_Start+0x1ec>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d004      	beq.n	80041ea <HAL_TIM_PWM_Start+0x13e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a2d      	ldr	r2, [pc, #180]	; (800429c <HAL_TIM_PWM_Start+0x1f0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d101      	bne.n	80041ee <HAL_TIM_PWM_Start+0x142>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <HAL_TIM_PWM_Start+0x144>
 80041ee:	2300      	movs	r3, #0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d007      	beq.n	8004204 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004202:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a20      	ldr	r2, [pc, #128]	; (800428c <HAL_TIM_PWM_Start+0x1e0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d018      	beq.n	8004240 <HAL_TIM_PWM_Start+0x194>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004216:	d013      	beq.n	8004240 <HAL_TIM_PWM_Start+0x194>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a20      	ldr	r2, [pc, #128]	; (80042a0 <HAL_TIM_PWM_Start+0x1f4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d00e      	beq.n	8004240 <HAL_TIM_PWM_Start+0x194>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1f      	ldr	r2, [pc, #124]	; (80042a4 <HAL_TIM_PWM_Start+0x1f8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d009      	beq.n	8004240 <HAL_TIM_PWM_Start+0x194>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a17      	ldr	r2, [pc, #92]	; (8004290 <HAL_TIM_PWM_Start+0x1e4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d004      	beq.n	8004240 <HAL_TIM_PWM_Start+0x194>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a16      	ldr	r2, [pc, #88]	; (8004294 <HAL_TIM_PWM_Start+0x1e8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d115      	bne.n	800426c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	4b18      	ldr	r3, [pc, #96]	; (80042a8 <HAL_TIM_PWM_Start+0x1fc>)
 8004248:	4013      	ands	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b06      	cmp	r3, #6
 8004250:	d015      	beq.n	800427e <HAL_TIM_PWM_Start+0x1d2>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004258:	d011      	beq.n	800427e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f042 0201 	orr.w	r2, r2, #1
 8004268:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800426a:	e008      	b.n	800427e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0201 	orr.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	e000      	b.n	8004280 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	40012c00 	.word	0x40012c00
 8004290:	40013400 	.word	0x40013400
 8004294:	40014000 	.word	0x40014000
 8004298:	40014400 	.word	0x40014400
 800429c:	40014800 	.word	0x40014800
 80042a0:	40000400 	.word	0x40000400
 80042a4:	40000800 	.word	0x40000800
 80042a8:	00010007 	.word	0x00010007

080042ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d101      	bne.n	80042ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042c6:	2302      	movs	r3, #2
 80042c8:	e0ff      	b.n	80044ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b14      	cmp	r3, #20
 80042d6:	f200 80f0 	bhi.w	80044ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80042da:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e0:	08004335 	.word	0x08004335
 80042e4:	080044bb 	.word	0x080044bb
 80042e8:	080044bb 	.word	0x080044bb
 80042ec:	080044bb 	.word	0x080044bb
 80042f0:	08004375 	.word	0x08004375
 80042f4:	080044bb 	.word	0x080044bb
 80042f8:	080044bb 	.word	0x080044bb
 80042fc:	080044bb 	.word	0x080044bb
 8004300:	080043b7 	.word	0x080043b7
 8004304:	080044bb 	.word	0x080044bb
 8004308:	080044bb 	.word	0x080044bb
 800430c:	080044bb 	.word	0x080044bb
 8004310:	080043f7 	.word	0x080043f7
 8004314:	080044bb 	.word	0x080044bb
 8004318:	080044bb 	.word	0x080044bb
 800431c:	080044bb 	.word	0x080044bb
 8004320:	08004439 	.word	0x08004439
 8004324:	080044bb 	.word	0x080044bb
 8004328:	080044bb 	.word	0x080044bb
 800432c:	080044bb 	.word	0x080044bb
 8004330:	08004479 	.word	0x08004479
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68b9      	ldr	r1, [r7, #8]
 800433a:	4618      	mov	r0, r3
 800433c:	f000 f95a 	bl	80045f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0208 	orr.w	r2, r2, #8
 800434e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699a      	ldr	r2, [r3, #24]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0204 	bic.w	r2, r2, #4
 800435e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6999      	ldr	r1, [r3, #24]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	691a      	ldr	r2, [r3, #16]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	619a      	str	r2, [r3, #24]
      break;
 8004372:	e0a5      	b.n	80044c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68b9      	ldr	r1, [r7, #8]
 800437a:	4618      	mov	r0, r3
 800437c:	f000 f9ca 	bl	8004714 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699a      	ldr	r2, [r3, #24]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800438e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699a      	ldr	r2, [r3, #24]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800439e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6999      	ldr	r1, [r3, #24]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	021a      	lsls	r2, r3, #8
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	619a      	str	r2, [r3, #24]
      break;
 80043b4:	e084      	b.n	80044c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68b9      	ldr	r1, [r7, #8]
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 fa33 	bl	8004828 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69da      	ldr	r2, [r3, #28]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0208 	orr.w	r2, r2, #8
 80043d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	69da      	ldr	r2, [r3, #28]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0204 	bic.w	r2, r2, #4
 80043e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	69d9      	ldr	r1, [r3, #28]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	61da      	str	r2, [r3, #28]
      break;
 80043f4:	e064      	b.n	80044c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68b9      	ldr	r1, [r7, #8]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fa9b 	bl	8004938 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69da      	ldr	r2, [r3, #28]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69da      	ldr	r2, [r3, #28]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69d9      	ldr	r1, [r3, #28]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	021a      	lsls	r2, r3, #8
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	61da      	str	r2, [r3, #28]
      break;
 8004436:	e043      	b.n	80044c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68b9      	ldr	r1, [r7, #8]
 800443e:	4618      	mov	r0, r3
 8004440:	f000 fae4 	bl	8004a0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0208 	orr.w	r2, r2, #8
 8004452:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 0204 	bic.w	r2, r2, #4
 8004462:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	691a      	ldr	r2, [r3, #16]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004476:	e023      	b.n	80044c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68b9      	ldr	r1, [r7, #8]
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fb28 	bl	8004ad4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004492:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	021a      	lsls	r2, r3, #8
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044b8:	e002      	b.n	80044c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	75fb      	strb	r3, [r7, #23]
      break;
 80044be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop

080044d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a3c      	ldr	r2, [pc, #240]	; (80045d8 <TIM_Base_SetConfig+0x104>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00f      	beq.n	800450c <TIM_Base_SetConfig+0x38>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f2:	d00b      	beq.n	800450c <TIM_Base_SetConfig+0x38>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a39      	ldr	r2, [pc, #228]	; (80045dc <TIM_Base_SetConfig+0x108>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d007      	beq.n	800450c <TIM_Base_SetConfig+0x38>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a38      	ldr	r2, [pc, #224]	; (80045e0 <TIM_Base_SetConfig+0x10c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d003      	beq.n	800450c <TIM_Base_SetConfig+0x38>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a37      	ldr	r2, [pc, #220]	; (80045e4 <TIM_Base_SetConfig+0x110>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d108      	bne.n	800451e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a2d      	ldr	r2, [pc, #180]	; (80045d8 <TIM_Base_SetConfig+0x104>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d01b      	beq.n	800455e <TIM_Base_SetConfig+0x8a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452c:	d017      	beq.n	800455e <TIM_Base_SetConfig+0x8a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a2a      	ldr	r2, [pc, #168]	; (80045dc <TIM_Base_SetConfig+0x108>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d013      	beq.n	800455e <TIM_Base_SetConfig+0x8a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a29      	ldr	r2, [pc, #164]	; (80045e0 <TIM_Base_SetConfig+0x10c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d00f      	beq.n	800455e <TIM_Base_SetConfig+0x8a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a28      	ldr	r2, [pc, #160]	; (80045e4 <TIM_Base_SetConfig+0x110>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00b      	beq.n	800455e <TIM_Base_SetConfig+0x8a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a27      	ldr	r2, [pc, #156]	; (80045e8 <TIM_Base_SetConfig+0x114>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d007      	beq.n	800455e <TIM_Base_SetConfig+0x8a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a26      	ldr	r2, [pc, #152]	; (80045ec <TIM_Base_SetConfig+0x118>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d003      	beq.n	800455e <TIM_Base_SetConfig+0x8a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a25      	ldr	r2, [pc, #148]	; (80045f0 <TIM_Base_SetConfig+0x11c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d108      	bne.n	8004570 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4313      	orrs	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a10      	ldr	r2, [pc, #64]	; (80045d8 <TIM_Base_SetConfig+0x104>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00f      	beq.n	80045bc <TIM_Base_SetConfig+0xe8>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a11      	ldr	r2, [pc, #68]	; (80045e4 <TIM_Base_SetConfig+0x110>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d00b      	beq.n	80045bc <TIM_Base_SetConfig+0xe8>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a10      	ldr	r2, [pc, #64]	; (80045e8 <TIM_Base_SetConfig+0x114>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d007      	beq.n	80045bc <TIM_Base_SetConfig+0xe8>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a0f      	ldr	r2, [pc, #60]	; (80045ec <TIM_Base_SetConfig+0x118>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d003      	beq.n	80045bc <TIM_Base_SetConfig+0xe8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a0e      	ldr	r2, [pc, #56]	; (80045f0 <TIM_Base_SetConfig+0x11c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d103      	bne.n	80045c4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	615a      	str	r2, [r3, #20]
}
 80045ca:	bf00      	nop
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40012c00 	.word	0x40012c00
 80045dc:	40000400 	.word	0x40000400
 80045e0:	40000800 	.word	0x40000800
 80045e4:	40013400 	.word	0x40013400
 80045e8:	40014000 	.word	0x40014000
 80045ec:	40014400 	.word	0x40014400
 80045f0:	40014800 	.word	0x40014800

080045f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	f023 0201 	bic.w	r2, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f023 0303 	bic.w	r3, r3, #3
 800462e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f023 0302 	bic.w	r3, r3, #2
 8004640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a2c      	ldr	r2, [pc, #176]	; (8004700 <TIM_OC1_SetConfig+0x10c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d00f      	beq.n	8004674 <TIM_OC1_SetConfig+0x80>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a2b      	ldr	r2, [pc, #172]	; (8004704 <TIM_OC1_SetConfig+0x110>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d00b      	beq.n	8004674 <TIM_OC1_SetConfig+0x80>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a2a      	ldr	r2, [pc, #168]	; (8004708 <TIM_OC1_SetConfig+0x114>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d007      	beq.n	8004674 <TIM_OC1_SetConfig+0x80>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a29      	ldr	r2, [pc, #164]	; (800470c <TIM_OC1_SetConfig+0x118>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d003      	beq.n	8004674 <TIM_OC1_SetConfig+0x80>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a28      	ldr	r2, [pc, #160]	; (8004710 <TIM_OC1_SetConfig+0x11c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d10c      	bne.n	800468e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f023 0308 	bic.w	r3, r3, #8
 800467a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f023 0304 	bic.w	r3, r3, #4
 800468c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a1b      	ldr	r2, [pc, #108]	; (8004700 <TIM_OC1_SetConfig+0x10c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00f      	beq.n	80046b6 <TIM_OC1_SetConfig+0xc2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a1a      	ldr	r2, [pc, #104]	; (8004704 <TIM_OC1_SetConfig+0x110>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d00b      	beq.n	80046b6 <TIM_OC1_SetConfig+0xc2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a19      	ldr	r2, [pc, #100]	; (8004708 <TIM_OC1_SetConfig+0x114>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d007      	beq.n	80046b6 <TIM_OC1_SetConfig+0xc2>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a18      	ldr	r2, [pc, #96]	; (800470c <TIM_OC1_SetConfig+0x118>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d003      	beq.n	80046b6 <TIM_OC1_SetConfig+0xc2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a17      	ldr	r2, [pc, #92]	; (8004710 <TIM_OC1_SetConfig+0x11c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d111      	bne.n	80046da <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	621a      	str	r2, [r3, #32]
}
 80046f4:	bf00      	nop
 80046f6:	371c      	adds	r7, #28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	40012c00 	.word	0x40012c00
 8004704:	40013400 	.word	0x40013400
 8004708:	40014000 	.word	0x40014000
 800470c:	40014400 	.word	0x40014400
 8004710:	40014800 	.word	0x40014800

08004714 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	f023 0210 	bic.w	r2, r3, #16
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800474e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	021b      	lsls	r3, r3, #8
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4313      	orrs	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f023 0320 	bic.w	r3, r3, #32
 8004762:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	4313      	orrs	r3, r2
 800476e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a28      	ldr	r2, [pc, #160]	; (8004814 <TIM_OC2_SetConfig+0x100>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d003      	beq.n	8004780 <TIM_OC2_SetConfig+0x6c>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a27      	ldr	r2, [pc, #156]	; (8004818 <TIM_OC2_SetConfig+0x104>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d10d      	bne.n	800479c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	011b      	lsls	r3, r3, #4
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800479a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a1d      	ldr	r2, [pc, #116]	; (8004814 <TIM_OC2_SetConfig+0x100>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d00f      	beq.n	80047c4 <TIM_OC2_SetConfig+0xb0>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a1c      	ldr	r2, [pc, #112]	; (8004818 <TIM_OC2_SetConfig+0x104>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d00b      	beq.n	80047c4 <TIM_OC2_SetConfig+0xb0>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a1b      	ldr	r2, [pc, #108]	; (800481c <TIM_OC2_SetConfig+0x108>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d007      	beq.n	80047c4 <TIM_OC2_SetConfig+0xb0>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a1a      	ldr	r2, [pc, #104]	; (8004820 <TIM_OC2_SetConfig+0x10c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d003      	beq.n	80047c4 <TIM_OC2_SetConfig+0xb0>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a19      	ldr	r2, [pc, #100]	; (8004824 <TIM_OC2_SetConfig+0x110>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d113      	bne.n	80047ec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047ca:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047d2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	4313      	orrs	r3, r2
 80047de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	621a      	str	r2, [r3, #32]
}
 8004806:	bf00      	nop
 8004808:	371c      	adds	r7, #28
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	40012c00 	.word	0x40012c00
 8004818:	40013400 	.word	0x40013400
 800481c:	40014000 	.word	0x40014000
 8004820:	40014400 	.word	0x40014400
 8004824:	40014800 	.word	0x40014800

08004828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f023 0303 	bic.w	r3, r3, #3
 8004862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	4313      	orrs	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	021b      	lsls	r3, r3, #8
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	4313      	orrs	r3, r2
 8004880:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a27      	ldr	r2, [pc, #156]	; (8004924 <TIM_OC3_SetConfig+0xfc>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d003      	beq.n	8004892 <TIM_OC3_SetConfig+0x6a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a26      	ldr	r2, [pc, #152]	; (8004928 <TIM_OC3_SetConfig+0x100>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d10d      	bne.n	80048ae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004898:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	021b      	lsls	r3, r3, #8
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048ac:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a1c      	ldr	r2, [pc, #112]	; (8004924 <TIM_OC3_SetConfig+0xfc>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00f      	beq.n	80048d6 <TIM_OC3_SetConfig+0xae>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a1b      	ldr	r2, [pc, #108]	; (8004928 <TIM_OC3_SetConfig+0x100>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00b      	beq.n	80048d6 <TIM_OC3_SetConfig+0xae>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a1a      	ldr	r2, [pc, #104]	; (800492c <TIM_OC3_SetConfig+0x104>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d007      	beq.n	80048d6 <TIM_OC3_SetConfig+0xae>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a19      	ldr	r2, [pc, #100]	; (8004930 <TIM_OC3_SetConfig+0x108>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d003      	beq.n	80048d6 <TIM_OC3_SetConfig+0xae>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a18      	ldr	r2, [pc, #96]	; (8004934 <TIM_OC3_SetConfig+0x10c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d113      	bne.n	80048fe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	621a      	str	r2, [r3, #32]
}
 8004918:	bf00      	nop
 800491a:	371c      	adds	r7, #28
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	40012c00 	.word	0x40012c00
 8004928:	40013400 	.word	0x40013400
 800492c:	40014000 	.word	0x40014000
 8004930:	40014400 	.word	0x40014400
 8004934:	40014800 	.word	0x40014800

08004938 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800496a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	021b      	lsls	r3, r3, #8
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	4313      	orrs	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004986:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	031b      	lsls	r3, r3, #12
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a18      	ldr	r2, [pc, #96]	; (80049f8 <TIM_OC4_SetConfig+0xc0>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00f      	beq.n	80049bc <TIM_OC4_SetConfig+0x84>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a17      	ldr	r2, [pc, #92]	; (80049fc <TIM_OC4_SetConfig+0xc4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00b      	beq.n	80049bc <TIM_OC4_SetConfig+0x84>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a16      	ldr	r2, [pc, #88]	; (8004a00 <TIM_OC4_SetConfig+0xc8>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d007      	beq.n	80049bc <TIM_OC4_SetConfig+0x84>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a15      	ldr	r2, [pc, #84]	; (8004a04 <TIM_OC4_SetConfig+0xcc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d003      	beq.n	80049bc <TIM_OC4_SetConfig+0x84>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a14      	ldr	r2, [pc, #80]	; (8004a08 <TIM_OC4_SetConfig+0xd0>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d109      	bne.n	80049d0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	019b      	lsls	r3, r3, #6
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	621a      	str	r2, [r3, #32]
}
 80049ea:	bf00      	nop
 80049ec:	371c      	adds	r7, #28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40012c00 	.word	0x40012c00
 80049fc:	40013400 	.word	0x40013400
 8004a00:	40014000 	.word	0x40014000
 8004a04:	40014400 	.word	0x40014400
 8004a08:	40014800 	.word	0x40014800

08004a0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004a50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	041b      	lsls	r3, r3, #16
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a17      	ldr	r2, [pc, #92]	; (8004ac0 <TIM_OC5_SetConfig+0xb4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d00f      	beq.n	8004a86 <TIM_OC5_SetConfig+0x7a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a16      	ldr	r2, [pc, #88]	; (8004ac4 <TIM_OC5_SetConfig+0xb8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d00b      	beq.n	8004a86 <TIM_OC5_SetConfig+0x7a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a15      	ldr	r2, [pc, #84]	; (8004ac8 <TIM_OC5_SetConfig+0xbc>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d007      	beq.n	8004a86 <TIM_OC5_SetConfig+0x7a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a14      	ldr	r2, [pc, #80]	; (8004acc <TIM_OC5_SetConfig+0xc0>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d003      	beq.n	8004a86 <TIM_OC5_SetConfig+0x7a>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a13      	ldr	r2, [pc, #76]	; (8004ad0 <TIM_OC5_SetConfig+0xc4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d109      	bne.n	8004a9a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	021b      	lsls	r3, r3, #8
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	621a      	str	r2, [r3, #32]
}
 8004ab4:	bf00      	nop
 8004ab6:	371c      	adds	r7, #28
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	40012c00 	.word	0x40012c00
 8004ac4:	40013400 	.word	0x40013400
 8004ac8:	40014000 	.word	0x40014000
 8004acc:	40014400 	.word	0x40014400
 8004ad0:	40014800 	.word	0x40014800

08004ad4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	051b      	lsls	r3, r3, #20
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a18      	ldr	r2, [pc, #96]	; (8004b8c <TIM_OC6_SetConfig+0xb8>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d00f      	beq.n	8004b50 <TIM_OC6_SetConfig+0x7c>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a17      	ldr	r2, [pc, #92]	; (8004b90 <TIM_OC6_SetConfig+0xbc>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d00b      	beq.n	8004b50 <TIM_OC6_SetConfig+0x7c>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a16      	ldr	r2, [pc, #88]	; (8004b94 <TIM_OC6_SetConfig+0xc0>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d007      	beq.n	8004b50 <TIM_OC6_SetConfig+0x7c>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a15      	ldr	r2, [pc, #84]	; (8004b98 <TIM_OC6_SetConfig+0xc4>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d003      	beq.n	8004b50 <TIM_OC6_SetConfig+0x7c>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a14      	ldr	r2, [pc, #80]	; (8004b9c <TIM_OC6_SetConfig+0xc8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d109      	bne.n	8004b64 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	029b      	lsls	r3, r3, #10
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	621a      	str	r2, [r3, #32]
}
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40012c00 	.word	0x40012c00
 8004b90:	40013400 	.word	0x40013400
 8004b94:	40014000 	.word	0x40014000
 8004b98:	40014400 	.word	0x40014400
 8004b9c:	40014800 	.word	0x40014800

08004ba0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f003 031f 	and.w	r3, r3, #31
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6a1a      	ldr	r2, [r3, #32]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	401a      	ands	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a1a      	ldr	r2, [r3, #32]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f003 031f 	and.w	r3, r3, #31
 8004bd2:	6879      	ldr	r1, [r7, #4]
 8004bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	621a      	str	r2, [r3, #32]
}
 8004bde:	bf00      	nop
 8004be0:	371c      	adds	r7, #28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
	...

08004bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e063      	b.n	8004ccc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a2b      	ldr	r2, [pc, #172]	; (8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d004      	beq.n	8004c38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a2a      	ldr	r2, [pc, #168]	; (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d108      	bne.n	8004c4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a1b      	ldr	r2, [pc, #108]	; (8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d018      	beq.n	8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c76:	d013      	beq.n	8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a18      	ldr	r2, [pc, #96]	; (8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00e      	beq.n	8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a17      	ldr	r2, [pc, #92]	; (8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d009      	beq.n	8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a12      	ldr	r2, [pc, #72]	; (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d004      	beq.n	8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a13      	ldr	r2, [pc, #76]	; (8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d10c      	bne.n	8004cba <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ca6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	40012c00 	.word	0x40012c00
 8004cdc:	40013400 	.word	0x40013400
 8004ce0:	40000400 	.word	0x40000400
 8004ce4:	40000800 	.word	0x40000800
 8004ce8:	40014000 	.word	0x40014000

08004cec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004cf4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004cf8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	43db      	mvns	r3, r3
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d22:	b084      	sub	sp, #16
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	f107 0014 	add.w	r0, r7, #20
 8004d30:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	b004      	add	sp, #16
 8004d62:	4770      	bx	lr

08004d64 <__cvt>:
 8004d64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d68:	ec55 4b10 	vmov	r4, r5, d0
 8004d6c:	2d00      	cmp	r5, #0
 8004d6e:	460e      	mov	r6, r1
 8004d70:	4619      	mov	r1, r3
 8004d72:	462b      	mov	r3, r5
 8004d74:	bfbb      	ittet	lt
 8004d76:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004d7a:	461d      	movlt	r5, r3
 8004d7c:	2300      	movge	r3, #0
 8004d7e:	232d      	movlt	r3, #45	; 0x2d
 8004d80:	700b      	strb	r3, [r1, #0]
 8004d82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d84:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004d88:	4691      	mov	r9, r2
 8004d8a:	f023 0820 	bic.w	r8, r3, #32
 8004d8e:	bfbc      	itt	lt
 8004d90:	4622      	movlt	r2, r4
 8004d92:	4614      	movlt	r4, r2
 8004d94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d98:	d005      	beq.n	8004da6 <__cvt+0x42>
 8004d9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d9e:	d100      	bne.n	8004da2 <__cvt+0x3e>
 8004da0:	3601      	adds	r6, #1
 8004da2:	2102      	movs	r1, #2
 8004da4:	e000      	b.n	8004da8 <__cvt+0x44>
 8004da6:	2103      	movs	r1, #3
 8004da8:	ab03      	add	r3, sp, #12
 8004daa:	9301      	str	r3, [sp, #4]
 8004dac:	ab02      	add	r3, sp, #8
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	ec45 4b10 	vmov	d0, r4, r5
 8004db4:	4653      	mov	r3, sl
 8004db6:	4632      	mov	r2, r6
 8004db8:	f001 f87e 	bl	8005eb8 <_dtoa_r>
 8004dbc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004dc0:	4607      	mov	r7, r0
 8004dc2:	d102      	bne.n	8004dca <__cvt+0x66>
 8004dc4:	f019 0f01 	tst.w	r9, #1
 8004dc8:	d022      	beq.n	8004e10 <__cvt+0xac>
 8004dca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004dce:	eb07 0906 	add.w	r9, r7, r6
 8004dd2:	d110      	bne.n	8004df6 <__cvt+0x92>
 8004dd4:	783b      	ldrb	r3, [r7, #0]
 8004dd6:	2b30      	cmp	r3, #48	; 0x30
 8004dd8:	d10a      	bne.n	8004df0 <__cvt+0x8c>
 8004dda:	2200      	movs	r2, #0
 8004ddc:	2300      	movs	r3, #0
 8004dde:	4620      	mov	r0, r4
 8004de0:	4629      	mov	r1, r5
 8004de2:	f7fb fe71 	bl	8000ac8 <__aeabi_dcmpeq>
 8004de6:	b918      	cbnz	r0, 8004df0 <__cvt+0x8c>
 8004de8:	f1c6 0601 	rsb	r6, r6, #1
 8004dec:	f8ca 6000 	str.w	r6, [sl]
 8004df0:	f8da 3000 	ldr.w	r3, [sl]
 8004df4:	4499      	add	r9, r3
 8004df6:	2200      	movs	r2, #0
 8004df8:	2300      	movs	r3, #0
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	4629      	mov	r1, r5
 8004dfe:	f7fb fe63 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e02:	b108      	cbz	r0, 8004e08 <__cvt+0xa4>
 8004e04:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e08:	2230      	movs	r2, #48	; 0x30
 8004e0a:	9b03      	ldr	r3, [sp, #12]
 8004e0c:	454b      	cmp	r3, r9
 8004e0e:	d307      	bcc.n	8004e20 <__cvt+0xbc>
 8004e10:	9b03      	ldr	r3, [sp, #12]
 8004e12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e14:	1bdb      	subs	r3, r3, r7
 8004e16:	4638      	mov	r0, r7
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	b004      	add	sp, #16
 8004e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e20:	1c59      	adds	r1, r3, #1
 8004e22:	9103      	str	r1, [sp, #12]
 8004e24:	701a      	strb	r2, [r3, #0]
 8004e26:	e7f0      	b.n	8004e0a <__cvt+0xa6>

08004e28 <__exponent>:
 8004e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2900      	cmp	r1, #0
 8004e2e:	bfb8      	it	lt
 8004e30:	4249      	neglt	r1, r1
 8004e32:	f803 2b02 	strb.w	r2, [r3], #2
 8004e36:	bfb4      	ite	lt
 8004e38:	222d      	movlt	r2, #45	; 0x2d
 8004e3a:	222b      	movge	r2, #43	; 0x2b
 8004e3c:	2909      	cmp	r1, #9
 8004e3e:	7042      	strb	r2, [r0, #1]
 8004e40:	dd2a      	ble.n	8004e98 <__exponent+0x70>
 8004e42:	f10d 0207 	add.w	r2, sp, #7
 8004e46:	4617      	mov	r7, r2
 8004e48:	260a      	movs	r6, #10
 8004e4a:	4694      	mov	ip, r2
 8004e4c:	fb91 f5f6 	sdiv	r5, r1, r6
 8004e50:	fb06 1415 	mls	r4, r6, r5, r1
 8004e54:	3430      	adds	r4, #48	; 0x30
 8004e56:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	2c63      	cmp	r4, #99	; 0x63
 8004e5e:	f102 32ff 	add.w	r2, r2, #4294967295
 8004e62:	4629      	mov	r1, r5
 8004e64:	dcf1      	bgt.n	8004e4a <__exponent+0x22>
 8004e66:	3130      	adds	r1, #48	; 0x30
 8004e68:	f1ac 0402 	sub.w	r4, ip, #2
 8004e6c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004e70:	1c41      	adds	r1, r0, #1
 8004e72:	4622      	mov	r2, r4
 8004e74:	42ba      	cmp	r2, r7
 8004e76:	d30a      	bcc.n	8004e8e <__exponent+0x66>
 8004e78:	f10d 0209 	add.w	r2, sp, #9
 8004e7c:	eba2 020c 	sub.w	r2, r2, ip
 8004e80:	42bc      	cmp	r4, r7
 8004e82:	bf88      	it	hi
 8004e84:	2200      	movhi	r2, #0
 8004e86:	4413      	add	r3, r2
 8004e88:	1a18      	subs	r0, r3, r0
 8004e8a:	b003      	add	sp, #12
 8004e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e8e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004e92:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004e96:	e7ed      	b.n	8004e74 <__exponent+0x4c>
 8004e98:	2330      	movs	r3, #48	; 0x30
 8004e9a:	3130      	adds	r1, #48	; 0x30
 8004e9c:	7083      	strb	r3, [r0, #2]
 8004e9e:	70c1      	strb	r1, [r0, #3]
 8004ea0:	1d03      	adds	r3, r0, #4
 8004ea2:	e7f1      	b.n	8004e88 <__exponent+0x60>

08004ea4 <_printf_float>:
 8004ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea8:	ed2d 8b02 	vpush	{d8}
 8004eac:	b08d      	sub	sp, #52	; 0x34
 8004eae:	460c      	mov	r4, r1
 8004eb0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004eb4:	4616      	mov	r6, r2
 8004eb6:	461f      	mov	r7, r3
 8004eb8:	4605      	mov	r5, r0
 8004eba:	f000 fef7 	bl	8005cac <_localeconv_r>
 8004ebe:	f8d0 a000 	ldr.w	sl, [r0]
 8004ec2:	4650      	mov	r0, sl
 8004ec4:	f7fb f9d4 	bl	8000270 <strlen>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	930a      	str	r3, [sp, #40]	; 0x28
 8004ecc:	6823      	ldr	r3, [r4, #0]
 8004ece:	9305      	str	r3, [sp, #20]
 8004ed0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ed4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004ed8:	3307      	adds	r3, #7
 8004eda:	f023 0307 	bic.w	r3, r3, #7
 8004ede:	f103 0208 	add.w	r2, r3, #8
 8004ee2:	f8c8 2000 	str.w	r2, [r8]
 8004ee6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004eea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004eee:	9307      	str	r3, [sp, #28]
 8004ef0:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ef4:	ee08 0a10 	vmov	s16, r0
 8004ef8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004efc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f00:	4b9e      	ldr	r3, [pc, #632]	; (800517c <_printf_float+0x2d8>)
 8004f02:	f04f 32ff 	mov.w	r2, #4294967295
 8004f06:	f7fb fe11 	bl	8000b2c <__aeabi_dcmpun>
 8004f0a:	bb88      	cbnz	r0, 8004f70 <_printf_float+0xcc>
 8004f0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f10:	4b9a      	ldr	r3, [pc, #616]	; (800517c <_printf_float+0x2d8>)
 8004f12:	f04f 32ff 	mov.w	r2, #4294967295
 8004f16:	f7fb fdeb 	bl	8000af0 <__aeabi_dcmple>
 8004f1a:	bb48      	cbnz	r0, 8004f70 <_printf_float+0xcc>
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	2300      	movs	r3, #0
 8004f20:	4640      	mov	r0, r8
 8004f22:	4649      	mov	r1, r9
 8004f24:	f7fb fdda 	bl	8000adc <__aeabi_dcmplt>
 8004f28:	b110      	cbz	r0, 8004f30 <_printf_float+0x8c>
 8004f2a:	232d      	movs	r3, #45	; 0x2d
 8004f2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f30:	4a93      	ldr	r2, [pc, #588]	; (8005180 <_printf_float+0x2dc>)
 8004f32:	4b94      	ldr	r3, [pc, #592]	; (8005184 <_printf_float+0x2e0>)
 8004f34:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004f38:	bf94      	ite	ls
 8004f3a:	4690      	movls	r8, r2
 8004f3c:	4698      	movhi	r8, r3
 8004f3e:	2303      	movs	r3, #3
 8004f40:	6123      	str	r3, [r4, #16]
 8004f42:	9b05      	ldr	r3, [sp, #20]
 8004f44:	f023 0304 	bic.w	r3, r3, #4
 8004f48:	6023      	str	r3, [r4, #0]
 8004f4a:	f04f 0900 	mov.w	r9, #0
 8004f4e:	9700      	str	r7, [sp, #0]
 8004f50:	4633      	mov	r3, r6
 8004f52:	aa0b      	add	r2, sp, #44	; 0x2c
 8004f54:	4621      	mov	r1, r4
 8004f56:	4628      	mov	r0, r5
 8004f58:	f000 f9da 	bl	8005310 <_printf_common>
 8004f5c:	3001      	adds	r0, #1
 8004f5e:	f040 8090 	bne.w	8005082 <_printf_float+0x1de>
 8004f62:	f04f 30ff 	mov.w	r0, #4294967295
 8004f66:	b00d      	add	sp, #52	; 0x34
 8004f68:	ecbd 8b02 	vpop	{d8}
 8004f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f70:	4642      	mov	r2, r8
 8004f72:	464b      	mov	r3, r9
 8004f74:	4640      	mov	r0, r8
 8004f76:	4649      	mov	r1, r9
 8004f78:	f7fb fdd8 	bl	8000b2c <__aeabi_dcmpun>
 8004f7c:	b140      	cbz	r0, 8004f90 <_printf_float+0xec>
 8004f7e:	464b      	mov	r3, r9
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	bfbc      	itt	lt
 8004f84:	232d      	movlt	r3, #45	; 0x2d
 8004f86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f8a:	4a7f      	ldr	r2, [pc, #508]	; (8005188 <_printf_float+0x2e4>)
 8004f8c:	4b7f      	ldr	r3, [pc, #508]	; (800518c <_printf_float+0x2e8>)
 8004f8e:	e7d1      	b.n	8004f34 <_printf_float+0x90>
 8004f90:	6863      	ldr	r3, [r4, #4]
 8004f92:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004f96:	9206      	str	r2, [sp, #24]
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	d13f      	bne.n	800501c <_printf_float+0x178>
 8004f9c:	2306      	movs	r3, #6
 8004f9e:	6063      	str	r3, [r4, #4]
 8004fa0:	9b05      	ldr	r3, [sp, #20]
 8004fa2:	6861      	ldr	r1, [r4, #4]
 8004fa4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004fa8:	2300      	movs	r3, #0
 8004faa:	9303      	str	r3, [sp, #12]
 8004fac:	ab0a      	add	r3, sp, #40	; 0x28
 8004fae:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004fb2:	ab09      	add	r3, sp, #36	; 0x24
 8004fb4:	ec49 8b10 	vmov	d0, r8, r9
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	6022      	str	r2, [r4, #0]
 8004fbc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	f7ff fecf 	bl	8004d64 <__cvt>
 8004fc6:	9b06      	ldr	r3, [sp, #24]
 8004fc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fca:	2b47      	cmp	r3, #71	; 0x47
 8004fcc:	4680      	mov	r8, r0
 8004fce:	d108      	bne.n	8004fe2 <_printf_float+0x13e>
 8004fd0:	1cc8      	adds	r0, r1, #3
 8004fd2:	db02      	blt.n	8004fda <_printf_float+0x136>
 8004fd4:	6863      	ldr	r3, [r4, #4]
 8004fd6:	4299      	cmp	r1, r3
 8004fd8:	dd41      	ble.n	800505e <_printf_float+0x1ba>
 8004fda:	f1ab 0302 	sub.w	r3, fp, #2
 8004fde:	fa5f fb83 	uxtb.w	fp, r3
 8004fe2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004fe6:	d820      	bhi.n	800502a <_printf_float+0x186>
 8004fe8:	3901      	subs	r1, #1
 8004fea:	465a      	mov	r2, fp
 8004fec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ff0:	9109      	str	r1, [sp, #36]	; 0x24
 8004ff2:	f7ff ff19 	bl	8004e28 <__exponent>
 8004ff6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ff8:	1813      	adds	r3, r2, r0
 8004ffa:	2a01      	cmp	r2, #1
 8004ffc:	4681      	mov	r9, r0
 8004ffe:	6123      	str	r3, [r4, #16]
 8005000:	dc02      	bgt.n	8005008 <_printf_float+0x164>
 8005002:	6822      	ldr	r2, [r4, #0]
 8005004:	07d2      	lsls	r2, r2, #31
 8005006:	d501      	bpl.n	800500c <_printf_float+0x168>
 8005008:	3301      	adds	r3, #1
 800500a:	6123      	str	r3, [r4, #16]
 800500c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005010:	2b00      	cmp	r3, #0
 8005012:	d09c      	beq.n	8004f4e <_printf_float+0xaa>
 8005014:	232d      	movs	r3, #45	; 0x2d
 8005016:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800501a:	e798      	b.n	8004f4e <_printf_float+0xaa>
 800501c:	9a06      	ldr	r2, [sp, #24]
 800501e:	2a47      	cmp	r2, #71	; 0x47
 8005020:	d1be      	bne.n	8004fa0 <_printf_float+0xfc>
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1bc      	bne.n	8004fa0 <_printf_float+0xfc>
 8005026:	2301      	movs	r3, #1
 8005028:	e7b9      	b.n	8004f9e <_printf_float+0xfa>
 800502a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800502e:	d118      	bne.n	8005062 <_printf_float+0x1be>
 8005030:	2900      	cmp	r1, #0
 8005032:	6863      	ldr	r3, [r4, #4]
 8005034:	dd0b      	ble.n	800504e <_printf_float+0x1aa>
 8005036:	6121      	str	r1, [r4, #16]
 8005038:	b913      	cbnz	r3, 8005040 <_printf_float+0x19c>
 800503a:	6822      	ldr	r2, [r4, #0]
 800503c:	07d0      	lsls	r0, r2, #31
 800503e:	d502      	bpl.n	8005046 <_printf_float+0x1a2>
 8005040:	3301      	adds	r3, #1
 8005042:	440b      	add	r3, r1
 8005044:	6123      	str	r3, [r4, #16]
 8005046:	65a1      	str	r1, [r4, #88]	; 0x58
 8005048:	f04f 0900 	mov.w	r9, #0
 800504c:	e7de      	b.n	800500c <_printf_float+0x168>
 800504e:	b913      	cbnz	r3, 8005056 <_printf_float+0x1b2>
 8005050:	6822      	ldr	r2, [r4, #0]
 8005052:	07d2      	lsls	r2, r2, #31
 8005054:	d501      	bpl.n	800505a <_printf_float+0x1b6>
 8005056:	3302      	adds	r3, #2
 8005058:	e7f4      	b.n	8005044 <_printf_float+0x1a0>
 800505a:	2301      	movs	r3, #1
 800505c:	e7f2      	b.n	8005044 <_printf_float+0x1a0>
 800505e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005064:	4299      	cmp	r1, r3
 8005066:	db05      	blt.n	8005074 <_printf_float+0x1d0>
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	6121      	str	r1, [r4, #16]
 800506c:	07d8      	lsls	r0, r3, #31
 800506e:	d5ea      	bpl.n	8005046 <_printf_float+0x1a2>
 8005070:	1c4b      	adds	r3, r1, #1
 8005072:	e7e7      	b.n	8005044 <_printf_float+0x1a0>
 8005074:	2900      	cmp	r1, #0
 8005076:	bfd4      	ite	le
 8005078:	f1c1 0202 	rsble	r2, r1, #2
 800507c:	2201      	movgt	r2, #1
 800507e:	4413      	add	r3, r2
 8005080:	e7e0      	b.n	8005044 <_printf_float+0x1a0>
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	055a      	lsls	r2, r3, #21
 8005086:	d407      	bmi.n	8005098 <_printf_float+0x1f4>
 8005088:	6923      	ldr	r3, [r4, #16]
 800508a:	4642      	mov	r2, r8
 800508c:	4631      	mov	r1, r6
 800508e:	4628      	mov	r0, r5
 8005090:	47b8      	blx	r7
 8005092:	3001      	adds	r0, #1
 8005094:	d12c      	bne.n	80050f0 <_printf_float+0x24c>
 8005096:	e764      	b.n	8004f62 <_printf_float+0xbe>
 8005098:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800509c:	f240 80e0 	bls.w	8005260 <_printf_float+0x3bc>
 80050a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050a4:	2200      	movs	r2, #0
 80050a6:	2300      	movs	r3, #0
 80050a8:	f7fb fd0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80050ac:	2800      	cmp	r0, #0
 80050ae:	d034      	beq.n	800511a <_printf_float+0x276>
 80050b0:	4a37      	ldr	r2, [pc, #220]	; (8005190 <_printf_float+0x2ec>)
 80050b2:	2301      	movs	r3, #1
 80050b4:	4631      	mov	r1, r6
 80050b6:	4628      	mov	r0, r5
 80050b8:	47b8      	blx	r7
 80050ba:	3001      	adds	r0, #1
 80050bc:	f43f af51 	beq.w	8004f62 <_printf_float+0xbe>
 80050c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050c4:	429a      	cmp	r2, r3
 80050c6:	db02      	blt.n	80050ce <_printf_float+0x22a>
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	07d8      	lsls	r0, r3, #31
 80050cc:	d510      	bpl.n	80050f0 <_printf_float+0x24c>
 80050ce:	ee18 3a10 	vmov	r3, s16
 80050d2:	4652      	mov	r2, sl
 80050d4:	4631      	mov	r1, r6
 80050d6:	4628      	mov	r0, r5
 80050d8:	47b8      	blx	r7
 80050da:	3001      	adds	r0, #1
 80050dc:	f43f af41 	beq.w	8004f62 <_printf_float+0xbe>
 80050e0:	f04f 0800 	mov.w	r8, #0
 80050e4:	f104 091a 	add.w	r9, r4, #26
 80050e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050ea:	3b01      	subs	r3, #1
 80050ec:	4543      	cmp	r3, r8
 80050ee:	dc09      	bgt.n	8005104 <_printf_float+0x260>
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	079b      	lsls	r3, r3, #30
 80050f4:	f100 8107 	bmi.w	8005306 <_printf_float+0x462>
 80050f8:	68e0      	ldr	r0, [r4, #12]
 80050fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050fc:	4298      	cmp	r0, r3
 80050fe:	bfb8      	it	lt
 8005100:	4618      	movlt	r0, r3
 8005102:	e730      	b.n	8004f66 <_printf_float+0xc2>
 8005104:	2301      	movs	r3, #1
 8005106:	464a      	mov	r2, r9
 8005108:	4631      	mov	r1, r6
 800510a:	4628      	mov	r0, r5
 800510c:	47b8      	blx	r7
 800510e:	3001      	adds	r0, #1
 8005110:	f43f af27 	beq.w	8004f62 <_printf_float+0xbe>
 8005114:	f108 0801 	add.w	r8, r8, #1
 8005118:	e7e6      	b.n	80050e8 <_printf_float+0x244>
 800511a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800511c:	2b00      	cmp	r3, #0
 800511e:	dc39      	bgt.n	8005194 <_printf_float+0x2f0>
 8005120:	4a1b      	ldr	r2, [pc, #108]	; (8005190 <_printf_float+0x2ec>)
 8005122:	2301      	movs	r3, #1
 8005124:	4631      	mov	r1, r6
 8005126:	4628      	mov	r0, r5
 8005128:	47b8      	blx	r7
 800512a:	3001      	adds	r0, #1
 800512c:	f43f af19 	beq.w	8004f62 <_printf_float+0xbe>
 8005130:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005134:	4313      	orrs	r3, r2
 8005136:	d102      	bne.n	800513e <_printf_float+0x29a>
 8005138:	6823      	ldr	r3, [r4, #0]
 800513a:	07d9      	lsls	r1, r3, #31
 800513c:	d5d8      	bpl.n	80050f0 <_printf_float+0x24c>
 800513e:	ee18 3a10 	vmov	r3, s16
 8005142:	4652      	mov	r2, sl
 8005144:	4631      	mov	r1, r6
 8005146:	4628      	mov	r0, r5
 8005148:	47b8      	blx	r7
 800514a:	3001      	adds	r0, #1
 800514c:	f43f af09 	beq.w	8004f62 <_printf_float+0xbe>
 8005150:	f04f 0900 	mov.w	r9, #0
 8005154:	f104 0a1a 	add.w	sl, r4, #26
 8005158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800515a:	425b      	negs	r3, r3
 800515c:	454b      	cmp	r3, r9
 800515e:	dc01      	bgt.n	8005164 <_printf_float+0x2c0>
 8005160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005162:	e792      	b.n	800508a <_printf_float+0x1e6>
 8005164:	2301      	movs	r3, #1
 8005166:	4652      	mov	r2, sl
 8005168:	4631      	mov	r1, r6
 800516a:	4628      	mov	r0, r5
 800516c:	47b8      	blx	r7
 800516e:	3001      	adds	r0, #1
 8005170:	f43f aef7 	beq.w	8004f62 <_printf_float+0xbe>
 8005174:	f109 0901 	add.w	r9, r9, #1
 8005178:	e7ee      	b.n	8005158 <_printf_float+0x2b4>
 800517a:	bf00      	nop
 800517c:	7fefffff 	.word	0x7fefffff
 8005180:	08009558 	.word	0x08009558
 8005184:	0800955c 	.word	0x0800955c
 8005188:	08009560 	.word	0x08009560
 800518c:	08009564 	.word	0x08009564
 8005190:	08009568 	.word	0x08009568
 8005194:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005196:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005198:	429a      	cmp	r2, r3
 800519a:	bfa8      	it	ge
 800519c:	461a      	movge	r2, r3
 800519e:	2a00      	cmp	r2, #0
 80051a0:	4691      	mov	r9, r2
 80051a2:	dc37      	bgt.n	8005214 <_printf_float+0x370>
 80051a4:	f04f 0b00 	mov.w	fp, #0
 80051a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051ac:	f104 021a 	add.w	r2, r4, #26
 80051b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051b2:	9305      	str	r3, [sp, #20]
 80051b4:	eba3 0309 	sub.w	r3, r3, r9
 80051b8:	455b      	cmp	r3, fp
 80051ba:	dc33      	bgt.n	8005224 <_printf_float+0x380>
 80051bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051c0:	429a      	cmp	r2, r3
 80051c2:	db3b      	blt.n	800523c <_printf_float+0x398>
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	07da      	lsls	r2, r3, #31
 80051c8:	d438      	bmi.n	800523c <_printf_float+0x398>
 80051ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80051ce:	eba2 0903 	sub.w	r9, r2, r3
 80051d2:	9b05      	ldr	r3, [sp, #20]
 80051d4:	1ad2      	subs	r2, r2, r3
 80051d6:	4591      	cmp	r9, r2
 80051d8:	bfa8      	it	ge
 80051da:	4691      	movge	r9, r2
 80051dc:	f1b9 0f00 	cmp.w	r9, #0
 80051e0:	dc35      	bgt.n	800524e <_printf_float+0x3aa>
 80051e2:	f04f 0800 	mov.w	r8, #0
 80051e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051ea:	f104 0a1a 	add.w	sl, r4, #26
 80051ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051f2:	1a9b      	subs	r3, r3, r2
 80051f4:	eba3 0309 	sub.w	r3, r3, r9
 80051f8:	4543      	cmp	r3, r8
 80051fa:	f77f af79 	ble.w	80050f0 <_printf_float+0x24c>
 80051fe:	2301      	movs	r3, #1
 8005200:	4652      	mov	r2, sl
 8005202:	4631      	mov	r1, r6
 8005204:	4628      	mov	r0, r5
 8005206:	47b8      	blx	r7
 8005208:	3001      	adds	r0, #1
 800520a:	f43f aeaa 	beq.w	8004f62 <_printf_float+0xbe>
 800520e:	f108 0801 	add.w	r8, r8, #1
 8005212:	e7ec      	b.n	80051ee <_printf_float+0x34a>
 8005214:	4613      	mov	r3, r2
 8005216:	4631      	mov	r1, r6
 8005218:	4642      	mov	r2, r8
 800521a:	4628      	mov	r0, r5
 800521c:	47b8      	blx	r7
 800521e:	3001      	adds	r0, #1
 8005220:	d1c0      	bne.n	80051a4 <_printf_float+0x300>
 8005222:	e69e      	b.n	8004f62 <_printf_float+0xbe>
 8005224:	2301      	movs	r3, #1
 8005226:	4631      	mov	r1, r6
 8005228:	4628      	mov	r0, r5
 800522a:	9205      	str	r2, [sp, #20]
 800522c:	47b8      	blx	r7
 800522e:	3001      	adds	r0, #1
 8005230:	f43f ae97 	beq.w	8004f62 <_printf_float+0xbe>
 8005234:	9a05      	ldr	r2, [sp, #20]
 8005236:	f10b 0b01 	add.w	fp, fp, #1
 800523a:	e7b9      	b.n	80051b0 <_printf_float+0x30c>
 800523c:	ee18 3a10 	vmov	r3, s16
 8005240:	4652      	mov	r2, sl
 8005242:	4631      	mov	r1, r6
 8005244:	4628      	mov	r0, r5
 8005246:	47b8      	blx	r7
 8005248:	3001      	adds	r0, #1
 800524a:	d1be      	bne.n	80051ca <_printf_float+0x326>
 800524c:	e689      	b.n	8004f62 <_printf_float+0xbe>
 800524e:	9a05      	ldr	r2, [sp, #20]
 8005250:	464b      	mov	r3, r9
 8005252:	4442      	add	r2, r8
 8005254:	4631      	mov	r1, r6
 8005256:	4628      	mov	r0, r5
 8005258:	47b8      	blx	r7
 800525a:	3001      	adds	r0, #1
 800525c:	d1c1      	bne.n	80051e2 <_printf_float+0x33e>
 800525e:	e680      	b.n	8004f62 <_printf_float+0xbe>
 8005260:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005262:	2a01      	cmp	r2, #1
 8005264:	dc01      	bgt.n	800526a <_printf_float+0x3c6>
 8005266:	07db      	lsls	r3, r3, #31
 8005268:	d53a      	bpl.n	80052e0 <_printf_float+0x43c>
 800526a:	2301      	movs	r3, #1
 800526c:	4642      	mov	r2, r8
 800526e:	4631      	mov	r1, r6
 8005270:	4628      	mov	r0, r5
 8005272:	47b8      	blx	r7
 8005274:	3001      	adds	r0, #1
 8005276:	f43f ae74 	beq.w	8004f62 <_printf_float+0xbe>
 800527a:	ee18 3a10 	vmov	r3, s16
 800527e:	4652      	mov	r2, sl
 8005280:	4631      	mov	r1, r6
 8005282:	4628      	mov	r0, r5
 8005284:	47b8      	blx	r7
 8005286:	3001      	adds	r0, #1
 8005288:	f43f ae6b 	beq.w	8004f62 <_printf_float+0xbe>
 800528c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005290:	2200      	movs	r2, #0
 8005292:	2300      	movs	r3, #0
 8005294:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005298:	f7fb fc16 	bl	8000ac8 <__aeabi_dcmpeq>
 800529c:	b9d8      	cbnz	r0, 80052d6 <_printf_float+0x432>
 800529e:	f10a 33ff 	add.w	r3, sl, #4294967295
 80052a2:	f108 0201 	add.w	r2, r8, #1
 80052a6:	4631      	mov	r1, r6
 80052a8:	4628      	mov	r0, r5
 80052aa:	47b8      	blx	r7
 80052ac:	3001      	adds	r0, #1
 80052ae:	d10e      	bne.n	80052ce <_printf_float+0x42a>
 80052b0:	e657      	b.n	8004f62 <_printf_float+0xbe>
 80052b2:	2301      	movs	r3, #1
 80052b4:	4652      	mov	r2, sl
 80052b6:	4631      	mov	r1, r6
 80052b8:	4628      	mov	r0, r5
 80052ba:	47b8      	blx	r7
 80052bc:	3001      	adds	r0, #1
 80052be:	f43f ae50 	beq.w	8004f62 <_printf_float+0xbe>
 80052c2:	f108 0801 	add.w	r8, r8, #1
 80052c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052c8:	3b01      	subs	r3, #1
 80052ca:	4543      	cmp	r3, r8
 80052cc:	dcf1      	bgt.n	80052b2 <_printf_float+0x40e>
 80052ce:	464b      	mov	r3, r9
 80052d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80052d4:	e6da      	b.n	800508c <_printf_float+0x1e8>
 80052d6:	f04f 0800 	mov.w	r8, #0
 80052da:	f104 0a1a 	add.w	sl, r4, #26
 80052de:	e7f2      	b.n	80052c6 <_printf_float+0x422>
 80052e0:	2301      	movs	r3, #1
 80052e2:	4642      	mov	r2, r8
 80052e4:	e7df      	b.n	80052a6 <_printf_float+0x402>
 80052e6:	2301      	movs	r3, #1
 80052e8:	464a      	mov	r2, r9
 80052ea:	4631      	mov	r1, r6
 80052ec:	4628      	mov	r0, r5
 80052ee:	47b8      	blx	r7
 80052f0:	3001      	adds	r0, #1
 80052f2:	f43f ae36 	beq.w	8004f62 <_printf_float+0xbe>
 80052f6:	f108 0801 	add.w	r8, r8, #1
 80052fa:	68e3      	ldr	r3, [r4, #12]
 80052fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052fe:	1a5b      	subs	r3, r3, r1
 8005300:	4543      	cmp	r3, r8
 8005302:	dcf0      	bgt.n	80052e6 <_printf_float+0x442>
 8005304:	e6f8      	b.n	80050f8 <_printf_float+0x254>
 8005306:	f04f 0800 	mov.w	r8, #0
 800530a:	f104 0919 	add.w	r9, r4, #25
 800530e:	e7f4      	b.n	80052fa <_printf_float+0x456>

08005310 <_printf_common>:
 8005310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005314:	4616      	mov	r6, r2
 8005316:	4699      	mov	r9, r3
 8005318:	688a      	ldr	r2, [r1, #8]
 800531a:	690b      	ldr	r3, [r1, #16]
 800531c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005320:	4293      	cmp	r3, r2
 8005322:	bfb8      	it	lt
 8005324:	4613      	movlt	r3, r2
 8005326:	6033      	str	r3, [r6, #0]
 8005328:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800532c:	4607      	mov	r7, r0
 800532e:	460c      	mov	r4, r1
 8005330:	b10a      	cbz	r2, 8005336 <_printf_common+0x26>
 8005332:	3301      	adds	r3, #1
 8005334:	6033      	str	r3, [r6, #0]
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	0699      	lsls	r1, r3, #26
 800533a:	bf42      	ittt	mi
 800533c:	6833      	ldrmi	r3, [r6, #0]
 800533e:	3302      	addmi	r3, #2
 8005340:	6033      	strmi	r3, [r6, #0]
 8005342:	6825      	ldr	r5, [r4, #0]
 8005344:	f015 0506 	ands.w	r5, r5, #6
 8005348:	d106      	bne.n	8005358 <_printf_common+0x48>
 800534a:	f104 0a19 	add.w	sl, r4, #25
 800534e:	68e3      	ldr	r3, [r4, #12]
 8005350:	6832      	ldr	r2, [r6, #0]
 8005352:	1a9b      	subs	r3, r3, r2
 8005354:	42ab      	cmp	r3, r5
 8005356:	dc26      	bgt.n	80053a6 <_printf_common+0x96>
 8005358:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800535c:	1e13      	subs	r3, r2, #0
 800535e:	6822      	ldr	r2, [r4, #0]
 8005360:	bf18      	it	ne
 8005362:	2301      	movne	r3, #1
 8005364:	0692      	lsls	r2, r2, #26
 8005366:	d42b      	bmi.n	80053c0 <_printf_common+0xb0>
 8005368:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800536c:	4649      	mov	r1, r9
 800536e:	4638      	mov	r0, r7
 8005370:	47c0      	blx	r8
 8005372:	3001      	adds	r0, #1
 8005374:	d01e      	beq.n	80053b4 <_printf_common+0xa4>
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	6922      	ldr	r2, [r4, #16]
 800537a:	f003 0306 	and.w	r3, r3, #6
 800537e:	2b04      	cmp	r3, #4
 8005380:	bf02      	ittt	eq
 8005382:	68e5      	ldreq	r5, [r4, #12]
 8005384:	6833      	ldreq	r3, [r6, #0]
 8005386:	1aed      	subeq	r5, r5, r3
 8005388:	68a3      	ldr	r3, [r4, #8]
 800538a:	bf0c      	ite	eq
 800538c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005390:	2500      	movne	r5, #0
 8005392:	4293      	cmp	r3, r2
 8005394:	bfc4      	itt	gt
 8005396:	1a9b      	subgt	r3, r3, r2
 8005398:	18ed      	addgt	r5, r5, r3
 800539a:	2600      	movs	r6, #0
 800539c:	341a      	adds	r4, #26
 800539e:	42b5      	cmp	r5, r6
 80053a0:	d11a      	bne.n	80053d8 <_printf_common+0xc8>
 80053a2:	2000      	movs	r0, #0
 80053a4:	e008      	b.n	80053b8 <_printf_common+0xa8>
 80053a6:	2301      	movs	r3, #1
 80053a8:	4652      	mov	r2, sl
 80053aa:	4649      	mov	r1, r9
 80053ac:	4638      	mov	r0, r7
 80053ae:	47c0      	blx	r8
 80053b0:	3001      	adds	r0, #1
 80053b2:	d103      	bne.n	80053bc <_printf_common+0xac>
 80053b4:	f04f 30ff 	mov.w	r0, #4294967295
 80053b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053bc:	3501      	adds	r5, #1
 80053be:	e7c6      	b.n	800534e <_printf_common+0x3e>
 80053c0:	18e1      	adds	r1, r4, r3
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	2030      	movs	r0, #48	; 0x30
 80053c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053ca:	4422      	add	r2, r4
 80053cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053d4:	3302      	adds	r3, #2
 80053d6:	e7c7      	b.n	8005368 <_printf_common+0x58>
 80053d8:	2301      	movs	r3, #1
 80053da:	4622      	mov	r2, r4
 80053dc:	4649      	mov	r1, r9
 80053de:	4638      	mov	r0, r7
 80053e0:	47c0      	blx	r8
 80053e2:	3001      	adds	r0, #1
 80053e4:	d0e6      	beq.n	80053b4 <_printf_common+0xa4>
 80053e6:	3601      	adds	r6, #1
 80053e8:	e7d9      	b.n	800539e <_printf_common+0x8e>
	...

080053ec <_printf_i>:
 80053ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053f0:	7e0f      	ldrb	r7, [r1, #24]
 80053f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053f4:	2f78      	cmp	r7, #120	; 0x78
 80053f6:	4691      	mov	r9, r2
 80053f8:	4680      	mov	r8, r0
 80053fa:	460c      	mov	r4, r1
 80053fc:	469a      	mov	sl, r3
 80053fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005402:	d807      	bhi.n	8005414 <_printf_i+0x28>
 8005404:	2f62      	cmp	r7, #98	; 0x62
 8005406:	d80a      	bhi.n	800541e <_printf_i+0x32>
 8005408:	2f00      	cmp	r7, #0
 800540a:	f000 80d4 	beq.w	80055b6 <_printf_i+0x1ca>
 800540e:	2f58      	cmp	r7, #88	; 0x58
 8005410:	f000 80c0 	beq.w	8005594 <_printf_i+0x1a8>
 8005414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005418:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800541c:	e03a      	b.n	8005494 <_printf_i+0xa8>
 800541e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005422:	2b15      	cmp	r3, #21
 8005424:	d8f6      	bhi.n	8005414 <_printf_i+0x28>
 8005426:	a101      	add	r1, pc, #4	; (adr r1, 800542c <_printf_i+0x40>)
 8005428:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800542c:	08005485 	.word	0x08005485
 8005430:	08005499 	.word	0x08005499
 8005434:	08005415 	.word	0x08005415
 8005438:	08005415 	.word	0x08005415
 800543c:	08005415 	.word	0x08005415
 8005440:	08005415 	.word	0x08005415
 8005444:	08005499 	.word	0x08005499
 8005448:	08005415 	.word	0x08005415
 800544c:	08005415 	.word	0x08005415
 8005450:	08005415 	.word	0x08005415
 8005454:	08005415 	.word	0x08005415
 8005458:	0800559d 	.word	0x0800559d
 800545c:	080054c5 	.word	0x080054c5
 8005460:	08005557 	.word	0x08005557
 8005464:	08005415 	.word	0x08005415
 8005468:	08005415 	.word	0x08005415
 800546c:	080055bf 	.word	0x080055bf
 8005470:	08005415 	.word	0x08005415
 8005474:	080054c5 	.word	0x080054c5
 8005478:	08005415 	.word	0x08005415
 800547c:	08005415 	.word	0x08005415
 8005480:	0800555f 	.word	0x0800555f
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	1d1a      	adds	r2, r3, #4
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	602a      	str	r2, [r5, #0]
 800548c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005490:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005494:	2301      	movs	r3, #1
 8005496:	e09f      	b.n	80055d8 <_printf_i+0x1ec>
 8005498:	6820      	ldr	r0, [r4, #0]
 800549a:	682b      	ldr	r3, [r5, #0]
 800549c:	0607      	lsls	r7, r0, #24
 800549e:	f103 0104 	add.w	r1, r3, #4
 80054a2:	6029      	str	r1, [r5, #0]
 80054a4:	d501      	bpl.n	80054aa <_printf_i+0xbe>
 80054a6:	681e      	ldr	r6, [r3, #0]
 80054a8:	e003      	b.n	80054b2 <_printf_i+0xc6>
 80054aa:	0646      	lsls	r6, r0, #25
 80054ac:	d5fb      	bpl.n	80054a6 <_printf_i+0xba>
 80054ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80054b2:	2e00      	cmp	r6, #0
 80054b4:	da03      	bge.n	80054be <_printf_i+0xd2>
 80054b6:	232d      	movs	r3, #45	; 0x2d
 80054b8:	4276      	negs	r6, r6
 80054ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054be:	485a      	ldr	r0, [pc, #360]	; (8005628 <_printf_i+0x23c>)
 80054c0:	230a      	movs	r3, #10
 80054c2:	e012      	b.n	80054ea <_printf_i+0xfe>
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	6820      	ldr	r0, [r4, #0]
 80054c8:	1d19      	adds	r1, r3, #4
 80054ca:	6029      	str	r1, [r5, #0]
 80054cc:	0605      	lsls	r5, r0, #24
 80054ce:	d501      	bpl.n	80054d4 <_printf_i+0xe8>
 80054d0:	681e      	ldr	r6, [r3, #0]
 80054d2:	e002      	b.n	80054da <_printf_i+0xee>
 80054d4:	0641      	lsls	r1, r0, #25
 80054d6:	d5fb      	bpl.n	80054d0 <_printf_i+0xe4>
 80054d8:	881e      	ldrh	r6, [r3, #0]
 80054da:	4853      	ldr	r0, [pc, #332]	; (8005628 <_printf_i+0x23c>)
 80054dc:	2f6f      	cmp	r7, #111	; 0x6f
 80054de:	bf0c      	ite	eq
 80054e0:	2308      	moveq	r3, #8
 80054e2:	230a      	movne	r3, #10
 80054e4:	2100      	movs	r1, #0
 80054e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054ea:	6865      	ldr	r5, [r4, #4]
 80054ec:	60a5      	str	r5, [r4, #8]
 80054ee:	2d00      	cmp	r5, #0
 80054f0:	bfa2      	ittt	ge
 80054f2:	6821      	ldrge	r1, [r4, #0]
 80054f4:	f021 0104 	bicge.w	r1, r1, #4
 80054f8:	6021      	strge	r1, [r4, #0]
 80054fa:	b90e      	cbnz	r6, 8005500 <_printf_i+0x114>
 80054fc:	2d00      	cmp	r5, #0
 80054fe:	d04b      	beq.n	8005598 <_printf_i+0x1ac>
 8005500:	4615      	mov	r5, r2
 8005502:	fbb6 f1f3 	udiv	r1, r6, r3
 8005506:	fb03 6711 	mls	r7, r3, r1, r6
 800550a:	5dc7      	ldrb	r7, [r0, r7]
 800550c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005510:	4637      	mov	r7, r6
 8005512:	42bb      	cmp	r3, r7
 8005514:	460e      	mov	r6, r1
 8005516:	d9f4      	bls.n	8005502 <_printf_i+0x116>
 8005518:	2b08      	cmp	r3, #8
 800551a:	d10b      	bne.n	8005534 <_printf_i+0x148>
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	07de      	lsls	r6, r3, #31
 8005520:	d508      	bpl.n	8005534 <_printf_i+0x148>
 8005522:	6923      	ldr	r3, [r4, #16]
 8005524:	6861      	ldr	r1, [r4, #4]
 8005526:	4299      	cmp	r1, r3
 8005528:	bfde      	ittt	le
 800552a:	2330      	movle	r3, #48	; 0x30
 800552c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005530:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005534:	1b52      	subs	r2, r2, r5
 8005536:	6122      	str	r2, [r4, #16]
 8005538:	f8cd a000 	str.w	sl, [sp]
 800553c:	464b      	mov	r3, r9
 800553e:	aa03      	add	r2, sp, #12
 8005540:	4621      	mov	r1, r4
 8005542:	4640      	mov	r0, r8
 8005544:	f7ff fee4 	bl	8005310 <_printf_common>
 8005548:	3001      	adds	r0, #1
 800554a:	d14a      	bne.n	80055e2 <_printf_i+0x1f6>
 800554c:	f04f 30ff 	mov.w	r0, #4294967295
 8005550:	b004      	add	sp, #16
 8005552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	f043 0320 	orr.w	r3, r3, #32
 800555c:	6023      	str	r3, [r4, #0]
 800555e:	4833      	ldr	r0, [pc, #204]	; (800562c <_printf_i+0x240>)
 8005560:	2778      	movs	r7, #120	; 0x78
 8005562:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	6829      	ldr	r1, [r5, #0]
 800556a:	061f      	lsls	r7, r3, #24
 800556c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005570:	d402      	bmi.n	8005578 <_printf_i+0x18c>
 8005572:	065f      	lsls	r7, r3, #25
 8005574:	bf48      	it	mi
 8005576:	b2b6      	uxthmi	r6, r6
 8005578:	07df      	lsls	r7, r3, #31
 800557a:	bf48      	it	mi
 800557c:	f043 0320 	orrmi.w	r3, r3, #32
 8005580:	6029      	str	r1, [r5, #0]
 8005582:	bf48      	it	mi
 8005584:	6023      	strmi	r3, [r4, #0]
 8005586:	b91e      	cbnz	r6, 8005590 <_printf_i+0x1a4>
 8005588:	6823      	ldr	r3, [r4, #0]
 800558a:	f023 0320 	bic.w	r3, r3, #32
 800558e:	6023      	str	r3, [r4, #0]
 8005590:	2310      	movs	r3, #16
 8005592:	e7a7      	b.n	80054e4 <_printf_i+0xf8>
 8005594:	4824      	ldr	r0, [pc, #144]	; (8005628 <_printf_i+0x23c>)
 8005596:	e7e4      	b.n	8005562 <_printf_i+0x176>
 8005598:	4615      	mov	r5, r2
 800559a:	e7bd      	b.n	8005518 <_printf_i+0x12c>
 800559c:	682b      	ldr	r3, [r5, #0]
 800559e:	6826      	ldr	r6, [r4, #0]
 80055a0:	6961      	ldr	r1, [r4, #20]
 80055a2:	1d18      	adds	r0, r3, #4
 80055a4:	6028      	str	r0, [r5, #0]
 80055a6:	0635      	lsls	r5, r6, #24
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	d501      	bpl.n	80055b0 <_printf_i+0x1c4>
 80055ac:	6019      	str	r1, [r3, #0]
 80055ae:	e002      	b.n	80055b6 <_printf_i+0x1ca>
 80055b0:	0670      	lsls	r0, r6, #25
 80055b2:	d5fb      	bpl.n	80055ac <_printf_i+0x1c0>
 80055b4:	8019      	strh	r1, [r3, #0]
 80055b6:	2300      	movs	r3, #0
 80055b8:	6123      	str	r3, [r4, #16]
 80055ba:	4615      	mov	r5, r2
 80055bc:	e7bc      	b.n	8005538 <_printf_i+0x14c>
 80055be:	682b      	ldr	r3, [r5, #0]
 80055c0:	1d1a      	adds	r2, r3, #4
 80055c2:	602a      	str	r2, [r5, #0]
 80055c4:	681d      	ldr	r5, [r3, #0]
 80055c6:	6862      	ldr	r2, [r4, #4]
 80055c8:	2100      	movs	r1, #0
 80055ca:	4628      	mov	r0, r5
 80055cc:	f7fa fe00 	bl	80001d0 <memchr>
 80055d0:	b108      	cbz	r0, 80055d6 <_printf_i+0x1ea>
 80055d2:	1b40      	subs	r0, r0, r5
 80055d4:	6060      	str	r0, [r4, #4]
 80055d6:	6863      	ldr	r3, [r4, #4]
 80055d8:	6123      	str	r3, [r4, #16]
 80055da:	2300      	movs	r3, #0
 80055dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055e0:	e7aa      	b.n	8005538 <_printf_i+0x14c>
 80055e2:	6923      	ldr	r3, [r4, #16]
 80055e4:	462a      	mov	r2, r5
 80055e6:	4649      	mov	r1, r9
 80055e8:	4640      	mov	r0, r8
 80055ea:	47d0      	blx	sl
 80055ec:	3001      	adds	r0, #1
 80055ee:	d0ad      	beq.n	800554c <_printf_i+0x160>
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	079b      	lsls	r3, r3, #30
 80055f4:	d413      	bmi.n	800561e <_printf_i+0x232>
 80055f6:	68e0      	ldr	r0, [r4, #12]
 80055f8:	9b03      	ldr	r3, [sp, #12]
 80055fa:	4298      	cmp	r0, r3
 80055fc:	bfb8      	it	lt
 80055fe:	4618      	movlt	r0, r3
 8005600:	e7a6      	b.n	8005550 <_printf_i+0x164>
 8005602:	2301      	movs	r3, #1
 8005604:	4632      	mov	r2, r6
 8005606:	4649      	mov	r1, r9
 8005608:	4640      	mov	r0, r8
 800560a:	47d0      	blx	sl
 800560c:	3001      	adds	r0, #1
 800560e:	d09d      	beq.n	800554c <_printf_i+0x160>
 8005610:	3501      	adds	r5, #1
 8005612:	68e3      	ldr	r3, [r4, #12]
 8005614:	9903      	ldr	r1, [sp, #12]
 8005616:	1a5b      	subs	r3, r3, r1
 8005618:	42ab      	cmp	r3, r5
 800561a:	dcf2      	bgt.n	8005602 <_printf_i+0x216>
 800561c:	e7eb      	b.n	80055f6 <_printf_i+0x20a>
 800561e:	2500      	movs	r5, #0
 8005620:	f104 0619 	add.w	r6, r4, #25
 8005624:	e7f5      	b.n	8005612 <_printf_i+0x226>
 8005626:	bf00      	nop
 8005628:	0800956a 	.word	0x0800956a
 800562c:	0800957b 	.word	0x0800957b

08005630 <_scanf_float>:
 8005630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005634:	b087      	sub	sp, #28
 8005636:	4617      	mov	r7, r2
 8005638:	9303      	str	r3, [sp, #12]
 800563a:	688b      	ldr	r3, [r1, #8]
 800563c:	1e5a      	subs	r2, r3, #1
 800563e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005642:	bf83      	ittte	hi
 8005644:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005648:	195b      	addhi	r3, r3, r5
 800564a:	9302      	strhi	r3, [sp, #8]
 800564c:	2300      	movls	r3, #0
 800564e:	bf86      	itte	hi
 8005650:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005654:	608b      	strhi	r3, [r1, #8]
 8005656:	9302      	strls	r3, [sp, #8]
 8005658:	680b      	ldr	r3, [r1, #0]
 800565a:	468b      	mov	fp, r1
 800565c:	2500      	movs	r5, #0
 800565e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005662:	f84b 3b1c 	str.w	r3, [fp], #28
 8005666:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800566a:	4680      	mov	r8, r0
 800566c:	460c      	mov	r4, r1
 800566e:	465e      	mov	r6, fp
 8005670:	46aa      	mov	sl, r5
 8005672:	46a9      	mov	r9, r5
 8005674:	9501      	str	r5, [sp, #4]
 8005676:	68a2      	ldr	r2, [r4, #8]
 8005678:	b152      	cbz	r2, 8005690 <_scanf_float+0x60>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b4e      	cmp	r3, #78	; 0x4e
 8005680:	d864      	bhi.n	800574c <_scanf_float+0x11c>
 8005682:	2b40      	cmp	r3, #64	; 0x40
 8005684:	d83c      	bhi.n	8005700 <_scanf_float+0xd0>
 8005686:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800568a:	b2c8      	uxtb	r0, r1
 800568c:	280e      	cmp	r0, #14
 800568e:	d93a      	bls.n	8005706 <_scanf_float+0xd6>
 8005690:	f1b9 0f00 	cmp.w	r9, #0
 8005694:	d003      	beq.n	800569e <_scanf_float+0x6e>
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800569c:	6023      	str	r3, [r4, #0]
 800569e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056a2:	f1ba 0f01 	cmp.w	sl, #1
 80056a6:	f200 8113 	bhi.w	80058d0 <_scanf_float+0x2a0>
 80056aa:	455e      	cmp	r6, fp
 80056ac:	f200 8105 	bhi.w	80058ba <_scanf_float+0x28a>
 80056b0:	2501      	movs	r5, #1
 80056b2:	4628      	mov	r0, r5
 80056b4:	b007      	add	sp, #28
 80056b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80056be:	2a0d      	cmp	r2, #13
 80056c0:	d8e6      	bhi.n	8005690 <_scanf_float+0x60>
 80056c2:	a101      	add	r1, pc, #4	; (adr r1, 80056c8 <_scanf_float+0x98>)
 80056c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80056c8:	08005807 	.word	0x08005807
 80056cc:	08005691 	.word	0x08005691
 80056d0:	08005691 	.word	0x08005691
 80056d4:	08005691 	.word	0x08005691
 80056d8:	08005867 	.word	0x08005867
 80056dc:	0800583f 	.word	0x0800583f
 80056e0:	08005691 	.word	0x08005691
 80056e4:	08005691 	.word	0x08005691
 80056e8:	08005815 	.word	0x08005815
 80056ec:	08005691 	.word	0x08005691
 80056f0:	08005691 	.word	0x08005691
 80056f4:	08005691 	.word	0x08005691
 80056f8:	08005691 	.word	0x08005691
 80056fc:	080057cd 	.word	0x080057cd
 8005700:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005704:	e7db      	b.n	80056be <_scanf_float+0x8e>
 8005706:	290e      	cmp	r1, #14
 8005708:	d8c2      	bhi.n	8005690 <_scanf_float+0x60>
 800570a:	a001      	add	r0, pc, #4	; (adr r0, 8005710 <_scanf_float+0xe0>)
 800570c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005710:	080057bf 	.word	0x080057bf
 8005714:	08005691 	.word	0x08005691
 8005718:	080057bf 	.word	0x080057bf
 800571c:	08005853 	.word	0x08005853
 8005720:	08005691 	.word	0x08005691
 8005724:	0800576d 	.word	0x0800576d
 8005728:	080057a9 	.word	0x080057a9
 800572c:	080057a9 	.word	0x080057a9
 8005730:	080057a9 	.word	0x080057a9
 8005734:	080057a9 	.word	0x080057a9
 8005738:	080057a9 	.word	0x080057a9
 800573c:	080057a9 	.word	0x080057a9
 8005740:	080057a9 	.word	0x080057a9
 8005744:	080057a9 	.word	0x080057a9
 8005748:	080057a9 	.word	0x080057a9
 800574c:	2b6e      	cmp	r3, #110	; 0x6e
 800574e:	d809      	bhi.n	8005764 <_scanf_float+0x134>
 8005750:	2b60      	cmp	r3, #96	; 0x60
 8005752:	d8b2      	bhi.n	80056ba <_scanf_float+0x8a>
 8005754:	2b54      	cmp	r3, #84	; 0x54
 8005756:	d077      	beq.n	8005848 <_scanf_float+0x218>
 8005758:	2b59      	cmp	r3, #89	; 0x59
 800575a:	d199      	bne.n	8005690 <_scanf_float+0x60>
 800575c:	2d07      	cmp	r5, #7
 800575e:	d197      	bne.n	8005690 <_scanf_float+0x60>
 8005760:	2508      	movs	r5, #8
 8005762:	e029      	b.n	80057b8 <_scanf_float+0x188>
 8005764:	2b74      	cmp	r3, #116	; 0x74
 8005766:	d06f      	beq.n	8005848 <_scanf_float+0x218>
 8005768:	2b79      	cmp	r3, #121	; 0x79
 800576a:	e7f6      	b.n	800575a <_scanf_float+0x12a>
 800576c:	6821      	ldr	r1, [r4, #0]
 800576e:	05c8      	lsls	r0, r1, #23
 8005770:	d51a      	bpl.n	80057a8 <_scanf_float+0x178>
 8005772:	9b02      	ldr	r3, [sp, #8]
 8005774:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005778:	6021      	str	r1, [r4, #0]
 800577a:	f109 0901 	add.w	r9, r9, #1
 800577e:	b11b      	cbz	r3, 8005788 <_scanf_float+0x158>
 8005780:	3b01      	subs	r3, #1
 8005782:	3201      	adds	r2, #1
 8005784:	9302      	str	r3, [sp, #8]
 8005786:	60a2      	str	r2, [r4, #8]
 8005788:	68a3      	ldr	r3, [r4, #8]
 800578a:	3b01      	subs	r3, #1
 800578c:	60a3      	str	r3, [r4, #8]
 800578e:	6923      	ldr	r3, [r4, #16]
 8005790:	3301      	adds	r3, #1
 8005792:	6123      	str	r3, [r4, #16]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3b01      	subs	r3, #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	607b      	str	r3, [r7, #4]
 800579c:	f340 8084 	ble.w	80058a8 <_scanf_float+0x278>
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	3301      	adds	r3, #1
 80057a4:	603b      	str	r3, [r7, #0]
 80057a6:	e766      	b.n	8005676 <_scanf_float+0x46>
 80057a8:	eb1a 0f05 	cmn.w	sl, r5
 80057ac:	f47f af70 	bne.w	8005690 <_scanf_float+0x60>
 80057b0:	6822      	ldr	r2, [r4, #0]
 80057b2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80057b6:	6022      	str	r2, [r4, #0]
 80057b8:	f806 3b01 	strb.w	r3, [r6], #1
 80057bc:	e7e4      	b.n	8005788 <_scanf_float+0x158>
 80057be:	6822      	ldr	r2, [r4, #0]
 80057c0:	0610      	lsls	r0, r2, #24
 80057c2:	f57f af65 	bpl.w	8005690 <_scanf_float+0x60>
 80057c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057ca:	e7f4      	b.n	80057b6 <_scanf_float+0x186>
 80057cc:	f1ba 0f00 	cmp.w	sl, #0
 80057d0:	d10e      	bne.n	80057f0 <_scanf_float+0x1c0>
 80057d2:	f1b9 0f00 	cmp.w	r9, #0
 80057d6:	d10e      	bne.n	80057f6 <_scanf_float+0x1c6>
 80057d8:	6822      	ldr	r2, [r4, #0]
 80057da:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80057de:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80057e2:	d108      	bne.n	80057f6 <_scanf_float+0x1c6>
 80057e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80057e8:	6022      	str	r2, [r4, #0]
 80057ea:	f04f 0a01 	mov.w	sl, #1
 80057ee:	e7e3      	b.n	80057b8 <_scanf_float+0x188>
 80057f0:	f1ba 0f02 	cmp.w	sl, #2
 80057f4:	d055      	beq.n	80058a2 <_scanf_float+0x272>
 80057f6:	2d01      	cmp	r5, #1
 80057f8:	d002      	beq.n	8005800 <_scanf_float+0x1d0>
 80057fa:	2d04      	cmp	r5, #4
 80057fc:	f47f af48 	bne.w	8005690 <_scanf_float+0x60>
 8005800:	3501      	adds	r5, #1
 8005802:	b2ed      	uxtb	r5, r5
 8005804:	e7d8      	b.n	80057b8 <_scanf_float+0x188>
 8005806:	f1ba 0f01 	cmp.w	sl, #1
 800580a:	f47f af41 	bne.w	8005690 <_scanf_float+0x60>
 800580e:	f04f 0a02 	mov.w	sl, #2
 8005812:	e7d1      	b.n	80057b8 <_scanf_float+0x188>
 8005814:	b97d      	cbnz	r5, 8005836 <_scanf_float+0x206>
 8005816:	f1b9 0f00 	cmp.w	r9, #0
 800581a:	f47f af3c 	bne.w	8005696 <_scanf_float+0x66>
 800581e:	6822      	ldr	r2, [r4, #0]
 8005820:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005824:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005828:	f47f af39 	bne.w	800569e <_scanf_float+0x6e>
 800582c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005830:	6022      	str	r2, [r4, #0]
 8005832:	2501      	movs	r5, #1
 8005834:	e7c0      	b.n	80057b8 <_scanf_float+0x188>
 8005836:	2d03      	cmp	r5, #3
 8005838:	d0e2      	beq.n	8005800 <_scanf_float+0x1d0>
 800583a:	2d05      	cmp	r5, #5
 800583c:	e7de      	b.n	80057fc <_scanf_float+0x1cc>
 800583e:	2d02      	cmp	r5, #2
 8005840:	f47f af26 	bne.w	8005690 <_scanf_float+0x60>
 8005844:	2503      	movs	r5, #3
 8005846:	e7b7      	b.n	80057b8 <_scanf_float+0x188>
 8005848:	2d06      	cmp	r5, #6
 800584a:	f47f af21 	bne.w	8005690 <_scanf_float+0x60>
 800584e:	2507      	movs	r5, #7
 8005850:	e7b2      	b.n	80057b8 <_scanf_float+0x188>
 8005852:	6822      	ldr	r2, [r4, #0]
 8005854:	0591      	lsls	r1, r2, #22
 8005856:	f57f af1b 	bpl.w	8005690 <_scanf_float+0x60>
 800585a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800585e:	6022      	str	r2, [r4, #0]
 8005860:	f8cd 9004 	str.w	r9, [sp, #4]
 8005864:	e7a8      	b.n	80057b8 <_scanf_float+0x188>
 8005866:	6822      	ldr	r2, [r4, #0]
 8005868:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800586c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005870:	d006      	beq.n	8005880 <_scanf_float+0x250>
 8005872:	0550      	lsls	r0, r2, #21
 8005874:	f57f af0c 	bpl.w	8005690 <_scanf_float+0x60>
 8005878:	f1b9 0f00 	cmp.w	r9, #0
 800587c:	f43f af0f 	beq.w	800569e <_scanf_float+0x6e>
 8005880:	0591      	lsls	r1, r2, #22
 8005882:	bf58      	it	pl
 8005884:	9901      	ldrpl	r1, [sp, #4]
 8005886:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800588a:	bf58      	it	pl
 800588c:	eba9 0101 	subpl.w	r1, r9, r1
 8005890:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005894:	bf58      	it	pl
 8005896:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800589a:	6022      	str	r2, [r4, #0]
 800589c:	f04f 0900 	mov.w	r9, #0
 80058a0:	e78a      	b.n	80057b8 <_scanf_float+0x188>
 80058a2:	f04f 0a03 	mov.w	sl, #3
 80058a6:	e787      	b.n	80057b8 <_scanf_float+0x188>
 80058a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80058ac:	4639      	mov	r1, r7
 80058ae:	4640      	mov	r0, r8
 80058b0:	4798      	blx	r3
 80058b2:	2800      	cmp	r0, #0
 80058b4:	f43f aedf 	beq.w	8005676 <_scanf_float+0x46>
 80058b8:	e6ea      	b.n	8005690 <_scanf_float+0x60>
 80058ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058c2:	463a      	mov	r2, r7
 80058c4:	4640      	mov	r0, r8
 80058c6:	4798      	blx	r3
 80058c8:	6923      	ldr	r3, [r4, #16]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	6123      	str	r3, [r4, #16]
 80058ce:	e6ec      	b.n	80056aa <_scanf_float+0x7a>
 80058d0:	1e6b      	subs	r3, r5, #1
 80058d2:	2b06      	cmp	r3, #6
 80058d4:	d825      	bhi.n	8005922 <_scanf_float+0x2f2>
 80058d6:	2d02      	cmp	r5, #2
 80058d8:	d836      	bhi.n	8005948 <_scanf_float+0x318>
 80058da:	455e      	cmp	r6, fp
 80058dc:	f67f aee8 	bls.w	80056b0 <_scanf_float+0x80>
 80058e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058e4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058e8:	463a      	mov	r2, r7
 80058ea:	4640      	mov	r0, r8
 80058ec:	4798      	blx	r3
 80058ee:	6923      	ldr	r3, [r4, #16]
 80058f0:	3b01      	subs	r3, #1
 80058f2:	6123      	str	r3, [r4, #16]
 80058f4:	e7f1      	b.n	80058da <_scanf_float+0x2aa>
 80058f6:	9802      	ldr	r0, [sp, #8]
 80058f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058fc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005900:	9002      	str	r0, [sp, #8]
 8005902:	463a      	mov	r2, r7
 8005904:	4640      	mov	r0, r8
 8005906:	4798      	blx	r3
 8005908:	6923      	ldr	r3, [r4, #16]
 800590a:	3b01      	subs	r3, #1
 800590c:	6123      	str	r3, [r4, #16]
 800590e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005912:	fa5f fa8a 	uxtb.w	sl, sl
 8005916:	f1ba 0f02 	cmp.w	sl, #2
 800591a:	d1ec      	bne.n	80058f6 <_scanf_float+0x2c6>
 800591c:	3d03      	subs	r5, #3
 800591e:	b2ed      	uxtb	r5, r5
 8005920:	1b76      	subs	r6, r6, r5
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	05da      	lsls	r2, r3, #23
 8005926:	d52f      	bpl.n	8005988 <_scanf_float+0x358>
 8005928:	055b      	lsls	r3, r3, #21
 800592a:	d510      	bpl.n	800594e <_scanf_float+0x31e>
 800592c:	455e      	cmp	r6, fp
 800592e:	f67f aebf 	bls.w	80056b0 <_scanf_float+0x80>
 8005932:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005936:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800593a:	463a      	mov	r2, r7
 800593c:	4640      	mov	r0, r8
 800593e:	4798      	blx	r3
 8005940:	6923      	ldr	r3, [r4, #16]
 8005942:	3b01      	subs	r3, #1
 8005944:	6123      	str	r3, [r4, #16]
 8005946:	e7f1      	b.n	800592c <_scanf_float+0x2fc>
 8005948:	46aa      	mov	sl, r5
 800594a:	9602      	str	r6, [sp, #8]
 800594c:	e7df      	b.n	800590e <_scanf_float+0x2de>
 800594e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005952:	6923      	ldr	r3, [r4, #16]
 8005954:	2965      	cmp	r1, #101	; 0x65
 8005956:	f103 33ff 	add.w	r3, r3, #4294967295
 800595a:	f106 35ff 	add.w	r5, r6, #4294967295
 800595e:	6123      	str	r3, [r4, #16]
 8005960:	d00c      	beq.n	800597c <_scanf_float+0x34c>
 8005962:	2945      	cmp	r1, #69	; 0x45
 8005964:	d00a      	beq.n	800597c <_scanf_float+0x34c>
 8005966:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800596a:	463a      	mov	r2, r7
 800596c:	4640      	mov	r0, r8
 800596e:	4798      	blx	r3
 8005970:	6923      	ldr	r3, [r4, #16]
 8005972:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005976:	3b01      	subs	r3, #1
 8005978:	1eb5      	subs	r5, r6, #2
 800597a:	6123      	str	r3, [r4, #16]
 800597c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005980:	463a      	mov	r2, r7
 8005982:	4640      	mov	r0, r8
 8005984:	4798      	blx	r3
 8005986:	462e      	mov	r6, r5
 8005988:	6825      	ldr	r5, [r4, #0]
 800598a:	f015 0510 	ands.w	r5, r5, #16
 800598e:	d158      	bne.n	8005a42 <_scanf_float+0x412>
 8005990:	7035      	strb	r5, [r6, #0]
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800599c:	d11c      	bne.n	80059d8 <_scanf_float+0x3a8>
 800599e:	9b01      	ldr	r3, [sp, #4]
 80059a0:	454b      	cmp	r3, r9
 80059a2:	eba3 0209 	sub.w	r2, r3, r9
 80059a6:	d124      	bne.n	80059f2 <_scanf_float+0x3c2>
 80059a8:	2200      	movs	r2, #0
 80059aa:	4659      	mov	r1, fp
 80059ac:	4640      	mov	r0, r8
 80059ae:	f002 fc2f 	bl	8008210 <_strtod_r>
 80059b2:	9b03      	ldr	r3, [sp, #12]
 80059b4:	6821      	ldr	r1, [r4, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f011 0f02 	tst.w	r1, #2
 80059bc:	ec57 6b10 	vmov	r6, r7, d0
 80059c0:	f103 0204 	add.w	r2, r3, #4
 80059c4:	d020      	beq.n	8005a08 <_scanf_float+0x3d8>
 80059c6:	9903      	ldr	r1, [sp, #12]
 80059c8:	600a      	str	r2, [r1, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	e9c3 6700 	strd	r6, r7, [r3]
 80059d0:	68e3      	ldr	r3, [r4, #12]
 80059d2:	3301      	adds	r3, #1
 80059d4:	60e3      	str	r3, [r4, #12]
 80059d6:	e66c      	b.n	80056b2 <_scanf_float+0x82>
 80059d8:	9b04      	ldr	r3, [sp, #16]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d0e4      	beq.n	80059a8 <_scanf_float+0x378>
 80059de:	9905      	ldr	r1, [sp, #20]
 80059e0:	230a      	movs	r3, #10
 80059e2:	462a      	mov	r2, r5
 80059e4:	3101      	adds	r1, #1
 80059e6:	4640      	mov	r0, r8
 80059e8:	f002 fc9a 	bl	8008320 <_strtol_r>
 80059ec:	9b04      	ldr	r3, [sp, #16]
 80059ee:	9e05      	ldr	r6, [sp, #20]
 80059f0:	1ac2      	subs	r2, r0, r3
 80059f2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80059f6:	429e      	cmp	r6, r3
 80059f8:	bf28      	it	cs
 80059fa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80059fe:	4912      	ldr	r1, [pc, #72]	; (8005a48 <_scanf_float+0x418>)
 8005a00:	4630      	mov	r0, r6
 8005a02:	f000 f8e7 	bl	8005bd4 <siprintf>
 8005a06:	e7cf      	b.n	80059a8 <_scanf_float+0x378>
 8005a08:	f011 0f04 	tst.w	r1, #4
 8005a0c:	9903      	ldr	r1, [sp, #12]
 8005a0e:	600a      	str	r2, [r1, #0]
 8005a10:	d1db      	bne.n	80059ca <_scanf_float+0x39a>
 8005a12:	f8d3 8000 	ldr.w	r8, [r3]
 8005a16:	ee10 2a10 	vmov	r2, s0
 8005a1a:	ee10 0a10 	vmov	r0, s0
 8005a1e:	463b      	mov	r3, r7
 8005a20:	4639      	mov	r1, r7
 8005a22:	f7fb f883 	bl	8000b2c <__aeabi_dcmpun>
 8005a26:	b128      	cbz	r0, 8005a34 <_scanf_float+0x404>
 8005a28:	4808      	ldr	r0, [pc, #32]	; (8005a4c <_scanf_float+0x41c>)
 8005a2a:	f000 f9b7 	bl	8005d9c <nanf>
 8005a2e:	ed88 0a00 	vstr	s0, [r8]
 8005a32:	e7cd      	b.n	80059d0 <_scanf_float+0x3a0>
 8005a34:	4630      	mov	r0, r6
 8005a36:	4639      	mov	r1, r7
 8005a38:	f7fb f8d6 	bl	8000be8 <__aeabi_d2f>
 8005a3c:	f8c8 0000 	str.w	r0, [r8]
 8005a40:	e7c6      	b.n	80059d0 <_scanf_float+0x3a0>
 8005a42:	2500      	movs	r5, #0
 8005a44:	e635      	b.n	80056b2 <_scanf_float+0x82>
 8005a46:	bf00      	nop
 8005a48:	0800958c 	.word	0x0800958c
 8005a4c:	0800991d 	.word	0x0800991d

08005a50 <std>:
 8005a50:	2300      	movs	r3, #0
 8005a52:	b510      	push	{r4, lr}
 8005a54:	4604      	mov	r4, r0
 8005a56:	e9c0 3300 	strd	r3, r3, [r0]
 8005a5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a5e:	6083      	str	r3, [r0, #8]
 8005a60:	8181      	strh	r1, [r0, #12]
 8005a62:	6643      	str	r3, [r0, #100]	; 0x64
 8005a64:	81c2      	strh	r2, [r0, #14]
 8005a66:	6183      	str	r3, [r0, #24]
 8005a68:	4619      	mov	r1, r3
 8005a6a:	2208      	movs	r2, #8
 8005a6c:	305c      	adds	r0, #92	; 0x5c
 8005a6e:	f000 f914 	bl	8005c9a <memset>
 8005a72:	4b0d      	ldr	r3, [pc, #52]	; (8005aa8 <std+0x58>)
 8005a74:	6263      	str	r3, [r4, #36]	; 0x24
 8005a76:	4b0d      	ldr	r3, [pc, #52]	; (8005aac <std+0x5c>)
 8005a78:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a7a:	4b0d      	ldr	r3, [pc, #52]	; (8005ab0 <std+0x60>)
 8005a7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a7e:	4b0d      	ldr	r3, [pc, #52]	; (8005ab4 <std+0x64>)
 8005a80:	6323      	str	r3, [r4, #48]	; 0x30
 8005a82:	4b0d      	ldr	r3, [pc, #52]	; (8005ab8 <std+0x68>)
 8005a84:	6224      	str	r4, [r4, #32]
 8005a86:	429c      	cmp	r4, r3
 8005a88:	d006      	beq.n	8005a98 <std+0x48>
 8005a8a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005a8e:	4294      	cmp	r4, r2
 8005a90:	d002      	beq.n	8005a98 <std+0x48>
 8005a92:	33d0      	adds	r3, #208	; 0xd0
 8005a94:	429c      	cmp	r4, r3
 8005a96:	d105      	bne.n	8005aa4 <std+0x54>
 8005a98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aa0:	f000 b978 	b.w	8005d94 <__retarget_lock_init_recursive>
 8005aa4:	bd10      	pop	{r4, pc}
 8005aa6:	bf00      	nop
 8005aa8:	08005c15 	.word	0x08005c15
 8005aac:	08005c37 	.word	0x08005c37
 8005ab0:	08005c6f 	.word	0x08005c6f
 8005ab4:	08005c93 	.word	0x08005c93
 8005ab8:	200007c4 	.word	0x200007c4

08005abc <stdio_exit_handler>:
 8005abc:	4a02      	ldr	r2, [pc, #8]	; (8005ac8 <stdio_exit_handler+0xc>)
 8005abe:	4903      	ldr	r1, [pc, #12]	; (8005acc <stdio_exit_handler+0x10>)
 8005ac0:	4803      	ldr	r0, [pc, #12]	; (8005ad0 <stdio_exit_handler+0x14>)
 8005ac2:	f000 b869 	b.w	8005b98 <_fwalk_sglue>
 8005ac6:	bf00      	nop
 8005ac8:	2000019c 	.word	0x2000019c
 8005acc:	080086e1 	.word	0x080086e1
 8005ad0:	200001a8 	.word	0x200001a8

08005ad4 <cleanup_stdio>:
 8005ad4:	6841      	ldr	r1, [r0, #4]
 8005ad6:	4b0c      	ldr	r3, [pc, #48]	; (8005b08 <cleanup_stdio+0x34>)
 8005ad8:	4299      	cmp	r1, r3
 8005ada:	b510      	push	{r4, lr}
 8005adc:	4604      	mov	r4, r0
 8005ade:	d001      	beq.n	8005ae4 <cleanup_stdio+0x10>
 8005ae0:	f002 fdfe 	bl	80086e0 <_fflush_r>
 8005ae4:	68a1      	ldr	r1, [r4, #8]
 8005ae6:	4b09      	ldr	r3, [pc, #36]	; (8005b0c <cleanup_stdio+0x38>)
 8005ae8:	4299      	cmp	r1, r3
 8005aea:	d002      	beq.n	8005af2 <cleanup_stdio+0x1e>
 8005aec:	4620      	mov	r0, r4
 8005aee:	f002 fdf7 	bl	80086e0 <_fflush_r>
 8005af2:	68e1      	ldr	r1, [r4, #12]
 8005af4:	4b06      	ldr	r3, [pc, #24]	; (8005b10 <cleanup_stdio+0x3c>)
 8005af6:	4299      	cmp	r1, r3
 8005af8:	d004      	beq.n	8005b04 <cleanup_stdio+0x30>
 8005afa:	4620      	mov	r0, r4
 8005afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b00:	f002 bdee 	b.w	80086e0 <_fflush_r>
 8005b04:	bd10      	pop	{r4, pc}
 8005b06:	bf00      	nop
 8005b08:	200007c4 	.word	0x200007c4
 8005b0c:	2000082c 	.word	0x2000082c
 8005b10:	20000894 	.word	0x20000894

08005b14 <global_stdio_init.part.0>:
 8005b14:	b510      	push	{r4, lr}
 8005b16:	4b0b      	ldr	r3, [pc, #44]	; (8005b44 <global_stdio_init.part.0+0x30>)
 8005b18:	4c0b      	ldr	r4, [pc, #44]	; (8005b48 <global_stdio_init.part.0+0x34>)
 8005b1a:	4a0c      	ldr	r2, [pc, #48]	; (8005b4c <global_stdio_init.part.0+0x38>)
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	4620      	mov	r0, r4
 8005b20:	2200      	movs	r2, #0
 8005b22:	2104      	movs	r1, #4
 8005b24:	f7ff ff94 	bl	8005a50 <std>
 8005b28:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	2109      	movs	r1, #9
 8005b30:	f7ff ff8e 	bl	8005a50 <std>
 8005b34:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005b38:	2202      	movs	r2, #2
 8005b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b3e:	2112      	movs	r1, #18
 8005b40:	f7ff bf86 	b.w	8005a50 <std>
 8005b44:	200008fc 	.word	0x200008fc
 8005b48:	200007c4 	.word	0x200007c4
 8005b4c:	08005abd 	.word	0x08005abd

08005b50 <__sfp_lock_acquire>:
 8005b50:	4801      	ldr	r0, [pc, #4]	; (8005b58 <__sfp_lock_acquire+0x8>)
 8005b52:	f000 b920 	b.w	8005d96 <__retarget_lock_acquire_recursive>
 8005b56:	bf00      	nop
 8005b58:	20000905 	.word	0x20000905

08005b5c <__sfp_lock_release>:
 8005b5c:	4801      	ldr	r0, [pc, #4]	; (8005b64 <__sfp_lock_release+0x8>)
 8005b5e:	f000 b91b 	b.w	8005d98 <__retarget_lock_release_recursive>
 8005b62:	bf00      	nop
 8005b64:	20000905 	.word	0x20000905

08005b68 <__sinit>:
 8005b68:	b510      	push	{r4, lr}
 8005b6a:	4604      	mov	r4, r0
 8005b6c:	f7ff fff0 	bl	8005b50 <__sfp_lock_acquire>
 8005b70:	6a23      	ldr	r3, [r4, #32]
 8005b72:	b11b      	cbz	r3, 8005b7c <__sinit+0x14>
 8005b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b78:	f7ff bff0 	b.w	8005b5c <__sfp_lock_release>
 8005b7c:	4b04      	ldr	r3, [pc, #16]	; (8005b90 <__sinit+0x28>)
 8005b7e:	6223      	str	r3, [r4, #32]
 8005b80:	4b04      	ldr	r3, [pc, #16]	; (8005b94 <__sinit+0x2c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1f5      	bne.n	8005b74 <__sinit+0xc>
 8005b88:	f7ff ffc4 	bl	8005b14 <global_stdio_init.part.0>
 8005b8c:	e7f2      	b.n	8005b74 <__sinit+0xc>
 8005b8e:	bf00      	nop
 8005b90:	08005ad5 	.word	0x08005ad5
 8005b94:	200008fc 	.word	0x200008fc

08005b98 <_fwalk_sglue>:
 8005b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b9c:	4607      	mov	r7, r0
 8005b9e:	4688      	mov	r8, r1
 8005ba0:	4614      	mov	r4, r2
 8005ba2:	2600      	movs	r6, #0
 8005ba4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ba8:	f1b9 0901 	subs.w	r9, r9, #1
 8005bac:	d505      	bpl.n	8005bba <_fwalk_sglue+0x22>
 8005bae:	6824      	ldr	r4, [r4, #0]
 8005bb0:	2c00      	cmp	r4, #0
 8005bb2:	d1f7      	bne.n	8005ba4 <_fwalk_sglue+0xc>
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bba:	89ab      	ldrh	r3, [r5, #12]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d907      	bls.n	8005bd0 <_fwalk_sglue+0x38>
 8005bc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	d003      	beq.n	8005bd0 <_fwalk_sglue+0x38>
 8005bc8:	4629      	mov	r1, r5
 8005bca:	4638      	mov	r0, r7
 8005bcc:	47c0      	blx	r8
 8005bce:	4306      	orrs	r6, r0
 8005bd0:	3568      	adds	r5, #104	; 0x68
 8005bd2:	e7e9      	b.n	8005ba8 <_fwalk_sglue+0x10>

08005bd4 <siprintf>:
 8005bd4:	b40e      	push	{r1, r2, r3}
 8005bd6:	b500      	push	{lr}
 8005bd8:	b09c      	sub	sp, #112	; 0x70
 8005bda:	ab1d      	add	r3, sp, #116	; 0x74
 8005bdc:	9002      	str	r0, [sp, #8]
 8005bde:	9006      	str	r0, [sp, #24]
 8005be0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005be4:	4809      	ldr	r0, [pc, #36]	; (8005c0c <siprintf+0x38>)
 8005be6:	9107      	str	r1, [sp, #28]
 8005be8:	9104      	str	r1, [sp, #16]
 8005bea:	4909      	ldr	r1, [pc, #36]	; (8005c10 <siprintf+0x3c>)
 8005bec:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bf0:	9105      	str	r1, [sp, #20]
 8005bf2:	6800      	ldr	r0, [r0, #0]
 8005bf4:	9301      	str	r3, [sp, #4]
 8005bf6:	a902      	add	r1, sp, #8
 8005bf8:	f002 fbee 	bl	80083d8 <_svfiprintf_r>
 8005bfc:	9b02      	ldr	r3, [sp, #8]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	701a      	strb	r2, [r3, #0]
 8005c02:	b01c      	add	sp, #112	; 0x70
 8005c04:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c08:	b003      	add	sp, #12
 8005c0a:	4770      	bx	lr
 8005c0c:	200001f4 	.word	0x200001f4
 8005c10:	ffff0208 	.word	0xffff0208

08005c14 <__sread>:
 8005c14:	b510      	push	{r4, lr}
 8005c16:	460c      	mov	r4, r1
 8005c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c1c:	f000 f86c 	bl	8005cf8 <_read_r>
 8005c20:	2800      	cmp	r0, #0
 8005c22:	bfab      	itete	ge
 8005c24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c26:	89a3      	ldrhlt	r3, [r4, #12]
 8005c28:	181b      	addge	r3, r3, r0
 8005c2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c2e:	bfac      	ite	ge
 8005c30:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c32:	81a3      	strhlt	r3, [r4, #12]
 8005c34:	bd10      	pop	{r4, pc}

08005c36 <__swrite>:
 8005c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c3a:	461f      	mov	r7, r3
 8005c3c:	898b      	ldrh	r3, [r1, #12]
 8005c3e:	05db      	lsls	r3, r3, #23
 8005c40:	4605      	mov	r5, r0
 8005c42:	460c      	mov	r4, r1
 8005c44:	4616      	mov	r6, r2
 8005c46:	d505      	bpl.n	8005c54 <__swrite+0x1e>
 8005c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f000 f840 	bl	8005cd4 <_lseek_r>
 8005c54:	89a3      	ldrh	r3, [r4, #12]
 8005c56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c5e:	81a3      	strh	r3, [r4, #12]
 8005c60:	4632      	mov	r2, r6
 8005c62:	463b      	mov	r3, r7
 8005c64:	4628      	mov	r0, r5
 8005c66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c6a:	f000 b857 	b.w	8005d1c <_write_r>

08005c6e <__sseek>:
 8005c6e:	b510      	push	{r4, lr}
 8005c70:	460c      	mov	r4, r1
 8005c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c76:	f000 f82d 	bl	8005cd4 <_lseek_r>
 8005c7a:	1c43      	adds	r3, r0, #1
 8005c7c:	89a3      	ldrh	r3, [r4, #12]
 8005c7e:	bf15      	itete	ne
 8005c80:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c8a:	81a3      	strheq	r3, [r4, #12]
 8005c8c:	bf18      	it	ne
 8005c8e:	81a3      	strhne	r3, [r4, #12]
 8005c90:	bd10      	pop	{r4, pc}

08005c92 <__sclose>:
 8005c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c96:	f000 b80d 	b.w	8005cb4 <_close_r>

08005c9a <memset>:
 8005c9a:	4402      	add	r2, r0
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d100      	bne.n	8005ca4 <memset+0xa>
 8005ca2:	4770      	bx	lr
 8005ca4:	f803 1b01 	strb.w	r1, [r3], #1
 8005ca8:	e7f9      	b.n	8005c9e <memset+0x4>
	...

08005cac <_localeconv_r>:
 8005cac:	4800      	ldr	r0, [pc, #0]	; (8005cb0 <_localeconv_r+0x4>)
 8005cae:	4770      	bx	lr
 8005cb0:	200002e8 	.word	0x200002e8

08005cb4 <_close_r>:
 8005cb4:	b538      	push	{r3, r4, r5, lr}
 8005cb6:	4d06      	ldr	r5, [pc, #24]	; (8005cd0 <_close_r+0x1c>)
 8005cb8:	2300      	movs	r3, #0
 8005cba:	4604      	mov	r4, r0
 8005cbc:	4608      	mov	r0, r1
 8005cbe:	602b      	str	r3, [r5, #0]
 8005cc0:	f7fb ff4b 	bl	8001b5a <_close>
 8005cc4:	1c43      	adds	r3, r0, #1
 8005cc6:	d102      	bne.n	8005cce <_close_r+0x1a>
 8005cc8:	682b      	ldr	r3, [r5, #0]
 8005cca:	b103      	cbz	r3, 8005cce <_close_r+0x1a>
 8005ccc:	6023      	str	r3, [r4, #0]
 8005cce:	bd38      	pop	{r3, r4, r5, pc}
 8005cd0:	20000900 	.word	0x20000900

08005cd4 <_lseek_r>:
 8005cd4:	b538      	push	{r3, r4, r5, lr}
 8005cd6:	4d07      	ldr	r5, [pc, #28]	; (8005cf4 <_lseek_r+0x20>)
 8005cd8:	4604      	mov	r4, r0
 8005cda:	4608      	mov	r0, r1
 8005cdc:	4611      	mov	r1, r2
 8005cde:	2200      	movs	r2, #0
 8005ce0:	602a      	str	r2, [r5, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f7fb ff60 	bl	8001ba8 <_lseek>
 8005ce8:	1c43      	adds	r3, r0, #1
 8005cea:	d102      	bne.n	8005cf2 <_lseek_r+0x1e>
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	b103      	cbz	r3, 8005cf2 <_lseek_r+0x1e>
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
 8005cf4:	20000900 	.word	0x20000900

08005cf8 <_read_r>:
 8005cf8:	b538      	push	{r3, r4, r5, lr}
 8005cfa:	4d07      	ldr	r5, [pc, #28]	; (8005d18 <_read_r+0x20>)
 8005cfc:	4604      	mov	r4, r0
 8005cfe:	4608      	mov	r0, r1
 8005d00:	4611      	mov	r1, r2
 8005d02:	2200      	movs	r2, #0
 8005d04:	602a      	str	r2, [r5, #0]
 8005d06:	461a      	mov	r2, r3
 8005d08:	f7fb feee 	bl	8001ae8 <_read>
 8005d0c:	1c43      	adds	r3, r0, #1
 8005d0e:	d102      	bne.n	8005d16 <_read_r+0x1e>
 8005d10:	682b      	ldr	r3, [r5, #0]
 8005d12:	b103      	cbz	r3, 8005d16 <_read_r+0x1e>
 8005d14:	6023      	str	r3, [r4, #0]
 8005d16:	bd38      	pop	{r3, r4, r5, pc}
 8005d18:	20000900 	.word	0x20000900

08005d1c <_write_r>:
 8005d1c:	b538      	push	{r3, r4, r5, lr}
 8005d1e:	4d07      	ldr	r5, [pc, #28]	; (8005d3c <_write_r+0x20>)
 8005d20:	4604      	mov	r4, r0
 8005d22:	4608      	mov	r0, r1
 8005d24:	4611      	mov	r1, r2
 8005d26:	2200      	movs	r2, #0
 8005d28:	602a      	str	r2, [r5, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f7fb fef9 	bl	8001b22 <_write>
 8005d30:	1c43      	adds	r3, r0, #1
 8005d32:	d102      	bne.n	8005d3a <_write_r+0x1e>
 8005d34:	682b      	ldr	r3, [r5, #0]
 8005d36:	b103      	cbz	r3, 8005d3a <_write_r+0x1e>
 8005d38:	6023      	str	r3, [r4, #0]
 8005d3a:	bd38      	pop	{r3, r4, r5, pc}
 8005d3c:	20000900 	.word	0x20000900

08005d40 <__errno>:
 8005d40:	4b01      	ldr	r3, [pc, #4]	; (8005d48 <__errno+0x8>)
 8005d42:	6818      	ldr	r0, [r3, #0]
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	200001f4 	.word	0x200001f4

08005d4c <__libc_init_array>:
 8005d4c:	b570      	push	{r4, r5, r6, lr}
 8005d4e:	4d0d      	ldr	r5, [pc, #52]	; (8005d84 <__libc_init_array+0x38>)
 8005d50:	4c0d      	ldr	r4, [pc, #52]	; (8005d88 <__libc_init_array+0x3c>)
 8005d52:	1b64      	subs	r4, r4, r5
 8005d54:	10a4      	asrs	r4, r4, #2
 8005d56:	2600      	movs	r6, #0
 8005d58:	42a6      	cmp	r6, r4
 8005d5a:	d109      	bne.n	8005d70 <__libc_init_array+0x24>
 8005d5c:	4d0b      	ldr	r5, [pc, #44]	; (8005d8c <__libc_init_array+0x40>)
 8005d5e:	4c0c      	ldr	r4, [pc, #48]	; (8005d90 <__libc_init_array+0x44>)
 8005d60:	f003 fbd6 	bl	8009510 <_init>
 8005d64:	1b64      	subs	r4, r4, r5
 8005d66:	10a4      	asrs	r4, r4, #2
 8005d68:	2600      	movs	r6, #0
 8005d6a:	42a6      	cmp	r6, r4
 8005d6c:	d105      	bne.n	8005d7a <__libc_init_array+0x2e>
 8005d6e:	bd70      	pop	{r4, r5, r6, pc}
 8005d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d74:	4798      	blx	r3
 8005d76:	3601      	adds	r6, #1
 8005d78:	e7ee      	b.n	8005d58 <__libc_init_array+0xc>
 8005d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d7e:	4798      	blx	r3
 8005d80:	3601      	adds	r6, #1
 8005d82:	e7f2      	b.n	8005d6a <__libc_init_array+0x1e>
 8005d84:	08009980 	.word	0x08009980
 8005d88:	08009980 	.word	0x08009980
 8005d8c:	08009980 	.word	0x08009980
 8005d90:	08009984 	.word	0x08009984

08005d94 <__retarget_lock_init_recursive>:
 8005d94:	4770      	bx	lr

08005d96 <__retarget_lock_acquire_recursive>:
 8005d96:	4770      	bx	lr

08005d98 <__retarget_lock_release_recursive>:
 8005d98:	4770      	bx	lr
	...

08005d9c <nanf>:
 8005d9c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005da4 <nanf+0x8>
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	7fc00000 	.word	0x7fc00000

08005da8 <quorem>:
 8005da8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dac:	6903      	ldr	r3, [r0, #16]
 8005dae:	690c      	ldr	r4, [r1, #16]
 8005db0:	42a3      	cmp	r3, r4
 8005db2:	4607      	mov	r7, r0
 8005db4:	db7e      	blt.n	8005eb4 <quorem+0x10c>
 8005db6:	3c01      	subs	r4, #1
 8005db8:	f101 0814 	add.w	r8, r1, #20
 8005dbc:	f100 0514 	add.w	r5, r0, #20
 8005dc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005dc4:	9301      	str	r3, [sp, #4]
 8005dc6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005dca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005dd6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005dda:	fbb2 f6f3 	udiv	r6, r2, r3
 8005dde:	d331      	bcc.n	8005e44 <quorem+0x9c>
 8005de0:	f04f 0e00 	mov.w	lr, #0
 8005de4:	4640      	mov	r0, r8
 8005de6:	46ac      	mov	ip, r5
 8005de8:	46f2      	mov	sl, lr
 8005dea:	f850 2b04 	ldr.w	r2, [r0], #4
 8005dee:	b293      	uxth	r3, r2
 8005df0:	fb06 e303 	mla	r3, r6, r3, lr
 8005df4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005df8:	0c1a      	lsrs	r2, r3, #16
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	ebaa 0303 	sub.w	r3, sl, r3
 8005e00:	f8dc a000 	ldr.w	sl, [ip]
 8005e04:	fa13 f38a 	uxtah	r3, r3, sl
 8005e08:	fb06 220e 	mla	r2, r6, lr, r2
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	9b00      	ldr	r3, [sp, #0]
 8005e10:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e14:	b292      	uxth	r2, r2
 8005e16:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e1e:	f8bd 3000 	ldrh.w	r3, [sp]
 8005e22:	4581      	cmp	r9, r0
 8005e24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e28:	f84c 3b04 	str.w	r3, [ip], #4
 8005e2c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e30:	d2db      	bcs.n	8005dea <quorem+0x42>
 8005e32:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e36:	b92b      	cbnz	r3, 8005e44 <quorem+0x9c>
 8005e38:	9b01      	ldr	r3, [sp, #4]
 8005e3a:	3b04      	subs	r3, #4
 8005e3c:	429d      	cmp	r5, r3
 8005e3e:	461a      	mov	r2, r3
 8005e40:	d32c      	bcc.n	8005e9c <quorem+0xf4>
 8005e42:	613c      	str	r4, [r7, #16]
 8005e44:	4638      	mov	r0, r7
 8005e46:	f001 f9ef 	bl	8007228 <__mcmp>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	db22      	blt.n	8005e94 <quorem+0xec>
 8005e4e:	3601      	adds	r6, #1
 8005e50:	4629      	mov	r1, r5
 8005e52:	2000      	movs	r0, #0
 8005e54:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e58:	f8d1 c000 	ldr.w	ip, [r1]
 8005e5c:	b293      	uxth	r3, r2
 8005e5e:	1ac3      	subs	r3, r0, r3
 8005e60:	0c12      	lsrs	r2, r2, #16
 8005e62:	fa13 f38c 	uxtah	r3, r3, ip
 8005e66:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005e6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e74:	45c1      	cmp	r9, r8
 8005e76:	f841 3b04 	str.w	r3, [r1], #4
 8005e7a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005e7e:	d2e9      	bcs.n	8005e54 <quorem+0xac>
 8005e80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e88:	b922      	cbnz	r2, 8005e94 <quorem+0xec>
 8005e8a:	3b04      	subs	r3, #4
 8005e8c:	429d      	cmp	r5, r3
 8005e8e:	461a      	mov	r2, r3
 8005e90:	d30a      	bcc.n	8005ea8 <quorem+0x100>
 8005e92:	613c      	str	r4, [r7, #16]
 8005e94:	4630      	mov	r0, r6
 8005e96:	b003      	add	sp, #12
 8005e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e9c:	6812      	ldr	r2, [r2, #0]
 8005e9e:	3b04      	subs	r3, #4
 8005ea0:	2a00      	cmp	r2, #0
 8005ea2:	d1ce      	bne.n	8005e42 <quorem+0x9a>
 8005ea4:	3c01      	subs	r4, #1
 8005ea6:	e7c9      	b.n	8005e3c <quorem+0x94>
 8005ea8:	6812      	ldr	r2, [r2, #0]
 8005eaa:	3b04      	subs	r3, #4
 8005eac:	2a00      	cmp	r2, #0
 8005eae:	d1f0      	bne.n	8005e92 <quorem+0xea>
 8005eb0:	3c01      	subs	r4, #1
 8005eb2:	e7eb      	b.n	8005e8c <quorem+0xe4>
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	e7ee      	b.n	8005e96 <quorem+0xee>

08005eb8 <_dtoa_r>:
 8005eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ebc:	ed2d 8b04 	vpush	{d8-d9}
 8005ec0:	69c5      	ldr	r5, [r0, #28]
 8005ec2:	b093      	sub	sp, #76	; 0x4c
 8005ec4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005ec8:	ec57 6b10 	vmov	r6, r7, d0
 8005ecc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005ed0:	9107      	str	r1, [sp, #28]
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	920a      	str	r2, [sp, #40]	; 0x28
 8005ed6:	930d      	str	r3, [sp, #52]	; 0x34
 8005ed8:	b975      	cbnz	r5, 8005ef8 <_dtoa_r+0x40>
 8005eda:	2010      	movs	r0, #16
 8005edc:	f000 fe2a 	bl	8006b34 <malloc>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	61e0      	str	r0, [r4, #28]
 8005ee4:	b920      	cbnz	r0, 8005ef0 <_dtoa_r+0x38>
 8005ee6:	4bae      	ldr	r3, [pc, #696]	; (80061a0 <_dtoa_r+0x2e8>)
 8005ee8:	21ef      	movs	r1, #239	; 0xef
 8005eea:	48ae      	ldr	r0, [pc, #696]	; (80061a4 <_dtoa_r+0x2ec>)
 8005eec:	f002 fc74 	bl	80087d8 <__assert_func>
 8005ef0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ef4:	6005      	str	r5, [r0, #0]
 8005ef6:	60c5      	str	r5, [r0, #12]
 8005ef8:	69e3      	ldr	r3, [r4, #28]
 8005efa:	6819      	ldr	r1, [r3, #0]
 8005efc:	b151      	cbz	r1, 8005f14 <_dtoa_r+0x5c>
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	604a      	str	r2, [r1, #4]
 8005f02:	2301      	movs	r3, #1
 8005f04:	4093      	lsls	r3, r2
 8005f06:	608b      	str	r3, [r1, #8]
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f000 ff07 	bl	8006d1c <_Bfree>
 8005f0e:	69e3      	ldr	r3, [r4, #28]
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	1e3b      	subs	r3, r7, #0
 8005f16:	bfbb      	ittet	lt
 8005f18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f1c:	9303      	strlt	r3, [sp, #12]
 8005f1e:	2300      	movge	r3, #0
 8005f20:	2201      	movlt	r2, #1
 8005f22:	bfac      	ite	ge
 8005f24:	f8c8 3000 	strge.w	r3, [r8]
 8005f28:	f8c8 2000 	strlt.w	r2, [r8]
 8005f2c:	4b9e      	ldr	r3, [pc, #632]	; (80061a8 <_dtoa_r+0x2f0>)
 8005f2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005f32:	ea33 0308 	bics.w	r3, r3, r8
 8005f36:	d11b      	bne.n	8005f70 <_dtoa_r+0xb8>
 8005f38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f3e:	6013      	str	r3, [r2, #0]
 8005f40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005f44:	4333      	orrs	r3, r6
 8005f46:	f000 8593 	beq.w	8006a70 <_dtoa_r+0xbb8>
 8005f4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f4c:	b963      	cbnz	r3, 8005f68 <_dtoa_r+0xb0>
 8005f4e:	4b97      	ldr	r3, [pc, #604]	; (80061ac <_dtoa_r+0x2f4>)
 8005f50:	e027      	b.n	8005fa2 <_dtoa_r+0xea>
 8005f52:	4b97      	ldr	r3, [pc, #604]	; (80061b0 <_dtoa_r+0x2f8>)
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	3308      	adds	r3, #8
 8005f58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f5a:	6013      	str	r3, [r2, #0]
 8005f5c:	9800      	ldr	r0, [sp, #0]
 8005f5e:	b013      	add	sp, #76	; 0x4c
 8005f60:	ecbd 8b04 	vpop	{d8-d9}
 8005f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f68:	4b90      	ldr	r3, [pc, #576]	; (80061ac <_dtoa_r+0x2f4>)
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	3303      	adds	r3, #3
 8005f6e:	e7f3      	b.n	8005f58 <_dtoa_r+0xa0>
 8005f70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f74:	2200      	movs	r2, #0
 8005f76:	ec51 0b17 	vmov	r0, r1, d7
 8005f7a:	eeb0 8a47 	vmov.f32	s16, s14
 8005f7e:	eef0 8a67 	vmov.f32	s17, s15
 8005f82:	2300      	movs	r3, #0
 8005f84:	f7fa fda0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f88:	4681      	mov	r9, r0
 8005f8a:	b160      	cbz	r0, 8005fa6 <_dtoa_r+0xee>
 8005f8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f8e:	2301      	movs	r3, #1
 8005f90:	6013      	str	r3, [r2, #0]
 8005f92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 8568 	beq.w	8006a6a <_dtoa_r+0xbb2>
 8005f9a:	4b86      	ldr	r3, [pc, #536]	; (80061b4 <_dtoa_r+0x2fc>)
 8005f9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	e7da      	b.n	8005f5c <_dtoa_r+0xa4>
 8005fa6:	aa10      	add	r2, sp, #64	; 0x40
 8005fa8:	a911      	add	r1, sp, #68	; 0x44
 8005faa:	4620      	mov	r0, r4
 8005fac:	eeb0 0a48 	vmov.f32	s0, s16
 8005fb0:	eef0 0a68 	vmov.f32	s1, s17
 8005fb4:	f001 fa4e 	bl	8007454 <__d2b>
 8005fb8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005fbc:	4682      	mov	sl, r0
 8005fbe:	2d00      	cmp	r5, #0
 8005fc0:	d07f      	beq.n	80060c2 <_dtoa_r+0x20a>
 8005fc2:	ee18 3a90 	vmov	r3, s17
 8005fc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005fce:	ec51 0b18 	vmov	r0, r1, d8
 8005fd2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005fd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005fda:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005fde:	4619      	mov	r1, r3
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	4b75      	ldr	r3, [pc, #468]	; (80061b8 <_dtoa_r+0x300>)
 8005fe4:	f7fa f950 	bl	8000288 <__aeabi_dsub>
 8005fe8:	a367      	add	r3, pc, #412	; (adr r3, 8006188 <_dtoa_r+0x2d0>)
 8005fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fee:	f7fa fb03 	bl	80005f8 <__aeabi_dmul>
 8005ff2:	a367      	add	r3, pc, #412	; (adr r3, 8006190 <_dtoa_r+0x2d8>)
 8005ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff8:	f7fa f948 	bl	800028c <__adddf3>
 8005ffc:	4606      	mov	r6, r0
 8005ffe:	4628      	mov	r0, r5
 8006000:	460f      	mov	r7, r1
 8006002:	f7fa fa8f 	bl	8000524 <__aeabi_i2d>
 8006006:	a364      	add	r3, pc, #400	; (adr r3, 8006198 <_dtoa_r+0x2e0>)
 8006008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600c:	f7fa faf4 	bl	80005f8 <__aeabi_dmul>
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	4630      	mov	r0, r6
 8006016:	4639      	mov	r1, r7
 8006018:	f7fa f938 	bl	800028c <__adddf3>
 800601c:	4606      	mov	r6, r0
 800601e:	460f      	mov	r7, r1
 8006020:	f7fa fd9a 	bl	8000b58 <__aeabi_d2iz>
 8006024:	2200      	movs	r2, #0
 8006026:	4683      	mov	fp, r0
 8006028:	2300      	movs	r3, #0
 800602a:	4630      	mov	r0, r6
 800602c:	4639      	mov	r1, r7
 800602e:	f7fa fd55 	bl	8000adc <__aeabi_dcmplt>
 8006032:	b148      	cbz	r0, 8006048 <_dtoa_r+0x190>
 8006034:	4658      	mov	r0, fp
 8006036:	f7fa fa75 	bl	8000524 <__aeabi_i2d>
 800603a:	4632      	mov	r2, r6
 800603c:	463b      	mov	r3, r7
 800603e:	f7fa fd43 	bl	8000ac8 <__aeabi_dcmpeq>
 8006042:	b908      	cbnz	r0, 8006048 <_dtoa_r+0x190>
 8006044:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006048:	f1bb 0f16 	cmp.w	fp, #22
 800604c:	d857      	bhi.n	80060fe <_dtoa_r+0x246>
 800604e:	4b5b      	ldr	r3, [pc, #364]	; (80061bc <_dtoa_r+0x304>)
 8006050:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	ec51 0b18 	vmov	r0, r1, d8
 800605c:	f7fa fd3e 	bl	8000adc <__aeabi_dcmplt>
 8006060:	2800      	cmp	r0, #0
 8006062:	d04e      	beq.n	8006102 <_dtoa_r+0x24a>
 8006064:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006068:	2300      	movs	r3, #0
 800606a:	930c      	str	r3, [sp, #48]	; 0x30
 800606c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800606e:	1b5b      	subs	r3, r3, r5
 8006070:	1e5a      	subs	r2, r3, #1
 8006072:	bf45      	ittet	mi
 8006074:	f1c3 0301 	rsbmi	r3, r3, #1
 8006078:	9305      	strmi	r3, [sp, #20]
 800607a:	2300      	movpl	r3, #0
 800607c:	2300      	movmi	r3, #0
 800607e:	9206      	str	r2, [sp, #24]
 8006080:	bf54      	ite	pl
 8006082:	9305      	strpl	r3, [sp, #20]
 8006084:	9306      	strmi	r3, [sp, #24]
 8006086:	f1bb 0f00 	cmp.w	fp, #0
 800608a:	db3c      	blt.n	8006106 <_dtoa_r+0x24e>
 800608c:	9b06      	ldr	r3, [sp, #24]
 800608e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006092:	445b      	add	r3, fp
 8006094:	9306      	str	r3, [sp, #24]
 8006096:	2300      	movs	r3, #0
 8006098:	9308      	str	r3, [sp, #32]
 800609a:	9b07      	ldr	r3, [sp, #28]
 800609c:	2b09      	cmp	r3, #9
 800609e:	d868      	bhi.n	8006172 <_dtoa_r+0x2ba>
 80060a0:	2b05      	cmp	r3, #5
 80060a2:	bfc4      	itt	gt
 80060a4:	3b04      	subgt	r3, #4
 80060a6:	9307      	strgt	r3, [sp, #28]
 80060a8:	9b07      	ldr	r3, [sp, #28]
 80060aa:	f1a3 0302 	sub.w	r3, r3, #2
 80060ae:	bfcc      	ite	gt
 80060b0:	2500      	movgt	r5, #0
 80060b2:	2501      	movle	r5, #1
 80060b4:	2b03      	cmp	r3, #3
 80060b6:	f200 8085 	bhi.w	80061c4 <_dtoa_r+0x30c>
 80060ba:	e8df f003 	tbb	[pc, r3]
 80060be:	3b2e      	.short	0x3b2e
 80060c0:	5839      	.short	0x5839
 80060c2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80060c6:	441d      	add	r5, r3
 80060c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80060cc:	2b20      	cmp	r3, #32
 80060ce:	bfc1      	itttt	gt
 80060d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80060d4:	fa08 f803 	lslgt.w	r8, r8, r3
 80060d8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80060dc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80060e0:	bfd6      	itet	le
 80060e2:	f1c3 0320 	rsble	r3, r3, #32
 80060e6:	ea48 0003 	orrgt.w	r0, r8, r3
 80060ea:	fa06 f003 	lslle.w	r0, r6, r3
 80060ee:	f7fa fa09 	bl	8000504 <__aeabi_ui2d>
 80060f2:	2201      	movs	r2, #1
 80060f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80060f8:	3d01      	subs	r5, #1
 80060fa:	920e      	str	r2, [sp, #56]	; 0x38
 80060fc:	e76f      	b.n	8005fde <_dtoa_r+0x126>
 80060fe:	2301      	movs	r3, #1
 8006100:	e7b3      	b.n	800606a <_dtoa_r+0x1b2>
 8006102:	900c      	str	r0, [sp, #48]	; 0x30
 8006104:	e7b2      	b.n	800606c <_dtoa_r+0x1b4>
 8006106:	9b05      	ldr	r3, [sp, #20]
 8006108:	eba3 030b 	sub.w	r3, r3, fp
 800610c:	9305      	str	r3, [sp, #20]
 800610e:	f1cb 0300 	rsb	r3, fp, #0
 8006112:	9308      	str	r3, [sp, #32]
 8006114:	2300      	movs	r3, #0
 8006116:	930b      	str	r3, [sp, #44]	; 0x2c
 8006118:	e7bf      	b.n	800609a <_dtoa_r+0x1e2>
 800611a:	2300      	movs	r3, #0
 800611c:	9309      	str	r3, [sp, #36]	; 0x24
 800611e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006120:	2b00      	cmp	r3, #0
 8006122:	dc52      	bgt.n	80061ca <_dtoa_r+0x312>
 8006124:	2301      	movs	r3, #1
 8006126:	9301      	str	r3, [sp, #4]
 8006128:	9304      	str	r3, [sp, #16]
 800612a:	461a      	mov	r2, r3
 800612c:	920a      	str	r2, [sp, #40]	; 0x28
 800612e:	e00b      	b.n	8006148 <_dtoa_r+0x290>
 8006130:	2301      	movs	r3, #1
 8006132:	e7f3      	b.n	800611c <_dtoa_r+0x264>
 8006134:	2300      	movs	r3, #0
 8006136:	9309      	str	r3, [sp, #36]	; 0x24
 8006138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800613a:	445b      	add	r3, fp
 800613c:	9301      	str	r3, [sp, #4]
 800613e:	3301      	adds	r3, #1
 8006140:	2b01      	cmp	r3, #1
 8006142:	9304      	str	r3, [sp, #16]
 8006144:	bfb8      	it	lt
 8006146:	2301      	movlt	r3, #1
 8006148:	69e0      	ldr	r0, [r4, #28]
 800614a:	2100      	movs	r1, #0
 800614c:	2204      	movs	r2, #4
 800614e:	f102 0614 	add.w	r6, r2, #20
 8006152:	429e      	cmp	r6, r3
 8006154:	d93d      	bls.n	80061d2 <_dtoa_r+0x31a>
 8006156:	6041      	str	r1, [r0, #4]
 8006158:	4620      	mov	r0, r4
 800615a:	f000 fd9f 	bl	8006c9c <_Balloc>
 800615e:	9000      	str	r0, [sp, #0]
 8006160:	2800      	cmp	r0, #0
 8006162:	d139      	bne.n	80061d8 <_dtoa_r+0x320>
 8006164:	4b16      	ldr	r3, [pc, #88]	; (80061c0 <_dtoa_r+0x308>)
 8006166:	4602      	mov	r2, r0
 8006168:	f240 11af 	movw	r1, #431	; 0x1af
 800616c:	e6bd      	b.n	8005eea <_dtoa_r+0x32>
 800616e:	2301      	movs	r3, #1
 8006170:	e7e1      	b.n	8006136 <_dtoa_r+0x27e>
 8006172:	2501      	movs	r5, #1
 8006174:	2300      	movs	r3, #0
 8006176:	9307      	str	r3, [sp, #28]
 8006178:	9509      	str	r5, [sp, #36]	; 0x24
 800617a:	f04f 33ff 	mov.w	r3, #4294967295
 800617e:	9301      	str	r3, [sp, #4]
 8006180:	9304      	str	r3, [sp, #16]
 8006182:	2200      	movs	r2, #0
 8006184:	2312      	movs	r3, #18
 8006186:	e7d1      	b.n	800612c <_dtoa_r+0x274>
 8006188:	636f4361 	.word	0x636f4361
 800618c:	3fd287a7 	.word	0x3fd287a7
 8006190:	8b60c8b3 	.word	0x8b60c8b3
 8006194:	3fc68a28 	.word	0x3fc68a28
 8006198:	509f79fb 	.word	0x509f79fb
 800619c:	3fd34413 	.word	0x3fd34413
 80061a0:	0800959e 	.word	0x0800959e
 80061a4:	080095b5 	.word	0x080095b5
 80061a8:	7ff00000 	.word	0x7ff00000
 80061ac:	0800959a 	.word	0x0800959a
 80061b0:	08009591 	.word	0x08009591
 80061b4:	08009569 	.word	0x08009569
 80061b8:	3ff80000 	.word	0x3ff80000
 80061bc:	080096a0 	.word	0x080096a0
 80061c0:	0800960d 	.word	0x0800960d
 80061c4:	2301      	movs	r3, #1
 80061c6:	9309      	str	r3, [sp, #36]	; 0x24
 80061c8:	e7d7      	b.n	800617a <_dtoa_r+0x2c2>
 80061ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061cc:	9301      	str	r3, [sp, #4]
 80061ce:	9304      	str	r3, [sp, #16]
 80061d0:	e7ba      	b.n	8006148 <_dtoa_r+0x290>
 80061d2:	3101      	adds	r1, #1
 80061d4:	0052      	lsls	r2, r2, #1
 80061d6:	e7ba      	b.n	800614e <_dtoa_r+0x296>
 80061d8:	69e3      	ldr	r3, [r4, #28]
 80061da:	9a00      	ldr	r2, [sp, #0]
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	9b04      	ldr	r3, [sp, #16]
 80061e0:	2b0e      	cmp	r3, #14
 80061e2:	f200 80a8 	bhi.w	8006336 <_dtoa_r+0x47e>
 80061e6:	2d00      	cmp	r5, #0
 80061e8:	f000 80a5 	beq.w	8006336 <_dtoa_r+0x47e>
 80061ec:	f1bb 0f00 	cmp.w	fp, #0
 80061f0:	dd38      	ble.n	8006264 <_dtoa_r+0x3ac>
 80061f2:	4bc0      	ldr	r3, [pc, #768]	; (80064f4 <_dtoa_r+0x63c>)
 80061f4:	f00b 020f 	and.w	r2, fp, #15
 80061f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061fc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006200:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006204:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006208:	d019      	beq.n	800623e <_dtoa_r+0x386>
 800620a:	4bbb      	ldr	r3, [pc, #748]	; (80064f8 <_dtoa_r+0x640>)
 800620c:	ec51 0b18 	vmov	r0, r1, d8
 8006210:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006214:	f7fa fb1a 	bl	800084c <__aeabi_ddiv>
 8006218:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800621c:	f008 080f 	and.w	r8, r8, #15
 8006220:	2503      	movs	r5, #3
 8006222:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80064f8 <_dtoa_r+0x640>
 8006226:	f1b8 0f00 	cmp.w	r8, #0
 800622a:	d10a      	bne.n	8006242 <_dtoa_r+0x38a>
 800622c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006230:	4632      	mov	r2, r6
 8006232:	463b      	mov	r3, r7
 8006234:	f7fa fb0a 	bl	800084c <__aeabi_ddiv>
 8006238:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800623c:	e02b      	b.n	8006296 <_dtoa_r+0x3de>
 800623e:	2502      	movs	r5, #2
 8006240:	e7ef      	b.n	8006222 <_dtoa_r+0x36a>
 8006242:	f018 0f01 	tst.w	r8, #1
 8006246:	d008      	beq.n	800625a <_dtoa_r+0x3a2>
 8006248:	4630      	mov	r0, r6
 800624a:	4639      	mov	r1, r7
 800624c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006250:	f7fa f9d2 	bl	80005f8 <__aeabi_dmul>
 8006254:	3501      	adds	r5, #1
 8006256:	4606      	mov	r6, r0
 8006258:	460f      	mov	r7, r1
 800625a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800625e:	f109 0908 	add.w	r9, r9, #8
 8006262:	e7e0      	b.n	8006226 <_dtoa_r+0x36e>
 8006264:	f000 809f 	beq.w	80063a6 <_dtoa_r+0x4ee>
 8006268:	f1cb 0600 	rsb	r6, fp, #0
 800626c:	4ba1      	ldr	r3, [pc, #644]	; (80064f4 <_dtoa_r+0x63c>)
 800626e:	4fa2      	ldr	r7, [pc, #648]	; (80064f8 <_dtoa_r+0x640>)
 8006270:	f006 020f 	and.w	r2, r6, #15
 8006274:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	ec51 0b18 	vmov	r0, r1, d8
 8006280:	f7fa f9ba 	bl	80005f8 <__aeabi_dmul>
 8006284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006288:	1136      	asrs	r6, r6, #4
 800628a:	2300      	movs	r3, #0
 800628c:	2502      	movs	r5, #2
 800628e:	2e00      	cmp	r6, #0
 8006290:	d17e      	bne.n	8006390 <_dtoa_r+0x4d8>
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1d0      	bne.n	8006238 <_dtoa_r+0x380>
 8006296:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006298:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 8084 	beq.w	80063aa <_dtoa_r+0x4f2>
 80062a2:	4b96      	ldr	r3, [pc, #600]	; (80064fc <_dtoa_r+0x644>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	4640      	mov	r0, r8
 80062a8:	4649      	mov	r1, r9
 80062aa:	f7fa fc17 	bl	8000adc <__aeabi_dcmplt>
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d07b      	beq.n	80063aa <_dtoa_r+0x4f2>
 80062b2:	9b04      	ldr	r3, [sp, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d078      	beq.n	80063aa <_dtoa_r+0x4f2>
 80062b8:	9b01      	ldr	r3, [sp, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	dd39      	ble.n	8006332 <_dtoa_r+0x47a>
 80062be:	4b90      	ldr	r3, [pc, #576]	; (8006500 <_dtoa_r+0x648>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	4640      	mov	r0, r8
 80062c4:	4649      	mov	r1, r9
 80062c6:	f7fa f997 	bl	80005f8 <__aeabi_dmul>
 80062ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062ce:	9e01      	ldr	r6, [sp, #4]
 80062d0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80062d4:	3501      	adds	r5, #1
 80062d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80062da:	4628      	mov	r0, r5
 80062dc:	f7fa f922 	bl	8000524 <__aeabi_i2d>
 80062e0:	4642      	mov	r2, r8
 80062e2:	464b      	mov	r3, r9
 80062e4:	f7fa f988 	bl	80005f8 <__aeabi_dmul>
 80062e8:	4b86      	ldr	r3, [pc, #536]	; (8006504 <_dtoa_r+0x64c>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	f7f9 ffce 	bl	800028c <__adddf3>
 80062f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80062f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062f8:	9303      	str	r3, [sp, #12]
 80062fa:	2e00      	cmp	r6, #0
 80062fc:	d158      	bne.n	80063b0 <_dtoa_r+0x4f8>
 80062fe:	4b82      	ldr	r3, [pc, #520]	; (8006508 <_dtoa_r+0x650>)
 8006300:	2200      	movs	r2, #0
 8006302:	4640      	mov	r0, r8
 8006304:	4649      	mov	r1, r9
 8006306:	f7f9 ffbf 	bl	8000288 <__aeabi_dsub>
 800630a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800630e:	4680      	mov	r8, r0
 8006310:	4689      	mov	r9, r1
 8006312:	f7fa fc01 	bl	8000b18 <__aeabi_dcmpgt>
 8006316:	2800      	cmp	r0, #0
 8006318:	f040 8296 	bne.w	8006848 <_dtoa_r+0x990>
 800631c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006320:	4640      	mov	r0, r8
 8006322:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006326:	4649      	mov	r1, r9
 8006328:	f7fa fbd8 	bl	8000adc <__aeabi_dcmplt>
 800632c:	2800      	cmp	r0, #0
 800632e:	f040 8289 	bne.w	8006844 <_dtoa_r+0x98c>
 8006332:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006336:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006338:	2b00      	cmp	r3, #0
 800633a:	f2c0 814e 	blt.w	80065da <_dtoa_r+0x722>
 800633e:	f1bb 0f0e 	cmp.w	fp, #14
 8006342:	f300 814a 	bgt.w	80065da <_dtoa_r+0x722>
 8006346:	4b6b      	ldr	r3, [pc, #428]	; (80064f4 <_dtoa_r+0x63c>)
 8006348:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800634c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006352:	2b00      	cmp	r3, #0
 8006354:	f280 80dc 	bge.w	8006510 <_dtoa_r+0x658>
 8006358:	9b04      	ldr	r3, [sp, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	f300 80d8 	bgt.w	8006510 <_dtoa_r+0x658>
 8006360:	f040 826f 	bne.w	8006842 <_dtoa_r+0x98a>
 8006364:	4b68      	ldr	r3, [pc, #416]	; (8006508 <_dtoa_r+0x650>)
 8006366:	2200      	movs	r2, #0
 8006368:	4640      	mov	r0, r8
 800636a:	4649      	mov	r1, r9
 800636c:	f7fa f944 	bl	80005f8 <__aeabi_dmul>
 8006370:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006374:	f7fa fbc6 	bl	8000b04 <__aeabi_dcmpge>
 8006378:	9e04      	ldr	r6, [sp, #16]
 800637a:	4637      	mov	r7, r6
 800637c:	2800      	cmp	r0, #0
 800637e:	f040 8245 	bne.w	800680c <_dtoa_r+0x954>
 8006382:	9d00      	ldr	r5, [sp, #0]
 8006384:	2331      	movs	r3, #49	; 0x31
 8006386:	f805 3b01 	strb.w	r3, [r5], #1
 800638a:	f10b 0b01 	add.w	fp, fp, #1
 800638e:	e241      	b.n	8006814 <_dtoa_r+0x95c>
 8006390:	07f2      	lsls	r2, r6, #31
 8006392:	d505      	bpl.n	80063a0 <_dtoa_r+0x4e8>
 8006394:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006398:	f7fa f92e 	bl	80005f8 <__aeabi_dmul>
 800639c:	3501      	adds	r5, #1
 800639e:	2301      	movs	r3, #1
 80063a0:	1076      	asrs	r6, r6, #1
 80063a2:	3708      	adds	r7, #8
 80063a4:	e773      	b.n	800628e <_dtoa_r+0x3d6>
 80063a6:	2502      	movs	r5, #2
 80063a8:	e775      	b.n	8006296 <_dtoa_r+0x3de>
 80063aa:	9e04      	ldr	r6, [sp, #16]
 80063ac:	465f      	mov	r7, fp
 80063ae:	e792      	b.n	80062d6 <_dtoa_r+0x41e>
 80063b0:	9900      	ldr	r1, [sp, #0]
 80063b2:	4b50      	ldr	r3, [pc, #320]	; (80064f4 <_dtoa_r+0x63c>)
 80063b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80063b8:	4431      	add	r1, r6
 80063ba:	9102      	str	r1, [sp, #8]
 80063bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063be:	eeb0 9a47 	vmov.f32	s18, s14
 80063c2:	eef0 9a67 	vmov.f32	s19, s15
 80063c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80063ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80063ce:	2900      	cmp	r1, #0
 80063d0:	d044      	beq.n	800645c <_dtoa_r+0x5a4>
 80063d2:	494e      	ldr	r1, [pc, #312]	; (800650c <_dtoa_r+0x654>)
 80063d4:	2000      	movs	r0, #0
 80063d6:	f7fa fa39 	bl	800084c <__aeabi_ddiv>
 80063da:	ec53 2b19 	vmov	r2, r3, d9
 80063de:	f7f9 ff53 	bl	8000288 <__aeabi_dsub>
 80063e2:	9d00      	ldr	r5, [sp, #0]
 80063e4:	ec41 0b19 	vmov	d9, r0, r1
 80063e8:	4649      	mov	r1, r9
 80063ea:	4640      	mov	r0, r8
 80063ec:	f7fa fbb4 	bl	8000b58 <__aeabi_d2iz>
 80063f0:	4606      	mov	r6, r0
 80063f2:	f7fa f897 	bl	8000524 <__aeabi_i2d>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	4640      	mov	r0, r8
 80063fc:	4649      	mov	r1, r9
 80063fe:	f7f9 ff43 	bl	8000288 <__aeabi_dsub>
 8006402:	3630      	adds	r6, #48	; 0x30
 8006404:	f805 6b01 	strb.w	r6, [r5], #1
 8006408:	ec53 2b19 	vmov	r2, r3, d9
 800640c:	4680      	mov	r8, r0
 800640e:	4689      	mov	r9, r1
 8006410:	f7fa fb64 	bl	8000adc <__aeabi_dcmplt>
 8006414:	2800      	cmp	r0, #0
 8006416:	d164      	bne.n	80064e2 <_dtoa_r+0x62a>
 8006418:	4642      	mov	r2, r8
 800641a:	464b      	mov	r3, r9
 800641c:	4937      	ldr	r1, [pc, #220]	; (80064fc <_dtoa_r+0x644>)
 800641e:	2000      	movs	r0, #0
 8006420:	f7f9 ff32 	bl	8000288 <__aeabi_dsub>
 8006424:	ec53 2b19 	vmov	r2, r3, d9
 8006428:	f7fa fb58 	bl	8000adc <__aeabi_dcmplt>
 800642c:	2800      	cmp	r0, #0
 800642e:	f040 80b6 	bne.w	800659e <_dtoa_r+0x6e6>
 8006432:	9b02      	ldr	r3, [sp, #8]
 8006434:	429d      	cmp	r5, r3
 8006436:	f43f af7c 	beq.w	8006332 <_dtoa_r+0x47a>
 800643a:	4b31      	ldr	r3, [pc, #196]	; (8006500 <_dtoa_r+0x648>)
 800643c:	ec51 0b19 	vmov	r0, r1, d9
 8006440:	2200      	movs	r2, #0
 8006442:	f7fa f8d9 	bl	80005f8 <__aeabi_dmul>
 8006446:	4b2e      	ldr	r3, [pc, #184]	; (8006500 <_dtoa_r+0x648>)
 8006448:	ec41 0b19 	vmov	d9, r0, r1
 800644c:	2200      	movs	r2, #0
 800644e:	4640      	mov	r0, r8
 8006450:	4649      	mov	r1, r9
 8006452:	f7fa f8d1 	bl	80005f8 <__aeabi_dmul>
 8006456:	4680      	mov	r8, r0
 8006458:	4689      	mov	r9, r1
 800645a:	e7c5      	b.n	80063e8 <_dtoa_r+0x530>
 800645c:	ec51 0b17 	vmov	r0, r1, d7
 8006460:	f7fa f8ca 	bl	80005f8 <__aeabi_dmul>
 8006464:	9b02      	ldr	r3, [sp, #8]
 8006466:	9d00      	ldr	r5, [sp, #0]
 8006468:	930f      	str	r3, [sp, #60]	; 0x3c
 800646a:	ec41 0b19 	vmov	d9, r0, r1
 800646e:	4649      	mov	r1, r9
 8006470:	4640      	mov	r0, r8
 8006472:	f7fa fb71 	bl	8000b58 <__aeabi_d2iz>
 8006476:	4606      	mov	r6, r0
 8006478:	f7fa f854 	bl	8000524 <__aeabi_i2d>
 800647c:	3630      	adds	r6, #48	; 0x30
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	4640      	mov	r0, r8
 8006484:	4649      	mov	r1, r9
 8006486:	f7f9 feff 	bl	8000288 <__aeabi_dsub>
 800648a:	f805 6b01 	strb.w	r6, [r5], #1
 800648e:	9b02      	ldr	r3, [sp, #8]
 8006490:	429d      	cmp	r5, r3
 8006492:	4680      	mov	r8, r0
 8006494:	4689      	mov	r9, r1
 8006496:	f04f 0200 	mov.w	r2, #0
 800649a:	d124      	bne.n	80064e6 <_dtoa_r+0x62e>
 800649c:	4b1b      	ldr	r3, [pc, #108]	; (800650c <_dtoa_r+0x654>)
 800649e:	ec51 0b19 	vmov	r0, r1, d9
 80064a2:	f7f9 fef3 	bl	800028c <__adddf3>
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	4640      	mov	r0, r8
 80064ac:	4649      	mov	r1, r9
 80064ae:	f7fa fb33 	bl	8000b18 <__aeabi_dcmpgt>
 80064b2:	2800      	cmp	r0, #0
 80064b4:	d173      	bne.n	800659e <_dtoa_r+0x6e6>
 80064b6:	ec53 2b19 	vmov	r2, r3, d9
 80064ba:	4914      	ldr	r1, [pc, #80]	; (800650c <_dtoa_r+0x654>)
 80064bc:	2000      	movs	r0, #0
 80064be:	f7f9 fee3 	bl	8000288 <__aeabi_dsub>
 80064c2:	4602      	mov	r2, r0
 80064c4:	460b      	mov	r3, r1
 80064c6:	4640      	mov	r0, r8
 80064c8:	4649      	mov	r1, r9
 80064ca:	f7fa fb07 	bl	8000adc <__aeabi_dcmplt>
 80064ce:	2800      	cmp	r0, #0
 80064d0:	f43f af2f 	beq.w	8006332 <_dtoa_r+0x47a>
 80064d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80064d6:	1e6b      	subs	r3, r5, #1
 80064d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80064da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80064de:	2b30      	cmp	r3, #48	; 0x30
 80064e0:	d0f8      	beq.n	80064d4 <_dtoa_r+0x61c>
 80064e2:	46bb      	mov	fp, r7
 80064e4:	e04a      	b.n	800657c <_dtoa_r+0x6c4>
 80064e6:	4b06      	ldr	r3, [pc, #24]	; (8006500 <_dtoa_r+0x648>)
 80064e8:	f7fa f886 	bl	80005f8 <__aeabi_dmul>
 80064ec:	4680      	mov	r8, r0
 80064ee:	4689      	mov	r9, r1
 80064f0:	e7bd      	b.n	800646e <_dtoa_r+0x5b6>
 80064f2:	bf00      	nop
 80064f4:	080096a0 	.word	0x080096a0
 80064f8:	08009678 	.word	0x08009678
 80064fc:	3ff00000 	.word	0x3ff00000
 8006500:	40240000 	.word	0x40240000
 8006504:	401c0000 	.word	0x401c0000
 8006508:	40140000 	.word	0x40140000
 800650c:	3fe00000 	.word	0x3fe00000
 8006510:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006514:	9d00      	ldr	r5, [sp, #0]
 8006516:	4642      	mov	r2, r8
 8006518:	464b      	mov	r3, r9
 800651a:	4630      	mov	r0, r6
 800651c:	4639      	mov	r1, r7
 800651e:	f7fa f995 	bl	800084c <__aeabi_ddiv>
 8006522:	f7fa fb19 	bl	8000b58 <__aeabi_d2iz>
 8006526:	9001      	str	r0, [sp, #4]
 8006528:	f7f9 fffc 	bl	8000524 <__aeabi_i2d>
 800652c:	4642      	mov	r2, r8
 800652e:	464b      	mov	r3, r9
 8006530:	f7fa f862 	bl	80005f8 <__aeabi_dmul>
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	4630      	mov	r0, r6
 800653a:	4639      	mov	r1, r7
 800653c:	f7f9 fea4 	bl	8000288 <__aeabi_dsub>
 8006540:	9e01      	ldr	r6, [sp, #4]
 8006542:	9f04      	ldr	r7, [sp, #16]
 8006544:	3630      	adds	r6, #48	; 0x30
 8006546:	f805 6b01 	strb.w	r6, [r5], #1
 800654a:	9e00      	ldr	r6, [sp, #0]
 800654c:	1bae      	subs	r6, r5, r6
 800654e:	42b7      	cmp	r7, r6
 8006550:	4602      	mov	r2, r0
 8006552:	460b      	mov	r3, r1
 8006554:	d134      	bne.n	80065c0 <_dtoa_r+0x708>
 8006556:	f7f9 fe99 	bl	800028c <__adddf3>
 800655a:	4642      	mov	r2, r8
 800655c:	464b      	mov	r3, r9
 800655e:	4606      	mov	r6, r0
 8006560:	460f      	mov	r7, r1
 8006562:	f7fa fad9 	bl	8000b18 <__aeabi_dcmpgt>
 8006566:	b9c8      	cbnz	r0, 800659c <_dtoa_r+0x6e4>
 8006568:	4642      	mov	r2, r8
 800656a:	464b      	mov	r3, r9
 800656c:	4630      	mov	r0, r6
 800656e:	4639      	mov	r1, r7
 8006570:	f7fa faaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8006574:	b110      	cbz	r0, 800657c <_dtoa_r+0x6c4>
 8006576:	9b01      	ldr	r3, [sp, #4]
 8006578:	07db      	lsls	r3, r3, #31
 800657a:	d40f      	bmi.n	800659c <_dtoa_r+0x6e4>
 800657c:	4651      	mov	r1, sl
 800657e:	4620      	mov	r0, r4
 8006580:	f000 fbcc 	bl	8006d1c <_Bfree>
 8006584:	2300      	movs	r3, #0
 8006586:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006588:	702b      	strb	r3, [r5, #0]
 800658a:	f10b 0301 	add.w	r3, fp, #1
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006592:	2b00      	cmp	r3, #0
 8006594:	f43f ace2 	beq.w	8005f5c <_dtoa_r+0xa4>
 8006598:	601d      	str	r5, [r3, #0]
 800659a:	e4df      	b.n	8005f5c <_dtoa_r+0xa4>
 800659c:	465f      	mov	r7, fp
 800659e:	462b      	mov	r3, r5
 80065a0:	461d      	mov	r5, r3
 80065a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065a6:	2a39      	cmp	r2, #57	; 0x39
 80065a8:	d106      	bne.n	80065b8 <_dtoa_r+0x700>
 80065aa:	9a00      	ldr	r2, [sp, #0]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d1f7      	bne.n	80065a0 <_dtoa_r+0x6e8>
 80065b0:	9900      	ldr	r1, [sp, #0]
 80065b2:	2230      	movs	r2, #48	; 0x30
 80065b4:	3701      	adds	r7, #1
 80065b6:	700a      	strb	r2, [r1, #0]
 80065b8:	781a      	ldrb	r2, [r3, #0]
 80065ba:	3201      	adds	r2, #1
 80065bc:	701a      	strb	r2, [r3, #0]
 80065be:	e790      	b.n	80064e2 <_dtoa_r+0x62a>
 80065c0:	4ba3      	ldr	r3, [pc, #652]	; (8006850 <_dtoa_r+0x998>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	f7fa f818 	bl	80005f8 <__aeabi_dmul>
 80065c8:	2200      	movs	r2, #0
 80065ca:	2300      	movs	r3, #0
 80065cc:	4606      	mov	r6, r0
 80065ce:	460f      	mov	r7, r1
 80065d0:	f7fa fa7a 	bl	8000ac8 <__aeabi_dcmpeq>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	d09e      	beq.n	8006516 <_dtoa_r+0x65e>
 80065d8:	e7d0      	b.n	800657c <_dtoa_r+0x6c4>
 80065da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065dc:	2a00      	cmp	r2, #0
 80065de:	f000 80ca 	beq.w	8006776 <_dtoa_r+0x8be>
 80065e2:	9a07      	ldr	r2, [sp, #28]
 80065e4:	2a01      	cmp	r2, #1
 80065e6:	f300 80ad 	bgt.w	8006744 <_dtoa_r+0x88c>
 80065ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065ec:	2a00      	cmp	r2, #0
 80065ee:	f000 80a5 	beq.w	800673c <_dtoa_r+0x884>
 80065f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80065f6:	9e08      	ldr	r6, [sp, #32]
 80065f8:	9d05      	ldr	r5, [sp, #20]
 80065fa:	9a05      	ldr	r2, [sp, #20]
 80065fc:	441a      	add	r2, r3
 80065fe:	9205      	str	r2, [sp, #20]
 8006600:	9a06      	ldr	r2, [sp, #24]
 8006602:	2101      	movs	r1, #1
 8006604:	441a      	add	r2, r3
 8006606:	4620      	mov	r0, r4
 8006608:	9206      	str	r2, [sp, #24]
 800660a:	f000 fc87 	bl	8006f1c <__i2b>
 800660e:	4607      	mov	r7, r0
 8006610:	b165      	cbz	r5, 800662c <_dtoa_r+0x774>
 8006612:	9b06      	ldr	r3, [sp, #24]
 8006614:	2b00      	cmp	r3, #0
 8006616:	dd09      	ble.n	800662c <_dtoa_r+0x774>
 8006618:	42ab      	cmp	r3, r5
 800661a:	9a05      	ldr	r2, [sp, #20]
 800661c:	bfa8      	it	ge
 800661e:	462b      	movge	r3, r5
 8006620:	1ad2      	subs	r2, r2, r3
 8006622:	9205      	str	r2, [sp, #20]
 8006624:	9a06      	ldr	r2, [sp, #24]
 8006626:	1aed      	subs	r5, r5, r3
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	9306      	str	r3, [sp, #24]
 800662c:	9b08      	ldr	r3, [sp, #32]
 800662e:	b1f3      	cbz	r3, 800666e <_dtoa_r+0x7b6>
 8006630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 80a3 	beq.w	800677e <_dtoa_r+0x8c6>
 8006638:	2e00      	cmp	r6, #0
 800663a:	dd10      	ble.n	800665e <_dtoa_r+0x7a6>
 800663c:	4639      	mov	r1, r7
 800663e:	4632      	mov	r2, r6
 8006640:	4620      	mov	r0, r4
 8006642:	f000 fd2b 	bl	800709c <__pow5mult>
 8006646:	4652      	mov	r2, sl
 8006648:	4601      	mov	r1, r0
 800664a:	4607      	mov	r7, r0
 800664c:	4620      	mov	r0, r4
 800664e:	f000 fc7b 	bl	8006f48 <__multiply>
 8006652:	4651      	mov	r1, sl
 8006654:	4680      	mov	r8, r0
 8006656:	4620      	mov	r0, r4
 8006658:	f000 fb60 	bl	8006d1c <_Bfree>
 800665c:	46c2      	mov	sl, r8
 800665e:	9b08      	ldr	r3, [sp, #32]
 8006660:	1b9a      	subs	r2, r3, r6
 8006662:	d004      	beq.n	800666e <_dtoa_r+0x7b6>
 8006664:	4651      	mov	r1, sl
 8006666:	4620      	mov	r0, r4
 8006668:	f000 fd18 	bl	800709c <__pow5mult>
 800666c:	4682      	mov	sl, r0
 800666e:	2101      	movs	r1, #1
 8006670:	4620      	mov	r0, r4
 8006672:	f000 fc53 	bl	8006f1c <__i2b>
 8006676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006678:	2b00      	cmp	r3, #0
 800667a:	4606      	mov	r6, r0
 800667c:	f340 8081 	ble.w	8006782 <_dtoa_r+0x8ca>
 8006680:	461a      	mov	r2, r3
 8006682:	4601      	mov	r1, r0
 8006684:	4620      	mov	r0, r4
 8006686:	f000 fd09 	bl	800709c <__pow5mult>
 800668a:	9b07      	ldr	r3, [sp, #28]
 800668c:	2b01      	cmp	r3, #1
 800668e:	4606      	mov	r6, r0
 8006690:	dd7a      	ble.n	8006788 <_dtoa_r+0x8d0>
 8006692:	f04f 0800 	mov.w	r8, #0
 8006696:	6933      	ldr	r3, [r6, #16]
 8006698:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800669c:	6918      	ldr	r0, [r3, #16]
 800669e:	f000 fbef 	bl	8006e80 <__hi0bits>
 80066a2:	f1c0 0020 	rsb	r0, r0, #32
 80066a6:	9b06      	ldr	r3, [sp, #24]
 80066a8:	4418      	add	r0, r3
 80066aa:	f010 001f 	ands.w	r0, r0, #31
 80066ae:	f000 8094 	beq.w	80067da <_dtoa_r+0x922>
 80066b2:	f1c0 0320 	rsb	r3, r0, #32
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	f340 8085 	ble.w	80067c6 <_dtoa_r+0x90e>
 80066bc:	9b05      	ldr	r3, [sp, #20]
 80066be:	f1c0 001c 	rsb	r0, r0, #28
 80066c2:	4403      	add	r3, r0
 80066c4:	9305      	str	r3, [sp, #20]
 80066c6:	9b06      	ldr	r3, [sp, #24]
 80066c8:	4403      	add	r3, r0
 80066ca:	4405      	add	r5, r0
 80066cc:	9306      	str	r3, [sp, #24]
 80066ce:	9b05      	ldr	r3, [sp, #20]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	dd05      	ble.n	80066e0 <_dtoa_r+0x828>
 80066d4:	4651      	mov	r1, sl
 80066d6:	461a      	mov	r2, r3
 80066d8:	4620      	mov	r0, r4
 80066da:	f000 fd39 	bl	8007150 <__lshift>
 80066de:	4682      	mov	sl, r0
 80066e0:	9b06      	ldr	r3, [sp, #24]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	dd05      	ble.n	80066f2 <_dtoa_r+0x83a>
 80066e6:	4631      	mov	r1, r6
 80066e8:	461a      	mov	r2, r3
 80066ea:	4620      	mov	r0, r4
 80066ec:	f000 fd30 	bl	8007150 <__lshift>
 80066f0:	4606      	mov	r6, r0
 80066f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d072      	beq.n	80067de <_dtoa_r+0x926>
 80066f8:	4631      	mov	r1, r6
 80066fa:	4650      	mov	r0, sl
 80066fc:	f000 fd94 	bl	8007228 <__mcmp>
 8006700:	2800      	cmp	r0, #0
 8006702:	da6c      	bge.n	80067de <_dtoa_r+0x926>
 8006704:	2300      	movs	r3, #0
 8006706:	4651      	mov	r1, sl
 8006708:	220a      	movs	r2, #10
 800670a:	4620      	mov	r0, r4
 800670c:	f000 fb28 	bl	8006d60 <__multadd>
 8006710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006712:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006716:	4682      	mov	sl, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 81b0 	beq.w	8006a7e <_dtoa_r+0xbc6>
 800671e:	2300      	movs	r3, #0
 8006720:	4639      	mov	r1, r7
 8006722:	220a      	movs	r2, #10
 8006724:	4620      	mov	r0, r4
 8006726:	f000 fb1b 	bl	8006d60 <__multadd>
 800672a:	9b01      	ldr	r3, [sp, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	4607      	mov	r7, r0
 8006730:	f300 8096 	bgt.w	8006860 <_dtoa_r+0x9a8>
 8006734:	9b07      	ldr	r3, [sp, #28]
 8006736:	2b02      	cmp	r3, #2
 8006738:	dc59      	bgt.n	80067ee <_dtoa_r+0x936>
 800673a:	e091      	b.n	8006860 <_dtoa_r+0x9a8>
 800673c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800673e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006742:	e758      	b.n	80065f6 <_dtoa_r+0x73e>
 8006744:	9b04      	ldr	r3, [sp, #16]
 8006746:	1e5e      	subs	r6, r3, #1
 8006748:	9b08      	ldr	r3, [sp, #32]
 800674a:	42b3      	cmp	r3, r6
 800674c:	bfbf      	itttt	lt
 800674e:	9b08      	ldrlt	r3, [sp, #32]
 8006750:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006752:	9608      	strlt	r6, [sp, #32]
 8006754:	1af3      	sublt	r3, r6, r3
 8006756:	bfb4      	ite	lt
 8006758:	18d2      	addlt	r2, r2, r3
 800675a:	1b9e      	subge	r6, r3, r6
 800675c:	9b04      	ldr	r3, [sp, #16]
 800675e:	bfbc      	itt	lt
 8006760:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006762:	2600      	movlt	r6, #0
 8006764:	2b00      	cmp	r3, #0
 8006766:	bfb7      	itett	lt
 8006768:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800676c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006770:	1a9d      	sublt	r5, r3, r2
 8006772:	2300      	movlt	r3, #0
 8006774:	e741      	b.n	80065fa <_dtoa_r+0x742>
 8006776:	9e08      	ldr	r6, [sp, #32]
 8006778:	9d05      	ldr	r5, [sp, #20]
 800677a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800677c:	e748      	b.n	8006610 <_dtoa_r+0x758>
 800677e:	9a08      	ldr	r2, [sp, #32]
 8006780:	e770      	b.n	8006664 <_dtoa_r+0x7ac>
 8006782:	9b07      	ldr	r3, [sp, #28]
 8006784:	2b01      	cmp	r3, #1
 8006786:	dc19      	bgt.n	80067bc <_dtoa_r+0x904>
 8006788:	9b02      	ldr	r3, [sp, #8]
 800678a:	b9bb      	cbnz	r3, 80067bc <_dtoa_r+0x904>
 800678c:	9b03      	ldr	r3, [sp, #12]
 800678e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006792:	b99b      	cbnz	r3, 80067bc <_dtoa_r+0x904>
 8006794:	9b03      	ldr	r3, [sp, #12]
 8006796:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800679a:	0d1b      	lsrs	r3, r3, #20
 800679c:	051b      	lsls	r3, r3, #20
 800679e:	b183      	cbz	r3, 80067c2 <_dtoa_r+0x90a>
 80067a0:	9b05      	ldr	r3, [sp, #20]
 80067a2:	3301      	adds	r3, #1
 80067a4:	9305      	str	r3, [sp, #20]
 80067a6:	9b06      	ldr	r3, [sp, #24]
 80067a8:	3301      	adds	r3, #1
 80067aa:	9306      	str	r3, [sp, #24]
 80067ac:	f04f 0801 	mov.w	r8, #1
 80067b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f47f af6f 	bne.w	8006696 <_dtoa_r+0x7de>
 80067b8:	2001      	movs	r0, #1
 80067ba:	e774      	b.n	80066a6 <_dtoa_r+0x7ee>
 80067bc:	f04f 0800 	mov.w	r8, #0
 80067c0:	e7f6      	b.n	80067b0 <_dtoa_r+0x8f8>
 80067c2:	4698      	mov	r8, r3
 80067c4:	e7f4      	b.n	80067b0 <_dtoa_r+0x8f8>
 80067c6:	d082      	beq.n	80066ce <_dtoa_r+0x816>
 80067c8:	9a05      	ldr	r2, [sp, #20]
 80067ca:	331c      	adds	r3, #28
 80067cc:	441a      	add	r2, r3
 80067ce:	9205      	str	r2, [sp, #20]
 80067d0:	9a06      	ldr	r2, [sp, #24]
 80067d2:	441a      	add	r2, r3
 80067d4:	441d      	add	r5, r3
 80067d6:	9206      	str	r2, [sp, #24]
 80067d8:	e779      	b.n	80066ce <_dtoa_r+0x816>
 80067da:	4603      	mov	r3, r0
 80067dc:	e7f4      	b.n	80067c8 <_dtoa_r+0x910>
 80067de:	9b04      	ldr	r3, [sp, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	dc37      	bgt.n	8006854 <_dtoa_r+0x99c>
 80067e4:	9b07      	ldr	r3, [sp, #28]
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	dd34      	ble.n	8006854 <_dtoa_r+0x99c>
 80067ea:	9b04      	ldr	r3, [sp, #16]
 80067ec:	9301      	str	r3, [sp, #4]
 80067ee:	9b01      	ldr	r3, [sp, #4]
 80067f0:	b963      	cbnz	r3, 800680c <_dtoa_r+0x954>
 80067f2:	4631      	mov	r1, r6
 80067f4:	2205      	movs	r2, #5
 80067f6:	4620      	mov	r0, r4
 80067f8:	f000 fab2 	bl	8006d60 <__multadd>
 80067fc:	4601      	mov	r1, r0
 80067fe:	4606      	mov	r6, r0
 8006800:	4650      	mov	r0, sl
 8006802:	f000 fd11 	bl	8007228 <__mcmp>
 8006806:	2800      	cmp	r0, #0
 8006808:	f73f adbb 	bgt.w	8006382 <_dtoa_r+0x4ca>
 800680c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800680e:	9d00      	ldr	r5, [sp, #0]
 8006810:	ea6f 0b03 	mvn.w	fp, r3
 8006814:	f04f 0800 	mov.w	r8, #0
 8006818:	4631      	mov	r1, r6
 800681a:	4620      	mov	r0, r4
 800681c:	f000 fa7e 	bl	8006d1c <_Bfree>
 8006820:	2f00      	cmp	r7, #0
 8006822:	f43f aeab 	beq.w	800657c <_dtoa_r+0x6c4>
 8006826:	f1b8 0f00 	cmp.w	r8, #0
 800682a:	d005      	beq.n	8006838 <_dtoa_r+0x980>
 800682c:	45b8      	cmp	r8, r7
 800682e:	d003      	beq.n	8006838 <_dtoa_r+0x980>
 8006830:	4641      	mov	r1, r8
 8006832:	4620      	mov	r0, r4
 8006834:	f000 fa72 	bl	8006d1c <_Bfree>
 8006838:	4639      	mov	r1, r7
 800683a:	4620      	mov	r0, r4
 800683c:	f000 fa6e 	bl	8006d1c <_Bfree>
 8006840:	e69c      	b.n	800657c <_dtoa_r+0x6c4>
 8006842:	2600      	movs	r6, #0
 8006844:	4637      	mov	r7, r6
 8006846:	e7e1      	b.n	800680c <_dtoa_r+0x954>
 8006848:	46bb      	mov	fp, r7
 800684a:	4637      	mov	r7, r6
 800684c:	e599      	b.n	8006382 <_dtoa_r+0x4ca>
 800684e:	bf00      	nop
 8006850:	40240000 	.word	0x40240000
 8006854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 80c8 	beq.w	80069ec <_dtoa_r+0xb34>
 800685c:	9b04      	ldr	r3, [sp, #16]
 800685e:	9301      	str	r3, [sp, #4]
 8006860:	2d00      	cmp	r5, #0
 8006862:	dd05      	ble.n	8006870 <_dtoa_r+0x9b8>
 8006864:	4639      	mov	r1, r7
 8006866:	462a      	mov	r2, r5
 8006868:	4620      	mov	r0, r4
 800686a:	f000 fc71 	bl	8007150 <__lshift>
 800686e:	4607      	mov	r7, r0
 8006870:	f1b8 0f00 	cmp.w	r8, #0
 8006874:	d05b      	beq.n	800692e <_dtoa_r+0xa76>
 8006876:	6879      	ldr	r1, [r7, #4]
 8006878:	4620      	mov	r0, r4
 800687a:	f000 fa0f 	bl	8006c9c <_Balloc>
 800687e:	4605      	mov	r5, r0
 8006880:	b928      	cbnz	r0, 800688e <_dtoa_r+0x9d6>
 8006882:	4b83      	ldr	r3, [pc, #524]	; (8006a90 <_dtoa_r+0xbd8>)
 8006884:	4602      	mov	r2, r0
 8006886:	f240 21ef 	movw	r1, #751	; 0x2ef
 800688a:	f7ff bb2e 	b.w	8005eea <_dtoa_r+0x32>
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	3202      	adds	r2, #2
 8006892:	0092      	lsls	r2, r2, #2
 8006894:	f107 010c 	add.w	r1, r7, #12
 8006898:	300c      	adds	r0, #12
 800689a:	f001 ff85 	bl	80087a8 <memcpy>
 800689e:	2201      	movs	r2, #1
 80068a0:	4629      	mov	r1, r5
 80068a2:	4620      	mov	r0, r4
 80068a4:	f000 fc54 	bl	8007150 <__lshift>
 80068a8:	9b00      	ldr	r3, [sp, #0]
 80068aa:	3301      	adds	r3, #1
 80068ac:	9304      	str	r3, [sp, #16]
 80068ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068b2:	4413      	add	r3, r2
 80068b4:	9308      	str	r3, [sp, #32]
 80068b6:	9b02      	ldr	r3, [sp, #8]
 80068b8:	f003 0301 	and.w	r3, r3, #1
 80068bc:	46b8      	mov	r8, r7
 80068be:	9306      	str	r3, [sp, #24]
 80068c0:	4607      	mov	r7, r0
 80068c2:	9b04      	ldr	r3, [sp, #16]
 80068c4:	4631      	mov	r1, r6
 80068c6:	3b01      	subs	r3, #1
 80068c8:	4650      	mov	r0, sl
 80068ca:	9301      	str	r3, [sp, #4]
 80068cc:	f7ff fa6c 	bl	8005da8 <quorem>
 80068d0:	4641      	mov	r1, r8
 80068d2:	9002      	str	r0, [sp, #8]
 80068d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80068d8:	4650      	mov	r0, sl
 80068da:	f000 fca5 	bl	8007228 <__mcmp>
 80068de:	463a      	mov	r2, r7
 80068e0:	9005      	str	r0, [sp, #20]
 80068e2:	4631      	mov	r1, r6
 80068e4:	4620      	mov	r0, r4
 80068e6:	f000 fcbb 	bl	8007260 <__mdiff>
 80068ea:	68c2      	ldr	r2, [r0, #12]
 80068ec:	4605      	mov	r5, r0
 80068ee:	bb02      	cbnz	r2, 8006932 <_dtoa_r+0xa7a>
 80068f0:	4601      	mov	r1, r0
 80068f2:	4650      	mov	r0, sl
 80068f4:	f000 fc98 	bl	8007228 <__mcmp>
 80068f8:	4602      	mov	r2, r0
 80068fa:	4629      	mov	r1, r5
 80068fc:	4620      	mov	r0, r4
 80068fe:	9209      	str	r2, [sp, #36]	; 0x24
 8006900:	f000 fa0c 	bl	8006d1c <_Bfree>
 8006904:	9b07      	ldr	r3, [sp, #28]
 8006906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006908:	9d04      	ldr	r5, [sp, #16]
 800690a:	ea43 0102 	orr.w	r1, r3, r2
 800690e:	9b06      	ldr	r3, [sp, #24]
 8006910:	4319      	orrs	r1, r3
 8006912:	d110      	bne.n	8006936 <_dtoa_r+0xa7e>
 8006914:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006918:	d029      	beq.n	800696e <_dtoa_r+0xab6>
 800691a:	9b05      	ldr	r3, [sp, #20]
 800691c:	2b00      	cmp	r3, #0
 800691e:	dd02      	ble.n	8006926 <_dtoa_r+0xa6e>
 8006920:	9b02      	ldr	r3, [sp, #8]
 8006922:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006926:	9b01      	ldr	r3, [sp, #4]
 8006928:	f883 9000 	strb.w	r9, [r3]
 800692c:	e774      	b.n	8006818 <_dtoa_r+0x960>
 800692e:	4638      	mov	r0, r7
 8006930:	e7ba      	b.n	80068a8 <_dtoa_r+0x9f0>
 8006932:	2201      	movs	r2, #1
 8006934:	e7e1      	b.n	80068fa <_dtoa_r+0xa42>
 8006936:	9b05      	ldr	r3, [sp, #20]
 8006938:	2b00      	cmp	r3, #0
 800693a:	db04      	blt.n	8006946 <_dtoa_r+0xa8e>
 800693c:	9907      	ldr	r1, [sp, #28]
 800693e:	430b      	orrs	r3, r1
 8006940:	9906      	ldr	r1, [sp, #24]
 8006942:	430b      	orrs	r3, r1
 8006944:	d120      	bne.n	8006988 <_dtoa_r+0xad0>
 8006946:	2a00      	cmp	r2, #0
 8006948:	dded      	ble.n	8006926 <_dtoa_r+0xa6e>
 800694a:	4651      	mov	r1, sl
 800694c:	2201      	movs	r2, #1
 800694e:	4620      	mov	r0, r4
 8006950:	f000 fbfe 	bl	8007150 <__lshift>
 8006954:	4631      	mov	r1, r6
 8006956:	4682      	mov	sl, r0
 8006958:	f000 fc66 	bl	8007228 <__mcmp>
 800695c:	2800      	cmp	r0, #0
 800695e:	dc03      	bgt.n	8006968 <_dtoa_r+0xab0>
 8006960:	d1e1      	bne.n	8006926 <_dtoa_r+0xa6e>
 8006962:	f019 0f01 	tst.w	r9, #1
 8006966:	d0de      	beq.n	8006926 <_dtoa_r+0xa6e>
 8006968:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800696c:	d1d8      	bne.n	8006920 <_dtoa_r+0xa68>
 800696e:	9a01      	ldr	r2, [sp, #4]
 8006970:	2339      	movs	r3, #57	; 0x39
 8006972:	7013      	strb	r3, [r2, #0]
 8006974:	462b      	mov	r3, r5
 8006976:	461d      	mov	r5, r3
 8006978:	3b01      	subs	r3, #1
 800697a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800697e:	2a39      	cmp	r2, #57	; 0x39
 8006980:	d06c      	beq.n	8006a5c <_dtoa_r+0xba4>
 8006982:	3201      	adds	r2, #1
 8006984:	701a      	strb	r2, [r3, #0]
 8006986:	e747      	b.n	8006818 <_dtoa_r+0x960>
 8006988:	2a00      	cmp	r2, #0
 800698a:	dd07      	ble.n	800699c <_dtoa_r+0xae4>
 800698c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006990:	d0ed      	beq.n	800696e <_dtoa_r+0xab6>
 8006992:	9a01      	ldr	r2, [sp, #4]
 8006994:	f109 0301 	add.w	r3, r9, #1
 8006998:	7013      	strb	r3, [r2, #0]
 800699a:	e73d      	b.n	8006818 <_dtoa_r+0x960>
 800699c:	9b04      	ldr	r3, [sp, #16]
 800699e:	9a08      	ldr	r2, [sp, #32]
 80069a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d043      	beq.n	8006a30 <_dtoa_r+0xb78>
 80069a8:	4651      	mov	r1, sl
 80069aa:	2300      	movs	r3, #0
 80069ac:	220a      	movs	r2, #10
 80069ae:	4620      	mov	r0, r4
 80069b0:	f000 f9d6 	bl	8006d60 <__multadd>
 80069b4:	45b8      	cmp	r8, r7
 80069b6:	4682      	mov	sl, r0
 80069b8:	f04f 0300 	mov.w	r3, #0
 80069bc:	f04f 020a 	mov.w	r2, #10
 80069c0:	4641      	mov	r1, r8
 80069c2:	4620      	mov	r0, r4
 80069c4:	d107      	bne.n	80069d6 <_dtoa_r+0xb1e>
 80069c6:	f000 f9cb 	bl	8006d60 <__multadd>
 80069ca:	4680      	mov	r8, r0
 80069cc:	4607      	mov	r7, r0
 80069ce:	9b04      	ldr	r3, [sp, #16]
 80069d0:	3301      	adds	r3, #1
 80069d2:	9304      	str	r3, [sp, #16]
 80069d4:	e775      	b.n	80068c2 <_dtoa_r+0xa0a>
 80069d6:	f000 f9c3 	bl	8006d60 <__multadd>
 80069da:	4639      	mov	r1, r7
 80069dc:	4680      	mov	r8, r0
 80069de:	2300      	movs	r3, #0
 80069e0:	220a      	movs	r2, #10
 80069e2:	4620      	mov	r0, r4
 80069e4:	f000 f9bc 	bl	8006d60 <__multadd>
 80069e8:	4607      	mov	r7, r0
 80069ea:	e7f0      	b.n	80069ce <_dtoa_r+0xb16>
 80069ec:	9b04      	ldr	r3, [sp, #16]
 80069ee:	9301      	str	r3, [sp, #4]
 80069f0:	9d00      	ldr	r5, [sp, #0]
 80069f2:	4631      	mov	r1, r6
 80069f4:	4650      	mov	r0, sl
 80069f6:	f7ff f9d7 	bl	8005da8 <quorem>
 80069fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80069fe:	9b00      	ldr	r3, [sp, #0]
 8006a00:	f805 9b01 	strb.w	r9, [r5], #1
 8006a04:	1aea      	subs	r2, r5, r3
 8006a06:	9b01      	ldr	r3, [sp, #4]
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	dd07      	ble.n	8006a1c <_dtoa_r+0xb64>
 8006a0c:	4651      	mov	r1, sl
 8006a0e:	2300      	movs	r3, #0
 8006a10:	220a      	movs	r2, #10
 8006a12:	4620      	mov	r0, r4
 8006a14:	f000 f9a4 	bl	8006d60 <__multadd>
 8006a18:	4682      	mov	sl, r0
 8006a1a:	e7ea      	b.n	80069f2 <_dtoa_r+0xb3a>
 8006a1c:	9b01      	ldr	r3, [sp, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	bfc8      	it	gt
 8006a22:	461d      	movgt	r5, r3
 8006a24:	9b00      	ldr	r3, [sp, #0]
 8006a26:	bfd8      	it	le
 8006a28:	2501      	movle	r5, #1
 8006a2a:	441d      	add	r5, r3
 8006a2c:	f04f 0800 	mov.w	r8, #0
 8006a30:	4651      	mov	r1, sl
 8006a32:	2201      	movs	r2, #1
 8006a34:	4620      	mov	r0, r4
 8006a36:	f000 fb8b 	bl	8007150 <__lshift>
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	4682      	mov	sl, r0
 8006a3e:	f000 fbf3 	bl	8007228 <__mcmp>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	dc96      	bgt.n	8006974 <_dtoa_r+0xabc>
 8006a46:	d102      	bne.n	8006a4e <_dtoa_r+0xb96>
 8006a48:	f019 0f01 	tst.w	r9, #1
 8006a4c:	d192      	bne.n	8006974 <_dtoa_r+0xabc>
 8006a4e:	462b      	mov	r3, r5
 8006a50:	461d      	mov	r5, r3
 8006a52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a56:	2a30      	cmp	r2, #48	; 0x30
 8006a58:	d0fa      	beq.n	8006a50 <_dtoa_r+0xb98>
 8006a5a:	e6dd      	b.n	8006818 <_dtoa_r+0x960>
 8006a5c:	9a00      	ldr	r2, [sp, #0]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d189      	bne.n	8006976 <_dtoa_r+0xabe>
 8006a62:	f10b 0b01 	add.w	fp, fp, #1
 8006a66:	2331      	movs	r3, #49	; 0x31
 8006a68:	e796      	b.n	8006998 <_dtoa_r+0xae0>
 8006a6a:	4b0a      	ldr	r3, [pc, #40]	; (8006a94 <_dtoa_r+0xbdc>)
 8006a6c:	f7ff ba99 	b.w	8005fa2 <_dtoa_r+0xea>
 8006a70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f47f aa6d 	bne.w	8005f52 <_dtoa_r+0x9a>
 8006a78:	4b07      	ldr	r3, [pc, #28]	; (8006a98 <_dtoa_r+0xbe0>)
 8006a7a:	f7ff ba92 	b.w	8005fa2 <_dtoa_r+0xea>
 8006a7e:	9b01      	ldr	r3, [sp, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	dcb5      	bgt.n	80069f0 <_dtoa_r+0xb38>
 8006a84:	9b07      	ldr	r3, [sp, #28]
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	f73f aeb1 	bgt.w	80067ee <_dtoa_r+0x936>
 8006a8c:	e7b0      	b.n	80069f0 <_dtoa_r+0xb38>
 8006a8e:	bf00      	nop
 8006a90:	0800960d 	.word	0x0800960d
 8006a94:	08009568 	.word	0x08009568
 8006a98:	08009591 	.word	0x08009591

08006a9c <_free_r>:
 8006a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a9e:	2900      	cmp	r1, #0
 8006aa0:	d044      	beq.n	8006b2c <_free_r+0x90>
 8006aa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aa6:	9001      	str	r0, [sp, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f1a1 0404 	sub.w	r4, r1, #4
 8006aae:	bfb8      	it	lt
 8006ab0:	18e4      	addlt	r4, r4, r3
 8006ab2:	f000 f8e7 	bl	8006c84 <__malloc_lock>
 8006ab6:	4a1e      	ldr	r2, [pc, #120]	; (8006b30 <_free_r+0x94>)
 8006ab8:	9801      	ldr	r0, [sp, #4]
 8006aba:	6813      	ldr	r3, [r2, #0]
 8006abc:	b933      	cbnz	r3, 8006acc <_free_r+0x30>
 8006abe:	6063      	str	r3, [r4, #4]
 8006ac0:	6014      	str	r4, [r2, #0]
 8006ac2:	b003      	add	sp, #12
 8006ac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ac8:	f000 b8e2 	b.w	8006c90 <__malloc_unlock>
 8006acc:	42a3      	cmp	r3, r4
 8006ace:	d908      	bls.n	8006ae2 <_free_r+0x46>
 8006ad0:	6825      	ldr	r5, [r4, #0]
 8006ad2:	1961      	adds	r1, r4, r5
 8006ad4:	428b      	cmp	r3, r1
 8006ad6:	bf01      	itttt	eq
 8006ad8:	6819      	ldreq	r1, [r3, #0]
 8006ada:	685b      	ldreq	r3, [r3, #4]
 8006adc:	1949      	addeq	r1, r1, r5
 8006ade:	6021      	streq	r1, [r4, #0]
 8006ae0:	e7ed      	b.n	8006abe <_free_r+0x22>
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	b10b      	cbz	r3, 8006aec <_free_r+0x50>
 8006ae8:	42a3      	cmp	r3, r4
 8006aea:	d9fa      	bls.n	8006ae2 <_free_r+0x46>
 8006aec:	6811      	ldr	r1, [r2, #0]
 8006aee:	1855      	adds	r5, r2, r1
 8006af0:	42a5      	cmp	r5, r4
 8006af2:	d10b      	bne.n	8006b0c <_free_r+0x70>
 8006af4:	6824      	ldr	r4, [r4, #0]
 8006af6:	4421      	add	r1, r4
 8006af8:	1854      	adds	r4, r2, r1
 8006afa:	42a3      	cmp	r3, r4
 8006afc:	6011      	str	r1, [r2, #0]
 8006afe:	d1e0      	bne.n	8006ac2 <_free_r+0x26>
 8006b00:	681c      	ldr	r4, [r3, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	6053      	str	r3, [r2, #4]
 8006b06:	440c      	add	r4, r1
 8006b08:	6014      	str	r4, [r2, #0]
 8006b0a:	e7da      	b.n	8006ac2 <_free_r+0x26>
 8006b0c:	d902      	bls.n	8006b14 <_free_r+0x78>
 8006b0e:	230c      	movs	r3, #12
 8006b10:	6003      	str	r3, [r0, #0]
 8006b12:	e7d6      	b.n	8006ac2 <_free_r+0x26>
 8006b14:	6825      	ldr	r5, [r4, #0]
 8006b16:	1961      	adds	r1, r4, r5
 8006b18:	428b      	cmp	r3, r1
 8006b1a:	bf04      	itt	eq
 8006b1c:	6819      	ldreq	r1, [r3, #0]
 8006b1e:	685b      	ldreq	r3, [r3, #4]
 8006b20:	6063      	str	r3, [r4, #4]
 8006b22:	bf04      	itt	eq
 8006b24:	1949      	addeq	r1, r1, r5
 8006b26:	6021      	streq	r1, [r4, #0]
 8006b28:	6054      	str	r4, [r2, #4]
 8006b2a:	e7ca      	b.n	8006ac2 <_free_r+0x26>
 8006b2c:	b003      	add	sp, #12
 8006b2e:	bd30      	pop	{r4, r5, pc}
 8006b30:	20000908 	.word	0x20000908

08006b34 <malloc>:
 8006b34:	4b02      	ldr	r3, [pc, #8]	; (8006b40 <malloc+0xc>)
 8006b36:	4601      	mov	r1, r0
 8006b38:	6818      	ldr	r0, [r3, #0]
 8006b3a:	f000 b823 	b.w	8006b84 <_malloc_r>
 8006b3e:	bf00      	nop
 8006b40:	200001f4 	.word	0x200001f4

08006b44 <sbrk_aligned>:
 8006b44:	b570      	push	{r4, r5, r6, lr}
 8006b46:	4e0e      	ldr	r6, [pc, #56]	; (8006b80 <sbrk_aligned+0x3c>)
 8006b48:	460c      	mov	r4, r1
 8006b4a:	6831      	ldr	r1, [r6, #0]
 8006b4c:	4605      	mov	r5, r0
 8006b4e:	b911      	cbnz	r1, 8006b56 <sbrk_aligned+0x12>
 8006b50:	f001 fe1a 	bl	8008788 <_sbrk_r>
 8006b54:	6030      	str	r0, [r6, #0]
 8006b56:	4621      	mov	r1, r4
 8006b58:	4628      	mov	r0, r5
 8006b5a:	f001 fe15 	bl	8008788 <_sbrk_r>
 8006b5e:	1c43      	adds	r3, r0, #1
 8006b60:	d00a      	beq.n	8006b78 <sbrk_aligned+0x34>
 8006b62:	1cc4      	adds	r4, r0, #3
 8006b64:	f024 0403 	bic.w	r4, r4, #3
 8006b68:	42a0      	cmp	r0, r4
 8006b6a:	d007      	beq.n	8006b7c <sbrk_aligned+0x38>
 8006b6c:	1a21      	subs	r1, r4, r0
 8006b6e:	4628      	mov	r0, r5
 8006b70:	f001 fe0a 	bl	8008788 <_sbrk_r>
 8006b74:	3001      	adds	r0, #1
 8006b76:	d101      	bne.n	8006b7c <sbrk_aligned+0x38>
 8006b78:	f04f 34ff 	mov.w	r4, #4294967295
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	bd70      	pop	{r4, r5, r6, pc}
 8006b80:	2000090c 	.word	0x2000090c

08006b84 <_malloc_r>:
 8006b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b88:	1ccd      	adds	r5, r1, #3
 8006b8a:	f025 0503 	bic.w	r5, r5, #3
 8006b8e:	3508      	adds	r5, #8
 8006b90:	2d0c      	cmp	r5, #12
 8006b92:	bf38      	it	cc
 8006b94:	250c      	movcc	r5, #12
 8006b96:	2d00      	cmp	r5, #0
 8006b98:	4607      	mov	r7, r0
 8006b9a:	db01      	blt.n	8006ba0 <_malloc_r+0x1c>
 8006b9c:	42a9      	cmp	r1, r5
 8006b9e:	d905      	bls.n	8006bac <_malloc_r+0x28>
 8006ba0:	230c      	movs	r3, #12
 8006ba2:	603b      	str	r3, [r7, #0]
 8006ba4:	2600      	movs	r6, #0
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006c80 <_malloc_r+0xfc>
 8006bb0:	f000 f868 	bl	8006c84 <__malloc_lock>
 8006bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8006bb8:	461c      	mov	r4, r3
 8006bba:	bb5c      	cbnz	r4, 8006c14 <_malloc_r+0x90>
 8006bbc:	4629      	mov	r1, r5
 8006bbe:	4638      	mov	r0, r7
 8006bc0:	f7ff ffc0 	bl	8006b44 <sbrk_aligned>
 8006bc4:	1c43      	adds	r3, r0, #1
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	d155      	bne.n	8006c76 <_malloc_r+0xf2>
 8006bca:	f8d8 4000 	ldr.w	r4, [r8]
 8006bce:	4626      	mov	r6, r4
 8006bd0:	2e00      	cmp	r6, #0
 8006bd2:	d145      	bne.n	8006c60 <_malloc_r+0xdc>
 8006bd4:	2c00      	cmp	r4, #0
 8006bd6:	d048      	beq.n	8006c6a <_malloc_r+0xe6>
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	4631      	mov	r1, r6
 8006bdc:	4638      	mov	r0, r7
 8006bde:	eb04 0903 	add.w	r9, r4, r3
 8006be2:	f001 fdd1 	bl	8008788 <_sbrk_r>
 8006be6:	4581      	cmp	r9, r0
 8006be8:	d13f      	bne.n	8006c6a <_malloc_r+0xe6>
 8006bea:	6821      	ldr	r1, [r4, #0]
 8006bec:	1a6d      	subs	r5, r5, r1
 8006bee:	4629      	mov	r1, r5
 8006bf0:	4638      	mov	r0, r7
 8006bf2:	f7ff ffa7 	bl	8006b44 <sbrk_aligned>
 8006bf6:	3001      	adds	r0, #1
 8006bf8:	d037      	beq.n	8006c6a <_malloc_r+0xe6>
 8006bfa:	6823      	ldr	r3, [r4, #0]
 8006bfc:	442b      	add	r3, r5
 8006bfe:	6023      	str	r3, [r4, #0]
 8006c00:	f8d8 3000 	ldr.w	r3, [r8]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d038      	beq.n	8006c7a <_malloc_r+0xf6>
 8006c08:	685a      	ldr	r2, [r3, #4]
 8006c0a:	42a2      	cmp	r2, r4
 8006c0c:	d12b      	bne.n	8006c66 <_malloc_r+0xe2>
 8006c0e:	2200      	movs	r2, #0
 8006c10:	605a      	str	r2, [r3, #4]
 8006c12:	e00f      	b.n	8006c34 <_malloc_r+0xb0>
 8006c14:	6822      	ldr	r2, [r4, #0]
 8006c16:	1b52      	subs	r2, r2, r5
 8006c18:	d41f      	bmi.n	8006c5a <_malloc_r+0xd6>
 8006c1a:	2a0b      	cmp	r2, #11
 8006c1c:	d917      	bls.n	8006c4e <_malloc_r+0xca>
 8006c1e:	1961      	adds	r1, r4, r5
 8006c20:	42a3      	cmp	r3, r4
 8006c22:	6025      	str	r5, [r4, #0]
 8006c24:	bf18      	it	ne
 8006c26:	6059      	strne	r1, [r3, #4]
 8006c28:	6863      	ldr	r3, [r4, #4]
 8006c2a:	bf08      	it	eq
 8006c2c:	f8c8 1000 	streq.w	r1, [r8]
 8006c30:	5162      	str	r2, [r4, r5]
 8006c32:	604b      	str	r3, [r1, #4]
 8006c34:	4638      	mov	r0, r7
 8006c36:	f104 060b 	add.w	r6, r4, #11
 8006c3a:	f000 f829 	bl	8006c90 <__malloc_unlock>
 8006c3e:	f026 0607 	bic.w	r6, r6, #7
 8006c42:	1d23      	adds	r3, r4, #4
 8006c44:	1af2      	subs	r2, r6, r3
 8006c46:	d0ae      	beq.n	8006ba6 <_malloc_r+0x22>
 8006c48:	1b9b      	subs	r3, r3, r6
 8006c4a:	50a3      	str	r3, [r4, r2]
 8006c4c:	e7ab      	b.n	8006ba6 <_malloc_r+0x22>
 8006c4e:	42a3      	cmp	r3, r4
 8006c50:	6862      	ldr	r2, [r4, #4]
 8006c52:	d1dd      	bne.n	8006c10 <_malloc_r+0x8c>
 8006c54:	f8c8 2000 	str.w	r2, [r8]
 8006c58:	e7ec      	b.n	8006c34 <_malloc_r+0xb0>
 8006c5a:	4623      	mov	r3, r4
 8006c5c:	6864      	ldr	r4, [r4, #4]
 8006c5e:	e7ac      	b.n	8006bba <_malloc_r+0x36>
 8006c60:	4634      	mov	r4, r6
 8006c62:	6876      	ldr	r6, [r6, #4]
 8006c64:	e7b4      	b.n	8006bd0 <_malloc_r+0x4c>
 8006c66:	4613      	mov	r3, r2
 8006c68:	e7cc      	b.n	8006c04 <_malloc_r+0x80>
 8006c6a:	230c      	movs	r3, #12
 8006c6c:	603b      	str	r3, [r7, #0]
 8006c6e:	4638      	mov	r0, r7
 8006c70:	f000 f80e 	bl	8006c90 <__malloc_unlock>
 8006c74:	e797      	b.n	8006ba6 <_malloc_r+0x22>
 8006c76:	6025      	str	r5, [r4, #0]
 8006c78:	e7dc      	b.n	8006c34 <_malloc_r+0xb0>
 8006c7a:	605b      	str	r3, [r3, #4]
 8006c7c:	deff      	udf	#255	; 0xff
 8006c7e:	bf00      	nop
 8006c80:	20000908 	.word	0x20000908

08006c84 <__malloc_lock>:
 8006c84:	4801      	ldr	r0, [pc, #4]	; (8006c8c <__malloc_lock+0x8>)
 8006c86:	f7ff b886 	b.w	8005d96 <__retarget_lock_acquire_recursive>
 8006c8a:	bf00      	nop
 8006c8c:	20000904 	.word	0x20000904

08006c90 <__malloc_unlock>:
 8006c90:	4801      	ldr	r0, [pc, #4]	; (8006c98 <__malloc_unlock+0x8>)
 8006c92:	f7ff b881 	b.w	8005d98 <__retarget_lock_release_recursive>
 8006c96:	bf00      	nop
 8006c98:	20000904 	.word	0x20000904

08006c9c <_Balloc>:
 8006c9c:	b570      	push	{r4, r5, r6, lr}
 8006c9e:	69c6      	ldr	r6, [r0, #28]
 8006ca0:	4604      	mov	r4, r0
 8006ca2:	460d      	mov	r5, r1
 8006ca4:	b976      	cbnz	r6, 8006cc4 <_Balloc+0x28>
 8006ca6:	2010      	movs	r0, #16
 8006ca8:	f7ff ff44 	bl	8006b34 <malloc>
 8006cac:	4602      	mov	r2, r0
 8006cae:	61e0      	str	r0, [r4, #28]
 8006cb0:	b920      	cbnz	r0, 8006cbc <_Balloc+0x20>
 8006cb2:	4b18      	ldr	r3, [pc, #96]	; (8006d14 <_Balloc+0x78>)
 8006cb4:	4818      	ldr	r0, [pc, #96]	; (8006d18 <_Balloc+0x7c>)
 8006cb6:	216b      	movs	r1, #107	; 0x6b
 8006cb8:	f001 fd8e 	bl	80087d8 <__assert_func>
 8006cbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cc0:	6006      	str	r6, [r0, #0]
 8006cc2:	60c6      	str	r6, [r0, #12]
 8006cc4:	69e6      	ldr	r6, [r4, #28]
 8006cc6:	68f3      	ldr	r3, [r6, #12]
 8006cc8:	b183      	cbz	r3, 8006cec <_Balloc+0x50>
 8006cca:	69e3      	ldr	r3, [r4, #28]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006cd2:	b9b8      	cbnz	r0, 8006d04 <_Balloc+0x68>
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	fa01 f605 	lsl.w	r6, r1, r5
 8006cda:	1d72      	adds	r2, r6, #5
 8006cdc:	0092      	lsls	r2, r2, #2
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f001 fd98 	bl	8008814 <_calloc_r>
 8006ce4:	b160      	cbz	r0, 8006d00 <_Balloc+0x64>
 8006ce6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006cea:	e00e      	b.n	8006d0a <_Balloc+0x6e>
 8006cec:	2221      	movs	r2, #33	; 0x21
 8006cee:	2104      	movs	r1, #4
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	f001 fd8f 	bl	8008814 <_calloc_r>
 8006cf6:	69e3      	ldr	r3, [r4, #28]
 8006cf8:	60f0      	str	r0, [r6, #12]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1e4      	bne.n	8006cca <_Balloc+0x2e>
 8006d00:	2000      	movs	r0, #0
 8006d02:	bd70      	pop	{r4, r5, r6, pc}
 8006d04:	6802      	ldr	r2, [r0, #0]
 8006d06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d10:	e7f7      	b.n	8006d02 <_Balloc+0x66>
 8006d12:	bf00      	nop
 8006d14:	0800959e 	.word	0x0800959e
 8006d18:	0800961e 	.word	0x0800961e

08006d1c <_Bfree>:
 8006d1c:	b570      	push	{r4, r5, r6, lr}
 8006d1e:	69c6      	ldr	r6, [r0, #28]
 8006d20:	4605      	mov	r5, r0
 8006d22:	460c      	mov	r4, r1
 8006d24:	b976      	cbnz	r6, 8006d44 <_Bfree+0x28>
 8006d26:	2010      	movs	r0, #16
 8006d28:	f7ff ff04 	bl	8006b34 <malloc>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	61e8      	str	r0, [r5, #28]
 8006d30:	b920      	cbnz	r0, 8006d3c <_Bfree+0x20>
 8006d32:	4b09      	ldr	r3, [pc, #36]	; (8006d58 <_Bfree+0x3c>)
 8006d34:	4809      	ldr	r0, [pc, #36]	; (8006d5c <_Bfree+0x40>)
 8006d36:	218f      	movs	r1, #143	; 0x8f
 8006d38:	f001 fd4e 	bl	80087d8 <__assert_func>
 8006d3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d40:	6006      	str	r6, [r0, #0]
 8006d42:	60c6      	str	r6, [r0, #12]
 8006d44:	b13c      	cbz	r4, 8006d56 <_Bfree+0x3a>
 8006d46:	69eb      	ldr	r3, [r5, #28]
 8006d48:	6862      	ldr	r2, [r4, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d50:	6021      	str	r1, [r4, #0]
 8006d52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d56:	bd70      	pop	{r4, r5, r6, pc}
 8006d58:	0800959e 	.word	0x0800959e
 8006d5c:	0800961e 	.word	0x0800961e

08006d60 <__multadd>:
 8006d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d64:	690d      	ldr	r5, [r1, #16]
 8006d66:	4607      	mov	r7, r0
 8006d68:	460c      	mov	r4, r1
 8006d6a:	461e      	mov	r6, r3
 8006d6c:	f101 0c14 	add.w	ip, r1, #20
 8006d70:	2000      	movs	r0, #0
 8006d72:	f8dc 3000 	ldr.w	r3, [ip]
 8006d76:	b299      	uxth	r1, r3
 8006d78:	fb02 6101 	mla	r1, r2, r1, r6
 8006d7c:	0c1e      	lsrs	r6, r3, #16
 8006d7e:	0c0b      	lsrs	r3, r1, #16
 8006d80:	fb02 3306 	mla	r3, r2, r6, r3
 8006d84:	b289      	uxth	r1, r1
 8006d86:	3001      	adds	r0, #1
 8006d88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d8c:	4285      	cmp	r5, r0
 8006d8e:	f84c 1b04 	str.w	r1, [ip], #4
 8006d92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d96:	dcec      	bgt.n	8006d72 <__multadd+0x12>
 8006d98:	b30e      	cbz	r6, 8006dde <__multadd+0x7e>
 8006d9a:	68a3      	ldr	r3, [r4, #8]
 8006d9c:	42ab      	cmp	r3, r5
 8006d9e:	dc19      	bgt.n	8006dd4 <__multadd+0x74>
 8006da0:	6861      	ldr	r1, [r4, #4]
 8006da2:	4638      	mov	r0, r7
 8006da4:	3101      	adds	r1, #1
 8006da6:	f7ff ff79 	bl	8006c9c <_Balloc>
 8006daa:	4680      	mov	r8, r0
 8006dac:	b928      	cbnz	r0, 8006dba <__multadd+0x5a>
 8006dae:	4602      	mov	r2, r0
 8006db0:	4b0c      	ldr	r3, [pc, #48]	; (8006de4 <__multadd+0x84>)
 8006db2:	480d      	ldr	r0, [pc, #52]	; (8006de8 <__multadd+0x88>)
 8006db4:	21ba      	movs	r1, #186	; 0xba
 8006db6:	f001 fd0f 	bl	80087d8 <__assert_func>
 8006dba:	6922      	ldr	r2, [r4, #16]
 8006dbc:	3202      	adds	r2, #2
 8006dbe:	f104 010c 	add.w	r1, r4, #12
 8006dc2:	0092      	lsls	r2, r2, #2
 8006dc4:	300c      	adds	r0, #12
 8006dc6:	f001 fcef 	bl	80087a8 <memcpy>
 8006dca:	4621      	mov	r1, r4
 8006dcc:	4638      	mov	r0, r7
 8006dce:	f7ff ffa5 	bl	8006d1c <_Bfree>
 8006dd2:	4644      	mov	r4, r8
 8006dd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006dd8:	3501      	adds	r5, #1
 8006dda:	615e      	str	r6, [r3, #20]
 8006ddc:	6125      	str	r5, [r4, #16]
 8006dde:	4620      	mov	r0, r4
 8006de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006de4:	0800960d 	.word	0x0800960d
 8006de8:	0800961e 	.word	0x0800961e

08006dec <__s2b>:
 8006dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006df0:	460c      	mov	r4, r1
 8006df2:	4615      	mov	r5, r2
 8006df4:	461f      	mov	r7, r3
 8006df6:	2209      	movs	r2, #9
 8006df8:	3308      	adds	r3, #8
 8006dfa:	4606      	mov	r6, r0
 8006dfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e00:	2100      	movs	r1, #0
 8006e02:	2201      	movs	r2, #1
 8006e04:	429a      	cmp	r2, r3
 8006e06:	db09      	blt.n	8006e1c <__s2b+0x30>
 8006e08:	4630      	mov	r0, r6
 8006e0a:	f7ff ff47 	bl	8006c9c <_Balloc>
 8006e0e:	b940      	cbnz	r0, 8006e22 <__s2b+0x36>
 8006e10:	4602      	mov	r2, r0
 8006e12:	4b19      	ldr	r3, [pc, #100]	; (8006e78 <__s2b+0x8c>)
 8006e14:	4819      	ldr	r0, [pc, #100]	; (8006e7c <__s2b+0x90>)
 8006e16:	21d3      	movs	r1, #211	; 0xd3
 8006e18:	f001 fcde 	bl	80087d8 <__assert_func>
 8006e1c:	0052      	lsls	r2, r2, #1
 8006e1e:	3101      	adds	r1, #1
 8006e20:	e7f0      	b.n	8006e04 <__s2b+0x18>
 8006e22:	9b08      	ldr	r3, [sp, #32]
 8006e24:	6143      	str	r3, [r0, #20]
 8006e26:	2d09      	cmp	r5, #9
 8006e28:	f04f 0301 	mov.w	r3, #1
 8006e2c:	6103      	str	r3, [r0, #16]
 8006e2e:	dd16      	ble.n	8006e5e <__s2b+0x72>
 8006e30:	f104 0909 	add.w	r9, r4, #9
 8006e34:	46c8      	mov	r8, r9
 8006e36:	442c      	add	r4, r5
 8006e38:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006e3c:	4601      	mov	r1, r0
 8006e3e:	3b30      	subs	r3, #48	; 0x30
 8006e40:	220a      	movs	r2, #10
 8006e42:	4630      	mov	r0, r6
 8006e44:	f7ff ff8c 	bl	8006d60 <__multadd>
 8006e48:	45a0      	cmp	r8, r4
 8006e4a:	d1f5      	bne.n	8006e38 <__s2b+0x4c>
 8006e4c:	f1a5 0408 	sub.w	r4, r5, #8
 8006e50:	444c      	add	r4, r9
 8006e52:	1b2d      	subs	r5, r5, r4
 8006e54:	1963      	adds	r3, r4, r5
 8006e56:	42bb      	cmp	r3, r7
 8006e58:	db04      	blt.n	8006e64 <__s2b+0x78>
 8006e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e5e:	340a      	adds	r4, #10
 8006e60:	2509      	movs	r5, #9
 8006e62:	e7f6      	b.n	8006e52 <__s2b+0x66>
 8006e64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006e68:	4601      	mov	r1, r0
 8006e6a:	3b30      	subs	r3, #48	; 0x30
 8006e6c:	220a      	movs	r2, #10
 8006e6e:	4630      	mov	r0, r6
 8006e70:	f7ff ff76 	bl	8006d60 <__multadd>
 8006e74:	e7ee      	b.n	8006e54 <__s2b+0x68>
 8006e76:	bf00      	nop
 8006e78:	0800960d 	.word	0x0800960d
 8006e7c:	0800961e 	.word	0x0800961e

08006e80 <__hi0bits>:
 8006e80:	0c03      	lsrs	r3, r0, #16
 8006e82:	041b      	lsls	r3, r3, #16
 8006e84:	b9d3      	cbnz	r3, 8006ebc <__hi0bits+0x3c>
 8006e86:	0400      	lsls	r0, r0, #16
 8006e88:	2310      	movs	r3, #16
 8006e8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006e8e:	bf04      	itt	eq
 8006e90:	0200      	lsleq	r0, r0, #8
 8006e92:	3308      	addeq	r3, #8
 8006e94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006e98:	bf04      	itt	eq
 8006e9a:	0100      	lsleq	r0, r0, #4
 8006e9c:	3304      	addeq	r3, #4
 8006e9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006ea2:	bf04      	itt	eq
 8006ea4:	0080      	lsleq	r0, r0, #2
 8006ea6:	3302      	addeq	r3, #2
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	db05      	blt.n	8006eb8 <__hi0bits+0x38>
 8006eac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006eb0:	f103 0301 	add.w	r3, r3, #1
 8006eb4:	bf08      	it	eq
 8006eb6:	2320      	moveq	r3, #32
 8006eb8:	4618      	mov	r0, r3
 8006eba:	4770      	bx	lr
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	e7e4      	b.n	8006e8a <__hi0bits+0xa>

08006ec0 <__lo0bits>:
 8006ec0:	6803      	ldr	r3, [r0, #0]
 8006ec2:	f013 0207 	ands.w	r2, r3, #7
 8006ec6:	d00c      	beq.n	8006ee2 <__lo0bits+0x22>
 8006ec8:	07d9      	lsls	r1, r3, #31
 8006eca:	d422      	bmi.n	8006f12 <__lo0bits+0x52>
 8006ecc:	079a      	lsls	r2, r3, #30
 8006ece:	bf49      	itett	mi
 8006ed0:	085b      	lsrmi	r3, r3, #1
 8006ed2:	089b      	lsrpl	r3, r3, #2
 8006ed4:	6003      	strmi	r3, [r0, #0]
 8006ed6:	2201      	movmi	r2, #1
 8006ed8:	bf5c      	itt	pl
 8006eda:	6003      	strpl	r3, [r0, #0]
 8006edc:	2202      	movpl	r2, #2
 8006ede:	4610      	mov	r0, r2
 8006ee0:	4770      	bx	lr
 8006ee2:	b299      	uxth	r1, r3
 8006ee4:	b909      	cbnz	r1, 8006eea <__lo0bits+0x2a>
 8006ee6:	0c1b      	lsrs	r3, r3, #16
 8006ee8:	2210      	movs	r2, #16
 8006eea:	b2d9      	uxtb	r1, r3
 8006eec:	b909      	cbnz	r1, 8006ef2 <__lo0bits+0x32>
 8006eee:	3208      	adds	r2, #8
 8006ef0:	0a1b      	lsrs	r3, r3, #8
 8006ef2:	0719      	lsls	r1, r3, #28
 8006ef4:	bf04      	itt	eq
 8006ef6:	091b      	lsreq	r3, r3, #4
 8006ef8:	3204      	addeq	r2, #4
 8006efa:	0799      	lsls	r1, r3, #30
 8006efc:	bf04      	itt	eq
 8006efe:	089b      	lsreq	r3, r3, #2
 8006f00:	3202      	addeq	r2, #2
 8006f02:	07d9      	lsls	r1, r3, #31
 8006f04:	d403      	bmi.n	8006f0e <__lo0bits+0x4e>
 8006f06:	085b      	lsrs	r3, r3, #1
 8006f08:	f102 0201 	add.w	r2, r2, #1
 8006f0c:	d003      	beq.n	8006f16 <__lo0bits+0x56>
 8006f0e:	6003      	str	r3, [r0, #0]
 8006f10:	e7e5      	b.n	8006ede <__lo0bits+0x1e>
 8006f12:	2200      	movs	r2, #0
 8006f14:	e7e3      	b.n	8006ede <__lo0bits+0x1e>
 8006f16:	2220      	movs	r2, #32
 8006f18:	e7e1      	b.n	8006ede <__lo0bits+0x1e>
	...

08006f1c <__i2b>:
 8006f1c:	b510      	push	{r4, lr}
 8006f1e:	460c      	mov	r4, r1
 8006f20:	2101      	movs	r1, #1
 8006f22:	f7ff febb 	bl	8006c9c <_Balloc>
 8006f26:	4602      	mov	r2, r0
 8006f28:	b928      	cbnz	r0, 8006f36 <__i2b+0x1a>
 8006f2a:	4b05      	ldr	r3, [pc, #20]	; (8006f40 <__i2b+0x24>)
 8006f2c:	4805      	ldr	r0, [pc, #20]	; (8006f44 <__i2b+0x28>)
 8006f2e:	f240 1145 	movw	r1, #325	; 0x145
 8006f32:	f001 fc51 	bl	80087d8 <__assert_func>
 8006f36:	2301      	movs	r3, #1
 8006f38:	6144      	str	r4, [r0, #20]
 8006f3a:	6103      	str	r3, [r0, #16]
 8006f3c:	bd10      	pop	{r4, pc}
 8006f3e:	bf00      	nop
 8006f40:	0800960d 	.word	0x0800960d
 8006f44:	0800961e 	.word	0x0800961e

08006f48 <__multiply>:
 8006f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4c:	4691      	mov	r9, r2
 8006f4e:	690a      	ldr	r2, [r1, #16]
 8006f50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	bfb8      	it	lt
 8006f58:	460b      	movlt	r3, r1
 8006f5a:	460c      	mov	r4, r1
 8006f5c:	bfbc      	itt	lt
 8006f5e:	464c      	movlt	r4, r9
 8006f60:	4699      	movlt	r9, r3
 8006f62:	6927      	ldr	r7, [r4, #16]
 8006f64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006f68:	68a3      	ldr	r3, [r4, #8]
 8006f6a:	6861      	ldr	r1, [r4, #4]
 8006f6c:	eb07 060a 	add.w	r6, r7, sl
 8006f70:	42b3      	cmp	r3, r6
 8006f72:	b085      	sub	sp, #20
 8006f74:	bfb8      	it	lt
 8006f76:	3101      	addlt	r1, #1
 8006f78:	f7ff fe90 	bl	8006c9c <_Balloc>
 8006f7c:	b930      	cbnz	r0, 8006f8c <__multiply+0x44>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	4b44      	ldr	r3, [pc, #272]	; (8007094 <__multiply+0x14c>)
 8006f82:	4845      	ldr	r0, [pc, #276]	; (8007098 <__multiply+0x150>)
 8006f84:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006f88:	f001 fc26 	bl	80087d8 <__assert_func>
 8006f8c:	f100 0514 	add.w	r5, r0, #20
 8006f90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f94:	462b      	mov	r3, r5
 8006f96:	2200      	movs	r2, #0
 8006f98:	4543      	cmp	r3, r8
 8006f9a:	d321      	bcc.n	8006fe0 <__multiply+0x98>
 8006f9c:	f104 0314 	add.w	r3, r4, #20
 8006fa0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006fa4:	f109 0314 	add.w	r3, r9, #20
 8006fa8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006fac:	9202      	str	r2, [sp, #8]
 8006fae:	1b3a      	subs	r2, r7, r4
 8006fb0:	3a15      	subs	r2, #21
 8006fb2:	f022 0203 	bic.w	r2, r2, #3
 8006fb6:	3204      	adds	r2, #4
 8006fb8:	f104 0115 	add.w	r1, r4, #21
 8006fbc:	428f      	cmp	r7, r1
 8006fbe:	bf38      	it	cc
 8006fc0:	2204      	movcc	r2, #4
 8006fc2:	9201      	str	r2, [sp, #4]
 8006fc4:	9a02      	ldr	r2, [sp, #8]
 8006fc6:	9303      	str	r3, [sp, #12]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d80c      	bhi.n	8006fe6 <__multiply+0x9e>
 8006fcc:	2e00      	cmp	r6, #0
 8006fce:	dd03      	ble.n	8006fd8 <__multiply+0x90>
 8006fd0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d05b      	beq.n	8007090 <__multiply+0x148>
 8006fd8:	6106      	str	r6, [r0, #16]
 8006fda:	b005      	add	sp, #20
 8006fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe0:	f843 2b04 	str.w	r2, [r3], #4
 8006fe4:	e7d8      	b.n	8006f98 <__multiply+0x50>
 8006fe6:	f8b3 a000 	ldrh.w	sl, [r3]
 8006fea:	f1ba 0f00 	cmp.w	sl, #0
 8006fee:	d024      	beq.n	800703a <__multiply+0xf2>
 8006ff0:	f104 0e14 	add.w	lr, r4, #20
 8006ff4:	46a9      	mov	r9, r5
 8006ff6:	f04f 0c00 	mov.w	ip, #0
 8006ffa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006ffe:	f8d9 1000 	ldr.w	r1, [r9]
 8007002:	fa1f fb82 	uxth.w	fp, r2
 8007006:	b289      	uxth	r1, r1
 8007008:	fb0a 110b 	mla	r1, sl, fp, r1
 800700c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007010:	f8d9 2000 	ldr.w	r2, [r9]
 8007014:	4461      	add	r1, ip
 8007016:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800701a:	fb0a c20b 	mla	r2, sl, fp, ip
 800701e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007022:	b289      	uxth	r1, r1
 8007024:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007028:	4577      	cmp	r7, lr
 800702a:	f849 1b04 	str.w	r1, [r9], #4
 800702e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007032:	d8e2      	bhi.n	8006ffa <__multiply+0xb2>
 8007034:	9a01      	ldr	r2, [sp, #4]
 8007036:	f845 c002 	str.w	ip, [r5, r2]
 800703a:	9a03      	ldr	r2, [sp, #12]
 800703c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007040:	3304      	adds	r3, #4
 8007042:	f1b9 0f00 	cmp.w	r9, #0
 8007046:	d021      	beq.n	800708c <__multiply+0x144>
 8007048:	6829      	ldr	r1, [r5, #0]
 800704a:	f104 0c14 	add.w	ip, r4, #20
 800704e:	46ae      	mov	lr, r5
 8007050:	f04f 0a00 	mov.w	sl, #0
 8007054:	f8bc b000 	ldrh.w	fp, [ip]
 8007058:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800705c:	fb09 220b 	mla	r2, r9, fp, r2
 8007060:	4452      	add	r2, sl
 8007062:	b289      	uxth	r1, r1
 8007064:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007068:	f84e 1b04 	str.w	r1, [lr], #4
 800706c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007070:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007074:	f8be 1000 	ldrh.w	r1, [lr]
 8007078:	fb09 110a 	mla	r1, r9, sl, r1
 800707c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007080:	4567      	cmp	r7, ip
 8007082:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007086:	d8e5      	bhi.n	8007054 <__multiply+0x10c>
 8007088:	9a01      	ldr	r2, [sp, #4]
 800708a:	50a9      	str	r1, [r5, r2]
 800708c:	3504      	adds	r5, #4
 800708e:	e799      	b.n	8006fc4 <__multiply+0x7c>
 8007090:	3e01      	subs	r6, #1
 8007092:	e79b      	b.n	8006fcc <__multiply+0x84>
 8007094:	0800960d 	.word	0x0800960d
 8007098:	0800961e 	.word	0x0800961e

0800709c <__pow5mult>:
 800709c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070a0:	4615      	mov	r5, r2
 80070a2:	f012 0203 	ands.w	r2, r2, #3
 80070a6:	4606      	mov	r6, r0
 80070a8:	460f      	mov	r7, r1
 80070aa:	d007      	beq.n	80070bc <__pow5mult+0x20>
 80070ac:	4c25      	ldr	r4, [pc, #148]	; (8007144 <__pow5mult+0xa8>)
 80070ae:	3a01      	subs	r2, #1
 80070b0:	2300      	movs	r3, #0
 80070b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070b6:	f7ff fe53 	bl	8006d60 <__multadd>
 80070ba:	4607      	mov	r7, r0
 80070bc:	10ad      	asrs	r5, r5, #2
 80070be:	d03d      	beq.n	800713c <__pow5mult+0xa0>
 80070c0:	69f4      	ldr	r4, [r6, #28]
 80070c2:	b97c      	cbnz	r4, 80070e4 <__pow5mult+0x48>
 80070c4:	2010      	movs	r0, #16
 80070c6:	f7ff fd35 	bl	8006b34 <malloc>
 80070ca:	4602      	mov	r2, r0
 80070cc:	61f0      	str	r0, [r6, #28]
 80070ce:	b928      	cbnz	r0, 80070dc <__pow5mult+0x40>
 80070d0:	4b1d      	ldr	r3, [pc, #116]	; (8007148 <__pow5mult+0xac>)
 80070d2:	481e      	ldr	r0, [pc, #120]	; (800714c <__pow5mult+0xb0>)
 80070d4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80070d8:	f001 fb7e 	bl	80087d8 <__assert_func>
 80070dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070e0:	6004      	str	r4, [r0, #0]
 80070e2:	60c4      	str	r4, [r0, #12]
 80070e4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80070e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070ec:	b94c      	cbnz	r4, 8007102 <__pow5mult+0x66>
 80070ee:	f240 2171 	movw	r1, #625	; 0x271
 80070f2:	4630      	mov	r0, r6
 80070f4:	f7ff ff12 	bl	8006f1c <__i2b>
 80070f8:	2300      	movs	r3, #0
 80070fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80070fe:	4604      	mov	r4, r0
 8007100:	6003      	str	r3, [r0, #0]
 8007102:	f04f 0900 	mov.w	r9, #0
 8007106:	07eb      	lsls	r3, r5, #31
 8007108:	d50a      	bpl.n	8007120 <__pow5mult+0x84>
 800710a:	4639      	mov	r1, r7
 800710c:	4622      	mov	r2, r4
 800710e:	4630      	mov	r0, r6
 8007110:	f7ff ff1a 	bl	8006f48 <__multiply>
 8007114:	4639      	mov	r1, r7
 8007116:	4680      	mov	r8, r0
 8007118:	4630      	mov	r0, r6
 800711a:	f7ff fdff 	bl	8006d1c <_Bfree>
 800711e:	4647      	mov	r7, r8
 8007120:	106d      	asrs	r5, r5, #1
 8007122:	d00b      	beq.n	800713c <__pow5mult+0xa0>
 8007124:	6820      	ldr	r0, [r4, #0]
 8007126:	b938      	cbnz	r0, 8007138 <__pow5mult+0x9c>
 8007128:	4622      	mov	r2, r4
 800712a:	4621      	mov	r1, r4
 800712c:	4630      	mov	r0, r6
 800712e:	f7ff ff0b 	bl	8006f48 <__multiply>
 8007132:	6020      	str	r0, [r4, #0]
 8007134:	f8c0 9000 	str.w	r9, [r0]
 8007138:	4604      	mov	r4, r0
 800713a:	e7e4      	b.n	8007106 <__pow5mult+0x6a>
 800713c:	4638      	mov	r0, r7
 800713e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007142:	bf00      	nop
 8007144:	08009768 	.word	0x08009768
 8007148:	0800959e 	.word	0x0800959e
 800714c:	0800961e 	.word	0x0800961e

08007150 <__lshift>:
 8007150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007154:	460c      	mov	r4, r1
 8007156:	6849      	ldr	r1, [r1, #4]
 8007158:	6923      	ldr	r3, [r4, #16]
 800715a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800715e:	68a3      	ldr	r3, [r4, #8]
 8007160:	4607      	mov	r7, r0
 8007162:	4691      	mov	r9, r2
 8007164:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007168:	f108 0601 	add.w	r6, r8, #1
 800716c:	42b3      	cmp	r3, r6
 800716e:	db0b      	blt.n	8007188 <__lshift+0x38>
 8007170:	4638      	mov	r0, r7
 8007172:	f7ff fd93 	bl	8006c9c <_Balloc>
 8007176:	4605      	mov	r5, r0
 8007178:	b948      	cbnz	r0, 800718e <__lshift+0x3e>
 800717a:	4602      	mov	r2, r0
 800717c:	4b28      	ldr	r3, [pc, #160]	; (8007220 <__lshift+0xd0>)
 800717e:	4829      	ldr	r0, [pc, #164]	; (8007224 <__lshift+0xd4>)
 8007180:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007184:	f001 fb28 	bl	80087d8 <__assert_func>
 8007188:	3101      	adds	r1, #1
 800718a:	005b      	lsls	r3, r3, #1
 800718c:	e7ee      	b.n	800716c <__lshift+0x1c>
 800718e:	2300      	movs	r3, #0
 8007190:	f100 0114 	add.w	r1, r0, #20
 8007194:	f100 0210 	add.w	r2, r0, #16
 8007198:	4618      	mov	r0, r3
 800719a:	4553      	cmp	r3, sl
 800719c:	db33      	blt.n	8007206 <__lshift+0xb6>
 800719e:	6920      	ldr	r0, [r4, #16]
 80071a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071a4:	f104 0314 	add.w	r3, r4, #20
 80071a8:	f019 091f 	ands.w	r9, r9, #31
 80071ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80071b4:	d02b      	beq.n	800720e <__lshift+0xbe>
 80071b6:	f1c9 0e20 	rsb	lr, r9, #32
 80071ba:	468a      	mov	sl, r1
 80071bc:	2200      	movs	r2, #0
 80071be:	6818      	ldr	r0, [r3, #0]
 80071c0:	fa00 f009 	lsl.w	r0, r0, r9
 80071c4:	4310      	orrs	r0, r2
 80071c6:	f84a 0b04 	str.w	r0, [sl], #4
 80071ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ce:	459c      	cmp	ip, r3
 80071d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80071d4:	d8f3      	bhi.n	80071be <__lshift+0x6e>
 80071d6:	ebac 0304 	sub.w	r3, ip, r4
 80071da:	3b15      	subs	r3, #21
 80071dc:	f023 0303 	bic.w	r3, r3, #3
 80071e0:	3304      	adds	r3, #4
 80071e2:	f104 0015 	add.w	r0, r4, #21
 80071e6:	4584      	cmp	ip, r0
 80071e8:	bf38      	it	cc
 80071ea:	2304      	movcc	r3, #4
 80071ec:	50ca      	str	r2, [r1, r3]
 80071ee:	b10a      	cbz	r2, 80071f4 <__lshift+0xa4>
 80071f0:	f108 0602 	add.w	r6, r8, #2
 80071f4:	3e01      	subs	r6, #1
 80071f6:	4638      	mov	r0, r7
 80071f8:	612e      	str	r6, [r5, #16]
 80071fa:	4621      	mov	r1, r4
 80071fc:	f7ff fd8e 	bl	8006d1c <_Bfree>
 8007200:	4628      	mov	r0, r5
 8007202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007206:	f842 0f04 	str.w	r0, [r2, #4]!
 800720a:	3301      	adds	r3, #1
 800720c:	e7c5      	b.n	800719a <__lshift+0x4a>
 800720e:	3904      	subs	r1, #4
 8007210:	f853 2b04 	ldr.w	r2, [r3], #4
 8007214:	f841 2f04 	str.w	r2, [r1, #4]!
 8007218:	459c      	cmp	ip, r3
 800721a:	d8f9      	bhi.n	8007210 <__lshift+0xc0>
 800721c:	e7ea      	b.n	80071f4 <__lshift+0xa4>
 800721e:	bf00      	nop
 8007220:	0800960d 	.word	0x0800960d
 8007224:	0800961e 	.word	0x0800961e

08007228 <__mcmp>:
 8007228:	b530      	push	{r4, r5, lr}
 800722a:	6902      	ldr	r2, [r0, #16]
 800722c:	690c      	ldr	r4, [r1, #16]
 800722e:	1b12      	subs	r2, r2, r4
 8007230:	d10e      	bne.n	8007250 <__mcmp+0x28>
 8007232:	f100 0314 	add.w	r3, r0, #20
 8007236:	3114      	adds	r1, #20
 8007238:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800723c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007240:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007244:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007248:	42a5      	cmp	r5, r4
 800724a:	d003      	beq.n	8007254 <__mcmp+0x2c>
 800724c:	d305      	bcc.n	800725a <__mcmp+0x32>
 800724e:	2201      	movs	r2, #1
 8007250:	4610      	mov	r0, r2
 8007252:	bd30      	pop	{r4, r5, pc}
 8007254:	4283      	cmp	r3, r0
 8007256:	d3f3      	bcc.n	8007240 <__mcmp+0x18>
 8007258:	e7fa      	b.n	8007250 <__mcmp+0x28>
 800725a:	f04f 32ff 	mov.w	r2, #4294967295
 800725e:	e7f7      	b.n	8007250 <__mcmp+0x28>

08007260 <__mdiff>:
 8007260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007264:	460c      	mov	r4, r1
 8007266:	4606      	mov	r6, r0
 8007268:	4611      	mov	r1, r2
 800726a:	4620      	mov	r0, r4
 800726c:	4690      	mov	r8, r2
 800726e:	f7ff ffdb 	bl	8007228 <__mcmp>
 8007272:	1e05      	subs	r5, r0, #0
 8007274:	d110      	bne.n	8007298 <__mdiff+0x38>
 8007276:	4629      	mov	r1, r5
 8007278:	4630      	mov	r0, r6
 800727a:	f7ff fd0f 	bl	8006c9c <_Balloc>
 800727e:	b930      	cbnz	r0, 800728e <__mdiff+0x2e>
 8007280:	4b3a      	ldr	r3, [pc, #232]	; (800736c <__mdiff+0x10c>)
 8007282:	4602      	mov	r2, r0
 8007284:	f240 2137 	movw	r1, #567	; 0x237
 8007288:	4839      	ldr	r0, [pc, #228]	; (8007370 <__mdiff+0x110>)
 800728a:	f001 faa5 	bl	80087d8 <__assert_func>
 800728e:	2301      	movs	r3, #1
 8007290:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007294:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007298:	bfa4      	itt	ge
 800729a:	4643      	movge	r3, r8
 800729c:	46a0      	movge	r8, r4
 800729e:	4630      	mov	r0, r6
 80072a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80072a4:	bfa6      	itte	ge
 80072a6:	461c      	movge	r4, r3
 80072a8:	2500      	movge	r5, #0
 80072aa:	2501      	movlt	r5, #1
 80072ac:	f7ff fcf6 	bl	8006c9c <_Balloc>
 80072b0:	b920      	cbnz	r0, 80072bc <__mdiff+0x5c>
 80072b2:	4b2e      	ldr	r3, [pc, #184]	; (800736c <__mdiff+0x10c>)
 80072b4:	4602      	mov	r2, r0
 80072b6:	f240 2145 	movw	r1, #581	; 0x245
 80072ba:	e7e5      	b.n	8007288 <__mdiff+0x28>
 80072bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80072c0:	6926      	ldr	r6, [r4, #16]
 80072c2:	60c5      	str	r5, [r0, #12]
 80072c4:	f104 0914 	add.w	r9, r4, #20
 80072c8:	f108 0514 	add.w	r5, r8, #20
 80072cc:	f100 0e14 	add.w	lr, r0, #20
 80072d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80072d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80072d8:	f108 0210 	add.w	r2, r8, #16
 80072dc:	46f2      	mov	sl, lr
 80072de:	2100      	movs	r1, #0
 80072e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80072e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80072e8:	fa11 f88b 	uxtah	r8, r1, fp
 80072ec:	b299      	uxth	r1, r3
 80072ee:	0c1b      	lsrs	r3, r3, #16
 80072f0:	eba8 0801 	sub.w	r8, r8, r1
 80072f4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80072f8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80072fc:	fa1f f888 	uxth.w	r8, r8
 8007300:	1419      	asrs	r1, r3, #16
 8007302:	454e      	cmp	r6, r9
 8007304:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007308:	f84a 3b04 	str.w	r3, [sl], #4
 800730c:	d8e8      	bhi.n	80072e0 <__mdiff+0x80>
 800730e:	1b33      	subs	r3, r6, r4
 8007310:	3b15      	subs	r3, #21
 8007312:	f023 0303 	bic.w	r3, r3, #3
 8007316:	3304      	adds	r3, #4
 8007318:	3415      	adds	r4, #21
 800731a:	42a6      	cmp	r6, r4
 800731c:	bf38      	it	cc
 800731e:	2304      	movcc	r3, #4
 8007320:	441d      	add	r5, r3
 8007322:	4473      	add	r3, lr
 8007324:	469e      	mov	lr, r3
 8007326:	462e      	mov	r6, r5
 8007328:	4566      	cmp	r6, ip
 800732a:	d30e      	bcc.n	800734a <__mdiff+0xea>
 800732c:	f10c 0203 	add.w	r2, ip, #3
 8007330:	1b52      	subs	r2, r2, r5
 8007332:	f022 0203 	bic.w	r2, r2, #3
 8007336:	3d03      	subs	r5, #3
 8007338:	45ac      	cmp	ip, r5
 800733a:	bf38      	it	cc
 800733c:	2200      	movcc	r2, #0
 800733e:	4413      	add	r3, r2
 8007340:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007344:	b17a      	cbz	r2, 8007366 <__mdiff+0x106>
 8007346:	6107      	str	r7, [r0, #16]
 8007348:	e7a4      	b.n	8007294 <__mdiff+0x34>
 800734a:	f856 8b04 	ldr.w	r8, [r6], #4
 800734e:	fa11 f288 	uxtah	r2, r1, r8
 8007352:	1414      	asrs	r4, r2, #16
 8007354:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007358:	b292      	uxth	r2, r2
 800735a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800735e:	f84e 2b04 	str.w	r2, [lr], #4
 8007362:	1421      	asrs	r1, r4, #16
 8007364:	e7e0      	b.n	8007328 <__mdiff+0xc8>
 8007366:	3f01      	subs	r7, #1
 8007368:	e7ea      	b.n	8007340 <__mdiff+0xe0>
 800736a:	bf00      	nop
 800736c:	0800960d 	.word	0x0800960d
 8007370:	0800961e 	.word	0x0800961e

08007374 <__ulp>:
 8007374:	b082      	sub	sp, #8
 8007376:	ed8d 0b00 	vstr	d0, [sp]
 800737a:	9a01      	ldr	r2, [sp, #4]
 800737c:	4b0f      	ldr	r3, [pc, #60]	; (80073bc <__ulp+0x48>)
 800737e:	4013      	ands	r3, r2
 8007380:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007384:	2b00      	cmp	r3, #0
 8007386:	dc08      	bgt.n	800739a <__ulp+0x26>
 8007388:	425b      	negs	r3, r3
 800738a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800738e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007392:	da04      	bge.n	800739e <__ulp+0x2a>
 8007394:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007398:	4113      	asrs	r3, r2
 800739a:	2200      	movs	r2, #0
 800739c:	e008      	b.n	80073b0 <__ulp+0x3c>
 800739e:	f1a2 0314 	sub.w	r3, r2, #20
 80073a2:	2b1e      	cmp	r3, #30
 80073a4:	bfda      	itte	le
 80073a6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80073aa:	40da      	lsrle	r2, r3
 80073ac:	2201      	movgt	r2, #1
 80073ae:	2300      	movs	r3, #0
 80073b0:	4619      	mov	r1, r3
 80073b2:	4610      	mov	r0, r2
 80073b4:	ec41 0b10 	vmov	d0, r0, r1
 80073b8:	b002      	add	sp, #8
 80073ba:	4770      	bx	lr
 80073bc:	7ff00000 	.word	0x7ff00000

080073c0 <__b2d>:
 80073c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073c4:	6906      	ldr	r6, [r0, #16]
 80073c6:	f100 0814 	add.w	r8, r0, #20
 80073ca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80073ce:	1f37      	subs	r7, r6, #4
 80073d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80073d4:	4610      	mov	r0, r2
 80073d6:	f7ff fd53 	bl	8006e80 <__hi0bits>
 80073da:	f1c0 0320 	rsb	r3, r0, #32
 80073de:	280a      	cmp	r0, #10
 80073e0:	600b      	str	r3, [r1, #0]
 80073e2:	491b      	ldr	r1, [pc, #108]	; (8007450 <__b2d+0x90>)
 80073e4:	dc15      	bgt.n	8007412 <__b2d+0x52>
 80073e6:	f1c0 0c0b 	rsb	ip, r0, #11
 80073ea:	fa22 f30c 	lsr.w	r3, r2, ip
 80073ee:	45b8      	cmp	r8, r7
 80073f0:	ea43 0501 	orr.w	r5, r3, r1
 80073f4:	bf34      	ite	cc
 80073f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80073fa:	2300      	movcs	r3, #0
 80073fc:	3015      	adds	r0, #21
 80073fe:	fa02 f000 	lsl.w	r0, r2, r0
 8007402:	fa23 f30c 	lsr.w	r3, r3, ip
 8007406:	4303      	orrs	r3, r0
 8007408:	461c      	mov	r4, r3
 800740a:	ec45 4b10 	vmov	d0, r4, r5
 800740e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007412:	45b8      	cmp	r8, r7
 8007414:	bf3a      	itte	cc
 8007416:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800741a:	f1a6 0708 	subcc.w	r7, r6, #8
 800741e:	2300      	movcs	r3, #0
 8007420:	380b      	subs	r0, #11
 8007422:	d012      	beq.n	800744a <__b2d+0x8a>
 8007424:	f1c0 0120 	rsb	r1, r0, #32
 8007428:	fa23 f401 	lsr.w	r4, r3, r1
 800742c:	4082      	lsls	r2, r0
 800742e:	4322      	orrs	r2, r4
 8007430:	4547      	cmp	r7, r8
 8007432:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007436:	bf8c      	ite	hi
 8007438:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800743c:	2200      	movls	r2, #0
 800743e:	4083      	lsls	r3, r0
 8007440:	40ca      	lsrs	r2, r1
 8007442:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007446:	4313      	orrs	r3, r2
 8007448:	e7de      	b.n	8007408 <__b2d+0x48>
 800744a:	ea42 0501 	orr.w	r5, r2, r1
 800744e:	e7db      	b.n	8007408 <__b2d+0x48>
 8007450:	3ff00000 	.word	0x3ff00000

08007454 <__d2b>:
 8007454:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007458:	460f      	mov	r7, r1
 800745a:	2101      	movs	r1, #1
 800745c:	ec59 8b10 	vmov	r8, r9, d0
 8007460:	4616      	mov	r6, r2
 8007462:	f7ff fc1b 	bl	8006c9c <_Balloc>
 8007466:	4604      	mov	r4, r0
 8007468:	b930      	cbnz	r0, 8007478 <__d2b+0x24>
 800746a:	4602      	mov	r2, r0
 800746c:	4b24      	ldr	r3, [pc, #144]	; (8007500 <__d2b+0xac>)
 800746e:	4825      	ldr	r0, [pc, #148]	; (8007504 <__d2b+0xb0>)
 8007470:	f240 310f 	movw	r1, #783	; 0x30f
 8007474:	f001 f9b0 	bl	80087d8 <__assert_func>
 8007478:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800747c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007480:	bb2d      	cbnz	r5, 80074ce <__d2b+0x7a>
 8007482:	9301      	str	r3, [sp, #4]
 8007484:	f1b8 0300 	subs.w	r3, r8, #0
 8007488:	d026      	beq.n	80074d8 <__d2b+0x84>
 800748a:	4668      	mov	r0, sp
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	f7ff fd17 	bl	8006ec0 <__lo0bits>
 8007492:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007496:	b1e8      	cbz	r0, 80074d4 <__d2b+0x80>
 8007498:	f1c0 0320 	rsb	r3, r0, #32
 800749c:	fa02 f303 	lsl.w	r3, r2, r3
 80074a0:	430b      	orrs	r3, r1
 80074a2:	40c2      	lsrs	r2, r0
 80074a4:	6163      	str	r3, [r4, #20]
 80074a6:	9201      	str	r2, [sp, #4]
 80074a8:	9b01      	ldr	r3, [sp, #4]
 80074aa:	61a3      	str	r3, [r4, #24]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	bf14      	ite	ne
 80074b0:	2202      	movne	r2, #2
 80074b2:	2201      	moveq	r2, #1
 80074b4:	6122      	str	r2, [r4, #16]
 80074b6:	b1bd      	cbz	r5, 80074e8 <__d2b+0x94>
 80074b8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80074bc:	4405      	add	r5, r0
 80074be:	603d      	str	r5, [r7, #0]
 80074c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80074c4:	6030      	str	r0, [r6, #0]
 80074c6:	4620      	mov	r0, r4
 80074c8:	b003      	add	sp, #12
 80074ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074d2:	e7d6      	b.n	8007482 <__d2b+0x2e>
 80074d4:	6161      	str	r1, [r4, #20]
 80074d6:	e7e7      	b.n	80074a8 <__d2b+0x54>
 80074d8:	a801      	add	r0, sp, #4
 80074da:	f7ff fcf1 	bl	8006ec0 <__lo0bits>
 80074de:	9b01      	ldr	r3, [sp, #4]
 80074e0:	6163      	str	r3, [r4, #20]
 80074e2:	3020      	adds	r0, #32
 80074e4:	2201      	movs	r2, #1
 80074e6:	e7e5      	b.n	80074b4 <__d2b+0x60>
 80074e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80074ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80074f0:	6038      	str	r0, [r7, #0]
 80074f2:	6918      	ldr	r0, [r3, #16]
 80074f4:	f7ff fcc4 	bl	8006e80 <__hi0bits>
 80074f8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80074fc:	e7e2      	b.n	80074c4 <__d2b+0x70>
 80074fe:	bf00      	nop
 8007500:	0800960d 	.word	0x0800960d
 8007504:	0800961e 	.word	0x0800961e

08007508 <__ratio>:
 8007508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750c:	4688      	mov	r8, r1
 800750e:	4669      	mov	r1, sp
 8007510:	4681      	mov	r9, r0
 8007512:	f7ff ff55 	bl	80073c0 <__b2d>
 8007516:	a901      	add	r1, sp, #4
 8007518:	4640      	mov	r0, r8
 800751a:	ec55 4b10 	vmov	r4, r5, d0
 800751e:	f7ff ff4f 	bl	80073c0 <__b2d>
 8007522:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007526:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800752a:	eba3 0c02 	sub.w	ip, r3, r2
 800752e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007532:	1a9b      	subs	r3, r3, r2
 8007534:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007538:	ec51 0b10 	vmov	r0, r1, d0
 800753c:	2b00      	cmp	r3, #0
 800753e:	bfd6      	itet	le
 8007540:	460a      	movle	r2, r1
 8007542:	462a      	movgt	r2, r5
 8007544:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007548:	468b      	mov	fp, r1
 800754a:	462f      	mov	r7, r5
 800754c:	bfd4      	ite	le
 800754e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007552:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007556:	4620      	mov	r0, r4
 8007558:	ee10 2a10 	vmov	r2, s0
 800755c:	465b      	mov	r3, fp
 800755e:	4639      	mov	r1, r7
 8007560:	f7f9 f974 	bl	800084c <__aeabi_ddiv>
 8007564:	ec41 0b10 	vmov	d0, r0, r1
 8007568:	b003      	add	sp, #12
 800756a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800756e <__copybits>:
 800756e:	3901      	subs	r1, #1
 8007570:	b570      	push	{r4, r5, r6, lr}
 8007572:	1149      	asrs	r1, r1, #5
 8007574:	6914      	ldr	r4, [r2, #16]
 8007576:	3101      	adds	r1, #1
 8007578:	f102 0314 	add.w	r3, r2, #20
 800757c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007580:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007584:	1f05      	subs	r5, r0, #4
 8007586:	42a3      	cmp	r3, r4
 8007588:	d30c      	bcc.n	80075a4 <__copybits+0x36>
 800758a:	1aa3      	subs	r3, r4, r2
 800758c:	3b11      	subs	r3, #17
 800758e:	f023 0303 	bic.w	r3, r3, #3
 8007592:	3211      	adds	r2, #17
 8007594:	42a2      	cmp	r2, r4
 8007596:	bf88      	it	hi
 8007598:	2300      	movhi	r3, #0
 800759a:	4418      	add	r0, r3
 800759c:	2300      	movs	r3, #0
 800759e:	4288      	cmp	r0, r1
 80075a0:	d305      	bcc.n	80075ae <__copybits+0x40>
 80075a2:	bd70      	pop	{r4, r5, r6, pc}
 80075a4:	f853 6b04 	ldr.w	r6, [r3], #4
 80075a8:	f845 6f04 	str.w	r6, [r5, #4]!
 80075ac:	e7eb      	b.n	8007586 <__copybits+0x18>
 80075ae:	f840 3b04 	str.w	r3, [r0], #4
 80075b2:	e7f4      	b.n	800759e <__copybits+0x30>

080075b4 <__any_on>:
 80075b4:	f100 0214 	add.w	r2, r0, #20
 80075b8:	6900      	ldr	r0, [r0, #16]
 80075ba:	114b      	asrs	r3, r1, #5
 80075bc:	4298      	cmp	r0, r3
 80075be:	b510      	push	{r4, lr}
 80075c0:	db11      	blt.n	80075e6 <__any_on+0x32>
 80075c2:	dd0a      	ble.n	80075da <__any_on+0x26>
 80075c4:	f011 011f 	ands.w	r1, r1, #31
 80075c8:	d007      	beq.n	80075da <__any_on+0x26>
 80075ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80075ce:	fa24 f001 	lsr.w	r0, r4, r1
 80075d2:	fa00 f101 	lsl.w	r1, r0, r1
 80075d6:	428c      	cmp	r4, r1
 80075d8:	d10b      	bne.n	80075f2 <__any_on+0x3e>
 80075da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80075de:	4293      	cmp	r3, r2
 80075e0:	d803      	bhi.n	80075ea <__any_on+0x36>
 80075e2:	2000      	movs	r0, #0
 80075e4:	bd10      	pop	{r4, pc}
 80075e6:	4603      	mov	r3, r0
 80075e8:	e7f7      	b.n	80075da <__any_on+0x26>
 80075ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80075ee:	2900      	cmp	r1, #0
 80075f0:	d0f5      	beq.n	80075de <__any_on+0x2a>
 80075f2:	2001      	movs	r0, #1
 80075f4:	e7f6      	b.n	80075e4 <__any_on+0x30>

080075f6 <sulp>:
 80075f6:	b570      	push	{r4, r5, r6, lr}
 80075f8:	4604      	mov	r4, r0
 80075fa:	460d      	mov	r5, r1
 80075fc:	ec45 4b10 	vmov	d0, r4, r5
 8007600:	4616      	mov	r6, r2
 8007602:	f7ff feb7 	bl	8007374 <__ulp>
 8007606:	ec51 0b10 	vmov	r0, r1, d0
 800760a:	b17e      	cbz	r6, 800762c <sulp+0x36>
 800760c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007610:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007614:	2b00      	cmp	r3, #0
 8007616:	dd09      	ble.n	800762c <sulp+0x36>
 8007618:	051b      	lsls	r3, r3, #20
 800761a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800761e:	2400      	movs	r4, #0
 8007620:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007624:	4622      	mov	r2, r4
 8007626:	462b      	mov	r3, r5
 8007628:	f7f8 ffe6 	bl	80005f8 <__aeabi_dmul>
 800762c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007630 <_strtod_l>:
 8007630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007634:	ed2d 8b02 	vpush	{d8}
 8007638:	b09b      	sub	sp, #108	; 0x6c
 800763a:	4604      	mov	r4, r0
 800763c:	9213      	str	r2, [sp, #76]	; 0x4c
 800763e:	2200      	movs	r2, #0
 8007640:	9216      	str	r2, [sp, #88]	; 0x58
 8007642:	460d      	mov	r5, r1
 8007644:	f04f 0800 	mov.w	r8, #0
 8007648:	f04f 0900 	mov.w	r9, #0
 800764c:	460a      	mov	r2, r1
 800764e:	9215      	str	r2, [sp, #84]	; 0x54
 8007650:	7811      	ldrb	r1, [r2, #0]
 8007652:	292b      	cmp	r1, #43	; 0x2b
 8007654:	d04c      	beq.n	80076f0 <_strtod_l+0xc0>
 8007656:	d83a      	bhi.n	80076ce <_strtod_l+0x9e>
 8007658:	290d      	cmp	r1, #13
 800765a:	d834      	bhi.n	80076c6 <_strtod_l+0x96>
 800765c:	2908      	cmp	r1, #8
 800765e:	d834      	bhi.n	80076ca <_strtod_l+0x9a>
 8007660:	2900      	cmp	r1, #0
 8007662:	d03d      	beq.n	80076e0 <_strtod_l+0xb0>
 8007664:	2200      	movs	r2, #0
 8007666:	920a      	str	r2, [sp, #40]	; 0x28
 8007668:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800766a:	7832      	ldrb	r2, [r6, #0]
 800766c:	2a30      	cmp	r2, #48	; 0x30
 800766e:	f040 80b4 	bne.w	80077da <_strtod_l+0x1aa>
 8007672:	7872      	ldrb	r2, [r6, #1]
 8007674:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007678:	2a58      	cmp	r2, #88	; 0x58
 800767a:	d170      	bne.n	800775e <_strtod_l+0x12e>
 800767c:	9302      	str	r3, [sp, #8]
 800767e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007680:	9301      	str	r3, [sp, #4]
 8007682:	ab16      	add	r3, sp, #88	; 0x58
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	4a8e      	ldr	r2, [pc, #568]	; (80078c0 <_strtod_l+0x290>)
 8007688:	ab17      	add	r3, sp, #92	; 0x5c
 800768a:	a915      	add	r1, sp, #84	; 0x54
 800768c:	4620      	mov	r0, r4
 800768e:	f001 f93f 	bl	8008910 <__gethex>
 8007692:	f010 070f 	ands.w	r7, r0, #15
 8007696:	4605      	mov	r5, r0
 8007698:	d005      	beq.n	80076a6 <_strtod_l+0x76>
 800769a:	2f06      	cmp	r7, #6
 800769c:	d12a      	bne.n	80076f4 <_strtod_l+0xc4>
 800769e:	3601      	adds	r6, #1
 80076a0:	2300      	movs	r3, #0
 80076a2:	9615      	str	r6, [sp, #84]	; 0x54
 80076a4:	930a      	str	r3, [sp, #40]	; 0x28
 80076a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f040 857f 	bne.w	80081ac <_strtod_l+0xb7c>
 80076ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076b0:	b1db      	cbz	r3, 80076ea <_strtod_l+0xba>
 80076b2:	4642      	mov	r2, r8
 80076b4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80076b8:	ec43 2b10 	vmov	d0, r2, r3
 80076bc:	b01b      	add	sp, #108	; 0x6c
 80076be:	ecbd 8b02 	vpop	{d8}
 80076c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c6:	2920      	cmp	r1, #32
 80076c8:	d1cc      	bne.n	8007664 <_strtod_l+0x34>
 80076ca:	3201      	adds	r2, #1
 80076cc:	e7bf      	b.n	800764e <_strtod_l+0x1e>
 80076ce:	292d      	cmp	r1, #45	; 0x2d
 80076d0:	d1c8      	bne.n	8007664 <_strtod_l+0x34>
 80076d2:	2101      	movs	r1, #1
 80076d4:	910a      	str	r1, [sp, #40]	; 0x28
 80076d6:	1c51      	adds	r1, r2, #1
 80076d8:	9115      	str	r1, [sp, #84]	; 0x54
 80076da:	7852      	ldrb	r2, [r2, #1]
 80076dc:	2a00      	cmp	r2, #0
 80076de:	d1c3      	bne.n	8007668 <_strtod_l+0x38>
 80076e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80076e2:	9515      	str	r5, [sp, #84]	; 0x54
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f040 855f 	bne.w	80081a8 <_strtod_l+0xb78>
 80076ea:	4642      	mov	r2, r8
 80076ec:	464b      	mov	r3, r9
 80076ee:	e7e3      	b.n	80076b8 <_strtod_l+0x88>
 80076f0:	2100      	movs	r1, #0
 80076f2:	e7ef      	b.n	80076d4 <_strtod_l+0xa4>
 80076f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80076f6:	b13a      	cbz	r2, 8007708 <_strtod_l+0xd8>
 80076f8:	2135      	movs	r1, #53	; 0x35
 80076fa:	a818      	add	r0, sp, #96	; 0x60
 80076fc:	f7ff ff37 	bl	800756e <__copybits>
 8007700:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007702:	4620      	mov	r0, r4
 8007704:	f7ff fb0a 	bl	8006d1c <_Bfree>
 8007708:	3f01      	subs	r7, #1
 800770a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800770c:	2f04      	cmp	r7, #4
 800770e:	d806      	bhi.n	800771e <_strtod_l+0xee>
 8007710:	e8df f007 	tbb	[pc, r7]
 8007714:	201d0314 	.word	0x201d0314
 8007718:	14          	.byte	0x14
 8007719:	00          	.byte	0x00
 800771a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800771e:	05e9      	lsls	r1, r5, #23
 8007720:	bf48      	it	mi
 8007722:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007726:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800772a:	0d1b      	lsrs	r3, r3, #20
 800772c:	051b      	lsls	r3, r3, #20
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1b9      	bne.n	80076a6 <_strtod_l+0x76>
 8007732:	f7fe fb05 	bl	8005d40 <__errno>
 8007736:	2322      	movs	r3, #34	; 0x22
 8007738:	6003      	str	r3, [r0, #0]
 800773a:	e7b4      	b.n	80076a6 <_strtod_l+0x76>
 800773c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007740:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007744:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007748:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800774c:	e7e7      	b.n	800771e <_strtod_l+0xee>
 800774e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80078c8 <_strtod_l+0x298>
 8007752:	e7e4      	b.n	800771e <_strtod_l+0xee>
 8007754:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007758:	f04f 38ff 	mov.w	r8, #4294967295
 800775c:	e7df      	b.n	800771e <_strtod_l+0xee>
 800775e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007760:	1c5a      	adds	r2, r3, #1
 8007762:	9215      	str	r2, [sp, #84]	; 0x54
 8007764:	785b      	ldrb	r3, [r3, #1]
 8007766:	2b30      	cmp	r3, #48	; 0x30
 8007768:	d0f9      	beq.n	800775e <_strtod_l+0x12e>
 800776a:	2b00      	cmp	r3, #0
 800776c:	d09b      	beq.n	80076a6 <_strtod_l+0x76>
 800776e:	2301      	movs	r3, #1
 8007770:	f04f 0a00 	mov.w	sl, #0
 8007774:	9304      	str	r3, [sp, #16]
 8007776:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007778:	930b      	str	r3, [sp, #44]	; 0x2c
 800777a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800777e:	46d3      	mov	fp, sl
 8007780:	220a      	movs	r2, #10
 8007782:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007784:	7806      	ldrb	r6, [r0, #0]
 8007786:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800778a:	b2d9      	uxtb	r1, r3
 800778c:	2909      	cmp	r1, #9
 800778e:	d926      	bls.n	80077de <_strtod_l+0x1ae>
 8007790:	494c      	ldr	r1, [pc, #304]	; (80078c4 <_strtod_l+0x294>)
 8007792:	2201      	movs	r2, #1
 8007794:	f000 ffe6 	bl	8008764 <strncmp>
 8007798:	2800      	cmp	r0, #0
 800779a:	d030      	beq.n	80077fe <_strtod_l+0x1ce>
 800779c:	2000      	movs	r0, #0
 800779e:	4632      	mov	r2, r6
 80077a0:	9005      	str	r0, [sp, #20]
 80077a2:	465e      	mov	r6, fp
 80077a4:	4603      	mov	r3, r0
 80077a6:	2a65      	cmp	r2, #101	; 0x65
 80077a8:	d001      	beq.n	80077ae <_strtod_l+0x17e>
 80077aa:	2a45      	cmp	r2, #69	; 0x45
 80077ac:	d113      	bne.n	80077d6 <_strtod_l+0x1a6>
 80077ae:	b91e      	cbnz	r6, 80077b8 <_strtod_l+0x188>
 80077b0:	9a04      	ldr	r2, [sp, #16]
 80077b2:	4302      	orrs	r2, r0
 80077b4:	d094      	beq.n	80076e0 <_strtod_l+0xb0>
 80077b6:	2600      	movs	r6, #0
 80077b8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80077ba:	1c6a      	adds	r2, r5, #1
 80077bc:	9215      	str	r2, [sp, #84]	; 0x54
 80077be:	786a      	ldrb	r2, [r5, #1]
 80077c0:	2a2b      	cmp	r2, #43	; 0x2b
 80077c2:	d074      	beq.n	80078ae <_strtod_l+0x27e>
 80077c4:	2a2d      	cmp	r2, #45	; 0x2d
 80077c6:	d078      	beq.n	80078ba <_strtod_l+0x28a>
 80077c8:	f04f 0c00 	mov.w	ip, #0
 80077cc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80077d0:	2909      	cmp	r1, #9
 80077d2:	d97f      	bls.n	80078d4 <_strtod_l+0x2a4>
 80077d4:	9515      	str	r5, [sp, #84]	; 0x54
 80077d6:	2700      	movs	r7, #0
 80077d8:	e09e      	b.n	8007918 <_strtod_l+0x2e8>
 80077da:	2300      	movs	r3, #0
 80077dc:	e7c8      	b.n	8007770 <_strtod_l+0x140>
 80077de:	f1bb 0f08 	cmp.w	fp, #8
 80077e2:	bfd8      	it	le
 80077e4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80077e6:	f100 0001 	add.w	r0, r0, #1
 80077ea:	bfda      	itte	le
 80077ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80077f0:	9309      	strle	r3, [sp, #36]	; 0x24
 80077f2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80077f6:	f10b 0b01 	add.w	fp, fp, #1
 80077fa:	9015      	str	r0, [sp, #84]	; 0x54
 80077fc:	e7c1      	b.n	8007782 <_strtod_l+0x152>
 80077fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007800:	1c5a      	adds	r2, r3, #1
 8007802:	9215      	str	r2, [sp, #84]	; 0x54
 8007804:	785a      	ldrb	r2, [r3, #1]
 8007806:	f1bb 0f00 	cmp.w	fp, #0
 800780a:	d037      	beq.n	800787c <_strtod_l+0x24c>
 800780c:	9005      	str	r0, [sp, #20]
 800780e:	465e      	mov	r6, fp
 8007810:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007814:	2b09      	cmp	r3, #9
 8007816:	d912      	bls.n	800783e <_strtod_l+0x20e>
 8007818:	2301      	movs	r3, #1
 800781a:	e7c4      	b.n	80077a6 <_strtod_l+0x176>
 800781c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800781e:	1c5a      	adds	r2, r3, #1
 8007820:	9215      	str	r2, [sp, #84]	; 0x54
 8007822:	785a      	ldrb	r2, [r3, #1]
 8007824:	3001      	adds	r0, #1
 8007826:	2a30      	cmp	r2, #48	; 0x30
 8007828:	d0f8      	beq.n	800781c <_strtod_l+0x1ec>
 800782a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800782e:	2b08      	cmp	r3, #8
 8007830:	f200 84c1 	bhi.w	80081b6 <_strtod_l+0xb86>
 8007834:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007836:	9005      	str	r0, [sp, #20]
 8007838:	2000      	movs	r0, #0
 800783a:	930b      	str	r3, [sp, #44]	; 0x2c
 800783c:	4606      	mov	r6, r0
 800783e:	3a30      	subs	r2, #48	; 0x30
 8007840:	f100 0301 	add.w	r3, r0, #1
 8007844:	d014      	beq.n	8007870 <_strtod_l+0x240>
 8007846:	9905      	ldr	r1, [sp, #20]
 8007848:	4419      	add	r1, r3
 800784a:	9105      	str	r1, [sp, #20]
 800784c:	4633      	mov	r3, r6
 800784e:	eb00 0c06 	add.w	ip, r0, r6
 8007852:	210a      	movs	r1, #10
 8007854:	4563      	cmp	r3, ip
 8007856:	d113      	bne.n	8007880 <_strtod_l+0x250>
 8007858:	1833      	adds	r3, r6, r0
 800785a:	2b08      	cmp	r3, #8
 800785c:	f106 0601 	add.w	r6, r6, #1
 8007860:	4406      	add	r6, r0
 8007862:	dc1a      	bgt.n	800789a <_strtod_l+0x26a>
 8007864:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007866:	230a      	movs	r3, #10
 8007868:	fb03 2301 	mla	r3, r3, r1, r2
 800786c:	9309      	str	r3, [sp, #36]	; 0x24
 800786e:	2300      	movs	r3, #0
 8007870:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007872:	1c51      	adds	r1, r2, #1
 8007874:	9115      	str	r1, [sp, #84]	; 0x54
 8007876:	7852      	ldrb	r2, [r2, #1]
 8007878:	4618      	mov	r0, r3
 800787a:	e7c9      	b.n	8007810 <_strtod_l+0x1e0>
 800787c:	4658      	mov	r0, fp
 800787e:	e7d2      	b.n	8007826 <_strtod_l+0x1f6>
 8007880:	2b08      	cmp	r3, #8
 8007882:	f103 0301 	add.w	r3, r3, #1
 8007886:	dc03      	bgt.n	8007890 <_strtod_l+0x260>
 8007888:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800788a:	434f      	muls	r7, r1
 800788c:	9709      	str	r7, [sp, #36]	; 0x24
 800788e:	e7e1      	b.n	8007854 <_strtod_l+0x224>
 8007890:	2b10      	cmp	r3, #16
 8007892:	bfd8      	it	le
 8007894:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007898:	e7dc      	b.n	8007854 <_strtod_l+0x224>
 800789a:	2e10      	cmp	r6, #16
 800789c:	bfdc      	itt	le
 800789e:	230a      	movle	r3, #10
 80078a0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80078a4:	e7e3      	b.n	800786e <_strtod_l+0x23e>
 80078a6:	2300      	movs	r3, #0
 80078a8:	9305      	str	r3, [sp, #20]
 80078aa:	2301      	movs	r3, #1
 80078ac:	e780      	b.n	80077b0 <_strtod_l+0x180>
 80078ae:	f04f 0c00 	mov.w	ip, #0
 80078b2:	1caa      	adds	r2, r5, #2
 80078b4:	9215      	str	r2, [sp, #84]	; 0x54
 80078b6:	78aa      	ldrb	r2, [r5, #2]
 80078b8:	e788      	b.n	80077cc <_strtod_l+0x19c>
 80078ba:	f04f 0c01 	mov.w	ip, #1
 80078be:	e7f8      	b.n	80078b2 <_strtod_l+0x282>
 80078c0:	08009778 	.word	0x08009778
 80078c4:	08009774 	.word	0x08009774
 80078c8:	7ff00000 	.word	0x7ff00000
 80078cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80078ce:	1c51      	adds	r1, r2, #1
 80078d0:	9115      	str	r1, [sp, #84]	; 0x54
 80078d2:	7852      	ldrb	r2, [r2, #1]
 80078d4:	2a30      	cmp	r2, #48	; 0x30
 80078d6:	d0f9      	beq.n	80078cc <_strtod_l+0x29c>
 80078d8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80078dc:	2908      	cmp	r1, #8
 80078de:	f63f af7a 	bhi.w	80077d6 <_strtod_l+0x1a6>
 80078e2:	3a30      	subs	r2, #48	; 0x30
 80078e4:	9208      	str	r2, [sp, #32]
 80078e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80078e8:	920c      	str	r2, [sp, #48]	; 0x30
 80078ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80078ec:	1c57      	adds	r7, r2, #1
 80078ee:	9715      	str	r7, [sp, #84]	; 0x54
 80078f0:	7852      	ldrb	r2, [r2, #1]
 80078f2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80078f6:	f1be 0f09 	cmp.w	lr, #9
 80078fa:	d938      	bls.n	800796e <_strtod_l+0x33e>
 80078fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80078fe:	1a7f      	subs	r7, r7, r1
 8007900:	2f08      	cmp	r7, #8
 8007902:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007906:	dc03      	bgt.n	8007910 <_strtod_l+0x2e0>
 8007908:	9908      	ldr	r1, [sp, #32]
 800790a:	428f      	cmp	r7, r1
 800790c:	bfa8      	it	ge
 800790e:	460f      	movge	r7, r1
 8007910:	f1bc 0f00 	cmp.w	ip, #0
 8007914:	d000      	beq.n	8007918 <_strtod_l+0x2e8>
 8007916:	427f      	negs	r7, r7
 8007918:	2e00      	cmp	r6, #0
 800791a:	d14f      	bne.n	80079bc <_strtod_l+0x38c>
 800791c:	9904      	ldr	r1, [sp, #16]
 800791e:	4301      	orrs	r1, r0
 8007920:	f47f aec1 	bne.w	80076a6 <_strtod_l+0x76>
 8007924:	2b00      	cmp	r3, #0
 8007926:	f47f aedb 	bne.w	80076e0 <_strtod_l+0xb0>
 800792a:	2a69      	cmp	r2, #105	; 0x69
 800792c:	d029      	beq.n	8007982 <_strtod_l+0x352>
 800792e:	dc26      	bgt.n	800797e <_strtod_l+0x34e>
 8007930:	2a49      	cmp	r2, #73	; 0x49
 8007932:	d026      	beq.n	8007982 <_strtod_l+0x352>
 8007934:	2a4e      	cmp	r2, #78	; 0x4e
 8007936:	f47f aed3 	bne.w	80076e0 <_strtod_l+0xb0>
 800793a:	499b      	ldr	r1, [pc, #620]	; (8007ba8 <_strtod_l+0x578>)
 800793c:	a815      	add	r0, sp, #84	; 0x54
 800793e:	f001 fa27 	bl	8008d90 <__match>
 8007942:	2800      	cmp	r0, #0
 8007944:	f43f aecc 	beq.w	80076e0 <_strtod_l+0xb0>
 8007948:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	2b28      	cmp	r3, #40	; 0x28
 800794e:	d12f      	bne.n	80079b0 <_strtod_l+0x380>
 8007950:	4996      	ldr	r1, [pc, #600]	; (8007bac <_strtod_l+0x57c>)
 8007952:	aa18      	add	r2, sp, #96	; 0x60
 8007954:	a815      	add	r0, sp, #84	; 0x54
 8007956:	f001 fa2f 	bl	8008db8 <__hexnan>
 800795a:	2805      	cmp	r0, #5
 800795c:	d128      	bne.n	80079b0 <_strtod_l+0x380>
 800795e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007960:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007964:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007968:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800796c:	e69b      	b.n	80076a6 <_strtod_l+0x76>
 800796e:	9f08      	ldr	r7, [sp, #32]
 8007970:	210a      	movs	r1, #10
 8007972:	fb01 2107 	mla	r1, r1, r7, r2
 8007976:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800797a:	9208      	str	r2, [sp, #32]
 800797c:	e7b5      	b.n	80078ea <_strtod_l+0x2ba>
 800797e:	2a6e      	cmp	r2, #110	; 0x6e
 8007980:	e7d9      	b.n	8007936 <_strtod_l+0x306>
 8007982:	498b      	ldr	r1, [pc, #556]	; (8007bb0 <_strtod_l+0x580>)
 8007984:	a815      	add	r0, sp, #84	; 0x54
 8007986:	f001 fa03 	bl	8008d90 <__match>
 800798a:	2800      	cmp	r0, #0
 800798c:	f43f aea8 	beq.w	80076e0 <_strtod_l+0xb0>
 8007990:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007992:	4988      	ldr	r1, [pc, #544]	; (8007bb4 <_strtod_l+0x584>)
 8007994:	3b01      	subs	r3, #1
 8007996:	a815      	add	r0, sp, #84	; 0x54
 8007998:	9315      	str	r3, [sp, #84]	; 0x54
 800799a:	f001 f9f9 	bl	8008d90 <__match>
 800799e:	b910      	cbnz	r0, 80079a6 <_strtod_l+0x376>
 80079a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079a2:	3301      	adds	r3, #1
 80079a4:	9315      	str	r3, [sp, #84]	; 0x54
 80079a6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007bc4 <_strtod_l+0x594>
 80079aa:	f04f 0800 	mov.w	r8, #0
 80079ae:	e67a      	b.n	80076a6 <_strtod_l+0x76>
 80079b0:	4881      	ldr	r0, [pc, #516]	; (8007bb8 <_strtod_l+0x588>)
 80079b2:	f000 ff09 	bl	80087c8 <nan>
 80079b6:	ec59 8b10 	vmov	r8, r9, d0
 80079ba:	e674      	b.n	80076a6 <_strtod_l+0x76>
 80079bc:	9b05      	ldr	r3, [sp, #20]
 80079be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079c0:	1afb      	subs	r3, r7, r3
 80079c2:	f1bb 0f00 	cmp.w	fp, #0
 80079c6:	bf08      	it	eq
 80079c8:	46b3      	moveq	fp, r6
 80079ca:	2e10      	cmp	r6, #16
 80079cc:	9308      	str	r3, [sp, #32]
 80079ce:	4635      	mov	r5, r6
 80079d0:	bfa8      	it	ge
 80079d2:	2510      	movge	r5, #16
 80079d4:	f7f8 fd96 	bl	8000504 <__aeabi_ui2d>
 80079d8:	2e09      	cmp	r6, #9
 80079da:	4680      	mov	r8, r0
 80079dc:	4689      	mov	r9, r1
 80079de:	dd13      	ble.n	8007a08 <_strtod_l+0x3d8>
 80079e0:	4b76      	ldr	r3, [pc, #472]	; (8007bbc <_strtod_l+0x58c>)
 80079e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80079e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80079ea:	f7f8 fe05 	bl	80005f8 <__aeabi_dmul>
 80079ee:	4680      	mov	r8, r0
 80079f0:	4650      	mov	r0, sl
 80079f2:	4689      	mov	r9, r1
 80079f4:	f7f8 fd86 	bl	8000504 <__aeabi_ui2d>
 80079f8:	4602      	mov	r2, r0
 80079fa:	460b      	mov	r3, r1
 80079fc:	4640      	mov	r0, r8
 80079fe:	4649      	mov	r1, r9
 8007a00:	f7f8 fc44 	bl	800028c <__adddf3>
 8007a04:	4680      	mov	r8, r0
 8007a06:	4689      	mov	r9, r1
 8007a08:	2e0f      	cmp	r6, #15
 8007a0a:	dc38      	bgt.n	8007a7e <_strtod_l+0x44e>
 8007a0c:	9b08      	ldr	r3, [sp, #32]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f43f ae49 	beq.w	80076a6 <_strtod_l+0x76>
 8007a14:	dd24      	ble.n	8007a60 <_strtod_l+0x430>
 8007a16:	2b16      	cmp	r3, #22
 8007a18:	dc0b      	bgt.n	8007a32 <_strtod_l+0x402>
 8007a1a:	4968      	ldr	r1, [pc, #416]	; (8007bbc <_strtod_l+0x58c>)
 8007a1c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a24:	4642      	mov	r2, r8
 8007a26:	464b      	mov	r3, r9
 8007a28:	f7f8 fde6 	bl	80005f8 <__aeabi_dmul>
 8007a2c:	4680      	mov	r8, r0
 8007a2e:	4689      	mov	r9, r1
 8007a30:	e639      	b.n	80076a6 <_strtod_l+0x76>
 8007a32:	9a08      	ldr	r2, [sp, #32]
 8007a34:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	db20      	blt.n	8007a7e <_strtod_l+0x44e>
 8007a3c:	4c5f      	ldr	r4, [pc, #380]	; (8007bbc <_strtod_l+0x58c>)
 8007a3e:	f1c6 060f 	rsb	r6, r6, #15
 8007a42:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007a46:	4642      	mov	r2, r8
 8007a48:	464b      	mov	r3, r9
 8007a4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a4e:	f7f8 fdd3 	bl	80005f8 <__aeabi_dmul>
 8007a52:	9b08      	ldr	r3, [sp, #32]
 8007a54:	1b9e      	subs	r6, r3, r6
 8007a56:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007a5a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007a5e:	e7e3      	b.n	8007a28 <_strtod_l+0x3f8>
 8007a60:	9b08      	ldr	r3, [sp, #32]
 8007a62:	3316      	adds	r3, #22
 8007a64:	db0b      	blt.n	8007a7e <_strtod_l+0x44e>
 8007a66:	9b05      	ldr	r3, [sp, #20]
 8007a68:	1bdf      	subs	r7, r3, r7
 8007a6a:	4b54      	ldr	r3, [pc, #336]	; (8007bbc <_strtod_l+0x58c>)
 8007a6c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007a70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a74:	4640      	mov	r0, r8
 8007a76:	4649      	mov	r1, r9
 8007a78:	f7f8 fee8 	bl	800084c <__aeabi_ddiv>
 8007a7c:	e7d6      	b.n	8007a2c <_strtod_l+0x3fc>
 8007a7e:	9b08      	ldr	r3, [sp, #32]
 8007a80:	1b75      	subs	r5, r6, r5
 8007a82:	441d      	add	r5, r3
 8007a84:	2d00      	cmp	r5, #0
 8007a86:	dd70      	ble.n	8007b6a <_strtod_l+0x53a>
 8007a88:	f015 030f 	ands.w	r3, r5, #15
 8007a8c:	d00a      	beq.n	8007aa4 <_strtod_l+0x474>
 8007a8e:	494b      	ldr	r1, [pc, #300]	; (8007bbc <_strtod_l+0x58c>)
 8007a90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a94:	4642      	mov	r2, r8
 8007a96:	464b      	mov	r3, r9
 8007a98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a9c:	f7f8 fdac 	bl	80005f8 <__aeabi_dmul>
 8007aa0:	4680      	mov	r8, r0
 8007aa2:	4689      	mov	r9, r1
 8007aa4:	f035 050f 	bics.w	r5, r5, #15
 8007aa8:	d04d      	beq.n	8007b46 <_strtod_l+0x516>
 8007aaa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007aae:	dd22      	ble.n	8007af6 <_strtod_l+0x4c6>
 8007ab0:	2500      	movs	r5, #0
 8007ab2:	46ab      	mov	fp, r5
 8007ab4:	9509      	str	r5, [sp, #36]	; 0x24
 8007ab6:	9505      	str	r5, [sp, #20]
 8007ab8:	2322      	movs	r3, #34	; 0x22
 8007aba:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007bc4 <_strtod_l+0x594>
 8007abe:	6023      	str	r3, [r4, #0]
 8007ac0:	f04f 0800 	mov.w	r8, #0
 8007ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f43f aded 	beq.w	80076a6 <_strtod_l+0x76>
 8007acc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f7ff f924 	bl	8006d1c <_Bfree>
 8007ad4:	9905      	ldr	r1, [sp, #20]
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f7ff f920 	bl	8006d1c <_Bfree>
 8007adc:	4659      	mov	r1, fp
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f7ff f91c 	bl	8006d1c <_Bfree>
 8007ae4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f7ff f918 	bl	8006d1c <_Bfree>
 8007aec:	4629      	mov	r1, r5
 8007aee:	4620      	mov	r0, r4
 8007af0:	f7ff f914 	bl	8006d1c <_Bfree>
 8007af4:	e5d7      	b.n	80076a6 <_strtod_l+0x76>
 8007af6:	4b32      	ldr	r3, [pc, #200]	; (8007bc0 <_strtod_l+0x590>)
 8007af8:	9304      	str	r3, [sp, #16]
 8007afa:	2300      	movs	r3, #0
 8007afc:	112d      	asrs	r5, r5, #4
 8007afe:	4640      	mov	r0, r8
 8007b00:	4649      	mov	r1, r9
 8007b02:	469a      	mov	sl, r3
 8007b04:	2d01      	cmp	r5, #1
 8007b06:	dc21      	bgt.n	8007b4c <_strtod_l+0x51c>
 8007b08:	b10b      	cbz	r3, 8007b0e <_strtod_l+0x4de>
 8007b0a:	4680      	mov	r8, r0
 8007b0c:	4689      	mov	r9, r1
 8007b0e:	492c      	ldr	r1, [pc, #176]	; (8007bc0 <_strtod_l+0x590>)
 8007b10:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007b14:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007b18:	4642      	mov	r2, r8
 8007b1a:	464b      	mov	r3, r9
 8007b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b20:	f7f8 fd6a 	bl	80005f8 <__aeabi_dmul>
 8007b24:	4b27      	ldr	r3, [pc, #156]	; (8007bc4 <_strtod_l+0x594>)
 8007b26:	460a      	mov	r2, r1
 8007b28:	400b      	ands	r3, r1
 8007b2a:	4927      	ldr	r1, [pc, #156]	; (8007bc8 <_strtod_l+0x598>)
 8007b2c:	428b      	cmp	r3, r1
 8007b2e:	4680      	mov	r8, r0
 8007b30:	d8be      	bhi.n	8007ab0 <_strtod_l+0x480>
 8007b32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007b36:	428b      	cmp	r3, r1
 8007b38:	bf86      	itte	hi
 8007b3a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007bcc <_strtod_l+0x59c>
 8007b3e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007b42:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007b46:	2300      	movs	r3, #0
 8007b48:	9304      	str	r3, [sp, #16]
 8007b4a:	e07b      	b.n	8007c44 <_strtod_l+0x614>
 8007b4c:	07ea      	lsls	r2, r5, #31
 8007b4e:	d505      	bpl.n	8007b5c <_strtod_l+0x52c>
 8007b50:	9b04      	ldr	r3, [sp, #16]
 8007b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b56:	f7f8 fd4f 	bl	80005f8 <__aeabi_dmul>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	9a04      	ldr	r2, [sp, #16]
 8007b5e:	3208      	adds	r2, #8
 8007b60:	f10a 0a01 	add.w	sl, sl, #1
 8007b64:	106d      	asrs	r5, r5, #1
 8007b66:	9204      	str	r2, [sp, #16]
 8007b68:	e7cc      	b.n	8007b04 <_strtod_l+0x4d4>
 8007b6a:	d0ec      	beq.n	8007b46 <_strtod_l+0x516>
 8007b6c:	426d      	negs	r5, r5
 8007b6e:	f015 020f 	ands.w	r2, r5, #15
 8007b72:	d00a      	beq.n	8007b8a <_strtod_l+0x55a>
 8007b74:	4b11      	ldr	r3, [pc, #68]	; (8007bbc <_strtod_l+0x58c>)
 8007b76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b7a:	4640      	mov	r0, r8
 8007b7c:	4649      	mov	r1, r9
 8007b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b82:	f7f8 fe63 	bl	800084c <__aeabi_ddiv>
 8007b86:	4680      	mov	r8, r0
 8007b88:	4689      	mov	r9, r1
 8007b8a:	112d      	asrs	r5, r5, #4
 8007b8c:	d0db      	beq.n	8007b46 <_strtod_l+0x516>
 8007b8e:	2d1f      	cmp	r5, #31
 8007b90:	dd1e      	ble.n	8007bd0 <_strtod_l+0x5a0>
 8007b92:	2500      	movs	r5, #0
 8007b94:	46ab      	mov	fp, r5
 8007b96:	9509      	str	r5, [sp, #36]	; 0x24
 8007b98:	9505      	str	r5, [sp, #20]
 8007b9a:	2322      	movs	r3, #34	; 0x22
 8007b9c:	f04f 0800 	mov.w	r8, #0
 8007ba0:	f04f 0900 	mov.w	r9, #0
 8007ba4:	6023      	str	r3, [r4, #0]
 8007ba6:	e78d      	b.n	8007ac4 <_strtod_l+0x494>
 8007ba8:	08009565 	.word	0x08009565
 8007bac:	0800978c 	.word	0x0800978c
 8007bb0:	0800955d 	.word	0x0800955d
 8007bb4:	08009594 	.word	0x08009594
 8007bb8:	0800991d 	.word	0x0800991d
 8007bbc:	080096a0 	.word	0x080096a0
 8007bc0:	08009678 	.word	0x08009678
 8007bc4:	7ff00000 	.word	0x7ff00000
 8007bc8:	7ca00000 	.word	0x7ca00000
 8007bcc:	7fefffff 	.word	0x7fefffff
 8007bd0:	f015 0310 	ands.w	r3, r5, #16
 8007bd4:	bf18      	it	ne
 8007bd6:	236a      	movne	r3, #106	; 0x6a
 8007bd8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007f7c <_strtod_l+0x94c>
 8007bdc:	9304      	str	r3, [sp, #16]
 8007bde:	4640      	mov	r0, r8
 8007be0:	4649      	mov	r1, r9
 8007be2:	2300      	movs	r3, #0
 8007be4:	07ea      	lsls	r2, r5, #31
 8007be6:	d504      	bpl.n	8007bf2 <_strtod_l+0x5c2>
 8007be8:	e9da 2300 	ldrd	r2, r3, [sl]
 8007bec:	f7f8 fd04 	bl	80005f8 <__aeabi_dmul>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	106d      	asrs	r5, r5, #1
 8007bf4:	f10a 0a08 	add.w	sl, sl, #8
 8007bf8:	d1f4      	bne.n	8007be4 <_strtod_l+0x5b4>
 8007bfa:	b10b      	cbz	r3, 8007c00 <_strtod_l+0x5d0>
 8007bfc:	4680      	mov	r8, r0
 8007bfe:	4689      	mov	r9, r1
 8007c00:	9b04      	ldr	r3, [sp, #16]
 8007c02:	b1bb      	cbz	r3, 8007c34 <_strtod_l+0x604>
 8007c04:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007c08:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	4649      	mov	r1, r9
 8007c10:	dd10      	ble.n	8007c34 <_strtod_l+0x604>
 8007c12:	2b1f      	cmp	r3, #31
 8007c14:	f340 811e 	ble.w	8007e54 <_strtod_l+0x824>
 8007c18:	2b34      	cmp	r3, #52	; 0x34
 8007c1a:	bfde      	ittt	le
 8007c1c:	f04f 33ff 	movle.w	r3, #4294967295
 8007c20:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007c24:	4093      	lslle	r3, r2
 8007c26:	f04f 0800 	mov.w	r8, #0
 8007c2a:	bfcc      	ite	gt
 8007c2c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007c30:	ea03 0901 	andle.w	r9, r3, r1
 8007c34:	2200      	movs	r2, #0
 8007c36:	2300      	movs	r3, #0
 8007c38:	4640      	mov	r0, r8
 8007c3a:	4649      	mov	r1, r9
 8007c3c:	f7f8 ff44 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c40:	2800      	cmp	r0, #0
 8007c42:	d1a6      	bne.n	8007b92 <_strtod_l+0x562>
 8007c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c4a:	4633      	mov	r3, r6
 8007c4c:	465a      	mov	r2, fp
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f7ff f8cc 	bl	8006dec <__s2b>
 8007c54:	9009      	str	r0, [sp, #36]	; 0x24
 8007c56:	2800      	cmp	r0, #0
 8007c58:	f43f af2a 	beq.w	8007ab0 <_strtod_l+0x480>
 8007c5c:	9a08      	ldr	r2, [sp, #32]
 8007c5e:	9b05      	ldr	r3, [sp, #20]
 8007c60:	2a00      	cmp	r2, #0
 8007c62:	eba3 0307 	sub.w	r3, r3, r7
 8007c66:	bfa8      	it	ge
 8007c68:	2300      	movge	r3, #0
 8007c6a:	930c      	str	r3, [sp, #48]	; 0x30
 8007c6c:	2500      	movs	r5, #0
 8007c6e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007c72:	9312      	str	r3, [sp, #72]	; 0x48
 8007c74:	46ab      	mov	fp, r5
 8007c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c78:	4620      	mov	r0, r4
 8007c7a:	6859      	ldr	r1, [r3, #4]
 8007c7c:	f7ff f80e 	bl	8006c9c <_Balloc>
 8007c80:	9005      	str	r0, [sp, #20]
 8007c82:	2800      	cmp	r0, #0
 8007c84:	f43f af18 	beq.w	8007ab8 <_strtod_l+0x488>
 8007c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c8a:	691a      	ldr	r2, [r3, #16]
 8007c8c:	3202      	adds	r2, #2
 8007c8e:	f103 010c 	add.w	r1, r3, #12
 8007c92:	0092      	lsls	r2, r2, #2
 8007c94:	300c      	adds	r0, #12
 8007c96:	f000 fd87 	bl	80087a8 <memcpy>
 8007c9a:	ec49 8b10 	vmov	d0, r8, r9
 8007c9e:	aa18      	add	r2, sp, #96	; 0x60
 8007ca0:	a917      	add	r1, sp, #92	; 0x5c
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f7ff fbd6 	bl	8007454 <__d2b>
 8007ca8:	ec49 8b18 	vmov	d8, r8, r9
 8007cac:	9016      	str	r0, [sp, #88]	; 0x58
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	f43f af02 	beq.w	8007ab8 <_strtod_l+0x488>
 8007cb4:	2101      	movs	r1, #1
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f7ff f930 	bl	8006f1c <__i2b>
 8007cbc:	4683      	mov	fp, r0
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	f43f aefa 	beq.w	8007ab8 <_strtod_l+0x488>
 8007cc4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007cc6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007cc8:	2e00      	cmp	r6, #0
 8007cca:	bfab      	itete	ge
 8007ccc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007cce:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007cd0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007cd2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007cd6:	bfac      	ite	ge
 8007cd8:	eb06 0a03 	addge.w	sl, r6, r3
 8007cdc:	1b9f      	sublt	r7, r3, r6
 8007cde:	9b04      	ldr	r3, [sp, #16]
 8007ce0:	1af6      	subs	r6, r6, r3
 8007ce2:	4416      	add	r6, r2
 8007ce4:	4ba0      	ldr	r3, [pc, #640]	; (8007f68 <_strtod_l+0x938>)
 8007ce6:	3e01      	subs	r6, #1
 8007ce8:	429e      	cmp	r6, r3
 8007cea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007cee:	f280 80c4 	bge.w	8007e7a <_strtod_l+0x84a>
 8007cf2:	1b9b      	subs	r3, r3, r6
 8007cf4:	2b1f      	cmp	r3, #31
 8007cf6:	eba2 0203 	sub.w	r2, r2, r3
 8007cfa:	f04f 0101 	mov.w	r1, #1
 8007cfe:	f300 80b0 	bgt.w	8007e62 <_strtod_l+0x832>
 8007d02:	fa01 f303 	lsl.w	r3, r1, r3
 8007d06:	930e      	str	r3, [sp, #56]	; 0x38
 8007d08:	2300      	movs	r3, #0
 8007d0a:	930d      	str	r3, [sp, #52]	; 0x34
 8007d0c:	eb0a 0602 	add.w	r6, sl, r2
 8007d10:	9b04      	ldr	r3, [sp, #16]
 8007d12:	45b2      	cmp	sl, r6
 8007d14:	4417      	add	r7, r2
 8007d16:	441f      	add	r7, r3
 8007d18:	4653      	mov	r3, sl
 8007d1a:	bfa8      	it	ge
 8007d1c:	4633      	movge	r3, r6
 8007d1e:	42bb      	cmp	r3, r7
 8007d20:	bfa8      	it	ge
 8007d22:	463b      	movge	r3, r7
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	bfc2      	ittt	gt
 8007d28:	1af6      	subgt	r6, r6, r3
 8007d2a:	1aff      	subgt	r7, r7, r3
 8007d2c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007d30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	dd17      	ble.n	8007d66 <_strtod_l+0x736>
 8007d36:	4659      	mov	r1, fp
 8007d38:	461a      	mov	r2, r3
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f7ff f9ae 	bl	800709c <__pow5mult>
 8007d40:	4683      	mov	fp, r0
 8007d42:	2800      	cmp	r0, #0
 8007d44:	f43f aeb8 	beq.w	8007ab8 <_strtod_l+0x488>
 8007d48:	4601      	mov	r1, r0
 8007d4a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	f7ff f8fb 	bl	8006f48 <__multiply>
 8007d52:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d54:	2800      	cmp	r0, #0
 8007d56:	f43f aeaf 	beq.w	8007ab8 <_strtod_l+0x488>
 8007d5a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f7fe ffdd 	bl	8006d1c <_Bfree>
 8007d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d64:	9316      	str	r3, [sp, #88]	; 0x58
 8007d66:	2e00      	cmp	r6, #0
 8007d68:	f300 808c 	bgt.w	8007e84 <_strtod_l+0x854>
 8007d6c:	9b08      	ldr	r3, [sp, #32]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	dd08      	ble.n	8007d84 <_strtod_l+0x754>
 8007d72:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d74:	9905      	ldr	r1, [sp, #20]
 8007d76:	4620      	mov	r0, r4
 8007d78:	f7ff f990 	bl	800709c <__pow5mult>
 8007d7c:	9005      	str	r0, [sp, #20]
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	f43f ae9a 	beq.w	8007ab8 <_strtod_l+0x488>
 8007d84:	2f00      	cmp	r7, #0
 8007d86:	dd08      	ble.n	8007d9a <_strtod_l+0x76a>
 8007d88:	9905      	ldr	r1, [sp, #20]
 8007d8a:	463a      	mov	r2, r7
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	f7ff f9df 	bl	8007150 <__lshift>
 8007d92:	9005      	str	r0, [sp, #20]
 8007d94:	2800      	cmp	r0, #0
 8007d96:	f43f ae8f 	beq.w	8007ab8 <_strtod_l+0x488>
 8007d9a:	f1ba 0f00 	cmp.w	sl, #0
 8007d9e:	dd08      	ble.n	8007db2 <_strtod_l+0x782>
 8007da0:	4659      	mov	r1, fp
 8007da2:	4652      	mov	r2, sl
 8007da4:	4620      	mov	r0, r4
 8007da6:	f7ff f9d3 	bl	8007150 <__lshift>
 8007daa:	4683      	mov	fp, r0
 8007dac:	2800      	cmp	r0, #0
 8007dae:	f43f ae83 	beq.w	8007ab8 <_strtod_l+0x488>
 8007db2:	9a05      	ldr	r2, [sp, #20]
 8007db4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007db6:	4620      	mov	r0, r4
 8007db8:	f7ff fa52 	bl	8007260 <__mdiff>
 8007dbc:	4605      	mov	r5, r0
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	f43f ae7a 	beq.w	8007ab8 <_strtod_l+0x488>
 8007dc4:	68c3      	ldr	r3, [r0, #12]
 8007dc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dc8:	2300      	movs	r3, #0
 8007dca:	60c3      	str	r3, [r0, #12]
 8007dcc:	4659      	mov	r1, fp
 8007dce:	f7ff fa2b 	bl	8007228 <__mcmp>
 8007dd2:	2800      	cmp	r0, #0
 8007dd4:	da60      	bge.n	8007e98 <_strtod_l+0x868>
 8007dd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dd8:	ea53 0308 	orrs.w	r3, r3, r8
 8007ddc:	f040 8084 	bne.w	8007ee8 <_strtod_l+0x8b8>
 8007de0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d17f      	bne.n	8007ee8 <_strtod_l+0x8b8>
 8007de8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007dec:	0d1b      	lsrs	r3, r3, #20
 8007dee:	051b      	lsls	r3, r3, #20
 8007df0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007df4:	d978      	bls.n	8007ee8 <_strtod_l+0x8b8>
 8007df6:	696b      	ldr	r3, [r5, #20]
 8007df8:	b913      	cbnz	r3, 8007e00 <_strtod_l+0x7d0>
 8007dfa:	692b      	ldr	r3, [r5, #16]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	dd73      	ble.n	8007ee8 <_strtod_l+0x8b8>
 8007e00:	4629      	mov	r1, r5
 8007e02:	2201      	movs	r2, #1
 8007e04:	4620      	mov	r0, r4
 8007e06:	f7ff f9a3 	bl	8007150 <__lshift>
 8007e0a:	4659      	mov	r1, fp
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	f7ff fa0b 	bl	8007228 <__mcmp>
 8007e12:	2800      	cmp	r0, #0
 8007e14:	dd68      	ble.n	8007ee8 <_strtod_l+0x8b8>
 8007e16:	9904      	ldr	r1, [sp, #16]
 8007e18:	4a54      	ldr	r2, [pc, #336]	; (8007f6c <_strtod_l+0x93c>)
 8007e1a:	464b      	mov	r3, r9
 8007e1c:	2900      	cmp	r1, #0
 8007e1e:	f000 8084 	beq.w	8007f2a <_strtod_l+0x8fa>
 8007e22:	ea02 0109 	and.w	r1, r2, r9
 8007e26:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007e2a:	dc7e      	bgt.n	8007f2a <_strtod_l+0x8fa>
 8007e2c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007e30:	f77f aeb3 	ble.w	8007b9a <_strtod_l+0x56a>
 8007e34:	4b4e      	ldr	r3, [pc, #312]	; (8007f70 <_strtod_l+0x940>)
 8007e36:	4640      	mov	r0, r8
 8007e38:	4649      	mov	r1, r9
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f7f8 fbdc 	bl	80005f8 <__aeabi_dmul>
 8007e40:	4b4a      	ldr	r3, [pc, #296]	; (8007f6c <_strtod_l+0x93c>)
 8007e42:	400b      	ands	r3, r1
 8007e44:	4680      	mov	r8, r0
 8007e46:	4689      	mov	r9, r1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f47f ae3f 	bne.w	8007acc <_strtod_l+0x49c>
 8007e4e:	2322      	movs	r3, #34	; 0x22
 8007e50:	6023      	str	r3, [r4, #0]
 8007e52:	e63b      	b.n	8007acc <_strtod_l+0x49c>
 8007e54:	f04f 32ff 	mov.w	r2, #4294967295
 8007e58:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5c:	ea03 0808 	and.w	r8, r3, r8
 8007e60:	e6e8      	b.n	8007c34 <_strtod_l+0x604>
 8007e62:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007e66:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007e6a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007e6e:	36e2      	adds	r6, #226	; 0xe2
 8007e70:	fa01 f306 	lsl.w	r3, r1, r6
 8007e74:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007e78:	e748      	b.n	8007d0c <_strtod_l+0x6dc>
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8007e82:	e743      	b.n	8007d0c <_strtod_l+0x6dc>
 8007e84:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007e86:	4632      	mov	r2, r6
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f7ff f961 	bl	8007150 <__lshift>
 8007e8e:	9016      	str	r0, [sp, #88]	; 0x58
 8007e90:	2800      	cmp	r0, #0
 8007e92:	f47f af6b 	bne.w	8007d6c <_strtod_l+0x73c>
 8007e96:	e60f      	b.n	8007ab8 <_strtod_l+0x488>
 8007e98:	46ca      	mov	sl, r9
 8007e9a:	d171      	bne.n	8007f80 <_strtod_l+0x950>
 8007e9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e9e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ea2:	b352      	cbz	r2, 8007efa <_strtod_l+0x8ca>
 8007ea4:	4a33      	ldr	r2, [pc, #204]	; (8007f74 <_strtod_l+0x944>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d12a      	bne.n	8007f00 <_strtod_l+0x8d0>
 8007eaa:	9b04      	ldr	r3, [sp, #16]
 8007eac:	4641      	mov	r1, r8
 8007eae:	b1fb      	cbz	r3, 8007ef0 <_strtod_l+0x8c0>
 8007eb0:	4b2e      	ldr	r3, [pc, #184]	; (8007f6c <_strtod_l+0x93c>)
 8007eb2:	ea09 0303 	and.w	r3, r9, r3
 8007eb6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007eba:	f04f 32ff 	mov.w	r2, #4294967295
 8007ebe:	d81a      	bhi.n	8007ef6 <_strtod_l+0x8c6>
 8007ec0:	0d1b      	lsrs	r3, r3, #20
 8007ec2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eca:	4299      	cmp	r1, r3
 8007ecc:	d118      	bne.n	8007f00 <_strtod_l+0x8d0>
 8007ece:	4b2a      	ldr	r3, [pc, #168]	; (8007f78 <_strtod_l+0x948>)
 8007ed0:	459a      	cmp	sl, r3
 8007ed2:	d102      	bne.n	8007eda <_strtod_l+0x8aa>
 8007ed4:	3101      	adds	r1, #1
 8007ed6:	f43f adef 	beq.w	8007ab8 <_strtod_l+0x488>
 8007eda:	4b24      	ldr	r3, [pc, #144]	; (8007f6c <_strtod_l+0x93c>)
 8007edc:	ea0a 0303 	and.w	r3, sl, r3
 8007ee0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007ee4:	f04f 0800 	mov.w	r8, #0
 8007ee8:	9b04      	ldr	r3, [sp, #16]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1a2      	bne.n	8007e34 <_strtod_l+0x804>
 8007eee:	e5ed      	b.n	8007acc <_strtod_l+0x49c>
 8007ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef4:	e7e9      	b.n	8007eca <_strtod_l+0x89a>
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	e7e7      	b.n	8007eca <_strtod_l+0x89a>
 8007efa:	ea53 0308 	orrs.w	r3, r3, r8
 8007efe:	d08a      	beq.n	8007e16 <_strtod_l+0x7e6>
 8007f00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f02:	b1e3      	cbz	r3, 8007f3e <_strtod_l+0x90e>
 8007f04:	ea13 0f0a 	tst.w	r3, sl
 8007f08:	d0ee      	beq.n	8007ee8 <_strtod_l+0x8b8>
 8007f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f0c:	9a04      	ldr	r2, [sp, #16]
 8007f0e:	4640      	mov	r0, r8
 8007f10:	4649      	mov	r1, r9
 8007f12:	b1c3      	cbz	r3, 8007f46 <_strtod_l+0x916>
 8007f14:	f7ff fb6f 	bl	80075f6 <sulp>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	ec51 0b18 	vmov	r0, r1, d8
 8007f20:	f7f8 f9b4 	bl	800028c <__adddf3>
 8007f24:	4680      	mov	r8, r0
 8007f26:	4689      	mov	r9, r1
 8007f28:	e7de      	b.n	8007ee8 <_strtod_l+0x8b8>
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007f30:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007f34:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007f38:	f04f 38ff 	mov.w	r8, #4294967295
 8007f3c:	e7d4      	b.n	8007ee8 <_strtod_l+0x8b8>
 8007f3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f40:	ea13 0f08 	tst.w	r3, r8
 8007f44:	e7e0      	b.n	8007f08 <_strtod_l+0x8d8>
 8007f46:	f7ff fb56 	bl	80075f6 <sulp>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	ec51 0b18 	vmov	r0, r1, d8
 8007f52:	f7f8 f999 	bl	8000288 <__aeabi_dsub>
 8007f56:	2200      	movs	r2, #0
 8007f58:	2300      	movs	r3, #0
 8007f5a:	4680      	mov	r8, r0
 8007f5c:	4689      	mov	r9, r1
 8007f5e:	f7f8 fdb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f62:	2800      	cmp	r0, #0
 8007f64:	d0c0      	beq.n	8007ee8 <_strtod_l+0x8b8>
 8007f66:	e618      	b.n	8007b9a <_strtod_l+0x56a>
 8007f68:	fffffc02 	.word	0xfffffc02
 8007f6c:	7ff00000 	.word	0x7ff00000
 8007f70:	39500000 	.word	0x39500000
 8007f74:	000fffff 	.word	0x000fffff
 8007f78:	7fefffff 	.word	0x7fefffff
 8007f7c:	080097a0 	.word	0x080097a0
 8007f80:	4659      	mov	r1, fp
 8007f82:	4628      	mov	r0, r5
 8007f84:	f7ff fac0 	bl	8007508 <__ratio>
 8007f88:	ec57 6b10 	vmov	r6, r7, d0
 8007f8c:	ee10 0a10 	vmov	r0, s0
 8007f90:	2200      	movs	r2, #0
 8007f92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f96:	4639      	mov	r1, r7
 8007f98:	f7f8 fdaa 	bl	8000af0 <__aeabi_dcmple>
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	d071      	beq.n	8008084 <_strtod_l+0xa54>
 8007fa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d17c      	bne.n	80080a0 <_strtod_l+0xa70>
 8007fa6:	f1b8 0f00 	cmp.w	r8, #0
 8007faa:	d15a      	bne.n	8008062 <_strtod_l+0xa32>
 8007fac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d15d      	bne.n	8008070 <_strtod_l+0xa40>
 8007fb4:	4b90      	ldr	r3, [pc, #576]	; (80081f8 <_strtod_l+0xbc8>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	4630      	mov	r0, r6
 8007fba:	4639      	mov	r1, r7
 8007fbc:	f7f8 fd8e 	bl	8000adc <__aeabi_dcmplt>
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	d15c      	bne.n	800807e <_strtod_l+0xa4e>
 8007fc4:	4630      	mov	r0, r6
 8007fc6:	4639      	mov	r1, r7
 8007fc8:	4b8c      	ldr	r3, [pc, #560]	; (80081fc <_strtod_l+0xbcc>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f7f8 fb14 	bl	80005f8 <__aeabi_dmul>
 8007fd0:	4606      	mov	r6, r0
 8007fd2:	460f      	mov	r7, r1
 8007fd4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007fd8:	9606      	str	r6, [sp, #24]
 8007fda:	9307      	str	r3, [sp, #28]
 8007fdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fe0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007fe4:	4b86      	ldr	r3, [pc, #536]	; (8008200 <_strtod_l+0xbd0>)
 8007fe6:	ea0a 0303 	and.w	r3, sl, r3
 8007fea:	930d      	str	r3, [sp, #52]	; 0x34
 8007fec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007fee:	4b85      	ldr	r3, [pc, #532]	; (8008204 <_strtod_l+0xbd4>)
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	f040 8090 	bne.w	8008116 <_strtod_l+0xae6>
 8007ff6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007ffa:	ec49 8b10 	vmov	d0, r8, r9
 8007ffe:	f7ff f9b9 	bl	8007374 <__ulp>
 8008002:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008006:	ec51 0b10 	vmov	r0, r1, d0
 800800a:	f7f8 faf5 	bl	80005f8 <__aeabi_dmul>
 800800e:	4642      	mov	r2, r8
 8008010:	464b      	mov	r3, r9
 8008012:	f7f8 f93b 	bl	800028c <__adddf3>
 8008016:	460b      	mov	r3, r1
 8008018:	4979      	ldr	r1, [pc, #484]	; (8008200 <_strtod_l+0xbd0>)
 800801a:	4a7b      	ldr	r2, [pc, #492]	; (8008208 <_strtod_l+0xbd8>)
 800801c:	4019      	ands	r1, r3
 800801e:	4291      	cmp	r1, r2
 8008020:	4680      	mov	r8, r0
 8008022:	d944      	bls.n	80080ae <_strtod_l+0xa7e>
 8008024:	ee18 2a90 	vmov	r2, s17
 8008028:	4b78      	ldr	r3, [pc, #480]	; (800820c <_strtod_l+0xbdc>)
 800802a:	429a      	cmp	r2, r3
 800802c:	d104      	bne.n	8008038 <_strtod_l+0xa08>
 800802e:	ee18 3a10 	vmov	r3, s16
 8008032:	3301      	adds	r3, #1
 8008034:	f43f ad40 	beq.w	8007ab8 <_strtod_l+0x488>
 8008038:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800820c <_strtod_l+0xbdc>
 800803c:	f04f 38ff 	mov.w	r8, #4294967295
 8008040:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008042:	4620      	mov	r0, r4
 8008044:	f7fe fe6a 	bl	8006d1c <_Bfree>
 8008048:	9905      	ldr	r1, [sp, #20]
 800804a:	4620      	mov	r0, r4
 800804c:	f7fe fe66 	bl	8006d1c <_Bfree>
 8008050:	4659      	mov	r1, fp
 8008052:	4620      	mov	r0, r4
 8008054:	f7fe fe62 	bl	8006d1c <_Bfree>
 8008058:	4629      	mov	r1, r5
 800805a:	4620      	mov	r0, r4
 800805c:	f7fe fe5e 	bl	8006d1c <_Bfree>
 8008060:	e609      	b.n	8007c76 <_strtod_l+0x646>
 8008062:	f1b8 0f01 	cmp.w	r8, #1
 8008066:	d103      	bne.n	8008070 <_strtod_l+0xa40>
 8008068:	f1b9 0f00 	cmp.w	r9, #0
 800806c:	f43f ad95 	beq.w	8007b9a <_strtod_l+0x56a>
 8008070:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80081c8 <_strtod_l+0xb98>
 8008074:	4f60      	ldr	r7, [pc, #384]	; (80081f8 <_strtod_l+0xbc8>)
 8008076:	ed8d 7b06 	vstr	d7, [sp, #24]
 800807a:	2600      	movs	r6, #0
 800807c:	e7ae      	b.n	8007fdc <_strtod_l+0x9ac>
 800807e:	4f5f      	ldr	r7, [pc, #380]	; (80081fc <_strtod_l+0xbcc>)
 8008080:	2600      	movs	r6, #0
 8008082:	e7a7      	b.n	8007fd4 <_strtod_l+0x9a4>
 8008084:	4b5d      	ldr	r3, [pc, #372]	; (80081fc <_strtod_l+0xbcc>)
 8008086:	4630      	mov	r0, r6
 8008088:	4639      	mov	r1, r7
 800808a:	2200      	movs	r2, #0
 800808c:	f7f8 fab4 	bl	80005f8 <__aeabi_dmul>
 8008090:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008092:	4606      	mov	r6, r0
 8008094:	460f      	mov	r7, r1
 8008096:	2b00      	cmp	r3, #0
 8008098:	d09c      	beq.n	8007fd4 <_strtod_l+0x9a4>
 800809a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800809e:	e79d      	b.n	8007fdc <_strtod_l+0x9ac>
 80080a0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80081d0 <_strtod_l+0xba0>
 80080a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80080a8:	ec57 6b17 	vmov	r6, r7, d7
 80080ac:	e796      	b.n	8007fdc <_strtod_l+0x9ac>
 80080ae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80080b2:	9b04      	ldr	r3, [sp, #16]
 80080b4:	46ca      	mov	sl, r9
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1c2      	bne.n	8008040 <_strtod_l+0xa10>
 80080ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80080be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80080c0:	0d1b      	lsrs	r3, r3, #20
 80080c2:	051b      	lsls	r3, r3, #20
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d1bb      	bne.n	8008040 <_strtod_l+0xa10>
 80080c8:	4630      	mov	r0, r6
 80080ca:	4639      	mov	r1, r7
 80080cc:	f7f8 fddc 	bl	8000c88 <__aeabi_d2lz>
 80080d0:	f7f8 fa64 	bl	800059c <__aeabi_l2d>
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	4630      	mov	r0, r6
 80080da:	4639      	mov	r1, r7
 80080dc:	f7f8 f8d4 	bl	8000288 <__aeabi_dsub>
 80080e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080e6:	ea43 0308 	orr.w	r3, r3, r8
 80080ea:	4313      	orrs	r3, r2
 80080ec:	4606      	mov	r6, r0
 80080ee:	460f      	mov	r7, r1
 80080f0:	d054      	beq.n	800819c <_strtod_l+0xb6c>
 80080f2:	a339      	add	r3, pc, #228	; (adr r3, 80081d8 <_strtod_l+0xba8>)
 80080f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f8:	f7f8 fcf0 	bl	8000adc <__aeabi_dcmplt>
 80080fc:	2800      	cmp	r0, #0
 80080fe:	f47f ace5 	bne.w	8007acc <_strtod_l+0x49c>
 8008102:	a337      	add	r3, pc, #220	; (adr r3, 80081e0 <_strtod_l+0xbb0>)
 8008104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008108:	4630      	mov	r0, r6
 800810a:	4639      	mov	r1, r7
 800810c:	f7f8 fd04 	bl	8000b18 <__aeabi_dcmpgt>
 8008110:	2800      	cmp	r0, #0
 8008112:	d095      	beq.n	8008040 <_strtod_l+0xa10>
 8008114:	e4da      	b.n	8007acc <_strtod_l+0x49c>
 8008116:	9b04      	ldr	r3, [sp, #16]
 8008118:	b333      	cbz	r3, 8008168 <_strtod_l+0xb38>
 800811a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800811c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008120:	d822      	bhi.n	8008168 <_strtod_l+0xb38>
 8008122:	a331      	add	r3, pc, #196	; (adr r3, 80081e8 <_strtod_l+0xbb8>)
 8008124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008128:	4630      	mov	r0, r6
 800812a:	4639      	mov	r1, r7
 800812c:	f7f8 fce0 	bl	8000af0 <__aeabi_dcmple>
 8008130:	b1a0      	cbz	r0, 800815c <_strtod_l+0xb2c>
 8008132:	4639      	mov	r1, r7
 8008134:	4630      	mov	r0, r6
 8008136:	f7f8 fd37 	bl	8000ba8 <__aeabi_d2uiz>
 800813a:	2801      	cmp	r0, #1
 800813c:	bf38      	it	cc
 800813e:	2001      	movcc	r0, #1
 8008140:	f7f8 f9e0 	bl	8000504 <__aeabi_ui2d>
 8008144:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008146:	4606      	mov	r6, r0
 8008148:	460f      	mov	r7, r1
 800814a:	bb23      	cbnz	r3, 8008196 <_strtod_l+0xb66>
 800814c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008150:	9010      	str	r0, [sp, #64]	; 0x40
 8008152:	9311      	str	r3, [sp, #68]	; 0x44
 8008154:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008158:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800815c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800815e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008160:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008164:	1a9b      	subs	r3, r3, r2
 8008166:	930f      	str	r3, [sp, #60]	; 0x3c
 8008168:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800816c:	eeb0 0a48 	vmov.f32	s0, s16
 8008170:	eef0 0a68 	vmov.f32	s1, s17
 8008174:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008178:	f7ff f8fc 	bl	8007374 <__ulp>
 800817c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008180:	ec53 2b10 	vmov	r2, r3, d0
 8008184:	f7f8 fa38 	bl	80005f8 <__aeabi_dmul>
 8008188:	ec53 2b18 	vmov	r2, r3, d8
 800818c:	f7f8 f87e 	bl	800028c <__adddf3>
 8008190:	4680      	mov	r8, r0
 8008192:	4689      	mov	r9, r1
 8008194:	e78d      	b.n	80080b2 <_strtod_l+0xa82>
 8008196:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800819a:	e7db      	b.n	8008154 <_strtod_l+0xb24>
 800819c:	a314      	add	r3, pc, #80	; (adr r3, 80081f0 <_strtod_l+0xbc0>)
 800819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a2:	f7f8 fc9b 	bl	8000adc <__aeabi_dcmplt>
 80081a6:	e7b3      	b.n	8008110 <_strtod_l+0xae0>
 80081a8:	2300      	movs	r3, #0
 80081aa:	930a      	str	r3, [sp, #40]	; 0x28
 80081ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80081ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081b0:	6013      	str	r3, [r2, #0]
 80081b2:	f7ff ba7c 	b.w	80076ae <_strtod_l+0x7e>
 80081b6:	2a65      	cmp	r2, #101	; 0x65
 80081b8:	f43f ab75 	beq.w	80078a6 <_strtod_l+0x276>
 80081bc:	2a45      	cmp	r2, #69	; 0x45
 80081be:	f43f ab72 	beq.w	80078a6 <_strtod_l+0x276>
 80081c2:	2301      	movs	r3, #1
 80081c4:	f7ff bbaa 	b.w	800791c <_strtod_l+0x2ec>
 80081c8:	00000000 	.word	0x00000000
 80081cc:	bff00000 	.word	0xbff00000
 80081d0:	00000000 	.word	0x00000000
 80081d4:	3ff00000 	.word	0x3ff00000
 80081d8:	94a03595 	.word	0x94a03595
 80081dc:	3fdfffff 	.word	0x3fdfffff
 80081e0:	35afe535 	.word	0x35afe535
 80081e4:	3fe00000 	.word	0x3fe00000
 80081e8:	ffc00000 	.word	0xffc00000
 80081ec:	41dfffff 	.word	0x41dfffff
 80081f0:	94a03595 	.word	0x94a03595
 80081f4:	3fcfffff 	.word	0x3fcfffff
 80081f8:	3ff00000 	.word	0x3ff00000
 80081fc:	3fe00000 	.word	0x3fe00000
 8008200:	7ff00000 	.word	0x7ff00000
 8008204:	7fe00000 	.word	0x7fe00000
 8008208:	7c9fffff 	.word	0x7c9fffff
 800820c:	7fefffff 	.word	0x7fefffff

08008210 <_strtod_r>:
 8008210:	4b01      	ldr	r3, [pc, #4]	; (8008218 <_strtod_r+0x8>)
 8008212:	f7ff ba0d 	b.w	8007630 <_strtod_l>
 8008216:	bf00      	nop
 8008218:	200001f8 	.word	0x200001f8

0800821c <_strtol_l.constprop.0>:
 800821c:	2b01      	cmp	r3, #1
 800821e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008222:	d001      	beq.n	8008228 <_strtol_l.constprop.0+0xc>
 8008224:	2b24      	cmp	r3, #36	; 0x24
 8008226:	d906      	bls.n	8008236 <_strtol_l.constprop.0+0x1a>
 8008228:	f7fd fd8a 	bl	8005d40 <__errno>
 800822c:	2316      	movs	r3, #22
 800822e:	6003      	str	r3, [r0, #0]
 8008230:	2000      	movs	r0, #0
 8008232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008236:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800831c <_strtol_l.constprop.0+0x100>
 800823a:	460d      	mov	r5, r1
 800823c:	462e      	mov	r6, r5
 800823e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008242:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008246:	f017 0708 	ands.w	r7, r7, #8
 800824a:	d1f7      	bne.n	800823c <_strtol_l.constprop.0+0x20>
 800824c:	2c2d      	cmp	r4, #45	; 0x2d
 800824e:	d132      	bne.n	80082b6 <_strtol_l.constprop.0+0x9a>
 8008250:	782c      	ldrb	r4, [r5, #0]
 8008252:	2701      	movs	r7, #1
 8008254:	1cb5      	adds	r5, r6, #2
 8008256:	2b00      	cmp	r3, #0
 8008258:	d05b      	beq.n	8008312 <_strtol_l.constprop.0+0xf6>
 800825a:	2b10      	cmp	r3, #16
 800825c:	d109      	bne.n	8008272 <_strtol_l.constprop.0+0x56>
 800825e:	2c30      	cmp	r4, #48	; 0x30
 8008260:	d107      	bne.n	8008272 <_strtol_l.constprop.0+0x56>
 8008262:	782c      	ldrb	r4, [r5, #0]
 8008264:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008268:	2c58      	cmp	r4, #88	; 0x58
 800826a:	d14d      	bne.n	8008308 <_strtol_l.constprop.0+0xec>
 800826c:	786c      	ldrb	r4, [r5, #1]
 800826e:	2310      	movs	r3, #16
 8008270:	3502      	adds	r5, #2
 8008272:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008276:	f108 38ff 	add.w	r8, r8, #4294967295
 800827a:	f04f 0e00 	mov.w	lr, #0
 800827e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008282:	4676      	mov	r6, lr
 8008284:	fb03 8a19 	mls	sl, r3, r9, r8
 8008288:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800828c:	f1bc 0f09 	cmp.w	ip, #9
 8008290:	d816      	bhi.n	80082c0 <_strtol_l.constprop.0+0xa4>
 8008292:	4664      	mov	r4, ip
 8008294:	42a3      	cmp	r3, r4
 8008296:	dd24      	ble.n	80082e2 <_strtol_l.constprop.0+0xc6>
 8008298:	f1be 3fff 	cmp.w	lr, #4294967295
 800829c:	d008      	beq.n	80082b0 <_strtol_l.constprop.0+0x94>
 800829e:	45b1      	cmp	r9, r6
 80082a0:	d31c      	bcc.n	80082dc <_strtol_l.constprop.0+0xc0>
 80082a2:	d101      	bne.n	80082a8 <_strtol_l.constprop.0+0x8c>
 80082a4:	45a2      	cmp	sl, r4
 80082a6:	db19      	blt.n	80082dc <_strtol_l.constprop.0+0xc0>
 80082a8:	fb06 4603 	mla	r6, r6, r3, r4
 80082ac:	f04f 0e01 	mov.w	lr, #1
 80082b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80082b4:	e7e8      	b.n	8008288 <_strtol_l.constprop.0+0x6c>
 80082b6:	2c2b      	cmp	r4, #43	; 0x2b
 80082b8:	bf04      	itt	eq
 80082ba:	782c      	ldrbeq	r4, [r5, #0]
 80082bc:	1cb5      	addeq	r5, r6, #2
 80082be:	e7ca      	b.n	8008256 <_strtol_l.constprop.0+0x3a>
 80082c0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80082c4:	f1bc 0f19 	cmp.w	ip, #25
 80082c8:	d801      	bhi.n	80082ce <_strtol_l.constprop.0+0xb2>
 80082ca:	3c37      	subs	r4, #55	; 0x37
 80082cc:	e7e2      	b.n	8008294 <_strtol_l.constprop.0+0x78>
 80082ce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80082d2:	f1bc 0f19 	cmp.w	ip, #25
 80082d6:	d804      	bhi.n	80082e2 <_strtol_l.constprop.0+0xc6>
 80082d8:	3c57      	subs	r4, #87	; 0x57
 80082da:	e7db      	b.n	8008294 <_strtol_l.constprop.0+0x78>
 80082dc:	f04f 3eff 	mov.w	lr, #4294967295
 80082e0:	e7e6      	b.n	80082b0 <_strtol_l.constprop.0+0x94>
 80082e2:	f1be 3fff 	cmp.w	lr, #4294967295
 80082e6:	d105      	bne.n	80082f4 <_strtol_l.constprop.0+0xd8>
 80082e8:	2322      	movs	r3, #34	; 0x22
 80082ea:	6003      	str	r3, [r0, #0]
 80082ec:	4646      	mov	r6, r8
 80082ee:	b942      	cbnz	r2, 8008302 <_strtol_l.constprop.0+0xe6>
 80082f0:	4630      	mov	r0, r6
 80082f2:	e79e      	b.n	8008232 <_strtol_l.constprop.0+0x16>
 80082f4:	b107      	cbz	r7, 80082f8 <_strtol_l.constprop.0+0xdc>
 80082f6:	4276      	negs	r6, r6
 80082f8:	2a00      	cmp	r2, #0
 80082fa:	d0f9      	beq.n	80082f0 <_strtol_l.constprop.0+0xd4>
 80082fc:	f1be 0f00 	cmp.w	lr, #0
 8008300:	d000      	beq.n	8008304 <_strtol_l.constprop.0+0xe8>
 8008302:	1e69      	subs	r1, r5, #1
 8008304:	6011      	str	r1, [r2, #0]
 8008306:	e7f3      	b.n	80082f0 <_strtol_l.constprop.0+0xd4>
 8008308:	2430      	movs	r4, #48	; 0x30
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1b1      	bne.n	8008272 <_strtol_l.constprop.0+0x56>
 800830e:	2308      	movs	r3, #8
 8008310:	e7af      	b.n	8008272 <_strtol_l.constprop.0+0x56>
 8008312:	2c30      	cmp	r4, #48	; 0x30
 8008314:	d0a5      	beq.n	8008262 <_strtol_l.constprop.0+0x46>
 8008316:	230a      	movs	r3, #10
 8008318:	e7ab      	b.n	8008272 <_strtol_l.constprop.0+0x56>
 800831a:	bf00      	nop
 800831c:	080097c9 	.word	0x080097c9

08008320 <_strtol_r>:
 8008320:	f7ff bf7c 	b.w	800821c <_strtol_l.constprop.0>

08008324 <__ssputs_r>:
 8008324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008328:	688e      	ldr	r6, [r1, #8]
 800832a:	461f      	mov	r7, r3
 800832c:	42be      	cmp	r6, r7
 800832e:	680b      	ldr	r3, [r1, #0]
 8008330:	4682      	mov	sl, r0
 8008332:	460c      	mov	r4, r1
 8008334:	4690      	mov	r8, r2
 8008336:	d82c      	bhi.n	8008392 <__ssputs_r+0x6e>
 8008338:	898a      	ldrh	r2, [r1, #12]
 800833a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800833e:	d026      	beq.n	800838e <__ssputs_r+0x6a>
 8008340:	6965      	ldr	r5, [r4, #20]
 8008342:	6909      	ldr	r1, [r1, #16]
 8008344:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008348:	eba3 0901 	sub.w	r9, r3, r1
 800834c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008350:	1c7b      	adds	r3, r7, #1
 8008352:	444b      	add	r3, r9
 8008354:	106d      	asrs	r5, r5, #1
 8008356:	429d      	cmp	r5, r3
 8008358:	bf38      	it	cc
 800835a:	461d      	movcc	r5, r3
 800835c:	0553      	lsls	r3, r2, #21
 800835e:	d527      	bpl.n	80083b0 <__ssputs_r+0x8c>
 8008360:	4629      	mov	r1, r5
 8008362:	f7fe fc0f 	bl	8006b84 <_malloc_r>
 8008366:	4606      	mov	r6, r0
 8008368:	b360      	cbz	r0, 80083c4 <__ssputs_r+0xa0>
 800836a:	6921      	ldr	r1, [r4, #16]
 800836c:	464a      	mov	r2, r9
 800836e:	f000 fa1b 	bl	80087a8 <memcpy>
 8008372:	89a3      	ldrh	r3, [r4, #12]
 8008374:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800837c:	81a3      	strh	r3, [r4, #12]
 800837e:	6126      	str	r6, [r4, #16]
 8008380:	6165      	str	r5, [r4, #20]
 8008382:	444e      	add	r6, r9
 8008384:	eba5 0509 	sub.w	r5, r5, r9
 8008388:	6026      	str	r6, [r4, #0]
 800838a:	60a5      	str	r5, [r4, #8]
 800838c:	463e      	mov	r6, r7
 800838e:	42be      	cmp	r6, r7
 8008390:	d900      	bls.n	8008394 <__ssputs_r+0x70>
 8008392:	463e      	mov	r6, r7
 8008394:	6820      	ldr	r0, [r4, #0]
 8008396:	4632      	mov	r2, r6
 8008398:	4641      	mov	r1, r8
 800839a:	f000 f9c9 	bl	8008730 <memmove>
 800839e:	68a3      	ldr	r3, [r4, #8]
 80083a0:	1b9b      	subs	r3, r3, r6
 80083a2:	60a3      	str	r3, [r4, #8]
 80083a4:	6823      	ldr	r3, [r4, #0]
 80083a6:	4433      	add	r3, r6
 80083a8:	6023      	str	r3, [r4, #0]
 80083aa:	2000      	movs	r0, #0
 80083ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b0:	462a      	mov	r2, r5
 80083b2:	f000 fdae 	bl	8008f12 <_realloc_r>
 80083b6:	4606      	mov	r6, r0
 80083b8:	2800      	cmp	r0, #0
 80083ba:	d1e0      	bne.n	800837e <__ssputs_r+0x5a>
 80083bc:	6921      	ldr	r1, [r4, #16]
 80083be:	4650      	mov	r0, sl
 80083c0:	f7fe fb6c 	bl	8006a9c <_free_r>
 80083c4:	230c      	movs	r3, #12
 80083c6:	f8ca 3000 	str.w	r3, [sl]
 80083ca:	89a3      	ldrh	r3, [r4, #12]
 80083cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083d0:	81a3      	strh	r3, [r4, #12]
 80083d2:	f04f 30ff 	mov.w	r0, #4294967295
 80083d6:	e7e9      	b.n	80083ac <__ssputs_r+0x88>

080083d8 <_svfiprintf_r>:
 80083d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083dc:	4698      	mov	r8, r3
 80083de:	898b      	ldrh	r3, [r1, #12]
 80083e0:	061b      	lsls	r3, r3, #24
 80083e2:	b09d      	sub	sp, #116	; 0x74
 80083e4:	4607      	mov	r7, r0
 80083e6:	460d      	mov	r5, r1
 80083e8:	4614      	mov	r4, r2
 80083ea:	d50e      	bpl.n	800840a <_svfiprintf_r+0x32>
 80083ec:	690b      	ldr	r3, [r1, #16]
 80083ee:	b963      	cbnz	r3, 800840a <_svfiprintf_r+0x32>
 80083f0:	2140      	movs	r1, #64	; 0x40
 80083f2:	f7fe fbc7 	bl	8006b84 <_malloc_r>
 80083f6:	6028      	str	r0, [r5, #0]
 80083f8:	6128      	str	r0, [r5, #16]
 80083fa:	b920      	cbnz	r0, 8008406 <_svfiprintf_r+0x2e>
 80083fc:	230c      	movs	r3, #12
 80083fe:	603b      	str	r3, [r7, #0]
 8008400:	f04f 30ff 	mov.w	r0, #4294967295
 8008404:	e0d0      	b.n	80085a8 <_svfiprintf_r+0x1d0>
 8008406:	2340      	movs	r3, #64	; 0x40
 8008408:	616b      	str	r3, [r5, #20]
 800840a:	2300      	movs	r3, #0
 800840c:	9309      	str	r3, [sp, #36]	; 0x24
 800840e:	2320      	movs	r3, #32
 8008410:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008414:	f8cd 800c 	str.w	r8, [sp, #12]
 8008418:	2330      	movs	r3, #48	; 0x30
 800841a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80085c0 <_svfiprintf_r+0x1e8>
 800841e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008422:	f04f 0901 	mov.w	r9, #1
 8008426:	4623      	mov	r3, r4
 8008428:	469a      	mov	sl, r3
 800842a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800842e:	b10a      	cbz	r2, 8008434 <_svfiprintf_r+0x5c>
 8008430:	2a25      	cmp	r2, #37	; 0x25
 8008432:	d1f9      	bne.n	8008428 <_svfiprintf_r+0x50>
 8008434:	ebba 0b04 	subs.w	fp, sl, r4
 8008438:	d00b      	beq.n	8008452 <_svfiprintf_r+0x7a>
 800843a:	465b      	mov	r3, fp
 800843c:	4622      	mov	r2, r4
 800843e:	4629      	mov	r1, r5
 8008440:	4638      	mov	r0, r7
 8008442:	f7ff ff6f 	bl	8008324 <__ssputs_r>
 8008446:	3001      	adds	r0, #1
 8008448:	f000 80a9 	beq.w	800859e <_svfiprintf_r+0x1c6>
 800844c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800844e:	445a      	add	r2, fp
 8008450:	9209      	str	r2, [sp, #36]	; 0x24
 8008452:	f89a 3000 	ldrb.w	r3, [sl]
 8008456:	2b00      	cmp	r3, #0
 8008458:	f000 80a1 	beq.w	800859e <_svfiprintf_r+0x1c6>
 800845c:	2300      	movs	r3, #0
 800845e:	f04f 32ff 	mov.w	r2, #4294967295
 8008462:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008466:	f10a 0a01 	add.w	sl, sl, #1
 800846a:	9304      	str	r3, [sp, #16]
 800846c:	9307      	str	r3, [sp, #28]
 800846e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008472:	931a      	str	r3, [sp, #104]	; 0x68
 8008474:	4654      	mov	r4, sl
 8008476:	2205      	movs	r2, #5
 8008478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800847c:	4850      	ldr	r0, [pc, #320]	; (80085c0 <_svfiprintf_r+0x1e8>)
 800847e:	f7f7 fea7 	bl	80001d0 <memchr>
 8008482:	9a04      	ldr	r2, [sp, #16]
 8008484:	b9d8      	cbnz	r0, 80084be <_svfiprintf_r+0xe6>
 8008486:	06d0      	lsls	r0, r2, #27
 8008488:	bf44      	itt	mi
 800848a:	2320      	movmi	r3, #32
 800848c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008490:	0711      	lsls	r1, r2, #28
 8008492:	bf44      	itt	mi
 8008494:	232b      	movmi	r3, #43	; 0x2b
 8008496:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800849a:	f89a 3000 	ldrb.w	r3, [sl]
 800849e:	2b2a      	cmp	r3, #42	; 0x2a
 80084a0:	d015      	beq.n	80084ce <_svfiprintf_r+0xf6>
 80084a2:	9a07      	ldr	r2, [sp, #28]
 80084a4:	4654      	mov	r4, sl
 80084a6:	2000      	movs	r0, #0
 80084a8:	f04f 0c0a 	mov.w	ip, #10
 80084ac:	4621      	mov	r1, r4
 80084ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084b2:	3b30      	subs	r3, #48	; 0x30
 80084b4:	2b09      	cmp	r3, #9
 80084b6:	d94d      	bls.n	8008554 <_svfiprintf_r+0x17c>
 80084b8:	b1b0      	cbz	r0, 80084e8 <_svfiprintf_r+0x110>
 80084ba:	9207      	str	r2, [sp, #28]
 80084bc:	e014      	b.n	80084e8 <_svfiprintf_r+0x110>
 80084be:	eba0 0308 	sub.w	r3, r0, r8
 80084c2:	fa09 f303 	lsl.w	r3, r9, r3
 80084c6:	4313      	orrs	r3, r2
 80084c8:	9304      	str	r3, [sp, #16]
 80084ca:	46a2      	mov	sl, r4
 80084cc:	e7d2      	b.n	8008474 <_svfiprintf_r+0x9c>
 80084ce:	9b03      	ldr	r3, [sp, #12]
 80084d0:	1d19      	adds	r1, r3, #4
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	9103      	str	r1, [sp, #12]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	bfbb      	ittet	lt
 80084da:	425b      	neglt	r3, r3
 80084dc:	f042 0202 	orrlt.w	r2, r2, #2
 80084e0:	9307      	strge	r3, [sp, #28]
 80084e2:	9307      	strlt	r3, [sp, #28]
 80084e4:	bfb8      	it	lt
 80084e6:	9204      	strlt	r2, [sp, #16]
 80084e8:	7823      	ldrb	r3, [r4, #0]
 80084ea:	2b2e      	cmp	r3, #46	; 0x2e
 80084ec:	d10c      	bne.n	8008508 <_svfiprintf_r+0x130>
 80084ee:	7863      	ldrb	r3, [r4, #1]
 80084f0:	2b2a      	cmp	r3, #42	; 0x2a
 80084f2:	d134      	bne.n	800855e <_svfiprintf_r+0x186>
 80084f4:	9b03      	ldr	r3, [sp, #12]
 80084f6:	1d1a      	adds	r2, r3, #4
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	9203      	str	r2, [sp, #12]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	bfb8      	it	lt
 8008500:	f04f 33ff 	movlt.w	r3, #4294967295
 8008504:	3402      	adds	r4, #2
 8008506:	9305      	str	r3, [sp, #20]
 8008508:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80085d0 <_svfiprintf_r+0x1f8>
 800850c:	7821      	ldrb	r1, [r4, #0]
 800850e:	2203      	movs	r2, #3
 8008510:	4650      	mov	r0, sl
 8008512:	f7f7 fe5d 	bl	80001d0 <memchr>
 8008516:	b138      	cbz	r0, 8008528 <_svfiprintf_r+0x150>
 8008518:	9b04      	ldr	r3, [sp, #16]
 800851a:	eba0 000a 	sub.w	r0, r0, sl
 800851e:	2240      	movs	r2, #64	; 0x40
 8008520:	4082      	lsls	r2, r0
 8008522:	4313      	orrs	r3, r2
 8008524:	3401      	adds	r4, #1
 8008526:	9304      	str	r3, [sp, #16]
 8008528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800852c:	4825      	ldr	r0, [pc, #148]	; (80085c4 <_svfiprintf_r+0x1ec>)
 800852e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008532:	2206      	movs	r2, #6
 8008534:	f7f7 fe4c 	bl	80001d0 <memchr>
 8008538:	2800      	cmp	r0, #0
 800853a:	d038      	beq.n	80085ae <_svfiprintf_r+0x1d6>
 800853c:	4b22      	ldr	r3, [pc, #136]	; (80085c8 <_svfiprintf_r+0x1f0>)
 800853e:	bb1b      	cbnz	r3, 8008588 <_svfiprintf_r+0x1b0>
 8008540:	9b03      	ldr	r3, [sp, #12]
 8008542:	3307      	adds	r3, #7
 8008544:	f023 0307 	bic.w	r3, r3, #7
 8008548:	3308      	adds	r3, #8
 800854a:	9303      	str	r3, [sp, #12]
 800854c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800854e:	4433      	add	r3, r6
 8008550:	9309      	str	r3, [sp, #36]	; 0x24
 8008552:	e768      	b.n	8008426 <_svfiprintf_r+0x4e>
 8008554:	fb0c 3202 	mla	r2, ip, r2, r3
 8008558:	460c      	mov	r4, r1
 800855a:	2001      	movs	r0, #1
 800855c:	e7a6      	b.n	80084ac <_svfiprintf_r+0xd4>
 800855e:	2300      	movs	r3, #0
 8008560:	3401      	adds	r4, #1
 8008562:	9305      	str	r3, [sp, #20]
 8008564:	4619      	mov	r1, r3
 8008566:	f04f 0c0a 	mov.w	ip, #10
 800856a:	4620      	mov	r0, r4
 800856c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008570:	3a30      	subs	r2, #48	; 0x30
 8008572:	2a09      	cmp	r2, #9
 8008574:	d903      	bls.n	800857e <_svfiprintf_r+0x1a6>
 8008576:	2b00      	cmp	r3, #0
 8008578:	d0c6      	beq.n	8008508 <_svfiprintf_r+0x130>
 800857a:	9105      	str	r1, [sp, #20]
 800857c:	e7c4      	b.n	8008508 <_svfiprintf_r+0x130>
 800857e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008582:	4604      	mov	r4, r0
 8008584:	2301      	movs	r3, #1
 8008586:	e7f0      	b.n	800856a <_svfiprintf_r+0x192>
 8008588:	ab03      	add	r3, sp, #12
 800858a:	9300      	str	r3, [sp, #0]
 800858c:	462a      	mov	r2, r5
 800858e:	4b0f      	ldr	r3, [pc, #60]	; (80085cc <_svfiprintf_r+0x1f4>)
 8008590:	a904      	add	r1, sp, #16
 8008592:	4638      	mov	r0, r7
 8008594:	f7fc fc86 	bl	8004ea4 <_printf_float>
 8008598:	1c42      	adds	r2, r0, #1
 800859a:	4606      	mov	r6, r0
 800859c:	d1d6      	bne.n	800854c <_svfiprintf_r+0x174>
 800859e:	89ab      	ldrh	r3, [r5, #12]
 80085a0:	065b      	lsls	r3, r3, #25
 80085a2:	f53f af2d 	bmi.w	8008400 <_svfiprintf_r+0x28>
 80085a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085a8:	b01d      	add	sp, #116	; 0x74
 80085aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ae:	ab03      	add	r3, sp, #12
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	462a      	mov	r2, r5
 80085b4:	4b05      	ldr	r3, [pc, #20]	; (80085cc <_svfiprintf_r+0x1f4>)
 80085b6:	a904      	add	r1, sp, #16
 80085b8:	4638      	mov	r0, r7
 80085ba:	f7fc ff17 	bl	80053ec <_printf_i>
 80085be:	e7eb      	b.n	8008598 <_svfiprintf_r+0x1c0>
 80085c0:	080098c9 	.word	0x080098c9
 80085c4:	080098d3 	.word	0x080098d3
 80085c8:	08004ea5 	.word	0x08004ea5
 80085cc:	08008325 	.word	0x08008325
 80085d0:	080098cf 	.word	0x080098cf

080085d4 <__sflush_r>:
 80085d4:	898a      	ldrh	r2, [r1, #12]
 80085d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085da:	4605      	mov	r5, r0
 80085dc:	0710      	lsls	r0, r2, #28
 80085de:	460c      	mov	r4, r1
 80085e0:	d458      	bmi.n	8008694 <__sflush_r+0xc0>
 80085e2:	684b      	ldr	r3, [r1, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	dc05      	bgt.n	80085f4 <__sflush_r+0x20>
 80085e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	dc02      	bgt.n	80085f4 <__sflush_r+0x20>
 80085ee:	2000      	movs	r0, #0
 80085f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085f6:	2e00      	cmp	r6, #0
 80085f8:	d0f9      	beq.n	80085ee <__sflush_r+0x1a>
 80085fa:	2300      	movs	r3, #0
 80085fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008600:	682f      	ldr	r7, [r5, #0]
 8008602:	6a21      	ldr	r1, [r4, #32]
 8008604:	602b      	str	r3, [r5, #0]
 8008606:	d032      	beq.n	800866e <__sflush_r+0x9a>
 8008608:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800860a:	89a3      	ldrh	r3, [r4, #12]
 800860c:	075a      	lsls	r2, r3, #29
 800860e:	d505      	bpl.n	800861c <__sflush_r+0x48>
 8008610:	6863      	ldr	r3, [r4, #4]
 8008612:	1ac0      	subs	r0, r0, r3
 8008614:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008616:	b10b      	cbz	r3, 800861c <__sflush_r+0x48>
 8008618:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800861a:	1ac0      	subs	r0, r0, r3
 800861c:	2300      	movs	r3, #0
 800861e:	4602      	mov	r2, r0
 8008620:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008622:	6a21      	ldr	r1, [r4, #32]
 8008624:	4628      	mov	r0, r5
 8008626:	47b0      	blx	r6
 8008628:	1c43      	adds	r3, r0, #1
 800862a:	89a3      	ldrh	r3, [r4, #12]
 800862c:	d106      	bne.n	800863c <__sflush_r+0x68>
 800862e:	6829      	ldr	r1, [r5, #0]
 8008630:	291d      	cmp	r1, #29
 8008632:	d82b      	bhi.n	800868c <__sflush_r+0xb8>
 8008634:	4a29      	ldr	r2, [pc, #164]	; (80086dc <__sflush_r+0x108>)
 8008636:	410a      	asrs	r2, r1
 8008638:	07d6      	lsls	r6, r2, #31
 800863a:	d427      	bmi.n	800868c <__sflush_r+0xb8>
 800863c:	2200      	movs	r2, #0
 800863e:	6062      	str	r2, [r4, #4]
 8008640:	04d9      	lsls	r1, r3, #19
 8008642:	6922      	ldr	r2, [r4, #16]
 8008644:	6022      	str	r2, [r4, #0]
 8008646:	d504      	bpl.n	8008652 <__sflush_r+0x7e>
 8008648:	1c42      	adds	r2, r0, #1
 800864a:	d101      	bne.n	8008650 <__sflush_r+0x7c>
 800864c:	682b      	ldr	r3, [r5, #0]
 800864e:	b903      	cbnz	r3, 8008652 <__sflush_r+0x7e>
 8008650:	6560      	str	r0, [r4, #84]	; 0x54
 8008652:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008654:	602f      	str	r7, [r5, #0]
 8008656:	2900      	cmp	r1, #0
 8008658:	d0c9      	beq.n	80085ee <__sflush_r+0x1a>
 800865a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800865e:	4299      	cmp	r1, r3
 8008660:	d002      	beq.n	8008668 <__sflush_r+0x94>
 8008662:	4628      	mov	r0, r5
 8008664:	f7fe fa1a 	bl	8006a9c <_free_r>
 8008668:	2000      	movs	r0, #0
 800866a:	6360      	str	r0, [r4, #52]	; 0x34
 800866c:	e7c0      	b.n	80085f0 <__sflush_r+0x1c>
 800866e:	2301      	movs	r3, #1
 8008670:	4628      	mov	r0, r5
 8008672:	47b0      	blx	r6
 8008674:	1c41      	adds	r1, r0, #1
 8008676:	d1c8      	bne.n	800860a <__sflush_r+0x36>
 8008678:	682b      	ldr	r3, [r5, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d0c5      	beq.n	800860a <__sflush_r+0x36>
 800867e:	2b1d      	cmp	r3, #29
 8008680:	d001      	beq.n	8008686 <__sflush_r+0xb2>
 8008682:	2b16      	cmp	r3, #22
 8008684:	d101      	bne.n	800868a <__sflush_r+0xb6>
 8008686:	602f      	str	r7, [r5, #0]
 8008688:	e7b1      	b.n	80085ee <__sflush_r+0x1a>
 800868a:	89a3      	ldrh	r3, [r4, #12]
 800868c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008690:	81a3      	strh	r3, [r4, #12]
 8008692:	e7ad      	b.n	80085f0 <__sflush_r+0x1c>
 8008694:	690f      	ldr	r7, [r1, #16]
 8008696:	2f00      	cmp	r7, #0
 8008698:	d0a9      	beq.n	80085ee <__sflush_r+0x1a>
 800869a:	0793      	lsls	r3, r2, #30
 800869c:	680e      	ldr	r6, [r1, #0]
 800869e:	bf08      	it	eq
 80086a0:	694b      	ldreq	r3, [r1, #20]
 80086a2:	600f      	str	r7, [r1, #0]
 80086a4:	bf18      	it	ne
 80086a6:	2300      	movne	r3, #0
 80086a8:	eba6 0807 	sub.w	r8, r6, r7
 80086ac:	608b      	str	r3, [r1, #8]
 80086ae:	f1b8 0f00 	cmp.w	r8, #0
 80086b2:	dd9c      	ble.n	80085ee <__sflush_r+0x1a>
 80086b4:	6a21      	ldr	r1, [r4, #32]
 80086b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80086b8:	4643      	mov	r3, r8
 80086ba:	463a      	mov	r2, r7
 80086bc:	4628      	mov	r0, r5
 80086be:	47b0      	blx	r6
 80086c0:	2800      	cmp	r0, #0
 80086c2:	dc06      	bgt.n	80086d2 <__sflush_r+0xfe>
 80086c4:	89a3      	ldrh	r3, [r4, #12]
 80086c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086ca:	81a3      	strh	r3, [r4, #12]
 80086cc:	f04f 30ff 	mov.w	r0, #4294967295
 80086d0:	e78e      	b.n	80085f0 <__sflush_r+0x1c>
 80086d2:	4407      	add	r7, r0
 80086d4:	eba8 0800 	sub.w	r8, r8, r0
 80086d8:	e7e9      	b.n	80086ae <__sflush_r+0xda>
 80086da:	bf00      	nop
 80086dc:	dfbffffe 	.word	0xdfbffffe

080086e0 <_fflush_r>:
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	690b      	ldr	r3, [r1, #16]
 80086e4:	4605      	mov	r5, r0
 80086e6:	460c      	mov	r4, r1
 80086e8:	b913      	cbnz	r3, 80086f0 <_fflush_r+0x10>
 80086ea:	2500      	movs	r5, #0
 80086ec:	4628      	mov	r0, r5
 80086ee:	bd38      	pop	{r3, r4, r5, pc}
 80086f0:	b118      	cbz	r0, 80086fa <_fflush_r+0x1a>
 80086f2:	6a03      	ldr	r3, [r0, #32]
 80086f4:	b90b      	cbnz	r3, 80086fa <_fflush_r+0x1a>
 80086f6:	f7fd fa37 	bl	8005b68 <__sinit>
 80086fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d0f3      	beq.n	80086ea <_fflush_r+0xa>
 8008702:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008704:	07d0      	lsls	r0, r2, #31
 8008706:	d404      	bmi.n	8008712 <_fflush_r+0x32>
 8008708:	0599      	lsls	r1, r3, #22
 800870a:	d402      	bmi.n	8008712 <_fflush_r+0x32>
 800870c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800870e:	f7fd fb42 	bl	8005d96 <__retarget_lock_acquire_recursive>
 8008712:	4628      	mov	r0, r5
 8008714:	4621      	mov	r1, r4
 8008716:	f7ff ff5d 	bl	80085d4 <__sflush_r>
 800871a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800871c:	07da      	lsls	r2, r3, #31
 800871e:	4605      	mov	r5, r0
 8008720:	d4e4      	bmi.n	80086ec <_fflush_r+0xc>
 8008722:	89a3      	ldrh	r3, [r4, #12]
 8008724:	059b      	lsls	r3, r3, #22
 8008726:	d4e1      	bmi.n	80086ec <_fflush_r+0xc>
 8008728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800872a:	f7fd fb35 	bl	8005d98 <__retarget_lock_release_recursive>
 800872e:	e7dd      	b.n	80086ec <_fflush_r+0xc>

08008730 <memmove>:
 8008730:	4288      	cmp	r0, r1
 8008732:	b510      	push	{r4, lr}
 8008734:	eb01 0402 	add.w	r4, r1, r2
 8008738:	d902      	bls.n	8008740 <memmove+0x10>
 800873a:	4284      	cmp	r4, r0
 800873c:	4623      	mov	r3, r4
 800873e:	d807      	bhi.n	8008750 <memmove+0x20>
 8008740:	1e43      	subs	r3, r0, #1
 8008742:	42a1      	cmp	r1, r4
 8008744:	d008      	beq.n	8008758 <memmove+0x28>
 8008746:	f811 2b01 	ldrb.w	r2, [r1], #1
 800874a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800874e:	e7f8      	b.n	8008742 <memmove+0x12>
 8008750:	4402      	add	r2, r0
 8008752:	4601      	mov	r1, r0
 8008754:	428a      	cmp	r2, r1
 8008756:	d100      	bne.n	800875a <memmove+0x2a>
 8008758:	bd10      	pop	{r4, pc}
 800875a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800875e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008762:	e7f7      	b.n	8008754 <memmove+0x24>

08008764 <strncmp>:
 8008764:	b510      	push	{r4, lr}
 8008766:	b16a      	cbz	r2, 8008784 <strncmp+0x20>
 8008768:	3901      	subs	r1, #1
 800876a:	1884      	adds	r4, r0, r2
 800876c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008770:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008774:	429a      	cmp	r2, r3
 8008776:	d103      	bne.n	8008780 <strncmp+0x1c>
 8008778:	42a0      	cmp	r0, r4
 800877a:	d001      	beq.n	8008780 <strncmp+0x1c>
 800877c:	2a00      	cmp	r2, #0
 800877e:	d1f5      	bne.n	800876c <strncmp+0x8>
 8008780:	1ad0      	subs	r0, r2, r3
 8008782:	bd10      	pop	{r4, pc}
 8008784:	4610      	mov	r0, r2
 8008786:	e7fc      	b.n	8008782 <strncmp+0x1e>

08008788 <_sbrk_r>:
 8008788:	b538      	push	{r3, r4, r5, lr}
 800878a:	4d06      	ldr	r5, [pc, #24]	; (80087a4 <_sbrk_r+0x1c>)
 800878c:	2300      	movs	r3, #0
 800878e:	4604      	mov	r4, r0
 8008790:	4608      	mov	r0, r1
 8008792:	602b      	str	r3, [r5, #0]
 8008794:	f7f9 fa16 	bl	8001bc4 <_sbrk>
 8008798:	1c43      	adds	r3, r0, #1
 800879a:	d102      	bne.n	80087a2 <_sbrk_r+0x1a>
 800879c:	682b      	ldr	r3, [r5, #0]
 800879e:	b103      	cbz	r3, 80087a2 <_sbrk_r+0x1a>
 80087a0:	6023      	str	r3, [r4, #0]
 80087a2:	bd38      	pop	{r3, r4, r5, pc}
 80087a4:	20000900 	.word	0x20000900

080087a8 <memcpy>:
 80087a8:	440a      	add	r2, r1
 80087aa:	4291      	cmp	r1, r2
 80087ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80087b0:	d100      	bne.n	80087b4 <memcpy+0xc>
 80087b2:	4770      	bx	lr
 80087b4:	b510      	push	{r4, lr}
 80087b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087be:	4291      	cmp	r1, r2
 80087c0:	d1f9      	bne.n	80087b6 <memcpy+0xe>
 80087c2:	bd10      	pop	{r4, pc}
 80087c4:	0000      	movs	r0, r0
	...

080087c8 <nan>:
 80087c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80087d0 <nan+0x8>
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	00000000 	.word	0x00000000
 80087d4:	7ff80000 	.word	0x7ff80000

080087d8 <__assert_func>:
 80087d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087da:	4614      	mov	r4, r2
 80087dc:	461a      	mov	r2, r3
 80087de:	4b09      	ldr	r3, [pc, #36]	; (8008804 <__assert_func+0x2c>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4605      	mov	r5, r0
 80087e4:	68d8      	ldr	r0, [r3, #12]
 80087e6:	b14c      	cbz	r4, 80087fc <__assert_func+0x24>
 80087e8:	4b07      	ldr	r3, [pc, #28]	; (8008808 <__assert_func+0x30>)
 80087ea:	9100      	str	r1, [sp, #0]
 80087ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087f0:	4906      	ldr	r1, [pc, #24]	; (800880c <__assert_func+0x34>)
 80087f2:	462b      	mov	r3, r5
 80087f4:	f000 fbca 	bl	8008f8c <fiprintf>
 80087f8:	f000 fbda 	bl	8008fb0 <abort>
 80087fc:	4b04      	ldr	r3, [pc, #16]	; (8008810 <__assert_func+0x38>)
 80087fe:	461c      	mov	r4, r3
 8008800:	e7f3      	b.n	80087ea <__assert_func+0x12>
 8008802:	bf00      	nop
 8008804:	200001f4 	.word	0x200001f4
 8008808:	080098e2 	.word	0x080098e2
 800880c:	080098ef 	.word	0x080098ef
 8008810:	0800991d 	.word	0x0800991d

08008814 <_calloc_r>:
 8008814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008816:	fba1 2402 	umull	r2, r4, r1, r2
 800881a:	b94c      	cbnz	r4, 8008830 <_calloc_r+0x1c>
 800881c:	4611      	mov	r1, r2
 800881e:	9201      	str	r2, [sp, #4]
 8008820:	f7fe f9b0 	bl	8006b84 <_malloc_r>
 8008824:	9a01      	ldr	r2, [sp, #4]
 8008826:	4605      	mov	r5, r0
 8008828:	b930      	cbnz	r0, 8008838 <_calloc_r+0x24>
 800882a:	4628      	mov	r0, r5
 800882c:	b003      	add	sp, #12
 800882e:	bd30      	pop	{r4, r5, pc}
 8008830:	220c      	movs	r2, #12
 8008832:	6002      	str	r2, [r0, #0]
 8008834:	2500      	movs	r5, #0
 8008836:	e7f8      	b.n	800882a <_calloc_r+0x16>
 8008838:	4621      	mov	r1, r4
 800883a:	f7fd fa2e 	bl	8005c9a <memset>
 800883e:	e7f4      	b.n	800882a <_calloc_r+0x16>

08008840 <rshift>:
 8008840:	6903      	ldr	r3, [r0, #16]
 8008842:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008846:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800884a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800884e:	f100 0414 	add.w	r4, r0, #20
 8008852:	dd45      	ble.n	80088e0 <rshift+0xa0>
 8008854:	f011 011f 	ands.w	r1, r1, #31
 8008858:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800885c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008860:	d10c      	bne.n	800887c <rshift+0x3c>
 8008862:	f100 0710 	add.w	r7, r0, #16
 8008866:	4629      	mov	r1, r5
 8008868:	42b1      	cmp	r1, r6
 800886a:	d334      	bcc.n	80088d6 <rshift+0x96>
 800886c:	1a9b      	subs	r3, r3, r2
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	1eea      	subs	r2, r5, #3
 8008872:	4296      	cmp	r6, r2
 8008874:	bf38      	it	cc
 8008876:	2300      	movcc	r3, #0
 8008878:	4423      	add	r3, r4
 800887a:	e015      	b.n	80088a8 <rshift+0x68>
 800887c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008880:	f1c1 0820 	rsb	r8, r1, #32
 8008884:	40cf      	lsrs	r7, r1
 8008886:	f105 0e04 	add.w	lr, r5, #4
 800888a:	46a1      	mov	r9, r4
 800888c:	4576      	cmp	r6, lr
 800888e:	46f4      	mov	ip, lr
 8008890:	d815      	bhi.n	80088be <rshift+0x7e>
 8008892:	1a9a      	subs	r2, r3, r2
 8008894:	0092      	lsls	r2, r2, #2
 8008896:	3a04      	subs	r2, #4
 8008898:	3501      	adds	r5, #1
 800889a:	42ae      	cmp	r6, r5
 800889c:	bf38      	it	cc
 800889e:	2200      	movcc	r2, #0
 80088a0:	18a3      	adds	r3, r4, r2
 80088a2:	50a7      	str	r7, [r4, r2]
 80088a4:	b107      	cbz	r7, 80088a8 <rshift+0x68>
 80088a6:	3304      	adds	r3, #4
 80088a8:	1b1a      	subs	r2, r3, r4
 80088aa:	42a3      	cmp	r3, r4
 80088ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80088b0:	bf08      	it	eq
 80088b2:	2300      	moveq	r3, #0
 80088b4:	6102      	str	r2, [r0, #16]
 80088b6:	bf08      	it	eq
 80088b8:	6143      	streq	r3, [r0, #20]
 80088ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088be:	f8dc c000 	ldr.w	ip, [ip]
 80088c2:	fa0c fc08 	lsl.w	ip, ip, r8
 80088c6:	ea4c 0707 	orr.w	r7, ip, r7
 80088ca:	f849 7b04 	str.w	r7, [r9], #4
 80088ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 80088d2:	40cf      	lsrs	r7, r1
 80088d4:	e7da      	b.n	800888c <rshift+0x4c>
 80088d6:	f851 cb04 	ldr.w	ip, [r1], #4
 80088da:	f847 cf04 	str.w	ip, [r7, #4]!
 80088de:	e7c3      	b.n	8008868 <rshift+0x28>
 80088e0:	4623      	mov	r3, r4
 80088e2:	e7e1      	b.n	80088a8 <rshift+0x68>

080088e4 <__hexdig_fun>:
 80088e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80088e8:	2b09      	cmp	r3, #9
 80088ea:	d802      	bhi.n	80088f2 <__hexdig_fun+0xe>
 80088ec:	3820      	subs	r0, #32
 80088ee:	b2c0      	uxtb	r0, r0
 80088f0:	4770      	bx	lr
 80088f2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80088f6:	2b05      	cmp	r3, #5
 80088f8:	d801      	bhi.n	80088fe <__hexdig_fun+0x1a>
 80088fa:	3847      	subs	r0, #71	; 0x47
 80088fc:	e7f7      	b.n	80088ee <__hexdig_fun+0xa>
 80088fe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008902:	2b05      	cmp	r3, #5
 8008904:	d801      	bhi.n	800890a <__hexdig_fun+0x26>
 8008906:	3827      	subs	r0, #39	; 0x27
 8008908:	e7f1      	b.n	80088ee <__hexdig_fun+0xa>
 800890a:	2000      	movs	r0, #0
 800890c:	4770      	bx	lr
	...

08008910 <__gethex>:
 8008910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008914:	4617      	mov	r7, r2
 8008916:	680a      	ldr	r2, [r1, #0]
 8008918:	b085      	sub	sp, #20
 800891a:	f102 0b02 	add.w	fp, r2, #2
 800891e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008922:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008926:	4681      	mov	r9, r0
 8008928:	468a      	mov	sl, r1
 800892a:	9302      	str	r3, [sp, #8]
 800892c:	32fe      	adds	r2, #254	; 0xfe
 800892e:	eb02 030b 	add.w	r3, r2, fp
 8008932:	46d8      	mov	r8, fp
 8008934:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008938:	9301      	str	r3, [sp, #4]
 800893a:	2830      	cmp	r0, #48	; 0x30
 800893c:	d0f7      	beq.n	800892e <__gethex+0x1e>
 800893e:	f7ff ffd1 	bl	80088e4 <__hexdig_fun>
 8008942:	4604      	mov	r4, r0
 8008944:	2800      	cmp	r0, #0
 8008946:	d138      	bne.n	80089ba <__gethex+0xaa>
 8008948:	49a7      	ldr	r1, [pc, #668]	; (8008be8 <__gethex+0x2d8>)
 800894a:	2201      	movs	r2, #1
 800894c:	4640      	mov	r0, r8
 800894e:	f7ff ff09 	bl	8008764 <strncmp>
 8008952:	4606      	mov	r6, r0
 8008954:	2800      	cmp	r0, #0
 8008956:	d169      	bne.n	8008a2c <__gethex+0x11c>
 8008958:	f898 0001 	ldrb.w	r0, [r8, #1]
 800895c:	465d      	mov	r5, fp
 800895e:	f7ff ffc1 	bl	80088e4 <__hexdig_fun>
 8008962:	2800      	cmp	r0, #0
 8008964:	d064      	beq.n	8008a30 <__gethex+0x120>
 8008966:	465a      	mov	r2, fp
 8008968:	7810      	ldrb	r0, [r2, #0]
 800896a:	2830      	cmp	r0, #48	; 0x30
 800896c:	4690      	mov	r8, r2
 800896e:	f102 0201 	add.w	r2, r2, #1
 8008972:	d0f9      	beq.n	8008968 <__gethex+0x58>
 8008974:	f7ff ffb6 	bl	80088e4 <__hexdig_fun>
 8008978:	2301      	movs	r3, #1
 800897a:	fab0 f480 	clz	r4, r0
 800897e:	0964      	lsrs	r4, r4, #5
 8008980:	465e      	mov	r6, fp
 8008982:	9301      	str	r3, [sp, #4]
 8008984:	4642      	mov	r2, r8
 8008986:	4615      	mov	r5, r2
 8008988:	3201      	adds	r2, #1
 800898a:	7828      	ldrb	r0, [r5, #0]
 800898c:	f7ff ffaa 	bl	80088e4 <__hexdig_fun>
 8008990:	2800      	cmp	r0, #0
 8008992:	d1f8      	bne.n	8008986 <__gethex+0x76>
 8008994:	4994      	ldr	r1, [pc, #592]	; (8008be8 <__gethex+0x2d8>)
 8008996:	2201      	movs	r2, #1
 8008998:	4628      	mov	r0, r5
 800899a:	f7ff fee3 	bl	8008764 <strncmp>
 800899e:	b978      	cbnz	r0, 80089c0 <__gethex+0xb0>
 80089a0:	b946      	cbnz	r6, 80089b4 <__gethex+0xa4>
 80089a2:	1c6e      	adds	r6, r5, #1
 80089a4:	4632      	mov	r2, r6
 80089a6:	4615      	mov	r5, r2
 80089a8:	3201      	adds	r2, #1
 80089aa:	7828      	ldrb	r0, [r5, #0]
 80089ac:	f7ff ff9a 	bl	80088e4 <__hexdig_fun>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d1f8      	bne.n	80089a6 <__gethex+0x96>
 80089b4:	1b73      	subs	r3, r6, r5
 80089b6:	009e      	lsls	r6, r3, #2
 80089b8:	e004      	b.n	80089c4 <__gethex+0xb4>
 80089ba:	2400      	movs	r4, #0
 80089bc:	4626      	mov	r6, r4
 80089be:	e7e1      	b.n	8008984 <__gethex+0x74>
 80089c0:	2e00      	cmp	r6, #0
 80089c2:	d1f7      	bne.n	80089b4 <__gethex+0xa4>
 80089c4:	782b      	ldrb	r3, [r5, #0]
 80089c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80089ca:	2b50      	cmp	r3, #80	; 0x50
 80089cc:	d13d      	bne.n	8008a4a <__gethex+0x13a>
 80089ce:	786b      	ldrb	r3, [r5, #1]
 80089d0:	2b2b      	cmp	r3, #43	; 0x2b
 80089d2:	d02f      	beq.n	8008a34 <__gethex+0x124>
 80089d4:	2b2d      	cmp	r3, #45	; 0x2d
 80089d6:	d031      	beq.n	8008a3c <__gethex+0x12c>
 80089d8:	1c69      	adds	r1, r5, #1
 80089da:	f04f 0b00 	mov.w	fp, #0
 80089de:	7808      	ldrb	r0, [r1, #0]
 80089e0:	f7ff ff80 	bl	80088e4 <__hexdig_fun>
 80089e4:	1e42      	subs	r2, r0, #1
 80089e6:	b2d2      	uxtb	r2, r2
 80089e8:	2a18      	cmp	r2, #24
 80089ea:	d82e      	bhi.n	8008a4a <__gethex+0x13a>
 80089ec:	f1a0 0210 	sub.w	r2, r0, #16
 80089f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80089f4:	f7ff ff76 	bl	80088e4 <__hexdig_fun>
 80089f8:	f100 3cff 	add.w	ip, r0, #4294967295
 80089fc:	fa5f fc8c 	uxtb.w	ip, ip
 8008a00:	f1bc 0f18 	cmp.w	ip, #24
 8008a04:	d91d      	bls.n	8008a42 <__gethex+0x132>
 8008a06:	f1bb 0f00 	cmp.w	fp, #0
 8008a0a:	d000      	beq.n	8008a0e <__gethex+0xfe>
 8008a0c:	4252      	negs	r2, r2
 8008a0e:	4416      	add	r6, r2
 8008a10:	f8ca 1000 	str.w	r1, [sl]
 8008a14:	b1dc      	cbz	r4, 8008a4e <__gethex+0x13e>
 8008a16:	9b01      	ldr	r3, [sp, #4]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	bf14      	ite	ne
 8008a1c:	f04f 0800 	movne.w	r8, #0
 8008a20:	f04f 0806 	moveq.w	r8, #6
 8008a24:	4640      	mov	r0, r8
 8008a26:	b005      	add	sp, #20
 8008a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a2c:	4645      	mov	r5, r8
 8008a2e:	4626      	mov	r6, r4
 8008a30:	2401      	movs	r4, #1
 8008a32:	e7c7      	b.n	80089c4 <__gethex+0xb4>
 8008a34:	f04f 0b00 	mov.w	fp, #0
 8008a38:	1ca9      	adds	r1, r5, #2
 8008a3a:	e7d0      	b.n	80089de <__gethex+0xce>
 8008a3c:	f04f 0b01 	mov.w	fp, #1
 8008a40:	e7fa      	b.n	8008a38 <__gethex+0x128>
 8008a42:	230a      	movs	r3, #10
 8008a44:	fb03 0002 	mla	r0, r3, r2, r0
 8008a48:	e7d0      	b.n	80089ec <__gethex+0xdc>
 8008a4a:	4629      	mov	r1, r5
 8008a4c:	e7e0      	b.n	8008a10 <__gethex+0x100>
 8008a4e:	eba5 0308 	sub.w	r3, r5, r8
 8008a52:	3b01      	subs	r3, #1
 8008a54:	4621      	mov	r1, r4
 8008a56:	2b07      	cmp	r3, #7
 8008a58:	dc0a      	bgt.n	8008a70 <__gethex+0x160>
 8008a5a:	4648      	mov	r0, r9
 8008a5c:	f7fe f91e 	bl	8006c9c <_Balloc>
 8008a60:	4604      	mov	r4, r0
 8008a62:	b940      	cbnz	r0, 8008a76 <__gethex+0x166>
 8008a64:	4b61      	ldr	r3, [pc, #388]	; (8008bec <__gethex+0x2dc>)
 8008a66:	4602      	mov	r2, r0
 8008a68:	21e4      	movs	r1, #228	; 0xe4
 8008a6a:	4861      	ldr	r0, [pc, #388]	; (8008bf0 <__gethex+0x2e0>)
 8008a6c:	f7ff feb4 	bl	80087d8 <__assert_func>
 8008a70:	3101      	adds	r1, #1
 8008a72:	105b      	asrs	r3, r3, #1
 8008a74:	e7ef      	b.n	8008a56 <__gethex+0x146>
 8008a76:	f100 0a14 	add.w	sl, r0, #20
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	495a      	ldr	r1, [pc, #360]	; (8008be8 <__gethex+0x2d8>)
 8008a7e:	f8cd a004 	str.w	sl, [sp, #4]
 8008a82:	469b      	mov	fp, r3
 8008a84:	45a8      	cmp	r8, r5
 8008a86:	d342      	bcc.n	8008b0e <__gethex+0x1fe>
 8008a88:	9801      	ldr	r0, [sp, #4]
 8008a8a:	f840 bb04 	str.w	fp, [r0], #4
 8008a8e:	eba0 000a 	sub.w	r0, r0, sl
 8008a92:	1080      	asrs	r0, r0, #2
 8008a94:	6120      	str	r0, [r4, #16]
 8008a96:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8008a9a:	4658      	mov	r0, fp
 8008a9c:	f7fe f9f0 	bl	8006e80 <__hi0bits>
 8008aa0:	683d      	ldr	r5, [r7, #0]
 8008aa2:	eba8 0000 	sub.w	r0, r8, r0
 8008aa6:	42a8      	cmp	r0, r5
 8008aa8:	dd59      	ble.n	8008b5e <__gethex+0x24e>
 8008aaa:	eba0 0805 	sub.w	r8, r0, r5
 8008aae:	4641      	mov	r1, r8
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f7fe fd7f 	bl	80075b4 <__any_on>
 8008ab6:	4683      	mov	fp, r0
 8008ab8:	b1b8      	cbz	r0, 8008aea <__gethex+0x1da>
 8008aba:	f108 33ff 	add.w	r3, r8, #4294967295
 8008abe:	1159      	asrs	r1, r3, #5
 8008ac0:	f003 021f 	and.w	r2, r3, #31
 8008ac4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008ac8:	f04f 0b01 	mov.w	fp, #1
 8008acc:	fa0b f202 	lsl.w	r2, fp, r2
 8008ad0:	420a      	tst	r2, r1
 8008ad2:	d00a      	beq.n	8008aea <__gethex+0x1da>
 8008ad4:	455b      	cmp	r3, fp
 8008ad6:	dd06      	ble.n	8008ae6 <__gethex+0x1d6>
 8008ad8:	f1a8 0102 	sub.w	r1, r8, #2
 8008adc:	4620      	mov	r0, r4
 8008ade:	f7fe fd69 	bl	80075b4 <__any_on>
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	d138      	bne.n	8008b58 <__gethex+0x248>
 8008ae6:	f04f 0b02 	mov.w	fp, #2
 8008aea:	4641      	mov	r1, r8
 8008aec:	4620      	mov	r0, r4
 8008aee:	f7ff fea7 	bl	8008840 <rshift>
 8008af2:	4446      	add	r6, r8
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	42b3      	cmp	r3, r6
 8008af8:	da41      	bge.n	8008b7e <__gethex+0x26e>
 8008afa:	4621      	mov	r1, r4
 8008afc:	4648      	mov	r0, r9
 8008afe:	f7fe f90d 	bl	8006d1c <_Bfree>
 8008b02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b04:	2300      	movs	r3, #0
 8008b06:	6013      	str	r3, [r2, #0]
 8008b08:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008b0c:	e78a      	b.n	8008a24 <__gethex+0x114>
 8008b0e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008b12:	2a2e      	cmp	r2, #46	; 0x2e
 8008b14:	d014      	beq.n	8008b40 <__gethex+0x230>
 8008b16:	2b20      	cmp	r3, #32
 8008b18:	d106      	bne.n	8008b28 <__gethex+0x218>
 8008b1a:	9b01      	ldr	r3, [sp, #4]
 8008b1c:	f843 bb04 	str.w	fp, [r3], #4
 8008b20:	f04f 0b00 	mov.w	fp, #0
 8008b24:	9301      	str	r3, [sp, #4]
 8008b26:	465b      	mov	r3, fp
 8008b28:	7828      	ldrb	r0, [r5, #0]
 8008b2a:	9303      	str	r3, [sp, #12]
 8008b2c:	f7ff feda 	bl	80088e4 <__hexdig_fun>
 8008b30:	9b03      	ldr	r3, [sp, #12]
 8008b32:	f000 000f 	and.w	r0, r0, #15
 8008b36:	4098      	lsls	r0, r3
 8008b38:	ea4b 0b00 	orr.w	fp, fp, r0
 8008b3c:	3304      	adds	r3, #4
 8008b3e:	e7a1      	b.n	8008a84 <__gethex+0x174>
 8008b40:	45a8      	cmp	r8, r5
 8008b42:	d8e8      	bhi.n	8008b16 <__gethex+0x206>
 8008b44:	2201      	movs	r2, #1
 8008b46:	4628      	mov	r0, r5
 8008b48:	9303      	str	r3, [sp, #12]
 8008b4a:	f7ff fe0b 	bl	8008764 <strncmp>
 8008b4e:	4926      	ldr	r1, [pc, #152]	; (8008be8 <__gethex+0x2d8>)
 8008b50:	9b03      	ldr	r3, [sp, #12]
 8008b52:	2800      	cmp	r0, #0
 8008b54:	d1df      	bne.n	8008b16 <__gethex+0x206>
 8008b56:	e795      	b.n	8008a84 <__gethex+0x174>
 8008b58:	f04f 0b03 	mov.w	fp, #3
 8008b5c:	e7c5      	b.n	8008aea <__gethex+0x1da>
 8008b5e:	da0b      	bge.n	8008b78 <__gethex+0x268>
 8008b60:	eba5 0800 	sub.w	r8, r5, r0
 8008b64:	4621      	mov	r1, r4
 8008b66:	4642      	mov	r2, r8
 8008b68:	4648      	mov	r0, r9
 8008b6a:	f7fe faf1 	bl	8007150 <__lshift>
 8008b6e:	eba6 0608 	sub.w	r6, r6, r8
 8008b72:	4604      	mov	r4, r0
 8008b74:	f100 0a14 	add.w	sl, r0, #20
 8008b78:	f04f 0b00 	mov.w	fp, #0
 8008b7c:	e7ba      	b.n	8008af4 <__gethex+0x1e4>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	42b3      	cmp	r3, r6
 8008b82:	dd73      	ble.n	8008c6c <__gethex+0x35c>
 8008b84:	1b9e      	subs	r6, r3, r6
 8008b86:	42b5      	cmp	r5, r6
 8008b88:	dc34      	bgt.n	8008bf4 <__gethex+0x2e4>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	d023      	beq.n	8008bd8 <__gethex+0x2c8>
 8008b90:	2b03      	cmp	r3, #3
 8008b92:	d025      	beq.n	8008be0 <__gethex+0x2d0>
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d115      	bne.n	8008bc4 <__gethex+0x2b4>
 8008b98:	42b5      	cmp	r5, r6
 8008b9a:	d113      	bne.n	8008bc4 <__gethex+0x2b4>
 8008b9c:	2d01      	cmp	r5, #1
 8008b9e:	d10b      	bne.n	8008bb8 <__gethex+0x2a8>
 8008ba0:	9a02      	ldr	r2, [sp, #8]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6013      	str	r3, [r2, #0]
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	6123      	str	r3, [r4, #16]
 8008baa:	f8ca 3000 	str.w	r3, [sl]
 8008bae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bb0:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008bb4:	601c      	str	r4, [r3, #0]
 8008bb6:	e735      	b.n	8008a24 <__gethex+0x114>
 8008bb8:	1e69      	subs	r1, r5, #1
 8008bba:	4620      	mov	r0, r4
 8008bbc:	f7fe fcfa 	bl	80075b4 <__any_on>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	d1ed      	bne.n	8008ba0 <__gethex+0x290>
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	4648      	mov	r0, r9
 8008bc8:	f7fe f8a8 	bl	8006d1c <_Bfree>
 8008bcc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bce:	2300      	movs	r3, #0
 8008bd0:	6013      	str	r3, [r2, #0]
 8008bd2:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008bd6:	e725      	b.n	8008a24 <__gethex+0x114>
 8008bd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1f2      	bne.n	8008bc4 <__gethex+0x2b4>
 8008bde:	e7df      	b.n	8008ba0 <__gethex+0x290>
 8008be0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1dc      	bne.n	8008ba0 <__gethex+0x290>
 8008be6:	e7ed      	b.n	8008bc4 <__gethex+0x2b4>
 8008be8:	08009774 	.word	0x08009774
 8008bec:	0800960d 	.word	0x0800960d
 8008bf0:	0800991e 	.word	0x0800991e
 8008bf4:	f106 38ff 	add.w	r8, r6, #4294967295
 8008bf8:	f1bb 0f00 	cmp.w	fp, #0
 8008bfc:	d133      	bne.n	8008c66 <__gethex+0x356>
 8008bfe:	f1b8 0f00 	cmp.w	r8, #0
 8008c02:	d004      	beq.n	8008c0e <__gethex+0x2fe>
 8008c04:	4641      	mov	r1, r8
 8008c06:	4620      	mov	r0, r4
 8008c08:	f7fe fcd4 	bl	80075b4 <__any_on>
 8008c0c:	4683      	mov	fp, r0
 8008c0e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008c12:	2301      	movs	r3, #1
 8008c14:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008c18:	f008 081f 	and.w	r8, r8, #31
 8008c1c:	fa03 f308 	lsl.w	r3, r3, r8
 8008c20:	4213      	tst	r3, r2
 8008c22:	4631      	mov	r1, r6
 8008c24:	4620      	mov	r0, r4
 8008c26:	bf18      	it	ne
 8008c28:	f04b 0b02 	orrne.w	fp, fp, #2
 8008c2c:	1bad      	subs	r5, r5, r6
 8008c2e:	f7ff fe07 	bl	8008840 <rshift>
 8008c32:	687e      	ldr	r6, [r7, #4]
 8008c34:	f04f 0802 	mov.w	r8, #2
 8008c38:	f1bb 0f00 	cmp.w	fp, #0
 8008c3c:	d04a      	beq.n	8008cd4 <__gethex+0x3c4>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d016      	beq.n	8008c72 <__gethex+0x362>
 8008c44:	2b03      	cmp	r3, #3
 8008c46:	d018      	beq.n	8008c7a <__gethex+0x36a>
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d109      	bne.n	8008c60 <__gethex+0x350>
 8008c4c:	f01b 0f02 	tst.w	fp, #2
 8008c50:	d006      	beq.n	8008c60 <__gethex+0x350>
 8008c52:	f8da 3000 	ldr.w	r3, [sl]
 8008c56:	ea4b 0b03 	orr.w	fp, fp, r3
 8008c5a:	f01b 0f01 	tst.w	fp, #1
 8008c5e:	d10f      	bne.n	8008c80 <__gethex+0x370>
 8008c60:	f048 0810 	orr.w	r8, r8, #16
 8008c64:	e036      	b.n	8008cd4 <__gethex+0x3c4>
 8008c66:	f04f 0b01 	mov.w	fp, #1
 8008c6a:	e7d0      	b.n	8008c0e <__gethex+0x2fe>
 8008c6c:	f04f 0801 	mov.w	r8, #1
 8008c70:	e7e2      	b.n	8008c38 <__gethex+0x328>
 8008c72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c74:	f1c3 0301 	rsb	r3, r3, #1
 8008c78:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d0ef      	beq.n	8008c60 <__gethex+0x350>
 8008c80:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008c84:	f104 0214 	add.w	r2, r4, #20
 8008c88:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008c8c:	9301      	str	r3, [sp, #4]
 8008c8e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008c92:	2300      	movs	r3, #0
 8008c94:	4694      	mov	ip, r2
 8008c96:	f852 1b04 	ldr.w	r1, [r2], #4
 8008c9a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008c9e:	d01e      	beq.n	8008cde <__gethex+0x3ce>
 8008ca0:	3101      	adds	r1, #1
 8008ca2:	f8cc 1000 	str.w	r1, [ip]
 8008ca6:	f1b8 0f02 	cmp.w	r8, #2
 8008caa:	f104 0214 	add.w	r2, r4, #20
 8008cae:	d13d      	bne.n	8008d2c <__gethex+0x41c>
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	42ab      	cmp	r3, r5
 8008cb6:	d10b      	bne.n	8008cd0 <__gethex+0x3c0>
 8008cb8:	1169      	asrs	r1, r5, #5
 8008cba:	2301      	movs	r3, #1
 8008cbc:	f005 051f 	and.w	r5, r5, #31
 8008cc0:	fa03 f505 	lsl.w	r5, r3, r5
 8008cc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008cc8:	421d      	tst	r5, r3
 8008cca:	bf18      	it	ne
 8008ccc:	f04f 0801 	movne.w	r8, #1
 8008cd0:	f048 0820 	orr.w	r8, r8, #32
 8008cd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cd6:	601c      	str	r4, [r3, #0]
 8008cd8:	9b02      	ldr	r3, [sp, #8]
 8008cda:	601e      	str	r6, [r3, #0]
 8008cdc:	e6a2      	b.n	8008a24 <__gethex+0x114>
 8008cde:	4290      	cmp	r0, r2
 8008ce0:	f842 3c04 	str.w	r3, [r2, #-4]
 8008ce4:	d8d6      	bhi.n	8008c94 <__gethex+0x384>
 8008ce6:	68a2      	ldr	r2, [r4, #8]
 8008ce8:	4593      	cmp	fp, r2
 8008cea:	db17      	blt.n	8008d1c <__gethex+0x40c>
 8008cec:	6861      	ldr	r1, [r4, #4]
 8008cee:	4648      	mov	r0, r9
 8008cf0:	3101      	adds	r1, #1
 8008cf2:	f7fd ffd3 	bl	8006c9c <_Balloc>
 8008cf6:	4682      	mov	sl, r0
 8008cf8:	b918      	cbnz	r0, 8008d02 <__gethex+0x3f2>
 8008cfa:	4b1b      	ldr	r3, [pc, #108]	; (8008d68 <__gethex+0x458>)
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	2184      	movs	r1, #132	; 0x84
 8008d00:	e6b3      	b.n	8008a6a <__gethex+0x15a>
 8008d02:	6922      	ldr	r2, [r4, #16]
 8008d04:	3202      	adds	r2, #2
 8008d06:	f104 010c 	add.w	r1, r4, #12
 8008d0a:	0092      	lsls	r2, r2, #2
 8008d0c:	300c      	adds	r0, #12
 8008d0e:	f7ff fd4b 	bl	80087a8 <memcpy>
 8008d12:	4621      	mov	r1, r4
 8008d14:	4648      	mov	r0, r9
 8008d16:	f7fe f801 	bl	8006d1c <_Bfree>
 8008d1a:	4654      	mov	r4, sl
 8008d1c:	6922      	ldr	r2, [r4, #16]
 8008d1e:	1c51      	adds	r1, r2, #1
 8008d20:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008d24:	6121      	str	r1, [r4, #16]
 8008d26:	2101      	movs	r1, #1
 8008d28:	6151      	str	r1, [r2, #20]
 8008d2a:	e7bc      	b.n	8008ca6 <__gethex+0x396>
 8008d2c:	6921      	ldr	r1, [r4, #16]
 8008d2e:	4559      	cmp	r1, fp
 8008d30:	dd0b      	ble.n	8008d4a <__gethex+0x43a>
 8008d32:	2101      	movs	r1, #1
 8008d34:	4620      	mov	r0, r4
 8008d36:	f7ff fd83 	bl	8008840 <rshift>
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	3601      	adds	r6, #1
 8008d3e:	42b3      	cmp	r3, r6
 8008d40:	f6ff aedb 	blt.w	8008afa <__gethex+0x1ea>
 8008d44:	f04f 0801 	mov.w	r8, #1
 8008d48:	e7c2      	b.n	8008cd0 <__gethex+0x3c0>
 8008d4a:	f015 051f 	ands.w	r5, r5, #31
 8008d4e:	d0f9      	beq.n	8008d44 <__gethex+0x434>
 8008d50:	9b01      	ldr	r3, [sp, #4]
 8008d52:	441a      	add	r2, r3
 8008d54:	f1c5 0520 	rsb	r5, r5, #32
 8008d58:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008d5c:	f7fe f890 	bl	8006e80 <__hi0bits>
 8008d60:	42a8      	cmp	r0, r5
 8008d62:	dbe6      	blt.n	8008d32 <__gethex+0x422>
 8008d64:	e7ee      	b.n	8008d44 <__gethex+0x434>
 8008d66:	bf00      	nop
 8008d68:	0800960d 	.word	0x0800960d

08008d6c <L_shift>:
 8008d6c:	f1c2 0208 	rsb	r2, r2, #8
 8008d70:	0092      	lsls	r2, r2, #2
 8008d72:	b570      	push	{r4, r5, r6, lr}
 8008d74:	f1c2 0620 	rsb	r6, r2, #32
 8008d78:	6843      	ldr	r3, [r0, #4]
 8008d7a:	6804      	ldr	r4, [r0, #0]
 8008d7c:	fa03 f506 	lsl.w	r5, r3, r6
 8008d80:	432c      	orrs	r4, r5
 8008d82:	40d3      	lsrs	r3, r2
 8008d84:	6004      	str	r4, [r0, #0]
 8008d86:	f840 3f04 	str.w	r3, [r0, #4]!
 8008d8a:	4288      	cmp	r0, r1
 8008d8c:	d3f4      	bcc.n	8008d78 <L_shift+0xc>
 8008d8e:	bd70      	pop	{r4, r5, r6, pc}

08008d90 <__match>:
 8008d90:	b530      	push	{r4, r5, lr}
 8008d92:	6803      	ldr	r3, [r0, #0]
 8008d94:	3301      	adds	r3, #1
 8008d96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d9a:	b914      	cbnz	r4, 8008da2 <__match+0x12>
 8008d9c:	6003      	str	r3, [r0, #0]
 8008d9e:	2001      	movs	r0, #1
 8008da0:	bd30      	pop	{r4, r5, pc}
 8008da2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008da6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008daa:	2d19      	cmp	r5, #25
 8008dac:	bf98      	it	ls
 8008dae:	3220      	addls	r2, #32
 8008db0:	42a2      	cmp	r2, r4
 8008db2:	d0f0      	beq.n	8008d96 <__match+0x6>
 8008db4:	2000      	movs	r0, #0
 8008db6:	e7f3      	b.n	8008da0 <__match+0x10>

08008db8 <__hexnan>:
 8008db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dbc:	680b      	ldr	r3, [r1, #0]
 8008dbe:	6801      	ldr	r1, [r0, #0]
 8008dc0:	115e      	asrs	r6, r3, #5
 8008dc2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008dc6:	f013 031f 	ands.w	r3, r3, #31
 8008dca:	b087      	sub	sp, #28
 8008dcc:	bf18      	it	ne
 8008dce:	3604      	addne	r6, #4
 8008dd0:	2500      	movs	r5, #0
 8008dd2:	1f37      	subs	r7, r6, #4
 8008dd4:	4682      	mov	sl, r0
 8008dd6:	4690      	mov	r8, r2
 8008dd8:	9301      	str	r3, [sp, #4]
 8008dda:	f846 5c04 	str.w	r5, [r6, #-4]
 8008dde:	46b9      	mov	r9, r7
 8008de0:	463c      	mov	r4, r7
 8008de2:	9502      	str	r5, [sp, #8]
 8008de4:	46ab      	mov	fp, r5
 8008de6:	784a      	ldrb	r2, [r1, #1]
 8008de8:	1c4b      	adds	r3, r1, #1
 8008dea:	9303      	str	r3, [sp, #12]
 8008dec:	b342      	cbz	r2, 8008e40 <__hexnan+0x88>
 8008dee:	4610      	mov	r0, r2
 8008df0:	9105      	str	r1, [sp, #20]
 8008df2:	9204      	str	r2, [sp, #16]
 8008df4:	f7ff fd76 	bl	80088e4 <__hexdig_fun>
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	d14f      	bne.n	8008e9c <__hexnan+0xe4>
 8008dfc:	9a04      	ldr	r2, [sp, #16]
 8008dfe:	9905      	ldr	r1, [sp, #20]
 8008e00:	2a20      	cmp	r2, #32
 8008e02:	d818      	bhi.n	8008e36 <__hexnan+0x7e>
 8008e04:	9b02      	ldr	r3, [sp, #8]
 8008e06:	459b      	cmp	fp, r3
 8008e08:	dd13      	ble.n	8008e32 <__hexnan+0x7a>
 8008e0a:	454c      	cmp	r4, r9
 8008e0c:	d206      	bcs.n	8008e1c <__hexnan+0x64>
 8008e0e:	2d07      	cmp	r5, #7
 8008e10:	dc04      	bgt.n	8008e1c <__hexnan+0x64>
 8008e12:	462a      	mov	r2, r5
 8008e14:	4649      	mov	r1, r9
 8008e16:	4620      	mov	r0, r4
 8008e18:	f7ff ffa8 	bl	8008d6c <L_shift>
 8008e1c:	4544      	cmp	r4, r8
 8008e1e:	d950      	bls.n	8008ec2 <__hexnan+0x10a>
 8008e20:	2300      	movs	r3, #0
 8008e22:	f1a4 0904 	sub.w	r9, r4, #4
 8008e26:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e2a:	f8cd b008 	str.w	fp, [sp, #8]
 8008e2e:	464c      	mov	r4, r9
 8008e30:	461d      	mov	r5, r3
 8008e32:	9903      	ldr	r1, [sp, #12]
 8008e34:	e7d7      	b.n	8008de6 <__hexnan+0x2e>
 8008e36:	2a29      	cmp	r2, #41	; 0x29
 8008e38:	d155      	bne.n	8008ee6 <__hexnan+0x12e>
 8008e3a:	3102      	adds	r1, #2
 8008e3c:	f8ca 1000 	str.w	r1, [sl]
 8008e40:	f1bb 0f00 	cmp.w	fp, #0
 8008e44:	d04f      	beq.n	8008ee6 <__hexnan+0x12e>
 8008e46:	454c      	cmp	r4, r9
 8008e48:	d206      	bcs.n	8008e58 <__hexnan+0xa0>
 8008e4a:	2d07      	cmp	r5, #7
 8008e4c:	dc04      	bgt.n	8008e58 <__hexnan+0xa0>
 8008e4e:	462a      	mov	r2, r5
 8008e50:	4649      	mov	r1, r9
 8008e52:	4620      	mov	r0, r4
 8008e54:	f7ff ff8a 	bl	8008d6c <L_shift>
 8008e58:	4544      	cmp	r4, r8
 8008e5a:	d934      	bls.n	8008ec6 <__hexnan+0x10e>
 8008e5c:	f1a8 0204 	sub.w	r2, r8, #4
 8008e60:	4623      	mov	r3, r4
 8008e62:	f853 1b04 	ldr.w	r1, [r3], #4
 8008e66:	f842 1f04 	str.w	r1, [r2, #4]!
 8008e6a:	429f      	cmp	r7, r3
 8008e6c:	d2f9      	bcs.n	8008e62 <__hexnan+0xaa>
 8008e6e:	1b3b      	subs	r3, r7, r4
 8008e70:	f023 0303 	bic.w	r3, r3, #3
 8008e74:	3304      	adds	r3, #4
 8008e76:	3e03      	subs	r6, #3
 8008e78:	3401      	adds	r4, #1
 8008e7a:	42a6      	cmp	r6, r4
 8008e7c:	bf38      	it	cc
 8008e7e:	2304      	movcc	r3, #4
 8008e80:	4443      	add	r3, r8
 8008e82:	2200      	movs	r2, #0
 8008e84:	f843 2b04 	str.w	r2, [r3], #4
 8008e88:	429f      	cmp	r7, r3
 8008e8a:	d2fb      	bcs.n	8008e84 <__hexnan+0xcc>
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	b91b      	cbnz	r3, 8008e98 <__hexnan+0xe0>
 8008e90:	4547      	cmp	r7, r8
 8008e92:	d126      	bne.n	8008ee2 <__hexnan+0x12a>
 8008e94:	2301      	movs	r3, #1
 8008e96:	603b      	str	r3, [r7, #0]
 8008e98:	2005      	movs	r0, #5
 8008e9a:	e025      	b.n	8008ee8 <__hexnan+0x130>
 8008e9c:	3501      	adds	r5, #1
 8008e9e:	2d08      	cmp	r5, #8
 8008ea0:	f10b 0b01 	add.w	fp, fp, #1
 8008ea4:	dd06      	ble.n	8008eb4 <__hexnan+0xfc>
 8008ea6:	4544      	cmp	r4, r8
 8008ea8:	d9c3      	bls.n	8008e32 <__hexnan+0x7a>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	f844 3c04 	str.w	r3, [r4, #-4]
 8008eb0:	2501      	movs	r5, #1
 8008eb2:	3c04      	subs	r4, #4
 8008eb4:	6822      	ldr	r2, [r4, #0]
 8008eb6:	f000 000f 	and.w	r0, r0, #15
 8008eba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008ebe:	6020      	str	r0, [r4, #0]
 8008ec0:	e7b7      	b.n	8008e32 <__hexnan+0x7a>
 8008ec2:	2508      	movs	r5, #8
 8008ec4:	e7b5      	b.n	8008e32 <__hexnan+0x7a>
 8008ec6:	9b01      	ldr	r3, [sp, #4]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d0df      	beq.n	8008e8c <__hexnan+0xd4>
 8008ecc:	f1c3 0320 	rsb	r3, r3, #32
 8008ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed4:	40da      	lsrs	r2, r3
 8008ed6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008eda:	4013      	ands	r3, r2
 8008edc:	f846 3c04 	str.w	r3, [r6, #-4]
 8008ee0:	e7d4      	b.n	8008e8c <__hexnan+0xd4>
 8008ee2:	3f04      	subs	r7, #4
 8008ee4:	e7d2      	b.n	8008e8c <__hexnan+0xd4>
 8008ee6:	2004      	movs	r0, #4
 8008ee8:	b007      	add	sp, #28
 8008eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008eee <__ascii_mbtowc>:
 8008eee:	b082      	sub	sp, #8
 8008ef0:	b901      	cbnz	r1, 8008ef4 <__ascii_mbtowc+0x6>
 8008ef2:	a901      	add	r1, sp, #4
 8008ef4:	b142      	cbz	r2, 8008f08 <__ascii_mbtowc+0x1a>
 8008ef6:	b14b      	cbz	r3, 8008f0c <__ascii_mbtowc+0x1e>
 8008ef8:	7813      	ldrb	r3, [r2, #0]
 8008efa:	600b      	str	r3, [r1, #0]
 8008efc:	7812      	ldrb	r2, [r2, #0]
 8008efe:	1e10      	subs	r0, r2, #0
 8008f00:	bf18      	it	ne
 8008f02:	2001      	movne	r0, #1
 8008f04:	b002      	add	sp, #8
 8008f06:	4770      	bx	lr
 8008f08:	4610      	mov	r0, r2
 8008f0a:	e7fb      	b.n	8008f04 <__ascii_mbtowc+0x16>
 8008f0c:	f06f 0001 	mvn.w	r0, #1
 8008f10:	e7f8      	b.n	8008f04 <__ascii_mbtowc+0x16>

08008f12 <_realloc_r>:
 8008f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f16:	4680      	mov	r8, r0
 8008f18:	4614      	mov	r4, r2
 8008f1a:	460e      	mov	r6, r1
 8008f1c:	b921      	cbnz	r1, 8008f28 <_realloc_r+0x16>
 8008f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f22:	4611      	mov	r1, r2
 8008f24:	f7fd be2e 	b.w	8006b84 <_malloc_r>
 8008f28:	b92a      	cbnz	r2, 8008f36 <_realloc_r+0x24>
 8008f2a:	f7fd fdb7 	bl	8006a9c <_free_r>
 8008f2e:	4625      	mov	r5, r4
 8008f30:	4628      	mov	r0, r5
 8008f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f36:	f000 f842 	bl	8008fbe <_malloc_usable_size_r>
 8008f3a:	4284      	cmp	r4, r0
 8008f3c:	4607      	mov	r7, r0
 8008f3e:	d802      	bhi.n	8008f46 <_realloc_r+0x34>
 8008f40:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f44:	d812      	bhi.n	8008f6c <_realloc_r+0x5a>
 8008f46:	4621      	mov	r1, r4
 8008f48:	4640      	mov	r0, r8
 8008f4a:	f7fd fe1b 	bl	8006b84 <_malloc_r>
 8008f4e:	4605      	mov	r5, r0
 8008f50:	2800      	cmp	r0, #0
 8008f52:	d0ed      	beq.n	8008f30 <_realloc_r+0x1e>
 8008f54:	42bc      	cmp	r4, r7
 8008f56:	4622      	mov	r2, r4
 8008f58:	4631      	mov	r1, r6
 8008f5a:	bf28      	it	cs
 8008f5c:	463a      	movcs	r2, r7
 8008f5e:	f7ff fc23 	bl	80087a8 <memcpy>
 8008f62:	4631      	mov	r1, r6
 8008f64:	4640      	mov	r0, r8
 8008f66:	f7fd fd99 	bl	8006a9c <_free_r>
 8008f6a:	e7e1      	b.n	8008f30 <_realloc_r+0x1e>
 8008f6c:	4635      	mov	r5, r6
 8008f6e:	e7df      	b.n	8008f30 <_realloc_r+0x1e>

08008f70 <__ascii_wctomb>:
 8008f70:	b149      	cbz	r1, 8008f86 <__ascii_wctomb+0x16>
 8008f72:	2aff      	cmp	r2, #255	; 0xff
 8008f74:	bf85      	ittet	hi
 8008f76:	238a      	movhi	r3, #138	; 0x8a
 8008f78:	6003      	strhi	r3, [r0, #0]
 8008f7a:	700a      	strbls	r2, [r1, #0]
 8008f7c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008f80:	bf98      	it	ls
 8008f82:	2001      	movls	r0, #1
 8008f84:	4770      	bx	lr
 8008f86:	4608      	mov	r0, r1
 8008f88:	4770      	bx	lr
	...

08008f8c <fiprintf>:
 8008f8c:	b40e      	push	{r1, r2, r3}
 8008f8e:	b503      	push	{r0, r1, lr}
 8008f90:	4601      	mov	r1, r0
 8008f92:	ab03      	add	r3, sp, #12
 8008f94:	4805      	ldr	r0, [pc, #20]	; (8008fac <fiprintf+0x20>)
 8008f96:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f9a:	6800      	ldr	r0, [r0, #0]
 8008f9c:	9301      	str	r3, [sp, #4]
 8008f9e:	f000 f83f 	bl	8009020 <_vfiprintf_r>
 8008fa2:	b002      	add	sp, #8
 8008fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fa8:	b003      	add	sp, #12
 8008faa:	4770      	bx	lr
 8008fac:	200001f4 	.word	0x200001f4

08008fb0 <abort>:
 8008fb0:	b508      	push	{r3, lr}
 8008fb2:	2006      	movs	r0, #6
 8008fb4:	f000 fa0c 	bl	80093d0 <raise>
 8008fb8:	2001      	movs	r0, #1
 8008fba:	f7f8 fd8b 	bl	8001ad4 <_exit>

08008fbe <_malloc_usable_size_r>:
 8008fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fc2:	1f18      	subs	r0, r3, #4
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	bfbc      	itt	lt
 8008fc8:	580b      	ldrlt	r3, [r1, r0]
 8008fca:	18c0      	addlt	r0, r0, r3
 8008fcc:	4770      	bx	lr

08008fce <__sfputc_r>:
 8008fce:	6893      	ldr	r3, [r2, #8]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	b410      	push	{r4}
 8008fd6:	6093      	str	r3, [r2, #8]
 8008fd8:	da08      	bge.n	8008fec <__sfputc_r+0x1e>
 8008fda:	6994      	ldr	r4, [r2, #24]
 8008fdc:	42a3      	cmp	r3, r4
 8008fde:	db01      	blt.n	8008fe4 <__sfputc_r+0x16>
 8008fe0:	290a      	cmp	r1, #10
 8008fe2:	d103      	bne.n	8008fec <__sfputc_r+0x1e>
 8008fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fe8:	f000 b934 	b.w	8009254 <__swbuf_r>
 8008fec:	6813      	ldr	r3, [r2, #0]
 8008fee:	1c58      	adds	r0, r3, #1
 8008ff0:	6010      	str	r0, [r2, #0]
 8008ff2:	7019      	strb	r1, [r3, #0]
 8008ff4:	4608      	mov	r0, r1
 8008ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <__sfputs_r>:
 8008ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffe:	4606      	mov	r6, r0
 8009000:	460f      	mov	r7, r1
 8009002:	4614      	mov	r4, r2
 8009004:	18d5      	adds	r5, r2, r3
 8009006:	42ac      	cmp	r4, r5
 8009008:	d101      	bne.n	800900e <__sfputs_r+0x12>
 800900a:	2000      	movs	r0, #0
 800900c:	e007      	b.n	800901e <__sfputs_r+0x22>
 800900e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009012:	463a      	mov	r2, r7
 8009014:	4630      	mov	r0, r6
 8009016:	f7ff ffda 	bl	8008fce <__sfputc_r>
 800901a:	1c43      	adds	r3, r0, #1
 800901c:	d1f3      	bne.n	8009006 <__sfputs_r+0xa>
 800901e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009020 <_vfiprintf_r>:
 8009020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009024:	460d      	mov	r5, r1
 8009026:	b09d      	sub	sp, #116	; 0x74
 8009028:	4614      	mov	r4, r2
 800902a:	4698      	mov	r8, r3
 800902c:	4606      	mov	r6, r0
 800902e:	b118      	cbz	r0, 8009038 <_vfiprintf_r+0x18>
 8009030:	6a03      	ldr	r3, [r0, #32]
 8009032:	b90b      	cbnz	r3, 8009038 <_vfiprintf_r+0x18>
 8009034:	f7fc fd98 	bl	8005b68 <__sinit>
 8009038:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800903a:	07d9      	lsls	r1, r3, #31
 800903c:	d405      	bmi.n	800904a <_vfiprintf_r+0x2a>
 800903e:	89ab      	ldrh	r3, [r5, #12]
 8009040:	059a      	lsls	r2, r3, #22
 8009042:	d402      	bmi.n	800904a <_vfiprintf_r+0x2a>
 8009044:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009046:	f7fc fea6 	bl	8005d96 <__retarget_lock_acquire_recursive>
 800904a:	89ab      	ldrh	r3, [r5, #12]
 800904c:	071b      	lsls	r3, r3, #28
 800904e:	d501      	bpl.n	8009054 <_vfiprintf_r+0x34>
 8009050:	692b      	ldr	r3, [r5, #16]
 8009052:	b99b      	cbnz	r3, 800907c <_vfiprintf_r+0x5c>
 8009054:	4629      	mov	r1, r5
 8009056:	4630      	mov	r0, r6
 8009058:	f000 f93a 	bl	80092d0 <__swsetup_r>
 800905c:	b170      	cbz	r0, 800907c <_vfiprintf_r+0x5c>
 800905e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009060:	07dc      	lsls	r4, r3, #31
 8009062:	d504      	bpl.n	800906e <_vfiprintf_r+0x4e>
 8009064:	f04f 30ff 	mov.w	r0, #4294967295
 8009068:	b01d      	add	sp, #116	; 0x74
 800906a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800906e:	89ab      	ldrh	r3, [r5, #12]
 8009070:	0598      	lsls	r0, r3, #22
 8009072:	d4f7      	bmi.n	8009064 <_vfiprintf_r+0x44>
 8009074:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009076:	f7fc fe8f 	bl	8005d98 <__retarget_lock_release_recursive>
 800907a:	e7f3      	b.n	8009064 <_vfiprintf_r+0x44>
 800907c:	2300      	movs	r3, #0
 800907e:	9309      	str	r3, [sp, #36]	; 0x24
 8009080:	2320      	movs	r3, #32
 8009082:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009086:	f8cd 800c 	str.w	r8, [sp, #12]
 800908a:	2330      	movs	r3, #48	; 0x30
 800908c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009240 <_vfiprintf_r+0x220>
 8009090:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009094:	f04f 0901 	mov.w	r9, #1
 8009098:	4623      	mov	r3, r4
 800909a:	469a      	mov	sl, r3
 800909c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090a0:	b10a      	cbz	r2, 80090a6 <_vfiprintf_r+0x86>
 80090a2:	2a25      	cmp	r2, #37	; 0x25
 80090a4:	d1f9      	bne.n	800909a <_vfiprintf_r+0x7a>
 80090a6:	ebba 0b04 	subs.w	fp, sl, r4
 80090aa:	d00b      	beq.n	80090c4 <_vfiprintf_r+0xa4>
 80090ac:	465b      	mov	r3, fp
 80090ae:	4622      	mov	r2, r4
 80090b0:	4629      	mov	r1, r5
 80090b2:	4630      	mov	r0, r6
 80090b4:	f7ff ffa2 	bl	8008ffc <__sfputs_r>
 80090b8:	3001      	adds	r0, #1
 80090ba:	f000 80a9 	beq.w	8009210 <_vfiprintf_r+0x1f0>
 80090be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090c0:	445a      	add	r2, fp
 80090c2:	9209      	str	r2, [sp, #36]	; 0x24
 80090c4:	f89a 3000 	ldrb.w	r3, [sl]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f000 80a1 	beq.w	8009210 <_vfiprintf_r+0x1f0>
 80090ce:	2300      	movs	r3, #0
 80090d0:	f04f 32ff 	mov.w	r2, #4294967295
 80090d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090d8:	f10a 0a01 	add.w	sl, sl, #1
 80090dc:	9304      	str	r3, [sp, #16]
 80090de:	9307      	str	r3, [sp, #28]
 80090e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090e4:	931a      	str	r3, [sp, #104]	; 0x68
 80090e6:	4654      	mov	r4, sl
 80090e8:	2205      	movs	r2, #5
 80090ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ee:	4854      	ldr	r0, [pc, #336]	; (8009240 <_vfiprintf_r+0x220>)
 80090f0:	f7f7 f86e 	bl	80001d0 <memchr>
 80090f4:	9a04      	ldr	r2, [sp, #16]
 80090f6:	b9d8      	cbnz	r0, 8009130 <_vfiprintf_r+0x110>
 80090f8:	06d1      	lsls	r1, r2, #27
 80090fa:	bf44      	itt	mi
 80090fc:	2320      	movmi	r3, #32
 80090fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009102:	0713      	lsls	r3, r2, #28
 8009104:	bf44      	itt	mi
 8009106:	232b      	movmi	r3, #43	; 0x2b
 8009108:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800910c:	f89a 3000 	ldrb.w	r3, [sl]
 8009110:	2b2a      	cmp	r3, #42	; 0x2a
 8009112:	d015      	beq.n	8009140 <_vfiprintf_r+0x120>
 8009114:	9a07      	ldr	r2, [sp, #28]
 8009116:	4654      	mov	r4, sl
 8009118:	2000      	movs	r0, #0
 800911a:	f04f 0c0a 	mov.w	ip, #10
 800911e:	4621      	mov	r1, r4
 8009120:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009124:	3b30      	subs	r3, #48	; 0x30
 8009126:	2b09      	cmp	r3, #9
 8009128:	d94d      	bls.n	80091c6 <_vfiprintf_r+0x1a6>
 800912a:	b1b0      	cbz	r0, 800915a <_vfiprintf_r+0x13a>
 800912c:	9207      	str	r2, [sp, #28]
 800912e:	e014      	b.n	800915a <_vfiprintf_r+0x13a>
 8009130:	eba0 0308 	sub.w	r3, r0, r8
 8009134:	fa09 f303 	lsl.w	r3, r9, r3
 8009138:	4313      	orrs	r3, r2
 800913a:	9304      	str	r3, [sp, #16]
 800913c:	46a2      	mov	sl, r4
 800913e:	e7d2      	b.n	80090e6 <_vfiprintf_r+0xc6>
 8009140:	9b03      	ldr	r3, [sp, #12]
 8009142:	1d19      	adds	r1, r3, #4
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	9103      	str	r1, [sp, #12]
 8009148:	2b00      	cmp	r3, #0
 800914a:	bfbb      	ittet	lt
 800914c:	425b      	neglt	r3, r3
 800914e:	f042 0202 	orrlt.w	r2, r2, #2
 8009152:	9307      	strge	r3, [sp, #28]
 8009154:	9307      	strlt	r3, [sp, #28]
 8009156:	bfb8      	it	lt
 8009158:	9204      	strlt	r2, [sp, #16]
 800915a:	7823      	ldrb	r3, [r4, #0]
 800915c:	2b2e      	cmp	r3, #46	; 0x2e
 800915e:	d10c      	bne.n	800917a <_vfiprintf_r+0x15a>
 8009160:	7863      	ldrb	r3, [r4, #1]
 8009162:	2b2a      	cmp	r3, #42	; 0x2a
 8009164:	d134      	bne.n	80091d0 <_vfiprintf_r+0x1b0>
 8009166:	9b03      	ldr	r3, [sp, #12]
 8009168:	1d1a      	adds	r2, r3, #4
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	9203      	str	r2, [sp, #12]
 800916e:	2b00      	cmp	r3, #0
 8009170:	bfb8      	it	lt
 8009172:	f04f 33ff 	movlt.w	r3, #4294967295
 8009176:	3402      	adds	r4, #2
 8009178:	9305      	str	r3, [sp, #20]
 800917a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009250 <_vfiprintf_r+0x230>
 800917e:	7821      	ldrb	r1, [r4, #0]
 8009180:	2203      	movs	r2, #3
 8009182:	4650      	mov	r0, sl
 8009184:	f7f7 f824 	bl	80001d0 <memchr>
 8009188:	b138      	cbz	r0, 800919a <_vfiprintf_r+0x17a>
 800918a:	9b04      	ldr	r3, [sp, #16]
 800918c:	eba0 000a 	sub.w	r0, r0, sl
 8009190:	2240      	movs	r2, #64	; 0x40
 8009192:	4082      	lsls	r2, r0
 8009194:	4313      	orrs	r3, r2
 8009196:	3401      	adds	r4, #1
 8009198:	9304      	str	r3, [sp, #16]
 800919a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800919e:	4829      	ldr	r0, [pc, #164]	; (8009244 <_vfiprintf_r+0x224>)
 80091a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091a4:	2206      	movs	r2, #6
 80091a6:	f7f7 f813 	bl	80001d0 <memchr>
 80091aa:	2800      	cmp	r0, #0
 80091ac:	d03f      	beq.n	800922e <_vfiprintf_r+0x20e>
 80091ae:	4b26      	ldr	r3, [pc, #152]	; (8009248 <_vfiprintf_r+0x228>)
 80091b0:	bb1b      	cbnz	r3, 80091fa <_vfiprintf_r+0x1da>
 80091b2:	9b03      	ldr	r3, [sp, #12]
 80091b4:	3307      	adds	r3, #7
 80091b6:	f023 0307 	bic.w	r3, r3, #7
 80091ba:	3308      	adds	r3, #8
 80091bc:	9303      	str	r3, [sp, #12]
 80091be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091c0:	443b      	add	r3, r7
 80091c2:	9309      	str	r3, [sp, #36]	; 0x24
 80091c4:	e768      	b.n	8009098 <_vfiprintf_r+0x78>
 80091c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80091ca:	460c      	mov	r4, r1
 80091cc:	2001      	movs	r0, #1
 80091ce:	e7a6      	b.n	800911e <_vfiprintf_r+0xfe>
 80091d0:	2300      	movs	r3, #0
 80091d2:	3401      	adds	r4, #1
 80091d4:	9305      	str	r3, [sp, #20]
 80091d6:	4619      	mov	r1, r3
 80091d8:	f04f 0c0a 	mov.w	ip, #10
 80091dc:	4620      	mov	r0, r4
 80091de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091e2:	3a30      	subs	r2, #48	; 0x30
 80091e4:	2a09      	cmp	r2, #9
 80091e6:	d903      	bls.n	80091f0 <_vfiprintf_r+0x1d0>
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d0c6      	beq.n	800917a <_vfiprintf_r+0x15a>
 80091ec:	9105      	str	r1, [sp, #20]
 80091ee:	e7c4      	b.n	800917a <_vfiprintf_r+0x15a>
 80091f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80091f4:	4604      	mov	r4, r0
 80091f6:	2301      	movs	r3, #1
 80091f8:	e7f0      	b.n	80091dc <_vfiprintf_r+0x1bc>
 80091fa:	ab03      	add	r3, sp, #12
 80091fc:	9300      	str	r3, [sp, #0]
 80091fe:	462a      	mov	r2, r5
 8009200:	4b12      	ldr	r3, [pc, #72]	; (800924c <_vfiprintf_r+0x22c>)
 8009202:	a904      	add	r1, sp, #16
 8009204:	4630      	mov	r0, r6
 8009206:	f7fb fe4d 	bl	8004ea4 <_printf_float>
 800920a:	4607      	mov	r7, r0
 800920c:	1c78      	adds	r0, r7, #1
 800920e:	d1d6      	bne.n	80091be <_vfiprintf_r+0x19e>
 8009210:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009212:	07d9      	lsls	r1, r3, #31
 8009214:	d405      	bmi.n	8009222 <_vfiprintf_r+0x202>
 8009216:	89ab      	ldrh	r3, [r5, #12]
 8009218:	059a      	lsls	r2, r3, #22
 800921a:	d402      	bmi.n	8009222 <_vfiprintf_r+0x202>
 800921c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800921e:	f7fc fdbb 	bl	8005d98 <__retarget_lock_release_recursive>
 8009222:	89ab      	ldrh	r3, [r5, #12]
 8009224:	065b      	lsls	r3, r3, #25
 8009226:	f53f af1d 	bmi.w	8009064 <_vfiprintf_r+0x44>
 800922a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800922c:	e71c      	b.n	8009068 <_vfiprintf_r+0x48>
 800922e:	ab03      	add	r3, sp, #12
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	462a      	mov	r2, r5
 8009234:	4b05      	ldr	r3, [pc, #20]	; (800924c <_vfiprintf_r+0x22c>)
 8009236:	a904      	add	r1, sp, #16
 8009238:	4630      	mov	r0, r6
 800923a:	f7fc f8d7 	bl	80053ec <_printf_i>
 800923e:	e7e4      	b.n	800920a <_vfiprintf_r+0x1ea>
 8009240:	080098c9 	.word	0x080098c9
 8009244:	080098d3 	.word	0x080098d3
 8009248:	08004ea5 	.word	0x08004ea5
 800924c:	08008ffd 	.word	0x08008ffd
 8009250:	080098cf 	.word	0x080098cf

08009254 <__swbuf_r>:
 8009254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009256:	460e      	mov	r6, r1
 8009258:	4614      	mov	r4, r2
 800925a:	4605      	mov	r5, r0
 800925c:	b118      	cbz	r0, 8009266 <__swbuf_r+0x12>
 800925e:	6a03      	ldr	r3, [r0, #32]
 8009260:	b90b      	cbnz	r3, 8009266 <__swbuf_r+0x12>
 8009262:	f7fc fc81 	bl	8005b68 <__sinit>
 8009266:	69a3      	ldr	r3, [r4, #24]
 8009268:	60a3      	str	r3, [r4, #8]
 800926a:	89a3      	ldrh	r3, [r4, #12]
 800926c:	071a      	lsls	r2, r3, #28
 800926e:	d525      	bpl.n	80092bc <__swbuf_r+0x68>
 8009270:	6923      	ldr	r3, [r4, #16]
 8009272:	b31b      	cbz	r3, 80092bc <__swbuf_r+0x68>
 8009274:	6823      	ldr	r3, [r4, #0]
 8009276:	6922      	ldr	r2, [r4, #16]
 8009278:	1a98      	subs	r0, r3, r2
 800927a:	6963      	ldr	r3, [r4, #20]
 800927c:	b2f6      	uxtb	r6, r6
 800927e:	4283      	cmp	r3, r0
 8009280:	4637      	mov	r7, r6
 8009282:	dc04      	bgt.n	800928e <__swbuf_r+0x3a>
 8009284:	4621      	mov	r1, r4
 8009286:	4628      	mov	r0, r5
 8009288:	f7ff fa2a 	bl	80086e0 <_fflush_r>
 800928c:	b9e0      	cbnz	r0, 80092c8 <__swbuf_r+0x74>
 800928e:	68a3      	ldr	r3, [r4, #8]
 8009290:	3b01      	subs	r3, #1
 8009292:	60a3      	str	r3, [r4, #8]
 8009294:	6823      	ldr	r3, [r4, #0]
 8009296:	1c5a      	adds	r2, r3, #1
 8009298:	6022      	str	r2, [r4, #0]
 800929a:	701e      	strb	r6, [r3, #0]
 800929c:	6962      	ldr	r2, [r4, #20]
 800929e:	1c43      	adds	r3, r0, #1
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d004      	beq.n	80092ae <__swbuf_r+0x5a>
 80092a4:	89a3      	ldrh	r3, [r4, #12]
 80092a6:	07db      	lsls	r3, r3, #31
 80092a8:	d506      	bpl.n	80092b8 <__swbuf_r+0x64>
 80092aa:	2e0a      	cmp	r6, #10
 80092ac:	d104      	bne.n	80092b8 <__swbuf_r+0x64>
 80092ae:	4621      	mov	r1, r4
 80092b0:	4628      	mov	r0, r5
 80092b2:	f7ff fa15 	bl	80086e0 <_fflush_r>
 80092b6:	b938      	cbnz	r0, 80092c8 <__swbuf_r+0x74>
 80092b8:	4638      	mov	r0, r7
 80092ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092bc:	4621      	mov	r1, r4
 80092be:	4628      	mov	r0, r5
 80092c0:	f000 f806 	bl	80092d0 <__swsetup_r>
 80092c4:	2800      	cmp	r0, #0
 80092c6:	d0d5      	beq.n	8009274 <__swbuf_r+0x20>
 80092c8:	f04f 37ff 	mov.w	r7, #4294967295
 80092cc:	e7f4      	b.n	80092b8 <__swbuf_r+0x64>
	...

080092d0 <__swsetup_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	4b2a      	ldr	r3, [pc, #168]	; (800937c <__swsetup_r+0xac>)
 80092d4:	4605      	mov	r5, r0
 80092d6:	6818      	ldr	r0, [r3, #0]
 80092d8:	460c      	mov	r4, r1
 80092da:	b118      	cbz	r0, 80092e4 <__swsetup_r+0x14>
 80092dc:	6a03      	ldr	r3, [r0, #32]
 80092de:	b90b      	cbnz	r3, 80092e4 <__swsetup_r+0x14>
 80092e0:	f7fc fc42 	bl	8005b68 <__sinit>
 80092e4:	89a3      	ldrh	r3, [r4, #12]
 80092e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092ea:	0718      	lsls	r0, r3, #28
 80092ec:	d422      	bmi.n	8009334 <__swsetup_r+0x64>
 80092ee:	06d9      	lsls	r1, r3, #27
 80092f0:	d407      	bmi.n	8009302 <__swsetup_r+0x32>
 80092f2:	2309      	movs	r3, #9
 80092f4:	602b      	str	r3, [r5, #0]
 80092f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80092fa:	81a3      	strh	r3, [r4, #12]
 80092fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009300:	e034      	b.n	800936c <__swsetup_r+0x9c>
 8009302:	0758      	lsls	r0, r3, #29
 8009304:	d512      	bpl.n	800932c <__swsetup_r+0x5c>
 8009306:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009308:	b141      	cbz	r1, 800931c <__swsetup_r+0x4c>
 800930a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800930e:	4299      	cmp	r1, r3
 8009310:	d002      	beq.n	8009318 <__swsetup_r+0x48>
 8009312:	4628      	mov	r0, r5
 8009314:	f7fd fbc2 	bl	8006a9c <_free_r>
 8009318:	2300      	movs	r3, #0
 800931a:	6363      	str	r3, [r4, #52]	; 0x34
 800931c:	89a3      	ldrh	r3, [r4, #12]
 800931e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009322:	81a3      	strh	r3, [r4, #12]
 8009324:	2300      	movs	r3, #0
 8009326:	6063      	str	r3, [r4, #4]
 8009328:	6923      	ldr	r3, [r4, #16]
 800932a:	6023      	str	r3, [r4, #0]
 800932c:	89a3      	ldrh	r3, [r4, #12]
 800932e:	f043 0308 	orr.w	r3, r3, #8
 8009332:	81a3      	strh	r3, [r4, #12]
 8009334:	6923      	ldr	r3, [r4, #16]
 8009336:	b94b      	cbnz	r3, 800934c <__swsetup_r+0x7c>
 8009338:	89a3      	ldrh	r3, [r4, #12]
 800933a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800933e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009342:	d003      	beq.n	800934c <__swsetup_r+0x7c>
 8009344:	4621      	mov	r1, r4
 8009346:	4628      	mov	r0, r5
 8009348:	f000 f884 	bl	8009454 <__smakebuf_r>
 800934c:	89a0      	ldrh	r0, [r4, #12]
 800934e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009352:	f010 0301 	ands.w	r3, r0, #1
 8009356:	d00a      	beq.n	800936e <__swsetup_r+0x9e>
 8009358:	2300      	movs	r3, #0
 800935a:	60a3      	str	r3, [r4, #8]
 800935c:	6963      	ldr	r3, [r4, #20]
 800935e:	425b      	negs	r3, r3
 8009360:	61a3      	str	r3, [r4, #24]
 8009362:	6923      	ldr	r3, [r4, #16]
 8009364:	b943      	cbnz	r3, 8009378 <__swsetup_r+0xa8>
 8009366:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800936a:	d1c4      	bne.n	80092f6 <__swsetup_r+0x26>
 800936c:	bd38      	pop	{r3, r4, r5, pc}
 800936e:	0781      	lsls	r1, r0, #30
 8009370:	bf58      	it	pl
 8009372:	6963      	ldrpl	r3, [r4, #20]
 8009374:	60a3      	str	r3, [r4, #8]
 8009376:	e7f4      	b.n	8009362 <__swsetup_r+0x92>
 8009378:	2000      	movs	r0, #0
 800937a:	e7f7      	b.n	800936c <__swsetup_r+0x9c>
 800937c:	200001f4 	.word	0x200001f4

08009380 <_raise_r>:
 8009380:	291f      	cmp	r1, #31
 8009382:	b538      	push	{r3, r4, r5, lr}
 8009384:	4604      	mov	r4, r0
 8009386:	460d      	mov	r5, r1
 8009388:	d904      	bls.n	8009394 <_raise_r+0x14>
 800938a:	2316      	movs	r3, #22
 800938c:	6003      	str	r3, [r0, #0]
 800938e:	f04f 30ff 	mov.w	r0, #4294967295
 8009392:	bd38      	pop	{r3, r4, r5, pc}
 8009394:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009396:	b112      	cbz	r2, 800939e <_raise_r+0x1e>
 8009398:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800939c:	b94b      	cbnz	r3, 80093b2 <_raise_r+0x32>
 800939e:	4620      	mov	r0, r4
 80093a0:	f000 f830 	bl	8009404 <_getpid_r>
 80093a4:	462a      	mov	r2, r5
 80093a6:	4601      	mov	r1, r0
 80093a8:	4620      	mov	r0, r4
 80093aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093ae:	f000 b817 	b.w	80093e0 <_kill_r>
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d00a      	beq.n	80093cc <_raise_r+0x4c>
 80093b6:	1c59      	adds	r1, r3, #1
 80093b8:	d103      	bne.n	80093c2 <_raise_r+0x42>
 80093ba:	2316      	movs	r3, #22
 80093bc:	6003      	str	r3, [r0, #0]
 80093be:	2001      	movs	r0, #1
 80093c0:	e7e7      	b.n	8009392 <_raise_r+0x12>
 80093c2:	2400      	movs	r4, #0
 80093c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093c8:	4628      	mov	r0, r5
 80093ca:	4798      	blx	r3
 80093cc:	2000      	movs	r0, #0
 80093ce:	e7e0      	b.n	8009392 <_raise_r+0x12>

080093d0 <raise>:
 80093d0:	4b02      	ldr	r3, [pc, #8]	; (80093dc <raise+0xc>)
 80093d2:	4601      	mov	r1, r0
 80093d4:	6818      	ldr	r0, [r3, #0]
 80093d6:	f7ff bfd3 	b.w	8009380 <_raise_r>
 80093da:	bf00      	nop
 80093dc:	200001f4 	.word	0x200001f4

080093e0 <_kill_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4d07      	ldr	r5, [pc, #28]	; (8009400 <_kill_r+0x20>)
 80093e4:	2300      	movs	r3, #0
 80093e6:	4604      	mov	r4, r0
 80093e8:	4608      	mov	r0, r1
 80093ea:	4611      	mov	r1, r2
 80093ec:	602b      	str	r3, [r5, #0]
 80093ee:	f7f8 fb61 	bl	8001ab4 <_kill>
 80093f2:	1c43      	adds	r3, r0, #1
 80093f4:	d102      	bne.n	80093fc <_kill_r+0x1c>
 80093f6:	682b      	ldr	r3, [r5, #0]
 80093f8:	b103      	cbz	r3, 80093fc <_kill_r+0x1c>
 80093fa:	6023      	str	r3, [r4, #0]
 80093fc:	bd38      	pop	{r3, r4, r5, pc}
 80093fe:	bf00      	nop
 8009400:	20000900 	.word	0x20000900

08009404 <_getpid_r>:
 8009404:	f7f8 bb4e 	b.w	8001aa4 <_getpid>

08009408 <__swhatbuf_r>:
 8009408:	b570      	push	{r4, r5, r6, lr}
 800940a:	460c      	mov	r4, r1
 800940c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009410:	2900      	cmp	r1, #0
 8009412:	b096      	sub	sp, #88	; 0x58
 8009414:	4615      	mov	r5, r2
 8009416:	461e      	mov	r6, r3
 8009418:	da0d      	bge.n	8009436 <__swhatbuf_r+0x2e>
 800941a:	89a3      	ldrh	r3, [r4, #12]
 800941c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009420:	f04f 0100 	mov.w	r1, #0
 8009424:	bf0c      	ite	eq
 8009426:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800942a:	2340      	movne	r3, #64	; 0x40
 800942c:	2000      	movs	r0, #0
 800942e:	6031      	str	r1, [r6, #0]
 8009430:	602b      	str	r3, [r5, #0]
 8009432:	b016      	add	sp, #88	; 0x58
 8009434:	bd70      	pop	{r4, r5, r6, pc}
 8009436:	466a      	mov	r2, sp
 8009438:	f000 f848 	bl	80094cc <_fstat_r>
 800943c:	2800      	cmp	r0, #0
 800943e:	dbec      	blt.n	800941a <__swhatbuf_r+0x12>
 8009440:	9901      	ldr	r1, [sp, #4]
 8009442:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009446:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800944a:	4259      	negs	r1, r3
 800944c:	4159      	adcs	r1, r3
 800944e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009452:	e7eb      	b.n	800942c <__swhatbuf_r+0x24>

08009454 <__smakebuf_r>:
 8009454:	898b      	ldrh	r3, [r1, #12]
 8009456:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009458:	079d      	lsls	r5, r3, #30
 800945a:	4606      	mov	r6, r0
 800945c:	460c      	mov	r4, r1
 800945e:	d507      	bpl.n	8009470 <__smakebuf_r+0x1c>
 8009460:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009464:	6023      	str	r3, [r4, #0]
 8009466:	6123      	str	r3, [r4, #16]
 8009468:	2301      	movs	r3, #1
 800946a:	6163      	str	r3, [r4, #20]
 800946c:	b002      	add	sp, #8
 800946e:	bd70      	pop	{r4, r5, r6, pc}
 8009470:	ab01      	add	r3, sp, #4
 8009472:	466a      	mov	r2, sp
 8009474:	f7ff ffc8 	bl	8009408 <__swhatbuf_r>
 8009478:	9900      	ldr	r1, [sp, #0]
 800947a:	4605      	mov	r5, r0
 800947c:	4630      	mov	r0, r6
 800947e:	f7fd fb81 	bl	8006b84 <_malloc_r>
 8009482:	b948      	cbnz	r0, 8009498 <__smakebuf_r+0x44>
 8009484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009488:	059a      	lsls	r2, r3, #22
 800948a:	d4ef      	bmi.n	800946c <__smakebuf_r+0x18>
 800948c:	f023 0303 	bic.w	r3, r3, #3
 8009490:	f043 0302 	orr.w	r3, r3, #2
 8009494:	81a3      	strh	r3, [r4, #12]
 8009496:	e7e3      	b.n	8009460 <__smakebuf_r+0xc>
 8009498:	89a3      	ldrh	r3, [r4, #12]
 800949a:	6020      	str	r0, [r4, #0]
 800949c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094a0:	81a3      	strh	r3, [r4, #12]
 80094a2:	9b00      	ldr	r3, [sp, #0]
 80094a4:	6163      	str	r3, [r4, #20]
 80094a6:	9b01      	ldr	r3, [sp, #4]
 80094a8:	6120      	str	r0, [r4, #16]
 80094aa:	b15b      	cbz	r3, 80094c4 <__smakebuf_r+0x70>
 80094ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094b0:	4630      	mov	r0, r6
 80094b2:	f000 f81d 	bl	80094f0 <_isatty_r>
 80094b6:	b128      	cbz	r0, 80094c4 <__smakebuf_r+0x70>
 80094b8:	89a3      	ldrh	r3, [r4, #12]
 80094ba:	f023 0303 	bic.w	r3, r3, #3
 80094be:	f043 0301 	orr.w	r3, r3, #1
 80094c2:	81a3      	strh	r3, [r4, #12]
 80094c4:	89a3      	ldrh	r3, [r4, #12]
 80094c6:	431d      	orrs	r5, r3
 80094c8:	81a5      	strh	r5, [r4, #12]
 80094ca:	e7cf      	b.n	800946c <__smakebuf_r+0x18>

080094cc <_fstat_r>:
 80094cc:	b538      	push	{r3, r4, r5, lr}
 80094ce:	4d07      	ldr	r5, [pc, #28]	; (80094ec <_fstat_r+0x20>)
 80094d0:	2300      	movs	r3, #0
 80094d2:	4604      	mov	r4, r0
 80094d4:	4608      	mov	r0, r1
 80094d6:	4611      	mov	r1, r2
 80094d8:	602b      	str	r3, [r5, #0]
 80094da:	f7f8 fb4a 	bl	8001b72 <_fstat>
 80094de:	1c43      	adds	r3, r0, #1
 80094e0:	d102      	bne.n	80094e8 <_fstat_r+0x1c>
 80094e2:	682b      	ldr	r3, [r5, #0]
 80094e4:	b103      	cbz	r3, 80094e8 <_fstat_r+0x1c>
 80094e6:	6023      	str	r3, [r4, #0]
 80094e8:	bd38      	pop	{r3, r4, r5, pc}
 80094ea:	bf00      	nop
 80094ec:	20000900 	.word	0x20000900

080094f0 <_isatty_r>:
 80094f0:	b538      	push	{r3, r4, r5, lr}
 80094f2:	4d06      	ldr	r5, [pc, #24]	; (800950c <_isatty_r+0x1c>)
 80094f4:	2300      	movs	r3, #0
 80094f6:	4604      	mov	r4, r0
 80094f8:	4608      	mov	r0, r1
 80094fa:	602b      	str	r3, [r5, #0]
 80094fc:	f7f8 fb49 	bl	8001b92 <_isatty>
 8009500:	1c43      	adds	r3, r0, #1
 8009502:	d102      	bne.n	800950a <_isatty_r+0x1a>
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	b103      	cbz	r3, 800950a <_isatty_r+0x1a>
 8009508:	6023      	str	r3, [r4, #0]
 800950a:	bd38      	pop	{r3, r4, r5, pc}
 800950c:	20000900 	.word	0x20000900

08009510 <_init>:
 8009510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009512:	bf00      	nop
 8009514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009516:	bc08      	pop	{r3}
 8009518:	469e      	mov	lr, r3
 800951a:	4770      	bx	lr

0800951c <_fini>:
 800951c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800951e:	bf00      	nop
 8009520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009522:	bc08      	pop	{r3}
 8009524:	469e      	mov	lr, r3
 8009526:	4770      	bx	lr
