
servo_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae7c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  0800b010  0800b010  0000c010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b478  0800b478  0000d3d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b478  0800b478  0000c478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b480  0800b480  0000d3d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b480  0800b480  0000c480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b484  0800b484  0000c484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d0  20000000  0800b488  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d3d0  2**0
                  CONTENTS
 10 .bss          00000664  200003d0  200003d0  0000d3d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a34  20000a34  0000d3d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d3d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000179d2  00000000  00000000  0000d400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003933  00000000  00000000  00024dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  00028708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001184  00000000  00000000  00029db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003e14d  00000000  00000000  0002af3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c22b  00000000  00000000  00069089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9e07  00000000  00000000  000852b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016f0bb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000074a8  00000000  00000000  0016f100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  001765a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003d0 	.word	0x200003d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aff4 	.word	0x0800aff4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003d4 	.word	0x200003d4
 80001cc:	0800aff4 	.word	0x0800aff4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf8:	f000 fef4 	bl	8001ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfc:	f000 f868 	bl	8000dd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d00:	f000 fa76 	bl	80011f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d04:	f000 f8c8 	bl	8000e98 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d08:	f000 f906 	bl	8000f18 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000d0c:	f000 fa4e 	bl	80011ac <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000d10:	f000 f940 	bl	8000f94 <MX_TIM2_Init>
  MX_USART1_Init();
 8000d14:	f000 fa1e 	bl	8001154 <MX_USART1_Init>
  MX_TIM3_Init();
 8000d18:	f000 f9b6 	bl	8001088 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // initialise the gyros
  BSP_GYRO_Init();
 8000d1c:	f005 f81a 	bl	8005d54 <BSP_GYRO_Init>

  // start the timers
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000d20:	2100      	movs	r1, #0
 8000d22:	4824      	ldr	r0, [pc, #144]	@ (8000db4 <main+0xc0>)
 8000d24:	f003 fdde 	bl	80048e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000d28:	2104      	movs	r1, #4
 8000d2a:	4822      	ldr	r0, [pc, #136]	@ (8000db4 <main+0xc0>)
 8000d2c:	f003 fdda 	bl	80048e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d30:	2100      	movs	r1, #0
 8000d32:	4821      	ldr	r0, [pc, #132]	@ (8000db8 <main+0xc4>)
 8000d34:	f003 fdd6 	bl	80048e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000d38:	2104      	movs	r1, #4
 8000d3a:	481f      	ldr	r0, [pc, #124]	@ (8000db8 <main+0xc4>)
 8000d3c:	f003 fdd2 	bl	80048e4 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  if ((GPIOA->IDR & 0x01) == 1) {
 8000d40:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d11c      	bne.n	8000d88 <main+0x94>
//
//		  setTargetVelocity(&Servo1, 1000);
//
		  servoGoToFractionalPosition(&Servo1, 0);
 8000d4e:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8000dbc <main+0xc8>
 8000d52:	481b      	ldr	r0, [pc, #108]	@ (8000dc0 <main+0xcc>)
 8000d54:	f000 fad0 	bl	80012f8 <servoGoToFractionalPosition>
		  servoGoToFractionalPosition(&Servo2, 1-0);
 8000d58:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000d5c:	4819      	ldr	r0, [pc, #100]	@ (8000dc4 <main+0xd0>)
 8000d5e:	f000 facb 	bl	80012f8 <servoGoToFractionalPosition>
		  servoGoToFractionalPosition(&Servo3, 0);
 8000d62:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8000dbc <main+0xc8>
 8000d66:	4818      	ldr	r0, [pc, #96]	@ (8000dc8 <main+0xd4>)
 8000d68:	f000 fac6 	bl	80012f8 <servoGoToFractionalPosition>
		  servoGoToFractionalPosition(&Servo4, 1-0);
 8000d6c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000d70:	4816      	ldr	r0, [pc, #88]	@ (8000dcc <main+0xd8>)
 8000d72:	f000 fac1 	bl	80012f8 <servoGoToFractionalPosition>

//		  // wait until button is released
		  while ((GPIOA->IDR & 0x01)) {};
 8000d76:	bf00      	nop
 8000d78:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d7c:	691b      	ldr	r3, [r3, #16]
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1f8      	bne.n	8000d78 <main+0x84>
 8000d86:	e7db      	b.n	8000d40 <main+0x4c>
	  }
	  else {
//
		  servoGoToFractionalPosition(&Servo1, 1);
 8000d88:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000d8c:	480c      	ldr	r0, [pc, #48]	@ (8000dc0 <main+0xcc>)
 8000d8e:	f000 fab3 	bl	80012f8 <servoGoToFractionalPosition>
		  servoGoToFractionalPosition(&Servo2, 1-1);
 8000d92:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8000dbc <main+0xc8>
 8000d96:	480b      	ldr	r0, [pc, #44]	@ (8000dc4 <main+0xd0>)
 8000d98:	f000 faae 	bl	80012f8 <servoGoToFractionalPosition>
		  servoGoToFractionalPosition(&Servo3, 1);
 8000d9c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000da0:	4809      	ldr	r0, [pc, #36]	@ (8000dc8 <main+0xd4>)
 8000da2:	f000 faa9 	bl	80012f8 <servoGoToFractionalPosition>
		  servoGoToFractionalPosition(&Servo4, 1-1);
 8000da6:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8000dbc <main+0xc8>
 8000daa:	4808      	ldr	r0, [pc, #32]	@ (8000dcc <main+0xd8>)
 8000dac:	f000 faa4 	bl	80012f8 <servoGoToFractionalPosition>
	  if ((GPIOA->IDR & 0x01) == 1) {
 8000db0:	e7c6      	b.n	8000d40 <main+0x4c>
 8000db2:	bf00      	nop
 8000db4:	200004a4 	.word	0x200004a4
 8000db8:	200004f0 	.word	0x200004f0
 8000dbc:	00000000 	.word	0x00000000
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	20000050 	.word	0x20000050
 8000dc8:	200000a0 	.word	0x200000a0
 8000dcc:	200000f0 	.word	0x200000f0

08000dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b09e      	sub	sp, #120	@ 0x78
 8000dd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000dda:	2228      	movs	r2, #40	@ 0x28
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f006 fd2f 	bl	8007842 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df4:	463b      	mov	r3, r7
 8000df6:	223c      	movs	r2, #60	@ 0x3c
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f006 fd21 	bl	8007842 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000e00:	2303      	movs	r3, #3
 8000e02:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e04:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000e08:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e12:	2310      	movs	r3, #16
 8000e14:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e16:	2302      	movs	r3, #2
 8000e18:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e1e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000e20:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e24:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e26:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f001 fc76 	bl	800271c <HAL_RCC_OscConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e36:	f000 fa59 	bl	80012ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3a:	230f      	movs	r3, #15
 8000e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e50:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000e54:	2101      	movs	r1, #1
 8000e56:	4618      	mov	r0, r3
 8000e58:	f002 fc9e 	bl	8003798 <HAL_RCC_ClockConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e62:	f000 fa43 	bl	80012ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000e66:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <SystemClock_Config+0xc4>)
 8000e68:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e72:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e76:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e78:	463b      	mov	r3, r7
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f002 fec2 	bl	8003c04 <HAL_RCCEx_PeriphCLKConfig>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000e86:	f000 fa31 	bl	80012ec <Error_Handler>
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	3778      	adds	r7, #120	@ 0x78
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	00020021 	.word	0x00020021

08000e98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f0c <MX_I2C1_Init+0x74>)
 8000e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000f10 <MX_I2C1_Init+0x78>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f0c <MX_I2C1_Init+0x74>)
 8000ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f14 <MX_I2C1_Init+0x7c>)
 8000ea6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ea8:	4b18      	ldr	r3, [pc, #96]	@ (8000f0c <MX_I2C1_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eae:	4b17      	ldr	r3, [pc, #92]	@ (8000f0c <MX_I2C1_Init+0x74>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eb4:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <MX_I2C1_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eba:	4b14      	ldr	r3, [pc, #80]	@ (8000f0c <MX_I2C1_Init+0x74>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ec0:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <MX_I2C1_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <MX_I2C1_Init+0x74>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <MX_I2C1_Init+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ed2:	480e      	ldr	r0, [pc, #56]	@ (8000f0c <MX_I2C1_Init+0x74>)
 8000ed4:	f001 fa2a 	bl	800232c <HAL_I2C_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ede:	f000 fa05 	bl	80012ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4809      	ldr	r0, [pc, #36]	@ (8000f0c <MX_I2C1_Init+0x74>)
 8000ee6:	f001 fab0 	bl	800244a <HAL_I2CEx_ConfigAnalogFilter>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ef0:	f000 f9fc 	bl	80012ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4805      	ldr	r0, [pc, #20]	@ (8000f0c <MX_I2C1_Init+0x74>)
 8000ef8:	f001 faf2 	bl	80024e0 <HAL_I2CEx_ConfigDigitalFilter>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f02:	f000 f9f3 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200003ec 	.word	0x200003ec
 8000f10:	40005400 	.word	0x40005400
 8000f14:	2000090e 	.word	0x2000090e

08000f18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000f90 <MX_SPI1_Init+0x78>)
 8000f20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f2a:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f30:	4b16      	ldr	r3, [pc, #88]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f32:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f36:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f38:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f44:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f4a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f4e:	2208      	movs	r2, #8
 8000f50:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f64:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f66:	2207      	movs	r2, #7
 8000f68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f72:	2208      	movs	r2, #8
 8000f74:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <MX_SPI1_Init+0x74>)
 8000f78:	f002 fff4 	bl	8003f64 <HAL_SPI_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f82:	f000 f9b3 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000440 	.word	0x20000440
 8000f90:	40013000 	.word	0x40013000

08000f94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	@ 0x28
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
 8000fb4:	615a      	str	r2, [r3, #20]
 8000fb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fb8:	4b32      	ldr	r3, [pc, #200]	@ (8001084 <MX_TIM2_Init+0xf0>)
 8000fba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8000fc0:	4b30      	ldr	r3, [pc, #192]	@ (8001084 <MX_TIM2_Init+0xf0>)
 8000fc2:	222f      	movs	r2, #47	@ 0x2f
 8000fc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc6:	4b2f      	ldr	r3, [pc, #188]	@ (8001084 <MX_TIM2_Init+0xf0>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8000fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8001084 <MX_TIM2_Init+0xf0>)
 8000fce:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000fd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8001084 <MX_TIM2_Init+0xf0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fda:	4b2a      	ldr	r3, [pc, #168]	@ (8001084 <MX_TIM2_Init+0xf0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fe0:	4828      	ldr	r0, [pc, #160]	@ (8001084 <MX_TIM2_Init+0xf0>)
 8000fe2:	f003 fc27 	bl	8004834 <HAL_TIM_PWM_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000fec:	f000 f97e 	bl	80012ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4821      	ldr	r0, [pc, #132]	@ (8001084 <MX_TIM2_Init+0xf0>)
 8001000:	f004 fa10 	bl	8005424 <HAL_TIMEx_MasterConfigSynchronization>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800100a:	f000 f96f 	bl	80012ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800100e:	2360      	movs	r3, #96	@ 0x60
 8001010:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800101e:	463b      	mov	r3, r7
 8001020:	2200      	movs	r2, #0
 8001022:	4619      	mov	r1, r3
 8001024:	4817      	ldr	r0, [pc, #92]	@ (8001084 <MX_TIM2_Init+0xf0>)
 8001026:	f003 fd5d 	bl	8004ae4 <HAL_TIM_PWM_ConfigChannel>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001030:	f000 f95c 	bl	80012ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001034:	463b      	mov	r3, r7
 8001036:	2204      	movs	r2, #4
 8001038:	4619      	mov	r1, r3
 800103a:	4812      	ldr	r0, [pc, #72]	@ (8001084 <MX_TIM2_Init+0xf0>)
 800103c:	f003 fd52 	bl	8004ae4 <HAL_TIM_PWM_ConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001046:	f000 f951 	bl	80012ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800104a:	463b      	mov	r3, r7
 800104c:	2208      	movs	r2, #8
 800104e:	4619      	mov	r1, r3
 8001050:	480c      	ldr	r0, [pc, #48]	@ (8001084 <MX_TIM2_Init+0xf0>)
 8001052:	f003 fd47 	bl	8004ae4 <HAL_TIM_PWM_ConfigChannel>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 800105c:	f000 f946 	bl	80012ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001060:	463b      	mov	r3, r7
 8001062:	220c      	movs	r2, #12
 8001064:	4619      	mov	r1, r3
 8001066:	4807      	ldr	r0, [pc, #28]	@ (8001084 <MX_TIM2_Init+0xf0>)
 8001068:	f003 fd3c 	bl	8004ae4 <HAL_TIM_PWM_ConfigChannel>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8001072:	f000 f93b 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001076:	4803      	ldr	r0, [pc, #12]	@ (8001084 <MX_TIM2_Init+0xf0>)
 8001078:	f000 fa9c 	bl	80015b4 <HAL_TIM_MspPostInit>

}
 800107c:	bf00      	nop
 800107e:	3728      	adds	r7, #40	@ 0x28
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200004a4 	.word	0x200004a4

08001088 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	@ 0x28
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800109a:	463b      	mov	r3, r7
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
 80010a8:	615a      	str	r2, [r3, #20]
 80010aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010ac:	4b27      	ldr	r3, [pc, #156]	@ (800114c <MX_TIM3_Init+0xc4>)
 80010ae:	4a28      	ldr	r2, [pc, #160]	@ (8001150 <MX_TIM3_Init+0xc8>)
 80010b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 80010b2:	4b26      	ldr	r3, [pc, #152]	@ (800114c <MX_TIM3_Init+0xc4>)
 80010b4:	222f      	movs	r2, #47	@ 0x2f
 80010b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b8:	4b24      	ldr	r3, [pc, #144]	@ (800114c <MX_TIM3_Init+0xc4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80010be:	4b23      	ldr	r3, [pc, #140]	@ (800114c <MX_TIM3_Init+0xc4>)
 80010c0:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80010c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c6:	4b21      	ldr	r3, [pc, #132]	@ (800114c <MX_TIM3_Init+0xc4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010cc:	4b1f      	ldr	r3, [pc, #124]	@ (800114c <MX_TIM3_Init+0xc4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010d2:	481e      	ldr	r0, [pc, #120]	@ (800114c <MX_TIM3_Init+0xc4>)
 80010d4:	f003 fbae 	bl	8004834 <HAL_TIM_PWM_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80010de:	f000 f905 	bl	80012ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	4619      	mov	r1, r3
 80010f0:	4816      	ldr	r0, [pc, #88]	@ (800114c <MX_TIM3_Init+0xc4>)
 80010f2:	f004 f997 	bl	8005424 <HAL_TIMEx_MasterConfigSynchronization>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80010fc:	f000 f8f6 	bl	80012ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001100:	2360      	movs	r3, #96	@ 0x60
 8001102:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001110:	463b      	mov	r3, r7
 8001112:	2200      	movs	r2, #0
 8001114:	4619      	mov	r1, r3
 8001116:	480d      	ldr	r0, [pc, #52]	@ (800114c <MX_TIM3_Init+0xc4>)
 8001118:	f003 fce4 	bl	8004ae4 <HAL_TIM_PWM_ConfigChannel>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001122:	f000 f8e3 	bl	80012ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001126:	463b      	mov	r3, r7
 8001128:	2204      	movs	r2, #4
 800112a:	4619      	mov	r1, r3
 800112c:	4807      	ldr	r0, [pc, #28]	@ (800114c <MX_TIM3_Init+0xc4>)
 800112e:	f003 fcd9 	bl	8004ae4 <HAL_TIM_PWM_ConfigChannel>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001138:	f000 f8d8 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800113c:	4803      	ldr	r0, [pc, #12]	@ (800114c <MX_TIM3_Init+0xc4>)
 800113e:	f000 fa39 	bl	80015b4 <HAL_TIM_MspPostInit>

}
 8001142:	bf00      	nop
 8001144:	3728      	adds	r7, #40	@ 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200004f0 	.word	0x200004f0
 8001150:	40000400 	.word	0x40000400

08001154 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <MX_USART1_Init+0x50>)
 800115a:	4a13      	ldr	r2, [pc, #76]	@ (80011a8 <MX_USART1_Init+0x54>)
 800115c:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 800115e:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <MX_USART1_Init+0x50>)
 8001160:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001164:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8001166:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <MX_USART1_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 800116c:	4b0d      	ldr	r3, [pc, #52]	@ (80011a4 <MX_USART1_Init+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_USART1_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8001178:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <MX_USART1_Init+0x50>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 800117e:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <MX_USART1_Init+0x50>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8001184:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <MX_USART1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <MX_USART1_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8001190:	4804      	ldr	r0, [pc, #16]	@ (80011a4 <MX_USART1_Init+0x50>)
 8001192:	f004 f9c7 	bl	8005524 <HAL_USART_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 800119c:	f000 f8a6 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	2000053c 	.word	0x2000053c
 80011a8:	40013800 	.word	0x40013800

080011ac <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80011b0:	4b0d      	ldr	r3, [pc, #52]	@ (80011e8 <MX_USB_PCD_Init+0x3c>)
 80011b2:	4a0e      	ldr	r2, [pc, #56]	@ (80011ec <MX_USB_PCD_Init+0x40>)
 80011b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80011b6:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <MX_USB_PCD_Init+0x3c>)
 80011b8:	2208      	movs	r2, #8
 80011ba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <MX_USB_PCD_Init+0x3c>)
 80011be:	2202      	movs	r2, #2
 80011c0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011c2:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <MX_USB_PCD_Init+0x3c>)
 80011c4:	2202      	movs	r2, #2
 80011c6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80011c8:	4b07      	ldr	r3, [pc, #28]	@ (80011e8 <MX_USB_PCD_Init+0x3c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80011ce:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <MX_USB_PCD_Init+0x3c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	@ (80011e8 <MX_USB_PCD_Init+0x3c>)
 80011d6:	f001 f9cf 	bl	8002578 <HAL_PCD_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80011e0:	f000 f884 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2000058c 	.word	0x2000058c
 80011ec:	40005c00 	.word	0x40005c00

080011f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	@ 0x28
 80011f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001206:	4b37      	ldr	r3, [pc, #220]	@ (80012e4 <MX_GPIO_Init+0xf4>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	4a36      	ldr	r2, [pc, #216]	@ (80012e4 <MX_GPIO_Init+0xf4>)
 800120c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001210:	6153      	str	r3, [r2, #20]
 8001212:	4b34      	ldr	r3, [pc, #208]	@ (80012e4 <MX_GPIO_Init+0xf4>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	4b31      	ldr	r3, [pc, #196]	@ (80012e4 <MX_GPIO_Init+0xf4>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	4a30      	ldr	r2, [pc, #192]	@ (80012e4 <MX_GPIO_Init+0xf4>)
 8001224:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001228:	6153      	str	r3, [r2, #20]
 800122a:	4b2e      	ldr	r3, [pc, #184]	@ (80012e4 <MX_GPIO_Init+0xf4>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001236:	4b2b      	ldr	r3, [pc, #172]	@ (80012e4 <MX_GPIO_Init+0xf4>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	4a2a      	ldr	r2, [pc, #168]	@ (80012e4 <MX_GPIO_Init+0xf4>)
 800123c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001240:	6153      	str	r3, [r2, #20]
 8001242:	4b28      	ldr	r3, [pc, #160]	@ (80012e4 <MX_GPIO_Init+0xf4>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	4b25      	ldr	r3, [pc, #148]	@ (80012e4 <MX_GPIO_Init+0xf4>)
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	4a24      	ldr	r2, [pc, #144]	@ (80012e4 <MX_GPIO_Init+0xf4>)
 8001254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001258:	6153      	str	r3, [r2, #20]
 800125a:	4b22      	ldr	r3, [pc, #136]	@ (80012e4 <MX_GPIO_Init+0xf4>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	4b1f      	ldr	r3, [pc, #124]	@ (80012e4 <MX_GPIO_Init+0xf4>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	4a1e      	ldr	r2, [pc, #120]	@ (80012e4 <MX_GPIO_Init+0xf4>)
 800126c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001270:	6153      	str	r3, [r2, #20]
 8001272:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <MX_GPIO_Init+0xf4>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800127e:	2200      	movs	r2, #0
 8001280:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8001284:	4818      	ldr	r0, [pc, #96]	@ (80012e8 <MX_GPIO_Init+0xf8>)
 8001286:	f001 f839 	bl	80022fc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800128a:	2337      	movs	r3, #55	@ 0x37
 800128c:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800128e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4619      	mov	r1, r3
 800129e:	4812      	ldr	r0, [pc, #72]	@ (80012e8 <MX_GPIO_Init+0xf8>)
 80012a0:	f000 fdd6 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80012a4:	f64f 7308 	movw	r3, #65288	@ 0xff08
 80012a8:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4619      	mov	r1, r3
 80012bc:	480a      	ldr	r0, [pc, #40]	@ (80012e8 <MX_GPIO_Init+0xf8>)
 80012be:	f000 fdc7 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012c2:	2301      	movs	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d8:	f000 fdba 	bl	8001e50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012dc:	bf00      	nop
 80012de:	3728      	adds	r7, #40	@ 0x28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40021000 	.word	0x40021000
 80012e8:	48001000 	.word	0x48001000

080012ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f0:	b672      	cpsid	i
}
 80012f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <Error_Handler+0x8>

080012f8 <servoGoToFractionalPosition>:

// a function to make servo move to a point in its range of motion
// Inputs:
// - Servo*: address of the servo struct being used
// - frac: the fraction of the servos range to go to (0 to 1)
void servoGoToFractionalPosition(Servo *servo, float frac) {
 80012f8:	b5b0      	push	{r4, r5, r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	ed87 0a00 	vstr	s0, [r7]
	uint32_t max = servo->max_pwm;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	61fb      	str	r3, [r7, #28]
	uint32_t min = servo->min_pwm;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800130e:	61bb      	str	r3, [r7, #24]
	double range = max - min;
 8001310:	69fa      	ldr	r2, [r7, #28]
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f8f4 	bl	8000504 <__aeabi_ui2d>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// map to pwm range
	uint32_t pwm = min + range*frac;
 8001324:	69b8      	ldr	r0, [r7, #24]
 8001326:	f7ff f8ed 	bl	8000504 <__aeabi_ui2d>
 800132a:	4604      	mov	r4, r0
 800132c:	460d      	mov	r5, r1
 800132e:	6838      	ldr	r0, [r7, #0]
 8001330:	f7ff f90a 	bl	8000548 <__aeabi_f2d>
 8001334:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001338:	f7ff f95e 	bl	80005f8 <__aeabi_dmul>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4620      	mov	r0, r4
 8001342:	4629      	mov	r1, r5
 8001344:	f7fe ffa2 	bl	800028c <__adddf3>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff fc2a 	bl	8000ba8 <__aeabi_d2uiz>
 8001354:	4603      	mov	r3, r0
 8001356:	60fb      	str	r3, [r7, #12]

	// set the pwm val
	setServoPWM(servo, pwm);
 8001358:	68f9      	ldr	r1, [r7, #12]
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 f804 	bl	8001368 <setServoPWM>
}
 8001360:	bf00      	nop
 8001362:	3720      	adds	r7, #32
 8001364:	46bd      	mov	sp, r7
 8001366:	bdb0      	pop	{r4, r5, r7, pc}

08001368 <setServoPWM>:

void setServoPWM(Servo *servo, uint32_t pwm){
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]

	if (servo->channel == 1) {
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	791b      	ldrb	r3, [r3, #4]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d104      	bne.n	8001384 <setServoPWM+0x1c>
		servo->TIMx->CCR1 = pwm;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	635a      	str	r2, [r3, #52]	@ 0x34
		servo->TIMx->CCR3 = pwm;
	}
	else if (servo->channel == 4) {
		servo->TIMx->CCR4 = pwm;
	}
}
 8001382:	e019      	b.n	80013b8 <setServoPWM+0x50>
	else if (servo->channel == 2) {
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	791b      	ldrb	r3, [r3, #4]
 8001388:	2b02      	cmp	r3, #2
 800138a:	d104      	bne.n	8001396 <setServoPWM+0x2e>
		servo->TIMx->CCR2 = pwm;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001394:	e010      	b.n	80013b8 <setServoPWM+0x50>
	else if (servo->channel == 3) {
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	791b      	ldrb	r3, [r3, #4]
 800139a:	2b03      	cmp	r3, #3
 800139c:	d104      	bne.n	80013a8 <setServoPWM+0x40>
		servo->TIMx->CCR3 = pwm;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80013a6:	e007      	b.n	80013b8 <setServoPWM+0x50>
	else if (servo->channel == 4) {
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	791b      	ldrb	r3, [r3, #4]
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d103      	bne.n	80013b8 <setServoPWM+0x50>
		servo->TIMx->CCR4 = pwm;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <HAL_MspInit+0x44>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001408 <HAL_MspInit+0x44>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6193      	str	r3, [r2, #24]
 80013d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <HAL_MspInit+0x44>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <HAL_MspInit+0x44>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	4a08      	ldr	r2, [pc, #32]	@ (8001408 <HAL_MspInit+0x44>)
 80013e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ec:	61d3      	str	r3, [r2, #28]
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <HAL_MspInit+0x44>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013fa:	2007      	movs	r0, #7
 80013fc:	f000 fca8 	bl	8001d50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40021000 	.word	0x40021000

0800140c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	@ 0x28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a17      	ldr	r2, [pc, #92]	@ (8001488 <HAL_I2C_MspInit+0x7c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d127      	bne.n	800147e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	4b17      	ldr	r3, [pc, #92]	@ (800148c <HAL_I2C_MspInit+0x80>)
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	4a16      	ldr	r2, [pc, #88]	@ (800148c <HAL_I2C_MspInit+0x80>)
 8001434:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001438:	6153      	str	r3, [r2, #20]
 800143a:	4b14      	ldr	r3, [pc, #80]	@ (800148c <HAL_I2C_MspInit+0x80>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001446:	23c0      	movs	r3, #192	@ 0xc0
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800144a:	2312      	movs	r3, #18
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800144e:	2301      	movs	r3, #1
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001456:	2304      	movs	r3, #4
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	480b      	ldr	r0, [pc, #44]	@ (8001490 <HAL_I2C_MspInit+0x84>)
 8001462:	f000 fcf5 	bl	8001e50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001466:	4b09      	ldr	r3, [pc, #36]	@ (800148c <HAL_I2C_MspInit+0x80>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	4a08      	ldr	r2, [pc, #32]	@ (800148c <HAL_I2C_MspInit+0x80>)
 800146c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001470:	61d3      	str	r3, [r2, #28]
 8001472:	4b06      	ldr	r3, [pc, #24]	@ (800148c <HAL_I2C_MspInit+0x80>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	@ 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40005400 	.word	0x40005400
 800148c:	40021000 	.word	0x40021000
 8001490:	48000400 	.word	0x48000400

08001494 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	@ 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a17      	ldr	r2, [pc, #92]	@ (8001510 <HAL_SPI_MspInit+0x7c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d128      	bne.n	8001508 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014b6:	4b17      	ldr	r3, [pc, #92]	@ (8001514 <HAL_SPI_MspInit+0x80>)
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	4a16      	ldr	r2, [pc, #88]	@ (8001514 <HAL_SPI_MspInit+0x80>)
 80014bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014c0:	6193      	str	r3, [r2, #24]
 80014c2:	4b14      	ldr	r3, [pc, #80]	@ (8001514 <HAL_SPI_MspInit+0x80>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <HAL_SPI_MspInit+0x80>)
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	4a10      	ldr	r2, [pc, #64]	@ (8001514 <HAL_SPI_MspInit+0x80>)
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d8:	6153      	str	r3, [r2, #20]
 80014da:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <HAL_SPI_MspInit+0x80>)
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80014e6:	23e0      	movs	r3, #224	@ 0xe0
 80014e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014f6:	2305      	movs	r3, #5
 80014f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001504:	f000 fca4 	bl	8001e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	@ 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40013000 	.word	0x40013000
 8001514:	40021000 	.word	0x40021000

08001518 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a08      	ldr	r2, [pc, #32]	@ (8001548 <HAL_SPI_MspDeInit+0x30>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d10a      	bne.n	8001540 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800152a:	4b08      	ldr	r3, [pc, #32]	@ (800154c <HAL_SPI_MspDeInit+0x34>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	4a07      	ldr	r2, [pc, #28]	@ (800154c <HAL_SPI_MspDeInit+0x34>)
 8001530:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001534:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin);
 8001536:	21e0      	movs	r1, #224	@ 0xe0
 8001538:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800153c:	f000 fe02 	bl	8002144 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40013000 	.word	0x40013000
 800154c:	40021000 	.word	0x40021000

08001550 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001560:	d10c      	bne.n	800157c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001562:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <HAL_TIM_PWM_MspInit+0x5c>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	4a11      	ldr	r2, [pc, #68]	@ (80015ac <HAL_TIM_PWM_MspInit+0x5c>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	61d3      	str	r3, [r2, #28]
 800156e:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <HAL_TIM_PWM_MspInit+0x5c>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800157a:	e010      	b.n	800159e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0b      	ldr	r2, [pc, #44]	@ (80015b0 <HAL_TIM_PWM_MspInit+0x60>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d10b      	bne.n	800159e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001586:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <HAL_TIM_PWM_MspInit+0x5c>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	4a08      	ldr	r2, [pc, #32]	@ (80015ac <HAL_TIM_PWM_MspInit+0x5c>)
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	61d3      	str	r3, [r2, #28]
 8001592:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <HAL_TIM_PWM_MspInit+0x5c>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
}
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40000400 	.word	0x40000400

080015b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	@ 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015d4:	d11e      	bne.n	8001614 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	4b30      	ldr	r3, [pc, #192]	@ (8001698 <HAL_TIM_MspPostInit+0xe4>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	4a2f      	ldr	r2, [pc, #188]	@ (8001698 <HAL_TIM_MspPostInit+0xe4>)
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e0:	6153      	str	r3, [r2, #20]
 80015e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001698 <HAL_TIM_MspPostInit+0xe4>)
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 80015ee:	f248 030e 	movw	r3, #32782	@ 0x800e
 80015f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001600:	2301      	movs	r3, #1
 8001602:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800160e:	f000 fc1f 	bl	8001e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001612:	e03d      	b.n	8001690 <HAL_TIM_MspPostInit+0xdc>
  else if(htim->Instance==TIM3)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a20      	ldr	r2, [pc, #128]	@ (800169c <HAL_TIM_MspPostInit+0xe8>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d138      	bne.n	8001690 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	4b1e      	ldr	r3, [pc, #120]	@ (8001698 <HAL_TIM_MspPostInit+0xe4>)
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	4a1d      	ldr	r2, [pc, #116]	@ (8001698 <HAL_TIM_MspPostInit+0xe4>)
 8001624:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001628:	6153      	str	r3, [r2, #20]
 800162a:	4b1b      	ldr	r3, [pc, #108]	@ (8001698 <HAL_TIM_MspPostInit+0xe4>)
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001636:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <HAL_TIM_MspPostInit+0xe4>)
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	4a17      	ldr	r2, [pc, #92]	@ (8001698 <HAL_TIM_MspPostInit+0xe4>)
 800163c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001640:	6153      	str	r3, [r2, #20]
 8001642:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <HAL_TIM_MspPostInit+0xe4>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800164e:	2310      	movs	r3, #16
 8001650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800165e:	2302      	movs	r3, #2
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800166c:	f000 fbf0 	bl	8001e50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001670:	2340      	movs	r3, #64	@ 0x40
 8001672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001680:	2302      	movs	r3, #2
 8001682:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <HAL_TIM_MspPostInit+0xec>)
 800168c:	f000 fbe0 	bl	8001e50 <HAL_GPIO_Init>
}
 8001690:	bf00      	nop
 8001692:	3728      	adds	r7, #40	@ 0x28
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40021000 	.word	0x40021000
 800169c:	40000400 	.word	0x40000400
 80016a0:	48000800 	.word	0x48000800

080016a4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	@ 0x28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001734 <HAL_USART_MspInit+0x90>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d131      	bne.n	800172a <HAL_USART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001738 <HAL_USART_MspInit+0x94>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001738 <HAL_USART_MspInit+0x94>)
 80016cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016d0:	6193      	str	r3, [r2, #24]
 80016d2:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <HAL_USART_MspInit+0x94>)
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	4b16      	ldr	r3, [pc, #88]	@ (8001738 <HAL_USART_MspInit+0x94>)
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	4a15      	ldr	r2, [pc, #84]	@ (8001738 <HAL_USART_MspInit+0x94>)
 80016e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e8:	6153      	str	r3, [r2, #20]
 80016ea:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <HAL_USART_MspInit+0x94>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80016f6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80016fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001708:	2307      	movs	r3, #7
 800170a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4619      	mov	r1, r3
 8001712:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001716:	f000 fb9b 	bl	8001e50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	2025      	movs	r0, #37	@ 0x25
 8001720:	f000 fb21 	bl	8001d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001724:	2025      	movs	r0, #37	@ 0x25
 8001726:	f000 fb3a 	bl	8001d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800172a:	bf00      	nop
 800172c:	3728      	adds	r7, #40	@ 0x28
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40013800 	.word	0x40013800
 8001738:	40021000 	.word	0x40021000

0800173c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	@ 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a18      	ldr	r2, [pc, #96]	@ (80017bc <HAL_PCD_MspInit+0x80>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d129      	bne.n	80017b2 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	4b18      	ldr	r3, [pc, #96]	@ (80017c0 <HAL_PCD_MspInit+0x84>)
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	4a17      	ldr	r2, [pc, #92]	@ (80017c0 <HAL_PCD_MspInit+0x84>)
 8001764:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001768:	6153      	str	r3, [r2, #20]
 800176a:	4b15      	ldr	r3, [pc, #84]	@ (80017c0 <HAL_PCD_MspInit+0x84>)
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001776:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800177a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001784:	2303      	movs	r3, #3
 8001786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001788:	230e      	movs	r3, #14
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4619      	mov	r1, r3
 8001792:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001796:	f000 fb5b 	bl	8001e50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800179a:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <HAL_PCD_MspInit+0x84>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	4a08      	ldr	r2, [pc, #32]	@ (80017c0 <HAL_PCD_MspInit+0x84>)
 80017a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80017a4:	61d3      	str	r3, [r2, #28]
 80017a6:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <HAL_PCD_MspInit+0x84>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80017b2:	bf00      	nop
 80017b4:	3728      	adds	r7, #40	@ 0x28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40005c00 	.word	0x40005c00
 80017c0:	40021000 	.word	0x40021000

080017c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <NMI_Handler+0x4>

080017cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <HardFault_Handler+0x4>

080017d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <MemManage_Handler+0x4>

080017dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <BusFault_Handler+0x4>

080017e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <UsageFault_Handler+0x4>

080017ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800181a:	f000 f9a9 	bl	8001b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart1);
 8001828:	4802      	ldr	r0, [pc, #8]	@ (8001834 <USART1_IRQHandler+0x10>)
 800182a:	f003 fec5 	bl	80055b8 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	2000053c 	.word	0x2000053c

08001838 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return 1;
 800183c:	2301      	movs	r3, #1
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <_kill>:

int _kill(int pid, int sig)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001852:	f006 f849 	bl	80078e8 <__errno>
 8001856:	4603      	mov	r3, r0
 8001858:	2216      	movs	r2, #22
 800185a:	601a      	str	r2, [r3, #0]
  return -1;
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_exit>:

void _exit (int status)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001870:	f04f 31ff 	mov.w	r1, #4294967295
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ffe7 	bl	8001848 <_kill>
  while (1) {}    /* Make sure we hang here */
 800187a:	bf00      	nop
 800187c:	e7fd      	b.n	800187a <_exit+0x12>

0800187e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	e00a      	b.n	80018a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001890:	f3af 8000 	nop.w
 8001894:	4601      	mov	r1, r0
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	60ba      	str	r2, [r7, #8]
 800189c:	b2ca      	uxtb	r2, r1
 800189e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	3301      	adds	r3, #1
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	dbf0      	blt.n	8001890 <_read+0x12>
  }

  return len;
 80018ae:	687b      	ldr	r3, [r7, #4]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	e009      	b.n	80018de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	60ba      	str	r2, [r7, #8]
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	3301      	adds	r3, #1
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	dbf1      	blt.n	80018ca <_write+0x12>
  }
  return len;
 80018e6:	687b      	ldr	r3, [r7, #4]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <_close>:

int _close(int file)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001918:	605a      	str	r2, [r3, #4]
  return 0;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_isatty>:

int _isatty(int file)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001930:	2301      	movs	r3, #1
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800193e:	b480      	push	{r7}
 8001940:	b085      	sub	sp, #20
 8001942:	af00      	add	r7, sp, #0
 8001944:	60f8      	str	r0, [r7, #12]
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001960:	4a14      	ldr	r2, [pc, #80]	@ (80019b4 <_sbrk+0x5c>)
 8001962:	4b15      	ldr	r3, [pc, #84]	@ (80019b8 <_sbrk+0x60>)
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800196c:	4b13      	ldr	r3, [pc, #76]	@ (80019bc <_sbrk+0x64>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d102      	bne.n	800197a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001974:	4b11      	ldr	r3, [pc, #68]	@ (80019bc <_sbrk+0x64>)
 8001976:	4a12      	ldr	r2, [pc, #72]	@ (80019c0 <_sbrk+0x68>)
 8001978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800197a:	4b10      	ldr	r3, [pc, #64]	@ (80019bc <_sbrk+0x64>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	429a      	cmp	r2, r3
 8001986:	d207      	bcs.n	8001998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001988:	f005 ffae 	bl	80078e8 <__errno>
 800198c:	4603      	mov	r3, r0
 800198e:	220c      	movs	r2, #12
 8001990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
 8001996:	e009      	b.n	80019ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001998:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <_sbrk+0x64>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800199e:	4b07      	ldr	r3, [pc, #28]	@ (80019bc <_sbrk+0x64>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	4a05      	ldr	r2, [pc, #20]	@ (80019bc <_sbrk+0x64>)
 80019a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019aa:	68fb      	ldr	r3, [r7, #12]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	2000a000 	.word	0x2000a000
 80019b8:	00000400 	.word	0x00000400
 80019bc:	20000878 	.word	0x20000878
 80019c0:	20000a38 	.word	0x20000a38

080019c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c8:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <SystemInit+0x20>)
 80019ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ce:	4a05      	ldr	r2, [pc, #20]	@ (80019e4 <SystemInit+0x20>)
 80019d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <TIM2_IRQHandler>:
    hardware_timer->timer_completion_function = completion_function;

}

// tim2 overflow handler
void TIM2_IRQHandler(void) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 80019ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d01d      	beq.n	8001a36 <TIM2_IRQHandler+0x4e>
        TIM2->SR &= ~TIM_SR_UIF; // Clear the interrupt flag
 80019fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a04:	f023 0301 	bic.w	r3, r3, #1
 8001a08:	6113      	str	r3, [r2, #16]

        if (TIM2_init.oneShotMode) {
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <TIM2_IRQHandler+0x54>)
 8001a0c:	7b1b      	ldrb	r3, [r3, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00a      	beq.n	8001a28 <TIM2_IRQHandler+0x40>
            TIM2->CR1 &= ~TIM_CR1_CEN; // Stop the timer if in one-shot mode
 8001a12:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	6013      	str	r3, [r2, #0]

            TIM2_init.oneShotMode = 0; // turn off the oneshot mode
 8001a22:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <TIM2_IRQHandler+0x54>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	731a      	strb	r2, [r3, #12]
        }

        // only run if the timer is not null
        if (TIM2_init.timer_completion_function != 0x00) {
 8001a28:	4b04      	ldr	r3, [pc, #16]	@ (8001a3c <TIM2_IRQHandler+0x54>)
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d002      	beq.n	8001a36 <TIM2_IRQHandler+0x4e>
            TIM2_init.timer_completion_function();
 8001a30:	4b02      	ldr	r3, [pc, #8]	@ (8001a3c <TIM2_IRQHandler+0x54>)
 8001a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a34:	4798      	blx	r3
        }
    }
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000144 	.word	0x20000144

08001a40 <TIM4_IRQHandler>:

// tim4 overflow handler
void TIM4_IRQHandler(void) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
    if (TIM4->SR & TIM_SR_UIF) {
 8001a44:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <TIM4_IRQHandler+0x48>)
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d019      	beq.n	8001a84 <TIM4_IRQHandler+0x44>
        TIM4->SR &= ~TIM_SR_UIF; // Clear the interrupt flag
 8001a50:	4b0d      	ldr	r3, [pc, #52]	@ (8001a88 <TIM4_IRQHandler+0x48>)
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	4a0c      	ldr	r2, [pc, #48]	@ (8001a88 <TIM4_IRQHandler+0x48>)
 8001a56:	f023 0301 	bic.w	r3, r3, #1
 8001a5a:	6113      	str	r3, [r2, #16]

        if (TIM4_init.oneShotMode) {
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <TIM4_IRQHandler+0x4c>)
 8001a5e:	7b1b      	ldrb	r3, [r3, #12]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d008      	beq.n	8001a76 <TIM4_IRQHandler+0x36>
            TIM4->CR1 &= ~TIM_CR1_CEN; // Stop the timer if in one-shot mode
 8001a64:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <TIM4_IRQHandler+0x48>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a07      	ldr	r2, [pc, #28]	@ (8001a88 <TIM4_IRQHandler+0x48>)
 8001a6a:	f023 0301 	bic.w	r3, r3, #1
 8001a6e:	6013      	str	r3, [r2, #0]

            TIM4_init.oneShotMode = 0; // turn off the oneshot mode
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <TIM4_IRQHandler+0x4c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	731a      	strb	r2, [r3, #12]
        }

        // only run if the timer is not null
        if (TIM4_init.timer_completion_function != 0x00) {
 8001a76:	4b05      	ldr	r3, [pc, #20]	@ (8001a8c <TIM4_IRQHandler+0x4c>)
 8001a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d002      	beq.n	8001a84 <TIM4_IRQHandler+0x44>
            TIM4_init.timer_completion_function();
 8001a7e:	4b03      	ldr	r3, [pc, #12]	@ (8001a8c <TIM4_IRQHandler+0x4c>)
 8001a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a82:	4798      	blx	r3
        }
    }
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40000800 	.word	0x40000800
 8001a8c:	2000016c 	.word	0x2000016c

08001a90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ac8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a94:	f7ff ff96 	bl	80019c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a98:	480c      	ldr	r0, [pc, #48]	@ (8001acc <LoopForever+0x6>)
  ldr r1, =_edata
 8001a9a:	490d      	ldr	r1, [pc, #52]	@ (8001ad0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad4 <LoopForever+0xe>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa0:	e002      	b.n	8001aa8 <LoopCopyDataInit>

08001aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa6:	3304      	adds	r3, #4

08001aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aac:	d3f9      	bcc.n	8001aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ab0:	4c0a      	ldr	r4, [pc, #40]	@ (8001adc <LoopForever+0x16>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab4:	e001      	b.n	8001aba <LoopFillZerobss>

08001ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab8:	3204      	adds	r2, #4

08001aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001abc:	d3fb      	bcc.n	8001ab6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001abe:	f005 ff19 	bl	80078f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ac2:	f7ff f917 	bl	8000cf4 <main>

08001ac6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ac6:	e7fe      	b.n	8001ac6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ac8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad0:	200003d0 	.word	0x200003d0
  ldr r2, =_sidata
 8001ad4:	0800b488 	.word	0x0800b488
  ldr r2, =_sbss
 8001ad8:	200003d0 	.word	0x200003d0
  ldr r4, =_ebss
 8001adc:	20000a34 	.word	0x20000a34

08001ae0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ae0:	e7fe      	b.n	8001ae0 <ADC1_2_IRQHandler>
	...

08001ae4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae8:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <HAL_Init+0x28>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a07      	ldr	r2, [pc, #28]	@ (8001b0c <HAL_Init+0x28>)
 8001aee:	f043 0310 	orr.w	r3, r3, #16
 8001af2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af4:	2003      	movs	r0, #3
 8001af6:	f000 f92b 	bl	8001d50 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001afa:	2000      	movs	r0, #0
 8001afc:	f000 f808 	bl	8001b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b00:	f7ff fc60 	bl	80013c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40022000 	.word	0x40022000

08001b10 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b18:	4b12      	ldr	r3, [pc, #72]	@ (8001b64 <HAL_InitTick+0x54>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b12      	ldr	r3, [pc, #72]	@ (8001b68 <HAL_InitTick+0x58>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4619      	mov	r1, r3
 8001b22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 f943 	bl	8001dba <HAL_SYSTICK_Config>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e00e      	b.n	8001b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b0f      	cmp	r3, #15
 8001b42:	d80a      	bhi.n	8001b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b44:	2200      	movs	r2, #0
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4c:	f000 f90b 	bl	8001d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b50:	4a06      	ldr	r2, [pc, #24]	@ (8001b6c <HAL_InitTick+0x5c>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	e000      	b.n	8001b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000140 	.word	0x20000140
 8001b68:	20000198 	.word	0x20000198
 8001b6c:	20000194 	.word	0x20000194

08001b70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b74:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <HAL_IncTick+0x20>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <HAL_IncTick+0x24>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	4a04      	ldr	r2, [pc, #16]	@ (8001b94 <HAL_IncTick+0x24>)
 8001b82:	6013      	str	r3, [r2, #0]
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000198 	.word	0x20000198
 8001b94:	2000087c 	.word	0x2000087c

08001b98 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b9c:	4b03      	ldr	r3, [pc, #12]	@ (8001bac <HAL_GetTick+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	2000087c 	.word	0x2000087c

08001bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be2:	4a04      	ldr	r2, [pc, #16]	@ (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	60d3      	str	r3, [r2, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bfc:	4b04      	ldr	r3, [pc, #16]	@ (8001c10 <__NVIC_GetPriorityGrouping+0x18>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	f003 0307 	and.w	r3, r3, #7
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	db0b      	blt.n	8001c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	f003 021f 	and.w	r2, r3, #31
 8001c2c:	4907      	ldr	r1, [pc, #28]	@ (8001c4c <__NVIC_EnableIRQ+0x38>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	2001      	movs	r0, #1
 8001c36:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000e100 	.word	0xe000e100

08001c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	db0a      	blt.n	8001c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	490c      	ldr	r1, [pc, #48]	@ (8001c9c <__NVIC_SetPriority+0x4c>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	0112      	lsls	r2, r2, #4
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	440b      	add	r3, r1
 8001c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c78:	e00a      	b.n	8001c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4908      	ldr	r1, [pc, #32]	@ (8001ca0 <__NVIC_SetPriority+0x50>)
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	3b04      	subs	r3, #4
 8001c88:	0112      	lsls	r2, r2, #4
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	761a      	strb	r2, [r3, #24]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000e100 	.word	0xe000e100
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	@ 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f1c3 0307 	rsb	r3, r3, #7
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	bf28      	it	cs
 8001cc2:	2304      	movcs	r3, #4
 8001cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d902      	bls.n	8001cd4 <NVIC_EncodePriority+0x30>
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3b03      	subs	r3, #3
 8001cd2:	e000      	b.n	8001cd6 <NVIC_EncodePriority+0x32>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf6:	43d9      	mvns	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	4313      	orrs	r3, r2
         );
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3724      	adds	r7, #36	@ 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d1c:	d301      	bcc.n	8001d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00f      	b.n	8001d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d22:	4a0a      	ldr	r2, [pc, #40]	@ (8001d4c <SysTick_Config+0x40>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2a:	210f      	movs	r1, #15
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d30:	f7ff ff8e 	bl	8001c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d34:	4b05      	ldr	r3, [pc, #20]	@ (8001d4c <SysTick_Config+0x40>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3a:	4b04      	ldr	r3, [pc, #16]	@ (8001d4c <SysTick_Config+0x40>)
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	e000e010 	.word	0xe000e010

08001d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ff29 	bl	8001bb0 <__NVIC_SetPriorityGrouping>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b086      	sub	sp, #24
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	607a      	str	r2, [r7, #4]
 8001d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d78:	f7ff ff3e 	bl	8001bf8 <__NVIC_GetPriorityGrouping>
 8001d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	6978      	ldr	r0, [r7, #20]
 8001d84:	f7ff ff8e 	bl	8001ca4 <NVIC_EncodePriority>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff5d 	bl	8001c50 <__NVIC_SetPriority>
}
 8001d96:	bf00      	nop
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff31 	bl	8001c14 <__NVIC_EnableIRQ>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ffa2 	bl	8001d0c <SysTick_Config>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b084      	sub	sp, #16
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d005      	beq.n	8001df4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2204      	movs	r2, #4
 8001dec:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	73fb      	strb	r3, [r7, #15]
 8001df2:	e027      	b.n	8001e44 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 020e 	bic.w	r2, r2, #14
 8001e02:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0201 	bic.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e22:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	4798      	blx	r3
    } 
  }
  return status;
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b087      	sub	sp, #28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5e:	e154      	b.n	800210a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	2101      	movs	r1, #1
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8146 	beq.w	8002104 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d005      	beq.n	8001e90 <HAL_GPIO_Init+0x40>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d130      	bne.n	8001ef2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	091b      	lsrs	r3, r3, #4
 8001edc:	f003 0201 	and.w	r2, r3, #1
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d017      	beq.n	8001f2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	2203      	movs	r2, #3
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d123      	bne.n	8001f82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	08da      	lsrs	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3208      	adds	r2, #8
 8001f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	220f      	movs	r2, #15
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	691a      	ldr	r2, [r3, #16]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	08da      	lsrs	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3208      	adds	r2, #8
 8001f7c:	6939      	ldr	r1, [r7, #16]
 8001f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0203 	and.w	r2, r3, #3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 80a0 	beq.w	8002104 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc4:	4b58      	ldr	r3, [pc, #352]	@ (8002128 <HAL_GPIO_Init+0x2d8>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	4a57      	ldr	r2, [pc, #348]	@ (8002128 <HAL_GPIO_Init+0x2d8>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6193      	str	r3, [r2, #24]
 8001fd0:	4b55      	ldr	r3, [pc, #340]	@ (8002128 <HAL_GPIO_Init+0x2d8>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fdc:	4a53      	ldr	r2, [pc, #332]	@ (800212c <HAL_GPIO_Init+0x2dc>)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	089b      	lsrs	r3, r3, #2
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	220f      	movs	r2, #15
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002006:	d019      	beq.n	800203c <HAL_GPIO_Init+0x1ec>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a49      	ldr	r2, [pc, #292]	@ (8002130 <HAL_GPIO_Init+0x2e0>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d013      	beq.n	8002038 <HAL_GPIO_Init+0x1e8>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a48      	ldr	r2, [pc, #288]	@ (8002134 <HAL_GPIO_Init+0x2e4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d00d      	beq.n	8002034 <HAL_GPIO_Init+0x1e4>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a47      	ldr	r2, [pc, #284]	@ (8002138 <HAL_GPIO_Init+0x2e8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d007      	beq.n	8002030 <HAL_GPIO_Init+0x1e0>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a46      	ldr	r2, [pc, #280]	@ (800213c <HAL_GPIO_Init+0x2ec>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d101      	bne.n	800202c <HAL_GPIO_Init+0x1dc>
 8002028:	2304      	movs	r3, #4
 800202a:	e008      	b.n	800203e <HAL_GPIO_Init+0x1ee>
 800202c:	2305      	movs	r3, #5
 800202e:	e006      	b.n	800203e <HAL_GPIO_Init+0x1ee>
 8002030:	2303      	movs	r3, #3
 8002032:	e004      	b.n	800203e <HAL_GPIO_Init+0x1ee>
 8002034:	2302      	movs	r3, #2
 8002036:	e002      	b.n	800203e <HAL_GPIO_Init+0x1ee>
 8002038:	2301      	movs	r3, #1
 800203a:	e000      	b.n	800203e <HAL_GPIO_Init+0x1ee>
 800203c:	2300      	movs	r3, #0
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	f002 0203 	and.w	r2, r2, #3
 8002044:	0092      	lsls	r2, r2, #2
 8002046:	4093      	lsls	r3, r2
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800204e:	4937      	ldr	r1, [pc, #220]	@ (800212c <HAL_GPIO_Init+0x2dc>)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	089b      	lsrs	r3, r3, #2
 8002054:	3302      	adds	r3, #2
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800205c:	4b38      	ldr	r3, [pc, #224]	@ (8002140 <HAL_GPIO_Init+0x2f0>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	43db      	mvns	r3, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002080:	4a2f      	ldr	r2, [pc, #188]	@ (8002140 <HAL_GPIO_Init+0x2f0>)
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002086:	4b2e      	ldr	r3, [pc, #184]	@ (8002140 <HAL_GPIO_Init+0x2f0>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	43db      	mvns	r3, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020aa:	4a25      	ldr	r2, [pc, #148]	@ (8002140 <HAL_GPIO_Init+0x2f0>)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020b0:	4b23      	ldr	r3, [pc, #140]	@ (8002140 <HAL_GPIO_Init+0x2f0>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002140 <HAL_GPIO_Init+0x2f0>)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020da:	4b19      	ldr	r3, [pc, #100]	@ (8002140 <HAL_GPIO_Init+0x2f0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4013      	ands	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020fe:	4a10      	ldr	r2, [pc, #64]	@ (8002140 <HAL_GPIO_Init+0x2f0>)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	3301      	adds	r3, #1
 8002108:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	fa22 f303 	lsr.w	r3, r2, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	f47f aea3 	bne.w	8001e60 <HAL_GPIO_Init+0x10>
  }
}
 800211a:	bf00      	nop
 800211c:	bf00      	nop
 800211e:	371c      	adds	r7, #28
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	40021000 	.word	0x40021000
 800212c:	40010000 	.word	0x40010000
 8002130:	48000400 	.word	0x48000400
 8002134:	48000800 	.word	0x48000800
 8002138:	48000c00 	.word	0x48000c00
 800213c:	48001000 	.word	0x48001000
 8002140:	40010400 	.word	0x40010400

08002144 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002144:	b480      	push	{r7}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002152:	e0b8      	b.n	80022c6 <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002154:	2201      	movs	r2, #1
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	4013      	ands	r3, r2
 8002160:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80ab 	beq.w	80022c0 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800216a:	4a5e      	ldr	r2, [pc, #376]	@ (80022e4 <HAL_GPIO_DeInit+0x1a0>)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	089b      	lsrs	r3, r3, #2
 8002170:	3302      	adds	r3, #2
 8002172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002176:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	220f      	movs	r2, #15
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	4013      	ands	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002192:	d019      	beq.n	80021c8 <HAL_GPIO_DeInit+0x84>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a54      	ldr	r2, [pc, #336]	@ (80022e8 <HAL_GPIO_DeInit+0x1a4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d013      	beq.n	80021c4 <HAL_GPIO_DeInit+0x80>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a53      	ldr	r2, [pc, #332]	@ (80022ec <HAL_GPIO_DeInit+0x1a8>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d00d      	beq.n	80021c0 <HAL_GPIO_DeInit+0x7c>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a52      	ldr	r2, [pc, #328]	@ (80022f0 <HAL_GPIO_DeInit+0x1ac>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d007      	beq.n	80021bc <HAL_GPIO_DeInit+0x78>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a51      	ldr	r2, [pc, #324]	@ (80022f4 <HAL_GPIO_DeInit+0x1b0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d101      	bne.n	80021b8 <HAL_GPIO_DeInit+0x74>
 80021b4:	2304      	movs	r3, #4
 80021b6:	e008      	b.n	80021ca <HAL_GPIO_DeInit+0x86>
 80021b8:	2305      	movs	r3, #5
 80021ba:	e006      	b.n	80021ca <HAL_GPIO_DeInit+0x86>
 80021bc:	2303      	movs	r3, #3
 80021be:	e004      	b.n	80021ca <HAL_GPIO_DeInit+0x86>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e002      	b.n	80021ca <HAL_GPIO_DeInit+0x86>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <HAL_GPIO_DeInit+0x86>
 80021c8:	2300      	movs	r3, #0
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	f002 0203 	and.w	r2, r2, #3
 80021d0:	0092      	lsls	r2, r2, #2
 80021d2:	4093      	lsls	r3, r2
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d132      	bne.n	8002240 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80021da:	4b47      	ldr	r3, [pc, #284]	@ (80022f8 <HAL_GPIO_DeInit+0x1b4>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	4945      	ldr	r1, [pc, #276]	@ (80022f8 <HAL_GPIO_DeInit+0x1b4>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80021e8:	4b43      	ldr	r3, [pc, #268]	@ (80022f8 <HAL_GPIO_DeInit+0x1b4>)
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	4941      	ldr	r1, [pc, #260]	@ (80022f8 <HAL_GPIO_DeInit+0x1b4>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80021f6:	4b40      	ldr	r3, [pc, #256]	@ (80022f8 <HAL_GPIO_DeInit+0x1b4>)
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	493e      	ldr	r1, [pc, #248]	@ (80022f8 <HAL_GPIO_DeInit+0x1b4>)
 8002200:	4013      	ands	r3, r2
 8002202:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002204:	4b3c      	ldr	r3, [pc, #240]	@ (80022f8 <HAL_GPIO_DeInit+0x1b4>)
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	43db      	mvns	r3, r3
 800220c:	493a      	ldr	r1, [pc, #232]	@ (80022f8 <HAL_GPIO_DeInit+0x1b4>)
 800220e:	4013      	ands	r3, r2
 8002210:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	220f      	movs	r2, #15
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002222:	4a30      	ldr	r2, [pc, #192]	@ (80022e4 <HAL_GPIO_DeInit+0x1a0>)
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	089b      	lsrs	r3, r3, #2
 8002228:	3302      	adds	r3, #2
 800222a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	43da      	mvns	r2, r3
 8002232:	482c      	ldr	r0, [pc, #176]	@ (80022e4 <HAL_GPIO_DeInit+0x1a0>)
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	400a      	ands	r2, r1
 800223a:	3302      	adds	r3, #2
 800223c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	2103      	movs	r1, #3
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	401a      	ands	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	08da      	lsrs	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3208      	adds	r2, #8
 800225e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	220f      	movs	r2, #15
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	08d2      	lsrs	r2, r2, #3
 8002276:	4019      	ands	r1, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3208      	adds	r2, #8
 800227c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	2103      	movs	r1, #3
 800228a:	fa01 f303 	lsl.w	r3, r1, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	401a      	ands	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	2101      	movs	r1, #1
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	401a      	ands	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	2103      	movs	r1, #3
 80022b4:	fa01 f303 	lsl.w	r3, r1, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	401a      	ands	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	609a      	str	r2, [r3, #8]
    }

    position++;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	3301      	adds	r3, #1
 80022c4:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	fa22 f303 	lsr.w	r3, r2, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f47f af40 	bne.w	8002154 <HAL_GPIO_DeInit+0x10>
  }
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	371c      	adds	r7, #28
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40010000 	.word	0x40010000
 80022e8:	48000400 	.word	0x48000400
 80022ec:	48000800 	.word	0x48000800
 80022f0:	48000c00 	.word	0x48000c00
 80022f4:	48001000 	.word	0x48001000
 80022f8:	40010400 	.word	0x40010400

080022fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	807b      	strh	r3, [r7, #2]
 8002308:	4613      	mov	r3, r2
 800230a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800230c:	787b      	ldrb	r3, [r7, #1]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002312:	887a      	ldrh	r2, [r7, #2]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002318:	e002      	b.n	8002320 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e081      	b.n	8002442 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d106      	bne.n	8002358 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff f85a 	bl	800140c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2224      	movs	r2, #36	@ 0x24
 800235c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0201 	bic.w	r2, r2, #1
 800236e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800237c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800238c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d107      	bne.n	80023a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	e006      	b.n	80023b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80023b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d104      	bne.n	80023c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691a      	ldr	r2, [r3, #16]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69d9      	ldr	r1, [r3, #28]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a1a      	ldr	r2, [r3, #32]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2220      	movs	r2, #32
 800242e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b20      	cmp	r3, #32
 800245e:	d138      	bne.n	80024d2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002466:	2b01      	cmp	r3, #1
 8002468:	d101      	bne.n	800246e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800246a:	2302      	movs	r3, #2
 800246c:	e032      	b.n	80024d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2224      	movs	r2, #36	@ 0x24
 800247a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0201 	bic.w	r2, r2, #1
 800248c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800249c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6819      	ldr	r1, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0201 	orr.w	r2, r2, #1
 80024bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e000      	b.n	80024d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024d2:	2302      	movs	r3, #2
  }
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b20      	cmp	r3, #32
 80024f4:	d139      	bne.n	800256a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d101      	bne.n	8002504 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002500:	2302      	movs	r3, #2
 8002502:	e033      	b.n	800256c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2224      	movs	r2, #36	@ 0x24
 8002510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0201 	bic.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002532:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0201 	orr.w	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2220      	movs	r2, #32
 800255a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	e000      	b.n	800256c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800256a:	2302      	movs	r3, #2
  }
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800257a:	b08b      	sub	sp, #44	@ 0x2c
 800257c:	af06      	add	r7, sp, #24
 800257e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e0c4      	b.n	8002714 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff f8cc 	bl	800173c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2203      	movs	r2, #3
 80025a8:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f003 fb93 	bl	8005cdc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b6:	2300      	movs	r3, #0
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	e040      	b.n	800263e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	4613      	mov	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	440b      	add	r3, r1
 80025cc:	3301      	adds	r3, #1
 80025ce:	2201      	movs	r2, #1
 80025d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	440b      	add	r3, r1
 80025e2:	7bfa      	ldrb	r2, [r7, #15]
 80025e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	440b      	add	r3, r1
 80025f6:	3303      	adds	r3, #3
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025fc:	7bfa      	ldrb	r2, [r7, #15]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	440b      	add	r3, r1
 800260a:	3338      	adds	r3, #56	@ 0x38
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002610:	7bfa      	ldrb	r2, [r7, #15]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	440b      	add	r3, r1
 800261e:	333c      	adds	r3, #60	@ 0x3c
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002624:	7bfa      	ldrb	r2, [r7, #15]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	440b      	add	r3, r1
 8002632:	3340      	adds	r3, #64	@ 0x40
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	3301      	adds	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	7bfa      	ldrb	r2, [r7, #15]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	429a      	cmp	r2, r3
 8002646:	d3b9      	bcc.n	80025bc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002648:	2300      	movs	r3, #0
 800264a:	73fb      	strb	r3, [r7, #15]
 800264c:	e044      	b.n	80026d8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800264e:	7bfa      	ldrb	r2, [r7, #15]
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	440b      	add	r3, r1
 800265c:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002664:	7bfa      	ldrb	r2, [r7, #15]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	440b      	add	r3, r1
 8002672:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002676:	7bfa      	ldrb	r2, [r7, #15]
 8002678:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800267a:	7bfa      	ldrb	r2, [r7, #15]
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	440b      	add	r3, r1
 8002688:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002690:	7bfa      	ldrb	r2, [r7, #15]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	440b      	add	r3, r1
 800269e:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026a6:	7bfa      	ldrb	r2, [r7, #15]
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	440b      	add	r3, r1
 80026b4:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026bc:	7bfa      	ldrb	r2, [r7, #15]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	440b      	add	r3, r1
 80026ca:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	3301      	adds	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
 80026d8:	7bfa      	ldrb	r2, [r7, #15]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d3b5      	bcc.n	800264e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	687e      	ldr	r6, [r7, #4]
 80026ea:	466d      	mov	r5, sp
 80026ec:	f106 0410 	add.w	r4, r6, #16
 80026f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f4:	6823      	ldr	r3, [r4, #0]
 80026f6:	602b      	str	r3, [r5, #0]
 80026f8:	1d33      	adds	r3, r6, #4
 80026fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026fc:	6838      	ldr	r0, [r7, #0]
 80026fe:	f003 fb08 	bl	8005d12 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800271c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002722:	af00      	add	r7, sp, #0
 8002724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002728:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800272c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800272e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002732:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d102      	bne.n	8002742 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	f001 b823 	b.w	8003788 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002742:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002746:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 817d 	beq.w	8002a52 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002758:	4bbc      	ldr	r3, [pc, #752]	@ (8002a4c <HAL_RCC_OscConfig+0x330>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 030c 	and.w	r3, r3, #12
 8002760:	2b04      	cmp	r3, #4
 8002762:	d00c      	beq.n	800277e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002764:	4bb9      	ldr	r3, [pc, #740]	@ (8002a4c <HAL_RCC_OscConfig+0x330>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 030c 	and.w	r3, r3, #12
 800276c:	2b08      	cmp	r3, #8
 800276e:	d15c      	bne.n	800282a <HAL_RCC_OscConfig+0x10e>
 8002770:	4bb6      	ldr	r3, [pc, #728]	@ (8002a4c <HAL_RCC_OscConfig+0x330>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800277c:	d155      	bne.n	800282a <HAL_RCC_OscConfig+0x10e>
 800277e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002782:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002786:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002792:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	095b      	lsrs	r3, r3, #5
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d102      	bne.n	80027b0 <HAL_RCC_OscConfig+0x94>
 80027aa:	4ba8      	ldr	r3, [pc, #672]	@ (8002a4c <HAL_RCC_OscConfig+0x330>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	e015      	b.n	80027dc <HAL_RCC_OscConfig+0xc0>
 80027b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027b4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80027bc:	fa93 f3a3 	rbit	r3, r3
 80027c0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80027c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027c8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80027cc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80027d8:	4b9c      	ldr	r3, [pc, #624]	@ (8002a4c <HAL_RCC_OscConfig+0x330>)
 80027da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027e0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80027e4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80027e8:	fa92 f2a2 	rbit	r2, r2
 80027ec:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80027f0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80027f4:	fab2 f282 	clz	r2, r2
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	f042 0220 	orr.w	r2, r2, #32
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	f002 021f 	and.w	r2, r2, #31
 8002804:	2101      	movs	r1, #1
 8002806:	fa01 f202 	lsl.w	r2, r1, r2
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 811f 	beq.w	8002a50 <HAL_RCC_OscConfig+0x334>
 8002812:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002816:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	f040 8116 	bne.w	8002a50 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	f000 bfaf 	b.w	8003788 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800282a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800283a:	d106      	bne.n	800284a <HAL_RCC_OscConfig+0x12e>
 800283c:	4b83      	ldr	r3, [pc, #524]	@ (8002a4c <HAL_RCC_OscConfig+0x330>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a82      	ldr	r2, [pc, #520]	@ (8002a4c <HAL_RCC_OscConfig+0x330>)
 8002842:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	e036      	b.n	80028b8 <HAL_RCC_OscConfig+0x19c>
 800284a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10c      	bne.n	8002874 <HAL_RCC_OscConfig+0x158>
 800285a:	4b7c      	ldr	r3, [pc, #496]	@ (8002a4c <HAL_RCC_OscConfig+0x330>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a7b      	ldr	r2, [pc, #492]	@ (8002a4c <HAL_RCC_OscConfig+0x330>)
 8002860:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	4b79      	ldr	r3, [pc, #484]	@ (8002a4c <HAL_RCC_OscConfig+0x330>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a78      	ldr	r2, [pc, #480]	@ (8002a4c <HAL_RCC_OscConfig+0x330>)
 800286c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e021      	b.n	80028b8 <HAL_RCC_OscConfig+0x19c>
 8002874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002878:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002884:	d10c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x184>
 8002886:	4b71      	ldr	r3, [pc, #452]	@ (8002a4c <HAL_RCC_OscConfig+0x330>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a70      	ldr	r2, [pc, #448]	@ (8002a4c <HAL_RCC_OscConfig+0x330>)
 800288c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	4b6e      	ldr	r3, [pc, #440]	@ (8002a4c <HAL_RCC_OscConfig+0x330>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a6d      	ldr	r2, [pc, #436]	@ (8002a4c <HAL_RCC_OscConfig+0x330>)
 8002898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e00b      	b.n	80028b8 <HAL_RCC_OscConfig+0x19c>
 80028a0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a4c <HAL_RCC_OscConfig+0x330>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a69      	ldr	r2, [pc, #420]	@ (8002a4c <HAL_RCC_OscConfig+0x330>)
 80028a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	4b67      	ldr	r3, [pc, #412]	@ (8002a4c <HAL_RCC_OscConfig+0x330>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a66      	ldr	r2, [pc, #408]	@ (8002a4c <HAL_RCC_OscConfig+0x330>)
 80028b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028b6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028b8:	4b64      	ldr	r3, [pc, #400]	@ (8002a4c <HAL_RCC_OscConfig+0x330>)
 80028ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028bc:	f023 020f 	bic.w	r2, r3, #15
 80028c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	495f      	ldr	r1, [pc, #380]	@ (8002a4c <HAL_RCC_OscConfig+0x330>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d059      	beq.n	8002996 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e2:	f7ff f959 	bl	8001b98 <HAL_GetTick>
 80028e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ea:	e00a      	b.n	8002902 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ec:	f7ff f954 	bl	8001b98 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b64      	cmp	r3, #100	@ 0x64
 80028fa:	d902      	bls.n	8002902 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	f000 bf43 	b.w	8003788 <HAL_RCC_OscConfig+0x106c>
 8002902:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002906:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002916:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	095b      	lsrs	r3, r3, #5
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b01      	cmp	r3, #1
 800292c:	d102      	bne.n	8002934 <HAL_RCC_OscConfig+0x218>
 800292e:	4b47      	ldr	r3, [pc, #284]	@ (8002a4c <HAL_RCC_OscConfig+0x330>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	e015      	b.n	8002960 <HAL_RCC_OscConfig+0x244>
 8002934:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002938:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002948:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800294c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002950:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002954:	fa93 f3a3 	rbit	r3, r3
 8002958:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800295c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a4c <HAL_RCC_OscConfig+0x330>)
 800295e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002960:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002964:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002968:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800296c:	fa92 f2a2 	rbit	r2, r2
 8002970:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002974:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002978:	fab2 f282 	clz	r2, r2
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	f042 0220 	orr.w	r2, r2, #32
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	f002 021f 	and.w	r2, r2, #31
 8002988:	2101      	movs	r1, #1
 800298a:	fa01 f202 	lsl.w	r2, r1, r2
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ab      	beq.n	80028ec <HAL_RCC_OscConfig+0x1d0>
 8002994:	e05d      	b.n	8002a52 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002996:	f7ff f8ff 	bl	8001b98 <HAL_GetTick>
 800299a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029a0:	f7ff f8fa 	bl	8001b98 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b64      	cmp	r3, #100	@ 0x64
 80029ae:	d902      	bls.n	80029b6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	f000 bee9 	b.w	8003788 <HAL_RCC_OscConfig+0x106c>
 80029b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029ba:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80029c2:	fa93 f3a3 	rbit	r3, r3
 80029c6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80029ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	095b      	lsrs	r3, r3, #5
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d102      	bne.n	80029e8 <HAL_RCC_OscConfig+0x2cc>
 80029e2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a4c <HAL_RCC_OscConfig+0x330>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	e015      	b.n	8002a14 <HAL_RCC_OscConfig+0x2f8>
 80029e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029ec:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80029fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a00:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002a04:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002a08:	fa93 f3a3 	rbit	r3, r3
 8002a0c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002a10:	4b0e      	ldr	r3, [pc, #56]	@ (8002a4c <HAL_RCC_OscConfig+0x330>)
 8002a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a14:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a18:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002a1c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002a20:	fa92 f2a2 	rbit	r2, r2
 8002a24:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002a28:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002a2c:	fab2 f282 	clz	r2, r2
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	f042 0220 	orr.w	r2, r2, #32
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	f002 021f 	and.w	r2, r2, #31
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1ab      	bne.n	80029a0 <HAL_RCC_OscConfig+0x284>
 8002a48:	e003      	b.n	8002a52 <HAL_RCC_OscConfig+0x336>
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 817d 	beq.w	8002d62 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a68:	4ba6      	ldr	r3, [pc, #664]	@ (8002d04 <HAL_RCC_OscConfig+0x5e8>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 030c 	and.w	r3, r3, #12
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00b      	beq.n	8002a8c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a74:	4ba3      	ldr	r3, [pc, #652]	@ (8002d04 <HAL_RCC_OscConfig+0x5e8>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 030c 	and.w	r3, r3, #12
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d172      	bne.n	8002b66 <HAL_RCC_OscConfig+0x44a>
 8002a80:	4ba0      	ldr	r3, [pc, #640]	@ (8002d04 <HAL_RCC_OscConfig+0x5e8>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d16c      	bne.n	8002b66 <HAL_RCC_OscConfig+0x44a>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002a9e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa2:	fab3 f383 	clz	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	095b      	lsrs	r3, r3, #5
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d102      	bne.n	8002abc <HAL_RCC_OscConfig+0x3a0>
 8002ab6:	4b93      	ldr	r3, [pc, #588]	@ (8002d04 <HAL_RCC_OscConfig+0x5e8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	e013      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3c8>
 8002abc:	2302      	movs	r3, #2
 8002abe:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002ace:	2302      	movs	r3, #2
 8002ad0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002ad4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002ae0:	4b88      	ldr	r3, [pc, #544]	@ (8002d04 <HAL_RCC_OscConfig+0x5e8>)
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002aea:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002aee:	fa92 f2a2 	rbit	r2, r2
 8002af2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002af6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002afa:	fab2 f282 	clz	r2, r2
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	f042 0220 	orr.w	r2, r2, #32
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	f002 021f 	and.w	r2, r2, #31
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_RCC_OscConfig+0x410>
 8002b16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d002      	beq.n	8002b2c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	f000 be2e 	b.w	8003788 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2c:	4b75      	ldr	r3, [pc, #468]	@ (8002d04 <HAL_RCC_OscConfig+0x5e8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	21f8      	movs	r1, #248	@ 0xf8
 8002b42:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002b4a:	fa91 f1a1 	rbit	r1, r1
 8002b4e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002b52:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002b56:	fab1 f181 	clz	r1, r1
 8002b5a:	b2c9      	uxtb	r1, r1
 8002b5c:	408b      	lsls	r3, r1
 8002b5e:	4969      	ldr	r1, [pc, #420]	@ (8002d04 <HAL_RCC_OscConfig+0x5e8>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b64:	e0fd      	b.n	8002d62 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 8088 	beq.w	8002c88 <HAL_RCC_OscConfig+0x56c>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002b82:	fa93 f3a3 	rbit	r3, r3
 8002b86:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002b8a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b98:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fff8 	bl	8001b98 <HAL_GetTick>
 8002ba8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bac:	e00a      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bae:	f7fe fff3 	bl	8001b98 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d902      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	f000 bde2 	b.w	8003788 <HAL_RCC_OscConfig+0x106c>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002bd6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bda:	fab3 f383 	clz	r3, r3
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	095b      	lsrs	r3, r3, #5
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d102      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4d8>
 8002bee:	4b45      	ldr	r3, [pc, #276]	@ (8002d04 <HAL_RCC_OscConfig+0x5e8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	e013      	b.n	8002c1c <HAL_RCC_OscConfig+0x500>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002c06:	2302      	movs	r3, #2
 8002c08:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002c0c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002c10:	fa93 f3a3 	rbit	r3, r3
 8002c14:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002c18:	4b3a      	ldr	r3, [pc, #232]	@ (8002d04 <HAL_RCC_OscConfig+0x5e8>)
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002c22:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002c26:	fa92 f2a2 	rbit	r2, r2
 8002c2a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002c2e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002c32:	fab2 f282 	clz	r2, r2
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	f042 0220 	orr.w	r2, r2, #32
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	f002 021f 	and.w	r2, r2, #31
 8002c42:	2101      	movs	r1, #1
 8002c44:	fa01 f202 	lsl.w	r2, r1, r2
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0af      	beq.n	8002bae <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4e:	4b2d      	ldr	r3, [pc, #180]	@ (8002d04 <HAL_RCC_OscConfig+0x5e8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	21f8      	movs	r1, #248	@ 0xf8
 8002c64:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002c6c:	fa91 f1a1 	rbit	r1, r1
 8002c70:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002c74:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002c78:	fab1 f181 	clz	r1, r1
 8002c7c:	b2c9      	uxtb	r1, r1
 8002c7e:	408b      	lsls	r3, r1
 8002c80:	4920      	ldr	r1, [pc, #128]	@ (8002d04 <HAL_RCC_OscConfig+0x5e8>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]
 8002c86:	e06c      	b.n	8002d62 <HAL_RCC_OscConfig+0x646>
 8002c88:	2301      	movs	r3, #1
 8002c8a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002c9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ca8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	461a      	mov	r2, r3
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb4:	f7fe ff70 	bl	8001b98 <HAL_GetTick>
 8002cb8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cbc:	e00a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cbe:	f7fe ff6b 	bl	8001b98 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d902      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	f000 bd5a 	b.w	8003788 <HAL_RCC_OscConfig+0x106c>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	095b      	lsrs	r3, r3, #5
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d104      	bne.n	8002d08 <HAL_RCC_OscConfig+0x5ec>
 8002cfe:	4b01      	ldr	r3, [pc, #4]	@ (8002d04 <HAL_RCC_OscConfig+0x5e8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	e015      	b.n	8002d30 <HAL_RCC_OscConfig+0x614>
 8002d04:	40021000 	.word	0x40021000
 8002d08:	2302      	movs	r3, #2
 8002d0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002d20:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002d24:	fa93 f3a3 	rbit	r3, r3
 8002d28:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002d2c:	4bc8      	ldr	r3, [pc, #800]	@ (8003050 <HAL_RCC_OscConfig+0x934>)
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d30:	2202      	movs	r2, #2
 8002d32:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002d36:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002d3a:	fa92 f2a2 	rbit	r2, r2
 8002d3e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002d42:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002d46:	fab2 f282 	clz	r2, r2
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	f042 0220 	orr.w	r2, r2, #32
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	f002 021f 	and.w	r2, r2, #31
 8002d56:	2101      	movs	r1, #1
 8002d58:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1ad      	bne.n	8002cbe <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 8110 	beq.w	8002f98 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d079      	beq.n	8002e7c <HAL_RCC_OscConfig+0x760>
 8002d88:	2301      	movs	r3, #1
 8002d8a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9e:	fab3 f383 	clz	r3, r3
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	461a      	mov	r2, r3
 8002da6:	4bab      	ldr	r3, [pc, #684]	@ (8003054 <HAL_RCC_OscConfig+0x938>)
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	461a      	mov	r2, r3
 8002dae:	2301      	movs	r3, #1
 8002db0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db2:	f7fe fef1 	bl	8001b98 <HAL_GetTick>
 8002db6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dba:	e00a      	b.n	8002dd2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dbc:	f7fe feec 	bl	8001b98 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d902      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	f000 bcdb 	b.w	8003788 <HAL_RCC_OscConfig+0x106c>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002dec:	2202      	movs	r2, #2
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	fa93 f2a3 	rbit	r2, r3
 8002dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002e10:	2202      	movs	r2, #2
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	fa93 f2a3 	rbit	r2, r3
 8002e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e26:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002e2a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2c:	4b88      	ldr	r3, [pc, #544]	@ (8003050 <HAL_RCC_OscConfig+0x934>)
 8002e2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e34:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002e38:	2102      	movs	r1, #2
 8002e3a:	6019      	str	r1, [r3, #0]
 8002e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e40:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	fa93 f1a3 	rbit	r1, r3
 8002e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e4e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e52:	6019      	str	r1, [r3, #0]
  return result;
 8002e54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e58:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	fab3 f383 	clz	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	f003 031f 	and.w	r3, r3, #31
 8002e6e:	2101      	movs	r1, #1
 8002e70:	fa01 f303 	lsl.w	r3, r1, r3
 8002e74:	4013      	ands	r3, r2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0a0      	beq.n	8002dbc <HAL_RCC_OscConfig+0x6a0>
 8002e7a:	e08d      	b.n	8002f98 <HAL_RCC_OscConfig+0x87c>
 8002e7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e80:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002e84:	2201      	movs	r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e8c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	fa93 f2a3 	rbit	r2, r3
 8002e96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e9a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002e9e:	601a      	str	r2, [r3, #0]
  return result;
 8002ea0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002ea8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eaa:	fab3 f383 	clz	r3, r3
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4b68      	ldr	r3, [pc, #416]	@ (8003054 <HAL_RCC_OscConfig+0x938>)
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2300      	movs	r3, #0
 8002ebc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebe:	f7fe fe6b 	bl	8001b98 <HAL_GetTick>
 8002ec2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec6:	e00a      	b.n	8002ede <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ec8:	f7fe fe66 	bl	8001b98 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d902      	bls.n	8002ede <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	f000 bc55 	b.w	8003788 <HAL_RCC_OscConfig+0x106c>
 8002ede:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	fa93 f2a3 	rbit	r2, r3
 8002ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f06:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f12:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	fa93 f2a3 	rbit	r2, r3
 8002f1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002f2e:	2202      	movs	r2, #2
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f36:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	fa93 f2a3 	rbit	r2, r3
 8002f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f44:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002f48:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f4a:	4b41      	ldr	r3, [pc, #260]	@ (8003050 <HAL_RCC_OscConfig+0x934>)
 8002f4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f52:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002f56:	2102      	movs	r1, #2
 8002f58:	6019      	str	r1, [r3, #0]
 8002f5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f5e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	fa93 f1a3 	rbit	r1, r3
 8002f68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f6c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f70:	6019      	str	r1, [r3, #0]
  return result;
 8002f72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f76:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	fab3 f383 	clz	r3, r3
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	f003 031f 	and.w	r3, r3, #31
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d197      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 81a1 	beq.w	80032f0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fb4:	4b26      	ldr	r3, [pc, #152]	@ (8003050 <HAL_RCC_OscConfig+0x934>)
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d116      	bne.n	8002fee <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc0:	4b23      	ldr	r3, [pc, #140]	@ (8003050 <HAL_RCC_OscConfig+0x934>)
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	4a22      	ldr	r2, [pc, #136]	@ (8003050 <HAL_RCC_OscConfig+0x934>)
 8002fc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fca:	61d3      	str	r3, [r2, #28]
 8002fcc:	4b20      	ldr	r3, [pc, #128]	@ (8003050 <HAL_RCC_OscConfig+0x934>)
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002fe6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fee:	4b1a      	ldr	r3, [pc, #104]	@ (8003058 <HAL_RCC_OscConfig+0x93c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d11a      	bne.n	8003030 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ffa:	4b17      	ldr	r3, [pc, #92]	@ (8003058 <HAL_RCC_OscConfig+0x93c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a16      	ldr	r2, [pc, #88]	@ (8003058 <HAL_RCC_OscConfig+0x93c>)
 8003000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003004:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003006:	f7fe fdc7 	bl	8001b98 <HAL_GetTick>
 800300a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300e:	e009      	b.n	8003024 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003010:	f7fe fdc2 	bl	8001b98 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b64      	cmp	r3, #100	@ 0x64
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e3b1      	b.n	8003788 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003024:	4b0c      	ldr	r3, [pc, #48]	@ (8003058 <HAL_RCC_OscConfig+0x93c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0ef      	beq.n	8003010 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003034:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d10d      	bne.n	800305c <HAL_RCC_OscConfig+0x940>
 8003040:	4b03      	ldr	r3, [pc, #12]	@ (8003050 <HAL_RCC_OscConfig+0x934>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	4a02      	ldr	r2, [pc, #8]	@ (8003050 <HAL_RCC_OscConfig+0x934>)
 8003046:	f043 0301 	orr.w	r3, r3, #1
 800304a:	6213      	str	r3, [r2, #32]
 800304c:	e03c      	b.n	80030c8 <HAL_RCC_OscConfig+0x9ac>
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000
 8003054:	10908120 	.word	0x10908120
 8003058:	40007000 	.word	0x40007000
 800305c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003060:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10c      	bne.n	8003086 <HAL_RCC_OscConfig+0x96a>
 800306c:	4bc1      	ldr	r3, [pc, #772]	@ (8003374 <HAL_RCC_OscConfig+0xc58>)
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	4ac0      	ldr	r2, [pc, #768]	@ (8003374 <HAL_RCC_OscConfig+0xc58>)
 8003072:	f023 0301 	bic.w	r3, r3, #1
 8003076:	6213      	str	r3, [r2, #32]
 8003078:	4bbe      	ldr	r3, [pc, #760]	@ (8003374 <HAL_RCC_OscConfig+0xc58>)
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	4abd      	ldr	r2, [pc, #756]	@ (8003374 <HAL_RCC_OscConfig+0xc58>)
 800307e:	f023 0304 	bic.w	r3, r3, #4
 8003082:	6213      	str	r3, [r2, #32]
 8003084:	e020      	b.n	80030c8 <HAL_RCC_OscConfig+0x9ac>
 8003086:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800308a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	2b05      	cmp	r3, #5
 8003094:	d10c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x994>
 8003096:	4bb7      	ldr	r3, [pc, #732]	@ (8003374 <HAL_RCC_OscConfig+0xc58>)
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	4ab6      	ldr	r2, [pc, #728]	@ (8003374 <HAL_RCC_OscConfig+0xc58>)
 800309c:	f043 0304 	orr.w	r3, r3, #4
 80030a0:	6213      	str	r3, [r2, #32]
 80030a2:	4bb4      	ldr	r3, [pc, #720]	@ (8003374 <HAL_RCC_OscConfig+0xc58>)
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	4ab3      	ldr	r2, [pc, #716]	@ (8003374 <HAL_RCC_OscConfig+0xc58>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	6213      	str	r3, [r2, #32]
 80030ae:	e00b      	b.n	80030c8 <HAL_RCC_OscConfig+0x9ac>
 80030b0:	4bb0      	ldr	r3, [pc, #704]	@ (8003374 <HAL_RCC_OscConfig+0xc58>)
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	4aaf      	ldr	r2, [pc, #700]	@ (8003374 <HAL_RCC_OscConfig+0xc58>)
 80030b6:	f023 0301 	bic.w	r3, r3, #1
 80030ba:	6213      	str	r3, [r2, #32]
 80030bc:	4bad      	ldr	r3, [pc, #692]	@ (8003374 <HAL_RCC_OscConfig+0xc58>)
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	4aac      	ldr	r2, [pc, #688]	@ (8003374 <HAL_RCC_OscConfig+0xc58>)
 80030c2:	f023 0304 	bic.w	r3, r3, #4
 80030c6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 8081 	beq.w	80031dc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030da:	f7fe fd5d 	bl	8001b98 <HAL_GetTick>
 80030de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e2:	e00b      	b.n	80030fc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e4:	f7fe fd58 	bl	8001b98 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e345      	b.n	8003788 <HAL_RCC_OscConfig+0x106c>
 80030fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003100:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003104:	2202      	movs	r2, #2
 8003106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	fa93 f2a3 	rbit	r2, r3
 8003116:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800311a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003124:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003128:	2202      	movs	r2, #2
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003130:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	fa93 f2a3 	rbit	r2, r3
 800313a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800313e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003142:	601a      	str	r2, [r3, #0]
  return result;
 8003144:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003148:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800314c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	b2db      	uxtb	r3, r3
 8003154:	095b      	lsrs	r3, r3, #5
 8003156:	b2db      	uxtb	r3, r3
 8003158:	f043 0302 	orr.w	r3, r3, #2
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d102      	bne.n	8003168 <HAL_RCC_OscConfig+0xa4c>
 8003162:	4b84      	ldr	r3, [pc, #528]	@ (8003374 <HAL_RCC_OscConfig+0xc58>)
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	e013      	b.n	8003190 <HAL_RCC_OscConfig+0xa74>
 8003168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003170:	2202      	movs	r2, #2
 8003172:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003178:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	fa93 f2a3 	rbit	r2, r3
 8003182:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003186:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	4b79      	ldr	r3, [pc, #484]	@ (8003374 <HAL_RCC_OscConfig+0xc58>)
 800318e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003190:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003194:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003198:	2102      	movs	r1, #2
 800319a:	6011      	str	r1, [r2, #0]
 800319c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031a0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	fa92 f1a2 	rbit	r1, r2
 80031aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031ae:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80031b2:	6011      	str	r1, [r2, #0]
  return result;
 80031b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031b8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	fab2 f282 	clz	r2, r2
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	f002 021f 	and.w	r2, r2, #31
 80031ce:	2101      	movs	r1, #1
 80031d0:	fa01 f202 	lsl.w	r2, r1, r2
 80031d4:	4013      	ands	r3, r2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d084      	beq.n	80030e4 <HAL_RCC_OscConfig+0x9c8>
 80031da:	e07f      	b.n	80032dc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031dc:	f7fe fcdc 	bl	8001b98 <HAL_GetTick>
 80031e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e4:	e00b      	b.n	80031fe <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e6:	f7fe fcd7 	bl	8001b98 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e2c4      	b.n	8003788 <HAL_RCC_OscConfig+0x106c>
 80031fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003202:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003206:	2202      	movs	r2, #2
 8003208:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	fa93 f2a3 	rbit	r2, r3
 8003218:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800321c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003226:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800322a:	2202      	movs	r2, #2
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003232:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	fa93 f2a3 	rbit	r2, r3
 800323c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003240:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003244:	601a      	str	r2, [r3, #0]
  return result;
 8003246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800324a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800324e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003250:	fab3 f383 	clz	r3, r3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	b2db      	uxtb	r3, r3
 800325a:	f043 0302 	orr.w	r3, r3, #2
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d102      	bne.n	800326a <HAL_RCC_OscConfig+0xb4e>
 8003264:	4b43      	ldr	r3, [pc, #268]	@ (8003374 <HAL_RCC_OscConfig+0xc58>)
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	e013      	b.n	8003292 <HAL_RCC_OscConfig+0xb76>
 800326a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003272:	2202      	movs	r2, #2
 8003274:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	fa93 f2a3 	rbit	r2, r3
 8003284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003288:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	4b39      	ldr	r3, [pc, #228]	@ (8003374 <HAL_RCC_OscConfig+0xc58>)
 8003290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003292:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003296:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800329a:	2102      	movs	r1, #2
 800329c:	6011      	str	r1, [r2, #0]
 800329e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032a2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	fa92 f1a2 	rbit	r1, r2
 80032ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032b0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80032b4:	6011      	str	r1, [r2, #0]
  return result;
 80032b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032ba:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80032be:	6812      	ldr	r2, [r2, #0]
 80032c0:	fab2 f282 	clz	r2, r2
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	f002 021f 	and.w	r2, r2, #31
 80032d0:	2101      	movs	r1, #1
 80032d2:	fa01 f202 	lsl.w	r2, r1, r2
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d184      	bne.n	80031e6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032dc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d105      	bne.n	80032f0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e4:	4b23      	ldr	r3, [pc, #140]	@ (8003374 <HAL_RCC_OscConfig+0xc58>)
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	4a22      	ldr	r2, [pc, #136]	@ (8003374 <HAL_RCC_OscConfig+0xc58>)
 80032ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8242 	beq.w	8003786 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003302:	4b1c      	ldr	r3, [pc, #112]	@ (8003374 <HAL_RCC_OscConfig+0xc58>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b08      	cmp	r3, #8
 800330c:	f000 8213 	beq.w	8003736 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003310:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003314:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	2b02      	cmp	r3, #2
 800331e:	f040 8162 	bne.w	80035e6 <HAL_RCC_OscConfig+0xeca>
 8003322:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003326:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800332a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800332e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003334:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	fa93 f2a3 	rbit	r2, r3
 800333e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003342:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003346:	601a      	str	r2, [r3, #0]
  return result;
 8003348:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003350:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003352:	fab3 f383 	clz	r3, r3
 8003356:	b2db      	uxtb	r3, r3
 8003358:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800335c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	461a      	mov	r2, r3
 8003364:	2300      	movs	r3, #0
 8003366:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7fe fc16 	bl	8001b98 <HAL_GetTick>
 800336c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003370:	e00c      	b.n	800338c <HAL_RCC_OscConfig+0xc70>
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003378:	f7fe fc0e 	bl	8001b98 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e1fd      	b.n	8003788 <HAL_RCC_OscConfig+0x106c>
 800338c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003390:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003394:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800339e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	fa93 f2a3 	rbit	r2, r3
 80033a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ac:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80033b0:	601a      	str	r2, [r3, #0]
  return result;
 80033b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80033ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033bc:	fab3 f383 	clz	r3, r3
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d102      	bne.n	80033d6 <HAL_RCC_OscConfig+0xcba>
 80033d0:	4bb0      	ldr	r3, [pc, #704]	@ (8003694 <HAL_RCC_OscConfig+0xf78>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	e027      	b.n	8003426 <HAL_RCC_OscConfig+0xd0a>
 80033d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033da:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80033de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	fa93 f2a3 	rbit	r2, r3
 80033f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003400:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003404:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800340e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	fa93 f2a3 	rbit	r2, r3
 8003418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800341c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	4b9c      	ldr	r3, [pc, #624]	@ (8003694 <HAL_RCC_OscConfig+0xf78>)
 8003424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003426:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800342a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800342e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003432:	6011      	str	r1, [r2, #0]
 8003434:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003438:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800343c:	6812      	ldr	r2, [r2, #0]
 800343e:	fa92 f1a2 	rbit	r1, r2
 8003442:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003446:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800344a:	6011      	str	r1, [r2, #0]
  return result;
 800344c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003450:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	fab2 f282 	clz	r2, r2
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	f042 0220 	orr.w	r2, r2, #32
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	f002 021f 	and.w	r2, r2, #31
 8003466:	2101      	movs	r1, #1
 8003468:	fa01 f202 	lsl.w	r2, r1, r2
 800346c:	4013      	ands	r3, r2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d182      	bne.n	8003378 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003472:	4b88      	ldr	r3, [pc, #544]	@ (8003694 <HAL_RCC_OscConfig+0xf78>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800347a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800347e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800348a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	430b      	orrs	r3, r1
 8003494:	497f      	ldr	r1, [pc, #508]	@ (8003694 <HAL_RCC_OscConfig+0xf78>)
 8003496:	4313      	orrs	r3, r2
 8003498:	604b      	str	r3, [r1, #4]
 800349a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800349e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80034a2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ac:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	fa93 f2a3 	rbit	r2, r3
 80034b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ba:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80034be:	601a      	str	r2, [r3, #0]
  return result;
 80034c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80034c8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ca:	fab3 f383 	clz	r3, r3
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80034d4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	461a      	mov	r2, r3
 80034dc:	2301      	movs	r3, #1
 80034de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7fe fb5a 	bl	8001b98 <HAL_GetTick>
 80034e4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034e8:	e009      	b.n	80034fe <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ea:	f7fe fb55 	bl	8001b98 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e144      	b.n	8003788 <HAL_RCC_OscConfig+0x106c>
 80034fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003502:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003506:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800350a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003510:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	fa93 f2a3 	rbit	r2, r3
 800351a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800351e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003522:	601a      	str	r2, [r3, #0]
  return result;
 8003524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003528:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800352c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800352e:	fab3 f383 	clz	r3, r3
 8003532:	b2db      	uxtb	r3, r3
 8003534:	095b      	lsrs	r3, r3, #5
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b01      	cmp	r3, #1
 8003540:	d102      	bne.n	8003548 <HAL_RCC_OscConfig+0xe2c>
 8003542:	4b54      	ldr	r3, [pc, #336]	@ (8003694 <HAL_RCC_OscConfig+0xf78>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	e027      	b.n	8003598 <HAL_RCC_OscConfig+0xe7c>
 8003548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800354c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003550:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003554:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800355a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	fa93 f2a3 	rbit	r2, r3
 8003564:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003568:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003572:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003576:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003580:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	fa93 f2a3 	rbit	r2, r3
 800358a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800358e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	4b3f      	ldr	r3, [pc, #252]	@ (8003694 <HAL_RCC_OscConfig+0xf78>)
 8003596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003598:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800359c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80035a0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80035a4:	6011      	str	r1, [r2, #0]
 80035a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035aa:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	fa92 f1a2 	rbit	r1, r2
 80035b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035b8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80035bc:	6011      	str	r1, [r2, #0]
  return result;
 80035be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035c2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80035c6:	6812      	ldr	r2, [r2, #0]
 80035c8:	fab2 f282 	clz	r2, r2
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	f042 0220 	orr.w	r2, r2, #32
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	f002 021f 	and.w	r2, r2, #31
 80035d8:	2101      	movs	r1, #1
 80035da:	fa01 f202 	lsl.w	r2, r1, r2
 80035de:	4013      	ands	r3, r2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d082      	beq.n	80034ea <HAL_RCC_OscConfig+0xdce>
 80035e4:	e0cf      	b.n	8003786 <HAL_RCC_OscConfig+0x106a>
 80035e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ea:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80035ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	fa93 f2a3 	rbit	r2, r3
 8003602:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003606:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800360a:	601a      	str	r2, [r3, #0]
  return result;
 800360c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003610:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003614:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003616:	fab3 f383 	clz	r3, r3
 800361a:	b2db      	uxtb	r3, r3
 800361c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003620:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	461a      	mov	r2, r3
 8003628:	2300      	movs	r3, #0
 800362a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362c:	f7fe fab4 	bl	8001b98 <HAL_GetTick>
 8003630:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003634:	e009      	b.n	800364a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003636:	f7fe faaf 	bl	8001b98 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e09e      	b.n	8003788 <HAL_RCC_OscConfig+0x106c>
 800364a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800364e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003652:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003656:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800365c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	fa93 f2a3 	rbit	r2, r3
 8003666:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800366a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800366e:	601a      	str	r2, [r3, #0]
  return result;
 8003670:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003674:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003678:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800367a:	fab3 f383 	clz	r3, r3
 800367e:	b2db      	uxtb	r3, r3
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b01      	cmp	r3, #1
 800368c:	d104      	bne.n	8003698 <HAL_RCC_OscConfig+0xf7c>
 800368e:	4b01      	ldr	r3, [pc, #4]	@ (8003694 <HAL_RCC_OscConfig+0xf78>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	e029      	b.n	80036e8 <HAL_RCC_OscConfig+0xfcc>
 8003694:	40021000 	.word	0x40021000
 8003698:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800369c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80036a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036aa:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	fa93 f2a3 	rbit	r2, r3
 80036b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80036c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	fa93 f2a3 	rbit	r2, r3
 80036da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036de:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003794 <HAL_RCC_OscConfig+0x1078>)
 80036e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036ec:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80036f0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80036f4:	6011      	str	r1, [r2, #0]
 80036f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036fa:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	fa92 f1a2 	rbit	r1, r2
 8003704:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003708:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800370c:	6011      	str	r1, [r2, #0]
  return result;
 800370e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003712:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	fab2 f282 	clz	r2, r2
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	f042 0220 	orr.w	r2, r2, #32
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	f002 021f 	and.w	r2, r2, #31
 8003728:	2101      	movs	r1, #1
 800372a:	fa01 f202 	lsl.w	r2, r1, r2
 800372e:	4013      	ands	r3, r2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d180      	bne.n	8003636 <HAL_RCC_OscConfig+0xf1a>
 8003734:	e027      	b.n	8003786 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800373a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e01e      	b.n	8003788 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800374a:	4b12      	ldr	r3, [pc, #72]	@ (8003794 <HAL_RCC_OscConfig+0x1078>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003752:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003756:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800375a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800375e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	429a      	cmp	r2, r3
 8003768:	d10b      	bne.n	8003782 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800376a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800376e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003776:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800377e:	429a      	cmp	r2, r3
 8003780:	d001      	beq.n	8003786 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000

08003798 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b09e      	sub	sp, #120	@ 0x78
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e162      	b.n	8003a76 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037b0:	4b90      	ldr	r3, [pc, #576]	@ (80039f4 <HAL_RCC_ClockConfig+0x25c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d910      	bls.n	80037e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037be:	4b8d      	ldr	r3, [pc, #564]	@ (80039f4 <HAL_RCC_ClockConfig+0x25c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f023 0207 	bic.w	r2, r3, #7
 80037c6:	498b      	ldr	r1, [pc, #556]	@ (80039f4 <HAL_RCC_ClockConfig+0x25c>)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ce:	4b89      	ldr	r3, [pc, #548]	@ (80039f4 <HAL_RCC_ClockConfig+0x25c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e14a      	b.n	8003a76 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ec:	4b82      	ldr	r3, [pc, #520]	@ (80039f8 <HAL_RCC_ClockConfig+0x260>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	497f      	ldr	r1, [pc, #508]	@ (80039f8 <HAL_RCC_ClockConfig+0x260>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 80dc 	beq.w	80039c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d13c      	bne.n	800388e <HAL_RCC_ClockConfig+0xf6>
 8003814:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003818:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800381c:	fa93 f3a3 	rbit	r3, r3
 8003820:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003822:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003824:	fab3 f383 	clz	r3, r3
 8003828:	b2db      	uxtb	r3, r3
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	b2db      	uxtb	r3, r3
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b01      	cmp	r3, #1
 8003836:	d102      	bne.n	800383e <HAL_RCC_ClockConfig+0xa6>
 8003838:	4b6f      	ldr	r3, [pc, #444]	@ (80039f8 <HAL_RCC_ClockConfig+0x260>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	e00f      	b.n	800385e <HAL_RCC_ClockConfig+0xc6>
 800383e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003842:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003844:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003846:	fa93 f3a3 	rbit	r3, r3
 800384a:	667b      	str	r3, [r7, #100]	@ 0x64
 800384c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003850:	663b      	str	r3, [r7, #96]	@ 0x60
 8003852:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003854:	fa93 f3a3 	rbit	r3, r3
 8003858:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800385a:	4b67      	ldr	r3, [pc, #412]	@ (80039f8 <HAL_RCC_ClockConfig+0x260>)
 800385c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003862:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003864:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003866:	fa92 f2a2 	rbit	r2, r2
 800386a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800386c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800386e:	fab2 f282 	clz	r2, r2
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	f042 0220 	orr.w	r2, r2, #32
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	f002 021f 	and.w	r2, r2, #31
 800387e:	2101      	movs	r1, #1
 8003880:	fa01 f202 	lsl.w	r2, r1, r2
 8003884:	4013      	ands	r3, r2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d17b      	bne.n	8003982 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e0f3      	b.n	8003a76 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d13c      	bne.n	8003910 <HAL_RCC_ClockConfig+0x178>
 8003896:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800389a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800389e:	fa93 f3a3 	rbit	r3, r3
 80038a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80038a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a6:	fab3 f383 	clz	r3, r3
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	095b      	lsrs	r3, r3, #5
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f043 0301 	orr.w	r3, r3, #1
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d102      	bne.n	80038c0 <HAL_RCC_ClockConfig+0x128>
 80038ba:	4b4f      	ldr	r3, [pc, #316]	@ (80039f8 <HAL_RCC_ClockConfig+0x260>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	e00f      	b.n	80038e0 <HAL_RCC_ClockConfig+0x148>
 80038c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038c8:	fa93 f3a3 	rbit	r3, r3
 80038cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80038ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80038d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038d6:	fa93 f3a3 	rbit	r3, r3
 80038da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038dc:	4b46      	ldr	r3, [pc, #280]	@ (80039f8 <HAL_RCC_ClockConfig+0x260>)
 80038de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038e4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80038e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80038e8:	fa92 f2a2 	rbit	r2, r2
 80038ec:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80038ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038f0:	fab2 f282 	clz	r2, r2
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	f042 0220 	orr.w	r2, r2, #32
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	f002 021f 	and.w	r2, r2, #31
 8003900:	2101      	movs	r1, #1
 8003902:	fa01 f202 	lsl.w	r2, r1, r2
 8003906:	4013      	ands	r3, r2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d13a      	bne.n	8003982 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e0b2      	b.n	8003a76 <HAL_RCC_ClockConfig+0x2de>
 8003910:	2302      	movs	r3, #2
 8003912:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003916:	fa93 f3a3 	rbit	r3, r3
 800391a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800391c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391e:	fab3 f383 	clz	r3, r3
 8003922:	b2db      	uxtb	r3, r3
 8003924:	095b      	lsrs	r3, r3, #5
 8003926:	b2db      	uxtb	r3, r3
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b01      	cmp	r3, #1
 8003930:	d102      	bne.n	8003938 <HAL_RCC_ClockConfig+0x1a0>
 8003932:	4b31      	ldr	r3, [pc, #196]	@ (80039f8 <HAL_RCC_ClockConfig+0x260>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	e00d      	b.n	8003954 <HAL_RCC_ClockConfig+0x1bc>
 8003938:	2302      	movs	r3, #2
 800393a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800393e:	fa93 f3a3 	rbit	r3, r3
 8003942:	627b      	str	r3, [r7, #36]	@ 0x24
 8003944:	2302      	movs	r3, #2
 8003946:	623b      	str	r3, [r7, #32]
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	fa93 f3a3 	rbit	r3, r3
 800394e:	61fb      	str	r3, [r7, #28]
 8003950:	4b29      	ldr	r3, [pc, #164]	@ (80039f8 <HAL_RCC_ClockConfig+0x260>)
 8003952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003954:	2202      	movs	r2, #2
 8003956:	61ba      	str	r2, [r7, #24]
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	fa92 f2a2 	rbit	r2, r2
 800395e:	617a      	str	r2, [r7, #20]
  return result;
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	fab2 f282 	clz	r2, r2
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	f042 0220 	orr.w	r2, r2, #32
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	f002 021f 	and.w	r2, r2, #31
 8003972:	2101      	movs	r1, #1
 8003974:	fa01 f202 	lsl.w	r2, r1, r2
 8003978:	4013      	ands	r3, r2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e079      	b.n	8003a76 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003982:	4b1d      	ldr	r3, [pc, #116]	@ (80039f8 <HAL_RCC_ClockConfig+0x260>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f023 0203 	bic.w	r2, r3, #3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	491a      	ldr	r1, [pc, #104]	@ (80039f8 <HAL_RCC_ClockConfig+0x260>)
 8003990:	4313      	orrs	r3, r2
 8003992:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003994:	f7fe f900 	bl	8001b98 <HAL_GetTick>
 8003998:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399a:	e00a      	b.n	80039b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800399c:	f7fe f8fc 	bl	8001b98 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e061      	b.n	8003a76 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b2:	4b11      	ldr	r3, [pc, #68]	@ (80039f8 <HAL_RCC_ClockConfig+0x260>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f003 020c 	and.w	r2, r3, #12
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d1eb      	bne.n	800399c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039c4:	4b0b      	ldr	r3, [pc, #44]	@ (80039f4 <HAL_RCC_ClockConfig+0x25c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d214      	bcs.n	80039fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b08      	ldr	r3, [pc, #32]	@ (80039f4 <HAL_RCC_ClockConfig+0x25c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 0207 	bic.w	r2, r3, #7
 80039da:	4906      	ldr	r1, [pc, #24]	@ (80039f4 <HAL_RCC_ClockConfig+0x25c>)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	4313      	orrs	r3, r2
 80039e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	4b04      	ldr	r3, [pc, #16]	@ (80039f4 <HAL_RCC_ClockConfig+0x25c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e040      	b.n	8003a76 <HAL_RCC_ClockConfig+0x2de>
 80039f4:	40022000 	.word	0x40022000
 80039f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a08:	4b1d      	ldr	r3, [pc, #116]	@ (8003a80 <HAL_RCC_ClockConfig+0x2e8>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	491a      	ldr	r1, [pc, #104]	@ (8003a80 <HAL_RCC_ClockConfig+0x2e8>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d009      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a26:	4b16      	ldr	r3, [pc, #88]	@ (8003a80 <HAL_RCC_ClockConfig+0x2e8>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4912      	ldr	r1, [pc, #72]	@ (8003a80 <HAL_RCC_ClockConfig+0x2e8>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a3a:	f000 f829 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 8003a3e:	4601      	mov	r1, r0
 8003a40:	4b0f      	ldr	r3, [pc, #60]	@ (8003a80 <HAL_RCC_ClockConfig+0x2e8>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a48:	22f0      	movs	r2, #240	@ 0xf0
 8003a4a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	fa92 f2a2 	rbit	r2, r2
 8003a52:	60fa      	str	r2, [r7, #12]
  return result;
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	fab2 f282 	clz	r2, r2
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	40d3      	lsrs	r3, r2
 8003a5e:	4a09      	ldr	r2, [pc, #36]	@ (8003a84 <HAL_RCC_ClockConfig+0x2ec>)
 8003a60:	5cd3      	ldrb	r3, [r2, r3]
 8003a62:	fa21 f303 	lsr.w	r3, r1, r3
 8003a66:	4a08      	ldr	r2, [pc, #32]	@ (8003a88 <HAL_RCC_ClockConfig+0x2f0>)
 8003a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a6a:	4b08      	ldr	r3, [pc, #32]	@ (8003a8c <HAL_RCC_ClockConfig+0x2f4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fe f84e 	bl	8001b10 <HAL_InitTick>
  
  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3778      	adds	r7, #120	@ 0x78
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40021000 	.word	0x40021000
 8003a84:	0800b010 	.word	0x0800b010
 8003a88:	20000140 	.word	0x20000140
 8003a8c:	20000194 	.word	0x20000194

08003a90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b08b      	sub	sp, #44	@ 0x2c
 8003a94:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003aaa:	4b29      	ldr	r3, [pc, #164]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f003 030c 	and.w	r3, r3, #12
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d002      	beq.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x30>
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d003      	beq.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x36>
 8003abe:	e03c      	b.n	8003b3a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ac0:	4b24      	ldr	r3, [pc, #144]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ac2:	623b      	str	r3, [r7, #32]
      break;
 8003ac4:	e03c      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003acc:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8003ad0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	fa92 f2a2 	rbit	r2, r2
 8003ad8:	607a      	str	r2, [r7, #4]
  return result;
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	fab2 f282 	clz	r2, r2
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	40d3      	lsrs	r3, r2
 8003ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ae6:	5cd3      	ldrb	r3, [r2, r3]
 8003ae8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003aea:	4b19      	ldr	r3, [pc, #100]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	220f      	movs	r2, #15
 8003af4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	fa92 f2a2 	rbit	r2, r2
 8003afc:	60fa      	str	r2, [r7, #12]
  return result;
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	fab2 f282 	clz	r2, r2
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	40d3      	lsrs	r3, r2
 8003b08:	4a14      	ldr	r2, [pc, #80]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b0a:	5cd3      	ldrb	r3, [r2, r3]
 8003b0c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b18:	4a0e      	ldr	r2, [pc, #56]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
 8003b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b28:	e004      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	4a0c      	ldr	r2, [pc, #48]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b2e:	fb02 f303 	mul.w	r3, r2, r3
 8003b32:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b36:	623b      	str	r3, [r7, #32]
      break;
 8003b38:	e002      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b3a:	4b06      	ldr	r3, [pc, #24]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b3c:	623b      	str	r3, [r7, #32]
      break;
 8003b3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b40:	6a3b      	ldr	r3, [r7, #32]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	372c      	adds	r7, #44	@ 0x2c
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40021000 	.word	0x40021000
 8003b54:	007a1200 	.word	0x007a1200
 8003b58:	0800b028 	.word	0x0800b028
 8003b5c:	0800b038 	.word	0x0800b038
 8003b60:	003d0900 	.word	0x003d0900

08003b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b68:	4b03      	ldr	r3, [pc, #12]	@ (8003b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	20000140 	.word	0x20000140

08003b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003b82:	f7ff ffef 	bl	8003b64 <HAL_RCC_GetHCLKFreq>
 8003b86:	4601      	mov	r1, r0
 8003b88:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003b90:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003b94:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	fa92 f2a2 	rbit	r2, r2
 8003b9c:	603a      	str	r2, [r7, #0]
  return result;
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	fab2 f282 	clz	r2, r2
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	40d3      	lsrs	r3, r2
 8003ba8:	4a04      	ldr	r2, [pc, #16]	@ (8003bbc <HAL_RCC_GetPCLK1Freq+0x40>)
 8003baa:	5cd3      	ldrb	r3, [r2, r3]
 8003bac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	0800b020 	.word	0x0800b020

08003bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003bc6:	f7ff ffcd 	bl	8003b64 <HAL_RCC_GetHCLKFreq>
 8003bca:	4601      	mov	r1, r0
 8003bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003bfc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003bd4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003bd8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	fa92 f2a2 	rbit	r2, r2
 8003be0:	603a      	str	r2, [r7, #0]
  return result;
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	fab2 f282 	clz	r2, r2
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	40d3      	lsrs	r3, r2
 8003bec:	4a04      	ldr	r2, [pc, #16]	@ (8003c00 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003bee:	5cd3      	ldrb	r3, [r2, r3]
 8003bf0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	0800b020 	.word	0x0800b020

08003c04 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b092      	sub	sp, #72	@ 0x48
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003c14:	2300      	movs	r3, #0
 8003c16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 80d4 	beq.w	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c28:	4b4e      	ldr	r3, [pc, #312]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10e      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c34:	4b4b      	ldr	r3, [pc, #300]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	4a4a      	ldr	r2, [pc, #296]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c3e:	61d3      	str	r3, [r2, #28]
 8003c40:	4b48      	ldr	r3, [pc, #288]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c52:	4b45      	ldr	r3, [pc, #276]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d118      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c5e:	4b42      	ldr	r3, [pc, #264]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a41      	ldr	r2, [pc, #260]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c6a:	f7fd ff95 	bl	8001b98 <HAL_GetTick>
 8003c6e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c70:	e008      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c72:	f7fd ff91 	bl	8001b98 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b64      	cmp	r3, #100	@ 0x64
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e169      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c84:	4b38      	ldr	r3, [pc, #224]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0f0      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c90:	4b34      	ldr	r3, [pc, #208]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 8084 	beq.w	8003daa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003caa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d07c      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cb0:	4b2c      	ldr	r3, [pc, #176]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003cbe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc2:	fa93 f3a3 	rbit	r3, r3
 8003cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cca:	fab3 f383 	clz	r3, r3
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4b26      	ldr	r3, [pc, #152]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cd4:	4413      	add	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	461a      	mov	r2, r3
 8003cda:	2301      	movs	r3, #1
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce6:	fa93 f3a3 	rbit	r3, r3
 8003cea:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cee:	fab3 f383 	clz	r3, r3
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	2300      	movs	r3, #0
 8003d00:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d02:	4a18      	ldr	r2, [pc, #96]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d06:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d04b      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d12:	f7fd ff41 	bl	8001b98 <HAL_GetTick>
 8003d16:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d18:	e00a      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d1a:	f7fd ff3d 	bl	8001b98 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e113      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003d30:	2302      	movs	r3, #2
 8003d32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d36:	fa93 f3a3 	rbit	r3, r3
 8003d3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	623b      	str	r3, [r7, #32]
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	fa93 f3a3 	rbit	r3, r3
 8003d46:	61fb      	str	r3, [r7, #28]
  return result;
 8003d48:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d4a:	fab3 f383 	clz	r3, r3
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	095b      	lsrs	r3, r3, #5
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	f043 0302 	orr.w	r3, r3, #2
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d108      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003d5e:	4b01      	ldr	r3, [pc, #4]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	e00d      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003d64:	40021000 	.word	0x40021000
 8003d68:	40007000 	.word	0x40007000
 8003d6c:	10908100 	.word	0x10908100
 8003d70:	2302      	movs	r3, #2
 8003d72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	fa93 f3a3 	rbit	r3, r3
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	4b78      	ldr	r3, [pc, #480]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d80:	2202      	movs	r2, #2
 8003d82:	613a      	str	r2, [r7, #16]
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	fa92 f2a2 	rbit	r2, r2
 8003d8a:	60fa      	str	r2, [r7, #12]
  return result;
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	fab2 f282 	clz	r2, r2
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	f002 021f 	and.w	r2, r2, #31
 8003d9e:	2101      	movs	r1, #1
 8003da0:	fa01 f202 	lsl.w	r2, r1, r2
 8003da4:	4013      	ands	r3, r2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0b7      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003daa:	4b6d      	ldr	r3, [pc, #436]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	496a      	ldr	r1, [pc, #424]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dbc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d105      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc4:	4b66      	ldr	r3, [pc, #408]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	4a65      	ldr	r2, [pc, #404]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d008      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ddc:	4b60      	ldr	r3, [pc, #384]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de0:	f023 0203 	bic.w	r2, r3, #3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	495d      	ldr	r1, [pc, #372]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d008      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dfa:	4b59      	ldr	r3, [pc, #356]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	4956      	ldr	r1, [pc, #344]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d008      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e18:	4b51      	ldr	r3, [pc, #324]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	494e      	ldr	r1, [pc, #312]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0320 	and.w	r3, r3, #32
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d008      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e36:	4b4a      	ldr	r3, [pc, #296]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3a:	f023 0210 	bic.w	r2, r3, #16
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	4947      	ldr	r1, [pc, #284]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d008      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003e54:	4b42      	ldr	r3, [pc, #264]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e60:	493f      	ldr	r1, [pc, #252]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d008      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e72:	4b3b      	ldr	r3, [pc, #236]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e76:	f023 0220 	bic.w	r2, r3, #32
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	4938      	ldr	r1, [pc, #224]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d008      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e90:	4b33      	ldr	r3, [pc, #204]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e94:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	4930      	ldr	r1, [pc, #192]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0310 	and.w	r3, r3, #16
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d008      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003eae:	4b2c      	ldr	r3, [pc, #176]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	4929      	ldr	r1, [pc, #164]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ecc:	4b24      	ldr	r3, [pc, #144]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed8:	4921      	ldr	r1, [pc, #132]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d008      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003eea:	4b1d      	ldr	r3, [pc, #116]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eee:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef6:	491a      	ldr	r1, [pc, #104]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003f08:	4b15      	ldr	r3, [pc, #84]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0c:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f14:	4912      	ldr	r1, [pc, #72]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d008      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003f26:	4b0e      	ldr	r3, [pc, #56]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f32:	490b      	ldr	r1, [pc, #44]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d008      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003f44:	4b06      	ldr	r3, [pc, #24]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f48:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f50:	4903      	ldr	r1, [pc, #12]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3748      	adds	r7, #72	@ 0x48
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40021000 	.word	0x40021000

08003f64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e09d      	b.n	80040b2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d108      	bne.n	8003f90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f86:	d009      	beq.n	8003f9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	61da      	str	r2, [r3, #28]
 8003f8e:	e005      	b.n	8003f9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fd fa6c 	bl	8001494 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fd2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003fdc:	d902      	bls.n	8003fe4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	e002      	b.n	8003fea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003fe4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fe8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003ff2:	d007      	beq.n	8004004 <HAL_SPI_Init+0xa0>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ffc:	d002      	beq.n	8004004 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	431a      	orrs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004046:	ea42 0103 	orr.w	r1, r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	0c1b      	lsrs	r3, r3, #16
 8004060:	f003 0204 	and.w	r2, r3, #4
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004080:	ea42 0103 	orr.w	r1, r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69da      	ldr	r2, [r3, #28]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e01a      	b.n	8004102 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040e2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7fd fa17 	bl	8001518 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b08a      	sub	sp, #40	@ 0x28
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	607a      	str	r2, [r7, #4]
 8004116:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004118:	2301      	movs	r3, #1
 800411a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_SPI_TransmitReceive+0x26>
 800412c:	2302      	movs	r3, #2
 800412e:	e20a      	b.n	8004546 <HAL_SPI_TransmitReceive+0x43c>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004138:	f7fd fd2e 	bl	8001b98 <HAL_GetTick>
 800413c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004144:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800414c:	887b      	ldrh	r3, [r7, #2]
 800414e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004150:	887b      	ldrh	r3, [r7, #2]
 8004152:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004154:	7efb      	ldrb	r3, [r7, #27]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d00e      	beq.n	8004178 <HAL_SPI_TransmitReceive+0x6e>
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004160:	d106      	bne.n	8004170 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d102      	bne.n	8004170 <HAL_SPI_TransmitReceive+0x66>
 800416a:	7efb      	ldrb	r3, [r7, #27]
 800416c:	2b04      	cmp	r3, #4
 800416e:	d003      	beq.n	8004178 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004170:	2302      	movs	r3, #2
 8004172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004176:	e1e0      	b.n	800453a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d005      	beq.n	800418a <HAL_SPI_TransmitReceive+0x80>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <HAL_SPI_TransmitReceive+0x80>
 8004184:	887b      	ldrh	r3, [r7, #2]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d103      	bne.n	8004192 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004190:	e1d3      	b.n	800453a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b04      	cmp	r3, #4
 800419c:	d003      	beq.n	80041a6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2205      	movs	r2, #5
 80041a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	887a      	ldrh	r2, [r7, #2]
 80041b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	887a      	ldrh	r2, [r7, #2]
 80041be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	887a      	ldrh	r2, [r7, #2]
 80041cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	887a      	ldrh	r2, [r7, #2]
 80041d2:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80041e8:	d802      	bhi.n	80041f0 <HAL_SPI_TransmitReceive+0xe6>
 80041ea:	8a3b      	ldrh	r3, [r7, #16]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d908      	bls.n	8004202 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041fe:	605a      	str	r2, [r3, #4]
 8004200:	e007      	b.n	8004212 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004210:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800421c:	2b40      	cmp	r3, #64	@ 0x40
 800421e:	d007      	beq.n	8004230 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800422e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004238:	f240 8081 	bls.w	800433e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d002      	beq.n	800424a <HAL_SPI_TransmitReceive+0x140>
 8004244:	8a7b      	ldrh	r3, [r7, #18]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d16d      	bne.n	8004326 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800424e:	881a      	ldrh	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425a:	1c9a      	adds	r2, r3, #2
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004264:	b29b      	uxth	r3, r3
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800426e:	e05a      	b.n	8004326 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b02      	cmp	r3, #2
 800427c:	d11b      	bne.n	80042b6 <HAL_SPI_TransmitReceive+0x1ac>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d016      	beq.n	80042b6 <HAL_SPI_TransmitReceive+0x1ac>
 8004288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428a:	2b01      	cmp	r3, #1
 800428c:	d113      	bne.n	80042b6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004292:	881a      	ldrh	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429e:	1c9a      	adds	r2, r3, #2
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d11c      	bne.n	80042fe <HAL_SPI_TransmitReceive+0x1f4>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d016      	beq.n	80042fe <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042da:	b292      	uxth	r2, r2
 80042dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e2:	1c9a      	adds	r2, r3, #2
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042fa:	2301      	movs	r3, #1
 80042fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80042fe:	f7fd fc4b 	bl	8001b98 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800430a:	429a      	cmp	r2, r3
 800430c:	d80b      	bhi.n	8004326 <HAL_SPI_TransmitReceive+0x21c>
 800430e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004314:	d007      	beq.n	8004326 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004324:	e109      	b.n	800453a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800432a:	b29b      	uxth	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	d19f      	bne.n	8004270 <HAL_SPI_TransmitReceive+0x166>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d199      	bne.n	8004270 <HAL_SPI_TransmitReceive+0x166>
 800433c:	e0e3      	b.n	8004506 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_SPI_TransmitReceive+0x244>
 8004346:	8a7b      	ldrh	r3, [r7, #18]
 8004348:	2b01      	cmp	r3, #1
 800434a:	f040 80cf 	bne.w	80044ec <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b01      	cmp	r3, #1
 8004356:	d912      	bls.n	800437e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435c:	881a      	ldrh	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004368:	1c9a      	adds	r2, r3, #2
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b02      	subs	r3, #2
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800437c:	e0b6      	b.n	80044ec <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	330c      	adds	r3, #12
 8004388:	7812      	ldrb	r2, [r2, #0]
 800438a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043a4:	e0a2      	b.n	80044ec <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d134      	bne.n	800441e <HAL_SPI_TransmitReceive+0x314>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d02f      	beq.n	800441e <HAL_SPI_TransmitReceive+0x314>
 80043be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d12c      	bne.n	800441e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d912      	bls.n	80043f4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d2:	881a      	ldrh	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043de:	1c9a      	adds	r2, r3, #2
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3b02      	subs	r3, #2
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80043f2:	e012      	b.n	800441a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	330c      	adds	r3, #12
 80043fe:	7812      	ldrb	r2, [r2, #0]
 8004400:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800441a:	2300      	movs	r3, #0
 800441c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b01      	cmp	r3, #1
 800442a:	d148      	bne.n	80044be <HAL_SPI_TransmitReceive+0x3b4>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004432:	b29b      	uxth	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d042      	beq.n	80044be <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800443e:	b29b      	uxth	r3, r3
 8004440:	2b01      	cmp	r3, #1
 8004442:	d923      	bls.n	800448c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444e:	b292      	uxth	r2, r2
 8004450:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	1c9a      	adds	r2, r3, #2
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004462:	b29b      	uxth	r3, r3
 8004464:	3b02      	subs	r3, #2
 8004466:	b29a      	uxth	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b01      	cmp	r3, #1
 8004478:	d81f      	bhi.n	80044ba <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004488:	605a      	str	r2, [r3, #4]
 800448a:	e016      	b.n	80044ba <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f103 020c 	add.w	r2, r3, #12
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004498:	7812      	ldrb	r2, [r2, #0]
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044ba:	2301      	movs	r3, #1
 80044bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80044be:	f7fd fb6b 	bl	8001b98 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d803      	bhi.n	80044d6 <HAL_SPI_TransmitReceive+0x3cc>
 80044ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d4:	d102      	bne.n	80044dc <HAL_SPI_TransmitReceive+0x3d2>
 80044d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d107      	bne.n	80044ec <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80044ea:	e026      	b.n	800453a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f47f af57 	bne.w	80043a6 <HAL_SPI_TransmitReceive+0x29c>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	f47f af50 	bne.w	80043a6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004506:	69fa      	ldr	r2, [r7, #28]
 8004508:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 f94c 	bl	80047a8 <SPI_EndRxTxTransaction>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2220      	movs	r2, #32
 8004520:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004530:	e003      	b.n	800453a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004542:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004546:	4618      	mov	r0, r3
 8004548:	3728      	adds	r7, #40	@ 0x28
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800455c:	b2db      	uxtb	r3, r3
}
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
	...

0800456c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	603b      	str	r3, [r7, #0]
 8004578:	4613      	mov	r3, r2
 800457a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800457c:	f7fd fb0c 	bl	8001b98 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	4413      	add	r3, r2
 800458a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800458c:	f7fd fb04 	bl	8001b98 <HAL_GetTick>
 8004590:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004592:	4b39      	ldr	r3, [pc, #228]	@ (8004678 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	015b      	lsls	r3, r3, #5
 8004598:	0d1b      	lsrs	r3, r3, #20
 800459a:	69fa      	ldr	r2, [r7, #28]
 800459c:	fb02 f303 	mul.w	r3, r2, r3
 80045a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045a2:	e054      	b.n	800464e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045aa:	d050      	beq.n	800464e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045ac:	f7fd faf4 	bl	8001b98 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	69fa      	ldr	r2, [r7, #28]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d902      	bls.n	80045c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d13d      	bne.n	800463e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80045d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045da:	d111      	bne.n	8004600 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045e4:	d004      	beq.n	80045f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ee:	d107      	bne.n	8004600 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004604:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004608:	d10f      	bne.n	800462a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004628:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e017      	b.n	800466e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	3b01      	subs	r3, #1
 800464c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4013      	ands	r3, r2
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	429a      	cmp	r2, r3
 800465c:	bf0c      	ite	eq
 800465e:	2301      	moveq	r3, #1
 8004660:	2300      	movne	r3, #0
 8004662:	b2db      	uxtb	r3, r3
 8004664:	461a      	mov	r2, r3
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	429a      	cmp	r2, r3
 800466a:	d19b      	bne.n	80045a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3720      	adds	r7, #32
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20000140 	.word	0x20000140

0800467c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08a      	sub	sp, #40	@ 0x28
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
 8004688:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800468e:	f7fd fa83 	bl	8001b98 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004696:	1a9b      	subs	r3, r3, r2
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	4413      	add	r3, r2
 800469c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800469e:	f7fd fa7b 	bl	8001b98 <HAL_GetTick>
 80046a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	330c      	adds	r3, #12
 80046aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80046ac:	4b3d      	ldr	r3, [pc, #244]	@ (80047a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	00da      	lsls	r2, r3, #3
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	0d1b      	lsrs	r3, r3, #20
 80046bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046be:	fb02 f303 	mul.w	r3, r2, r3
 80046c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80046c4:	e060      	b.n	8004788 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80046cc:	d107      	bne.n	80046de <SPI_WaitFifoStateUntilTimeout+0x62>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d104      	bne.n	80046de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80046dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e4:	d050      	beq.n	8004788 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046e6:	f7fd fa57 	bl	8001b98 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d902      	bls.n	80046fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80046f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d13d      	bne.n	8004778 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800470a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004714:	d111      	bne.n	800473a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800471e:	d004      	beq.n	800472a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004728:	d107      	bne.n	800473a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004738:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004742:	d10f      	bne.n	8004764 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004762:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e010      	b.n	800479a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	3b01      	subs	r3, #1
 8004786:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	4013      	ands	r3, r2
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	429a      	cmp	r2, r3
 8004796:	d196      	bne.n	80046c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3728      	adds	r7, #40	@ 0x28
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20000140 	.word	0x20000140

080047a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f7ff ff5b 	bl	800467c <SPI_WaitFifoStateUntilTimeout>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d007      	beq.n	80047dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047d0:	f043 0220 	orr.w	r2, r3, #32
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e027      	b.n	800482c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2200      	movs	r2, #0
 80047e4:	2180      	movs	r1, #128	@ 0x80
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f7ff fec0 	bl	800456c <SPI_WaitFlagStateUntilTimeout>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d007      	beq.n	8004802 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047f6:	f043 0220 	orr.w	r2, r3, #32
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e014      	b.n	800482c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2200      	movs	r2, #0
 800480a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f7ff ff34 	bl	800467c <SPI_WaitFifoStateUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800481e:	f043 0220 	orr.w	r2, r3, #32
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e000      	b.n	800482c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e049      	b.n	80048da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7fc fe78 	bl	8001550 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3304      	adds	r3, #4
 8004870:	4619      	mov	r1, r3
 8004872:	4610      	mov	r0, r2
 8004874:	f000 fa4a 	bl	8004d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d109      	bne.n	8004908 <HAL_TIM_PWM_Start+0x24>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	bf14      	ite	ne
 8004900:	2301      	movne	r3, #1
 8004902:	2300      	moveq	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	e03c      	b.n	8004982 <HAL_TIM_PWM_Start+0x9e>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2b04      	cmp	r3, #4
 800490c:	d109      	bne.n	8004922 <HAL_TIM_PWM_Start+0x3e>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b01      	cmp	r3, #1
 8004918:	bf14      	ite	ne
 800491a:	2301      	movne	r3, #1
 800491c:	2300      	moveq	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	e02f      	b.n	8004982 <HAL_TIM_PWM_Start+0x9e>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b08      	cmp	r3, #8
 8004926:	d109      	bne.n	800493c <HAL_TIM_PWM_Start+0x58>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	bf14      	ite	ne
 8004934:	2301      	movne	r3, #1
 8004936:	2300      	moveq	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	e022      	b.n	8004982 <HAL_TIM_PWM_Start+0x9e>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b0c      	cmp	r3, #12
 8004940:	d109      	bne.n	8004956 <HAL_TIM_PWM_Start+0x72>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b01      	cmp	r3, #1
 800494c:	bf14      	ite	ne
 800494e:	2301      	movne	r3, #1
 8004950:	2300      	moveq	r3, #0
 8004952:	b2db      	uxtb	r3, r3
 8004954:	e015      	b.n	8004982 <HAL_TIM_PWM_Start+0x9e>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b10      	cmp	r3, #16
 800495a:	d109      	bne.n	8004970 <HAL_TIM_PWM_Start+0x8c>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b01      	cmp	r3, #1
 8004966:	bf14      	ite	ne
 8004968:	2301      	movne	r3, #1
 800496a:	2300      	moveq	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	e008      	b.n	8004982 <HAL_TIM_PWM_Start+0x9e>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b01      	cmp	r3, #1
 800497a:	bf14      	ite	ne
 800497c:	2301      	movne	r3, #1
 800497e:	2300      	moveq	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e097      	b.n	8004aba <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d104      	bne.n	800499a <HAL_TIM_PWM_Start+0xb6>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2202      	movs	r2, #2
 8004994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004998:	e023      	b.n	80049e2 <HAL_TIM_PWM_Start+0xfe>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b04      	cmp	r3, #4
 800499e:	d104      	bne.n	80049aa <HAL_TIM_PWM_Start+0xc6>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049a8:	e01b      	b.n	80049e2 <HAL_TIM_PWM_Start+0xfe>
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d104      	bne.n	80049ba <HAL_TIM_PWM_Start+0xd6>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2202      	movs	r2, #2
 80049b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049b8:	e013      	b.n	80049e2 <HAL_TIM_PWM_Start+0xfe>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b0c      	cmp	r3, #12
 80049be:	d104      	bne.n	80049ca <HAL_TIM_PWM_Start+0xe6>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049c8:	e00b      	b.n	80049e2 <HAL_TIM_PWM_Start+0xfe>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b10      	cmp	r3, #16
 80049ce:	d104      	bne.n	80049da <HAL_TIM_PWM_Start+0xf6>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049d8:	e003      	b.n	80049e2 <HAL_TIM_PWM_Start+0xfe>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2202      	movs	r2, #2
 80049de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2201      	movs	r2, #1
 80049e8:	6839      	ldr	r1, [r7, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 fcf4 	bl	80053d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a33      	ldr	r2, [pc, #204]	@ (8004ac4 <HAL_TIM_PWM_Start+0x1e0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d013      	beq.n	8004a22 <HAL_TIM_PWM_Start+0x13e>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a32      	ldr	r2, [pc, #200]	@ (8004ac8 <HAL_TIM_PWM_Start+0x1e4>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d00e      	beq.n	8004a22 <HAL_TIM_PWM_Start+0x13e>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a30      	ldr	r2, [pc, #192]	@ (8004acc <HAL_TIM_PWM_Start+0x1e8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d009      	beq.n	8004a22 <HAL_TIM_PWM_Start+0x13e>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a2f      	ldr	r2, [pc, #188]	@ (8004ad0 <HAL_TIM_PWM_Start+0x1ec>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d004      	beq.n	8004a22 <HAL_TIM_PWM_Start+0x13e>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a2d      	ldr	r2, [pc, #180]	@ (8004ad4 <HAL_TIM_PWM_Start+0x1f0>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d101      	bne.n	8004a26 <HAL_TIM_PWM_Start+0x142>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <HAL_TIM_PWM_Start+0x144>
 8004a26:	2300      	movs	r3, #0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d007      	beq.n	8004a3c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a3a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a20      	ldr	r2, [pc, #128]	@ (8004ac4 <HAL_TIM_PWM_Start+0x1e0>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d018      	beq.n	8004a78 <HAL_TIM_PWM_Start+0x194>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a4e:	d013      	beq.n	8004a78 <HAL_TIM_PWM_Start+0x194>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a20      	ldr	r2, [pc, #128]	@ (8004ad8 <HAL_TIM_PWM_Start+0x1f4>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d00e      	beq.n	8004a78 <HAL_TIM_PWM_Start+0x194>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a1f      	ldr	r2, [pc, #124]	@ (8004adc <HAL_TIM_PWM_Start+0x1f8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d009      	beq.n	8004a78 <HAL_TIM_PWM_Start+0x194>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a17      	ldr	r2, [pc, #92]	@ (8004ac8 <HAL_TIM_PWM_Start+0x1e4>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d004      	beq.n	8004a78 <HAL_TIM_PWM_Start+0x194>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a16      	ldr	r2, [pc, #88]	@ (8004acc <HAL_TIM_PWM_Start+0x1e8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d115      	bne.n	8004aa4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	4b18      	ldr	r3, [pc, #96]	@ (8004ae0 <HAL_TIM_PWM_Start+0x1fc>)
 8004a80:	4013      	ands	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2b06      	cmp	r3, #6
 8004a88:	d015      	beq.n	8004ab6 <HAL_TIM_PWM_Start+0x1d2>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a90:	d011      	beq.n	8004ab6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0201 	orr.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa2:	e008      	b.n	8004ab6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	e000      	b.n	8004ab8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40012c00 	.word	0x40012c00
 8004ac8:	40013400 	.word	0x40013400
 8004acc:	40014000 	.word	0x40014000
 8004ad0:	40014400 	.word	0x40014400
 8004ad4:	40014800 	.word	0x40014800
 8004ad8:	40000400 	.word	0x40000400
 8004adc:	40000800 	.word	0x40000800
 8004ae0:	00010007 	.word	0x00010007

08004ae4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004afe:	2302      	movs	r3, #2
 8004b00:	e0ff      	b.n	8004d02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b14      	cmp	r3, #20
 8004b0e:	f200 80f0 	bhi.w	8004cf2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b12:	a201      	add	r2, pc, #4	@ (adr r2, 8004b18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b18:	08004b6d 	.word	0x08004b6d
 8004b1c:	08004cf3 	.word	0x08004cf3
 8004b20:	08004cf3 	.word	0x08004cf3
 8004b24:	08004cf3 	.word	0x08004cf3
 8004b28:	08004bad 	.word	0x08004bad
 8004b2c:	08004cf3 	.word	0x08004cf3
 8004b30:	08004cf3 	.word	0x08004cf3
 8004b34:	08004cf3 	.word	0x08004cf3
 8004b38:	08004bef 	.word	0x08004bef
 8004b3c:	08004cf3 	.word	0x08004cf3
 8004b40:	08004cf3 	.word	0x08004cf3
 8004b44:	08004cf3 	.word	0x08004cf3
 8004b48:	08004c2f 	.word	0x08004c2f
 8004b4c:	08004cf3 	.word	0x08004cf3
 8004b50:	08004cf3 	.word	0x08004cf3
 8004b54:	08004cf3 	.word	0x08004cf3
 8004b58:	08004c71 	.word	0x08004c71
 8004b5c:	08004cf3 	.word	0x08004cf3
 8004b60:	08004cf3 	.word	0x08004cf3
 8004b64:	08004cf3 	.word	0x08004cf3
 8004b68:	08004cb1 	.word	0x08004cb1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68b9      	ldr	r1, [r7, #8]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 f95a 	bl	8004e2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699a      	ldr	r2, [r3, #24]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0208 	orr.w	r2, r2, #8
 8004b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699a      	ldr	r2, [r3, #24]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0204 	bic.w	r2, r2, #4
 8004b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6999      	ldr	r1, [r3, #24]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	691a      	ldr	r2, [r3, #16]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	619a      	str	r2, [r3, #24]
      break;
 8004baa:	e0a5      	b.n	8004cf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68b9      	ldr	r1, [r7, #8]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 f9ca 	bl	8004f4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699a      	ldr	r2, [r3, #24]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699a      	ldr	r2, [r3, #24]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6999      	ldr	r1, [r3, #24]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	021a      	lsls	r2, r3, #8
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	619a      	str	r2, [r3, #24]
      break;
 8004bec:	e084      	b.n	8004cf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68b9      	ldr	r1, [r7, #8]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 fa33 	bl	8005060 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69da      	ldr	r2, [r3, #28]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f042 0208 	orr.w	r2, r2, #8
 8004c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69da      	ldr	r2, [r3, #28]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0204 	bic.w	r2, r2, #4
 8004c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69d9      	ldr	r1, [r3, #28]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	691a      	ldr	r2, [r3, #16]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	61da      	str	r2, [r3, #28]
      break;
 8004c2c:	e064      	b.n	8004cf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68b9      	ldr	r1, [r7, #8]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 fa9b 	bl	8005170 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69da      	ldr	r2, [r3, #28]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69da      	ldr	r2, [r3, #28]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69d9      	ldr	r1, [r3, #28]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	021a      	lsls	r2, r3, #8
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	61da      	str	r2, [r3, #28]
      break;
 8004c6e:	e043      	b.n	8004cf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fae4 	bl	8005244 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0208 	orr.w	r2, r2, #8
 8004c8a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0204 	bic.w	r2, r2, #4
 8004c9a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	691a      	ldr	r2, [r3, #16]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004cae:	e023      	b.n	8004cf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68b9      	ldr	r1, [r7, #8]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fb28 	bl	800530c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cda:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	021a      	lsls	r2, r3, #8
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004cf0:	e002      	b.n	8004cf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	75fb      	strb	r3, [r7, #23]
      break;
 8004cf6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop

08004d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a3c      	ldr	r2, [pc, #240]	@ (8004e10 <TIM_Base_SetConfig+0x104>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d00f      	beq.n	8004d44 <TIM_Base_SetConfig+0x38>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d2a:	d00b      	beq.n	8004d44 <TIM_Base_SetConfig+0x38>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a39      	ldr	r2, [pc, #228]	@ (8004e14 <TIM_Base_SetConfig+0x108>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d007      	beq.n	8004d44 <TIM_Base_SetConfig+0x38>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a38      	ldr	r2, [pc, #224]	@ (8004e18 <TIM_Base_SetConfig+0x10c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d003      	beq.n	8004d44 <TIM_Base_SetConfig+0x38>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a37      	ldr	r2, [pc, #220]	@ (8004e1c <TIM_Base_SetConfig+0x110>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d108      	bne.n	8004d56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a2d      	ldr	r2, [pc, #180]	@ (8004e10 <TIM_Base_SetConfig+0x104>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d01b      	beq.n	8004d96 <TIM_Base_SetConfig+0x8a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d64:	d017      	beq.n	8004d96 <TIM_Base_SetConfig+0x8a>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a2a      	ldr	r2, [pc, #168]	@ (8004e14 <TIM_Base_SetConfig+0x108>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d013      	beq.n	8004d96 <TIM_Base_SetConfig+0x8a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a29      	ldr	r2, [pc, #164]	@ (8004e18 <TIM_Base_SetConfig+0x10c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00f      	beq.n	8004d96 <TIM_Base_SetConfig+0x8a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a28      	ldr	r2, [pc, #160]	@ (8004e1c <TIM_Base_SetConfig+0x110>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d00b      	beq.n	8004d96 <TIM_Base_SetConfig+0x8a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a27      	ldr	r2, [pc, #156]	@ (8004e20 <TIM_Base_SetConfig+0x114>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d007      	beq.n	8004d96 <TIM_Base_SetConfig+0x8a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a26      	ldr	r2, [pc, #152]	@ (8004e24 <TIM_Base_SetConfig+0x118>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d003      	beq.n	8004d96 <TIM_Base_SetConfig+0x8a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a25      	ldr	r2, [pc, #148]	@ (8004e28 <TIM_Base_SetConfig+0x11c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d108      	bne.n	8004da8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a10      	ldr	r2, [pc, #64]	@ (8004e10 <TIM_Base_SetConfig+0x104>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d00f      	beq.n	8004df4 <TIM_Base_SetConfig+0xe8>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a11      	ldr	r2, [pc, #68]	@ (8004e1c <TIM_Base_SetConfig+0x110>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00b      	beq.n	8004df4 <TIM_Base_SetConfig+0xe8>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a10      	ldr	r2, [pc, #64]	@ (8004e20 <TIM_Base_SetConfig+0x114>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d007      	beq.n	8004df4 <TIM_Base_SetConfig+0xe8>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a0f      	ldr	r2, [pc, #60]	@ (8004e24 <TIM_Base_SetConfig+0x118>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d003      	beq.n	8004df4 <TIM_Base_SetConfig+0xe8>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a0e      	ldr	r2, [pc, #56]	@ (8004e28 <TIM_Base_SetConfig+0x11c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d103      	bne.n	8004dfc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	615a      	str	r2, [r3, #20]
}
 8004e02:	bf00      	nop
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40012c00 	.word	0x40012c00
 8004e14:	40000400 	.word	0x40000400
 8004e18:	40000800 	.word	0x40000800
 8004e1c:	40013400 	.word	0x40013400
 8004e20:	40014000 	.word	0x40014000
 8004e24:	40014400 	.word	0x40014400
 8004e28:	40014800 	.word	0x40014800

08004e2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	f023 0201 	bic.w	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0303 	bic.w	r3, r3, #3
 8004e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f023 0302 	bic.w	r3, r3, #2
 8004e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a2c      	ldr	r2, [pc, #176]	@ (8004f38 <TIM_OC1_SetConfig+0x10c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00f      	beq.n	8004eac <TIM_OC1_SetConfig+0x80>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a2b      	ldr	r2, [pc, #172]	@ (8004f3c <TIM_OC1_SetConfig+0x110>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d00b      	beq.n	8004eac <TIM_OC1_SetConfig+0x80>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a2a      	ldr	r2, [pc, #168]	@ (8004f40 <TIM_OC1_SetConfig+0x114>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d007      	beq.n	8004eac <TIM_OC1_SetConfig+0x80>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a29      	ldr	r2, [pc, #164]	@ (8004f44 <TIM_OC1_SetConfig+0x118>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d003      	beq.n	8004eac <TIM_OC1_SetConfig+0x80>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a28      	ldr	r2, [pc, #160]	@ (8004f48 <TIM_OC1_SetConfig+0x11c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d10c      	bne.n	8004ec6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f023 0308 	bic.w	r3, r3, #8
 8004eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f023 0304 	bic.w	r3, r3, #4
 8004ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a1b      	ldr	r2, [pc, #108]	@ (8004f38 <TIM_OC1_SetConfig+0x10c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00f      	beq.n	8004eee <TIM_OC1_SetConfig+0xc2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a1a      	ldr	r2, [pc, #104]	@ (8004f3c <TIM_OC1_SetConfig+0x110>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00b      	beq.n	8004eee <TIM_OC1_SetConfig+0xc2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a19      	ldr	r2, [pc, #100]	@ (8004f40 <TIM_OC1_SetConfig+0x114>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d007      	beq.n	8004eee <TIM_OC1_SetConfig+0xc2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a18      	ldr	r2, [pc, #96]	@ (8004f44 <TIM_OC1_SetConfig+0x118>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d003      	beq.n	8004eee <TIM_OC1_SetConfig+0xc2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a17      	ldr	r2, [pc, #92]	@ (8004f48 <TIM_OC1_SetConfig+0x11c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d111      	bne.n	8004f12 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	621a      	str	r2, [r3, #32]
}
 8004f2c:	bf00      	nop
 8004f2e:	371c      	adds	r7, #28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	40012c00 	.word	0x40012c00
 8004f3c:	40013400 	.word	0x40013400
 8004f40:	40014000 	.word	0x40014000
 8004f44:	40014400 	.word	0x40014400
 8004f48:	40014800 	.word	0x40014800

08004f4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	f023 0210 	bic.w	r2, r3, #16
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f023 0320 	bic.w	r3, r3, #32
 8004f9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a28      	ldr	r2, [pc, #160]	@ (800504c <TIM_OC2_SetConfig+0x100>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d003      	beq.n	8004fb8 <TIM_OC2_SetConfig+0x6c>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a27      	ldr	r2, [pc, #156]	@ (8005050 <TIM_OC2_SetConfig+0x104>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d10d      	bne.n	8004fd4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a1d      	ldr	r2, [pc, #116]	@ (800504c <TIM_OC2_SetConfig+0x100>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00f      	beq.n	8004ffc <TIM_OC2_SetConfig+0xb0>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a1c      	ldr	r2, [pc, #112]	@ (8005050 <TIM_OC2_SetConfig+0x104>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00b      	beq.n	8004ffc <TIM_OC2_SetConfig+0xb0>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8005054 <TIM_OC2_SetConfig+0x108>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d007      	beq.n	8004ffc <TIM_OC2_SetConfig+0xb0>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a1a      	ldr	r2, [pc, #104]	@ (8005058 <TIM_OC2_SetConfig+0x10c>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d003      	beq.n	8004ffc <TIM_OC2_SetConfig+0xb0>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a19      	ldr	r2, [pc, #100]	@ (800505c <TIM_OC2_SetConfig+0x110>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d113      	bne.n	8005024 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005002:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800500a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	4313      	orrs	r3, r2
 8005022:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	621a      	str	r2, [r3, #32]
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40012c00 	.word	0x40012c00
 8005050:	40013400 	.word	0x40013400
 8005054:	40014000 	.word	0x40014000
 8005058:	40014400 	.word	0x40014400
 800505c:	40014800 	.word	0x40014800

08005060 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800508e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0303 	bic.w	r3, r3, #3
 800509a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	021b      	lsls	r3, r3, #8
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a27      	ldr	r2, [pc, #156]	@ (800515c <TIM_OC3_SetConfig+0xfc>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d003      	beq.n	80050ca <TIM_OC3_SetConfig+0x6a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a26      	ldr	r2, [pc, #152]	@ (8005160 <TIM_OC3_SetConfig+0x100>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d10d      	bne.n	80050e6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	021b      	lsls	r3, r3, #8
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050e4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a1c      	ldr	r2, [pc, #112]	@ (800515c <TIM_OC3_SetConfig+0xfc>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d00f      	beq.n	800510e <TIM_OC3_SetConfig+0xae>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005160 <TIM_OC3_SetConfig+0x100>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00b      	beq.n	800510e <TIM_OC3_SetConfig+0xae>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a1a      	ldr	r2, [pc, #104]	@ (8005164 <TIM_OC3_SetConfig+0x104>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d007      	beq.n	800510e <TIM_OC3_SetConfig+0xae>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a19      	ldr	r2, [pc, #100]	@ (8005168 <TIM_OC3_SetConfig+0x108>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d003      	beq.n	800510e <TIM_OC3_SetConfig+0xae>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a18      	ldr	r2, [pc, #96]	@ (800516c <TIM_OC3_SetConfig+0x10c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d113      	bne.n	8005136 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800511c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4313      	orrs	r3, r2
 8005134:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	621a      	str	r2, [r3, #32]
}
 8005150:	bf00      	nop
 8005152:	371c      	adds	r7, #28
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	40012c00 	.word	0x40012c00
 8005160:	40013400 	.word	0x40013400
 8005164:	40014000 	.word	0x40014000
 8005168:	40014400 	.word	0x40014400
 800516c:	40014800 	.word	0x40014800

08005170 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800519e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	021b      	lsls	r3, r3, #8
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	031b      	lsls	r3, r3, #12
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a18      	ldr	r2, [pc, #96]	@ (8005230 <TIM_OC4_SetConfig+0xc0>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d00f      	beq.n	80051f4 <TIM_OC4_SetConfig+0x84>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a17      	ldr	r2, [pc, #92]	@ (8005234 <TIM_OC4_SetConfig+0xc4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00b      	beq.n	80051f4 <TIM_OC4_SetConfig+0x84>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a16      	ldr	r2, [pc, #88]	@ (8005238 <TIM_OC4_SetConfig+0xc8>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d007      	beq.n	80051f4 <TIM_OC4_SetConfig+0x84>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a15      	ldr	r2, [pc, #84]	@ (800523c <TIM_OC4_SetConfig+0xcc>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d003      	beq.n	80051f4 <TIM_OC4_SetConfig+0x84>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a14      	ldr	r2, [pc, #80]	@ (8005240 <TIM_OC4_SetConfig+0xd0>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d109      	bne.n	8005208 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	019b      	lsls	r3, r3, #6
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	4313      	orrs	r3, r2
 8005206:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	621a      	str	r2, [r3, #32]
}
 8005222:	bf00      	nop
 8005224:	371c      	adds	r7, #28
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40012c00 	.word	0x40012c00
 8005234:	40013400 	.word	0x40013400
 8005238:	40014000 	.word	0x40014000
 800523c:	40014400 	.word	0x40014400
 8005240:	40014800 	.word	0x40014800

08005244 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800526a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005288:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	041b      	lsls	r3, r3, #16
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a17      	ldr	r2, [pc, #92]	@ (80052f8 <TIM_OC5_SetConfig+0xb4>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00f      	beq.n	80052be <TIM_OC5_SetConfig+0x7a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a16      	ldr	r2, [pc, #88]	@ (80052fc <TIM_OC5_SetConfig+0xb8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00b      	beq.n	80052be <TIM_OC5_SetConfig+0x7a>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a15      	ldr	r2, [pc, #84]	@ (8005300 <TIM_OC5_SetConfig+0xbc>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d007      	beq.n	80052be <TIM_OC5_SetConfig+0x7a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a14      	ldr	r2, [pc, #80]	@ (8005304 <TIM_OC5_SetConfig+0xc0>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d003      	beq.n	80052be <TIM_OC5_SetConfig+0x7a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a13      	ldr	r2, [pc, #76]	@ (8005308 <TIM_OC5_SetConfig+0xc4>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d109      	bne.n	80052d2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	021b      	lsls	r3, r3, #8
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	621a      	str	r2, [r3, #32]
}
 80052ec:	bf00      	nop
 80052ee:	371c      	adds	r7, #28
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	40012c00 	.word	0x40012c00
 80052fc:	40013400 	.word	0x40013400
 8005300:	40014000 	.word	0x40014000
 8005304:	40014400 	.word	0x40014400
 8005308:	40014800 	.word	0x40014800

0800530c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800533a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800533e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	021b      	lsls	r3, r3, #8
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4313      	orrs	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005352:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	051b      	lsls	r3, r3, #20
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a18      	ldr	r2, [pc, #96]	@ (80053c4 <TIM_OC6_SetConfig+0xb8>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00f      	beq.n	8005388 <TIM_OC6_SetConfig+0x7c>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a17      	ldr	r2, [pc, #92]	@ (80053c8 <TIM_OC6_SetConfig+0xbc>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00b      	beq.n	8005388 <TIM_OC6_SetConfig+0x7c>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a16      	ldr	r2, [pc, #88]	@ (80053cc <TIM_OC6_SetConfig+0xc0>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d007      	beq.n	8005388 <TIM_OC6_SetConfig+0x7c>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a15      	ldr	r2, [pc, #84]	@ (80053d0 <TIM_OC6_SetConfig+0xc4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d003      	beq.n	8005388 <TIM_OC6_SetConfig+0x7c>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a14      	ldr	r2, [pc, #80]	@ (80053d4 <TIM_OC6_SetConfig+0xc8>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d109      	bne.n	800539c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800538e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	029b      	lsls	r3, r3, #10
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	4313      	orrs	r3, r2
 800539a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	621a      	str	r2, [r3, #32]
}
 80053b6:	bf00      	nop
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	40012c00 	.word	0x40012c00
 80053c8:	40013400 	.word	0x40013400
 80053cc:	40014000 	.word	0x40014000
 80053d0:	40014400 	.word	0x40014400
 80053d4:	40014800 	.word	0x40014800

080053d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f003 031f 	and.w	r3, r3, #31
 80053ea:	2201      	movs	r2, #1
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a1a      	ldr	r2, [r3, #32]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	43db      	mvns	r3, r3
 80053fa:	401a      	ands	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a1a      	ldr	r2, [r3, #32]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f003 031f 	and.w	r3, r3, #31
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	fa01 f303 	lsl.w	r3, r1, r3
 8005410:	431a      	orrs	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	621a      	str	r2, [r3, #32]
}
 8005416:	bf00      	nop
 8005418:	371c      	adds	r7, #28
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
	...

08005424 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005438:	2302      	movs	r3, #2
 800543a:	e063      	b.n	8005504 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a2b      	ldr	r2, [pc, #172]	@ (8005510 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d004      	beq.n	8005470 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a2a      	ldr	r2, [pc, #168]	@ (8005514 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d108      	bne.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005476:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005488:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4313      	orrs	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005510 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d018      	beq.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ae:	d013      	beq.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a18      	ldr	r2, [pc, #96]	@ (8005518 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00e      	beq.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a17      	ldr	r2, [pc, #92]	@ (800551c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d009      	beq.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a12      	ldr	r2, [pc, #72]	@ (8005514 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d004      	beq.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a13      	ldr	r2, [pc, #76]	@ (8005520 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d10c      	bne.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	40012c00 	.word	0x40012c00
 8005514:	40013400 	.word	0x40013400
 8005518:	40000400 	.word	0x40000400
 800551c:	40000800 	.word	0x40000800
 8005520:	40014000 	.word	0x40014000

08005524 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e03c      	b.n	80055b0 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fc f8aa 	bl	80016a4 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0201 	bic.w	r2, r2, #1
 8005566:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f9e9 	bl	8005940 <USART_SetConfig>
 800556e:	4603      	mov	r3, r0
 8005570:	2b01      	cmp	r3, #1
 8005572:	d101      	bne.n	8005578 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e01b      	b.n	80055b0 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005586:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689a      	ldr	r2, [r3, #8]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005596:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0201 	orr.w	r2, r2, #1
 80055a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 fb13 	bl	8005bd4 <USART_CheckIdleState>
 80055ae:	4603      	mov	r3, r0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80055d8:	69fa      	ldr	r2, [r7, #28]
 80055da:	f640 030f 	movw	r3, #2063	@ 0x80f
 80055de:	4013      	ands	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d113      	bne.n	8005610 <HAL_USART_IRQHandler+0x58>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00e      	beq.n	8005610 <HAL_USART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	f003 0320 	and.w	r3, r3, #32
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d009      	beq.n	8005610 <HAL_USART_IRQHandler+0x58>
    {
      if (husart->RxISR != NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 810d 	beq.w	8005820 <HAL_USART_IRQHandler+0x268>
      {
        husart->RxISR(husart);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	4798      	blx	r3
      }
      return;
 800560e:	e107      	b.n	8005820 <HAL_USART_IRQHandler+0x268>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 80e3 	beq.w	80057de <HAL_USART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d105      	bne.n	800562e <HAL_USART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 80d8 	beq.w	80057de <HAL_USART_IRQHandler+0x226>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00e      	beq.n	8005656 <HAL_USART_IRQHandler+0x9e>
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800563e:	2b00      	cmp	r3, #0
 8005640:	d009      	beq.n	8005656 <HAL_USART_IRQHandler+0x9e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2201      	movs	r2, #1
 8005648:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800564e:	f043 0201 	orr.w	r2, r3, #1
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00e      	beq.n	800567e <HAL_USART_IRQHandler+0xc6>
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d009      	beq.n	800567e <HAL_USART_IRQHandler+0xc6>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2202      	movs	r2, #2
 8005670:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005676:	f043 0204 	orr.w	r2, r3, #4
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	f003 0304 	and.w	r3, r3, #4
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00e      	beq.n	80056a6 <HAL_USART_IRQHandler+0xee>
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d009      	beq.n	80056a6 <HAL_USART_IRQHandler+0xee>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2204      	movs	r2, #4
 8005698:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800569e:	f043 0202 	orr.w	r2, r3, #2
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d013      	beq.n	80056d8 <HAL_USART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d104      	bne.n	80056c4 <HAL_USART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d009      	beq.n	80056d8 <HAL_USART_IRQHandler+0x120>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2208      	movs	r2, #8
 80056ca:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056d0:	f043 0208 	orr.w	r2, r3, #8
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00f      	beq.n	8005702 <HAL_USART_IRQHandler+0x14a>
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00a      	beq.n	8005702 <HAL_USART_IRQHandler+0x14a>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056f4:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056fa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	64da      	str	r2, [r3, #76]	@ 0x4c
    }


    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 808c 	beq.w	8005824 <HAL_USART_IRQHandler+0x26c>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	f003 0320 	and.w	r3, r3, #32
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00c      	beq.n	8005730 <HAL_USART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	f003 0320 	and.w	r3, r3, #32
 800571c:	2b00      	cmp	r3, #0
 800571e:	d007      	beq.n	8005730 <HAL_USART_IRQHandler+0x178>
      {
        if (husart->RxISR != NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <HAL_USART_IRQHandler+0x178>
        {
          husart->RxISR(husart);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005734:	f003 0308 	and.w	r3, r3, #8
 8005738:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005744:	2b40      	cmp	r3, #64	@ 0x40
 8005746:	d002      	beq.n	800574e <HAL_USART_IRQHandler+0x196>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d03e      	beq.n	80057cc <HAL_USART_IRQHandler+0x214>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f88e 	bl	8005870 <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800575e:	2b40      	cmp	r3, #64	@ 0x40
 8005760:	d130      	bne.n	80057c4 <HAL_USART_IRQHandler+0x20c>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005770:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005776:	2b00      	cmp	r3, #0
 8005778:	d008      	beq.n	800578c <HAL_USART_IRQHandler+0x1d4>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577e:	2200      	movs	r2, #0
 8005780:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005786:	4618      	mov	r0, r3
 8005788:	f7fc fb23 	bl	8001dd2 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005790:	2b00      	cmp	r3, #0
 8005792:	d013      	beq.n	80057bc <HAL_USART_IRQHandler+0x204>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005798:	4a25      	ldr	r2, [pc, #148]	@ (8005830 <HAL_USART_IRQHandler+0x278>)
 800579a:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7fc fb16 	bl	8001dd2 <HAL_DMA_Abort_IT>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d016      	beq.n	80057da <HAL_USART_IRQHandler+0x222>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80057b6:	4610      	mov	r0, r2
 80057b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80057ba:	e00e      	b.n	80057da <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f84d 	bl	800585c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80057c2:	e00a      	b.n	80057da <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f849 	bl	800585c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80057ca:	e006      	b.n	80057da <HAL_USART_IRQHandler+0x222>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f845 	bl	800585c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	64da      	str	r2, [r3, #76]	@ 0x4c
      }
    }
    return;
 80057d8:	e024      	b.n	8005824 <HAL_USART_IRQHandler+0x26c>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80057da:	bf00      	nop
    return;
 80057dc:	e022      	b.n	8005824 <HAL_USART_IRQHandler+0x26c>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00d      	beq.n	8005804 <HAL_USART_IRQHandler+0x24c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d008      	beq.n	8005804 <HAL_USART_IRQHandler+0x24c>
  {
    if (husart->TxISR != NULL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d016      	beq.n	8005828 <HAL_USART_IRQHandler+0x270>
    {
      husart->TxISR(husart);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	4798      	blx	r3
    }
    return;
 8005802:	e011      	b.n	8005828 <HAL_USART_IRQHandler+0x270>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00d      	beq.n	800582a <HAL_USART_IRQHandler+0x272>
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005814:	2b00      	cmp	r3, #0
 8005816:	d008      	beq.n	800582a <HAL_USART_IRQHandler+0x272>
  {
    USART_EndTransmit_IT(husart);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fa1e 	bl	8005c5a <USART_EndTransmit_IT>
    return;
 800581e:	e004      	b.n	800582a <HAL_USART_IRQHandler+0x272>
      return;
 8005820:	bf00      	nop
 8005822:	e002      	b.n	800582a <HAL_USART_IRQHandler+0x272>
    return;
 8005824:	bf00      	nop
 8005826:	e000      	b.n	800582a <HAL_USART_IRQHandler+0x272>
    return;
 8005828:	bf00      	nop
  }

}
 800582a:	3720      	adds	r7, #32
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	080058ad 	.word	0x080058ad

08005834 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 72f0 	bic.w	r2, r2, #480	@ 0x1e0
 8005886:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689a      	ldr	r2, [r3, #8]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0201 	bic.w	r2, r2, #1
 8005896:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b8:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	865a      	strh	r2, [r3, #50]	@ 0x32
  husart->TxXferCount = 0U;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f7ff ffc8 	bl	800585c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 80058cc:	bf00      	nop
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	4613      	mov	r3, r2
 80058e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80058e4:	e018      	b.n	8005918 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ec:	d014      	beq.n	8005918 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ee:	f7fc f953 	bl	8001b98 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d302      	bcc.n	8005904 <USART_WaitOnFlagUntilTimeout+0x30>
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d109      	bne.n	8005918 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e00f      	b.n	8005938 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	69da      	ldr	r2, [r3, #28]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	4013      	ands	r3, r2
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	429a      	cmp	r2, r3
 8005926:	bf0c      	ite	eq
 8005928:	2301      	moveq	r3, #1
 800592a:	2300      	movne	r3, #0
 800592c:	b2db      	uxtb	r3, r3
 800592e:	461a      	mov	r2, r3
 8005930:	79fb      	ldrb	r3, [r7, #7]
 8005932:	429a      	cmp	r2, r3
 8005934:	d0d7      	beq.n	80058e6 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b088      	sub	sp, #32
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8005948:	2300      	movs	r3, #0
 800594a:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800594c:	2300      	movs	r3, #0
 800594e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	431a      	orrs	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	4313      	orrs	r3, r2
 8005960:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005964:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8005970:	f023 030c 	bic.w	r3, r3, #12
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6812      	ldr	r2, [r2, #0]
 8005978:	6979      	ldr	r1, [r7, #20]
 800597a:	430b      	orrs	r3, r1
 800597c:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800597e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005982:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	699a      	ldr	r2, [r3, #24]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	4313      	orrs	r3, r2
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	4313      	orrs	r3, r2
 800599c:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a80      	ldr	r2, [pc, #512]	@ (8005bc4 <USART_SetConfig+0x284>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d11f      	bne.n	8005a06 <USART_SetConfig+0xc6>
 80059c6:	4b80      	ldr	r3, [pc, #512]	@ (8005bc8 <USART_SetConfig+0x288>)
 80059c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ca:	f003 0303 	and.w	r3, r3, #3
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d816      	bhi.n	8005a00 <USART_SetConfig+0xc0>
 80059d2:	a201      	add	r2, pc, #4	@ (adr r2, 80059d8 <USART_SetConfig+0x98>)
 80059d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d8:	080059e9 	.word	0x080059e9
 80059dc:	080059f5 	.word	0x080059f5
 80059e0:	080059fb 	.word	0x080059fb
 80059e4:	080059ef 	.word	0x080059ef
 80059e8:	2301      	movs	r3, #1
 80059ea:	77fb      	strb	r3, [r7, #31]
 80059ec:	e061      	b.n	8005ab2 <USART_SetConfig+0x172>
 80059ee:	2302      	movs	r3, #2
 80059f0:	77fb      	strb	r3, [r7, #31]
 80059f2:	e05e      	b.n	8005ab2 <USART_SetConfig+0x172>
 80059f4:	2304      	movs	r3, #4
 80059f6:	77fb      	strb	r3, [r7, #31]
 80059f8:	e05b      	b.n	8005ab2 <USART_SetConfig+0x172>
 80059fa:	2308      	movs	r3, #8
 80059fc:	77fb      	strb	r3, [r7, #31]
 80059fe:	e058      	b.n	8005ab2 <USART_SetConfig+0x172>
 8005a00:	2310      	movs	r3, #16
 8005a02:	77fb      	strb	r3, [r7, #31]
 8005a04:	e055      	b.n	8005ab2 <USART_SetConfig+0x172>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a70      	ldr	r2, [pc, #448]	@ (8005bcc <USART_SetConfig+0x28c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d124      	bne.n	8005a5a <USART_SetConfig+0x11a>
 8005a10:	4b6d      	ldr	r3, [pc, #436]	@ (8005bc8 <USART_SetConfig+0x288>)
 8005a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a1c:	d011      	beq.n	8005a42 <USART_SetConfig+0x102>
 8005a1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a22:	d817      	bhi.n	8005a54 <USART_SetConfig+0x114>
 8005a24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a28:	d011      	beq.n	8005a4e <USART_SetConfig+0x10e>
 8005a2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a2e:	d811      	bhi.n	8005a54 <USART_SetConfig+0x114>
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d003      	beq.n	8005a3c <USART_SetConfig+0xfc>
 8005a34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a38:	d006      	beq.n	8005a48 <USART_SetConfig+0x108>
 8005a3a:	e00b      	b.n	8005a54 <USART_SetConfig+0x114>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	77fb      	strb	r3, [r7, #31]
 8005a40:	e037      	b.n	8005ab2 <USART_SetConfig+0x172>
 8005a42:	2302      	movs	r3, #2
 8005a44:	77fb      	strb	r3, [r7, #31]
 8005a46:	e034      	b.n	8005ab2 <USART_SetConfig+0x172>
 8005a48:	2304      	movs	r3, #4
 8005a4a:	77fb      	strb	r3, [r7, #31]
 8005a4c:	e031      	b.n	8005ab2 <USART_SetConfig+0x172>
 8005a4e:	2308      	movs	r3, #8
 8005a50:	77fb      	strb	r3, [r7, #31]
 8005a52:	e02e      	b.n	8005ab2 <USART_SetConfig+0x172>
 8005a54:	2310      	movs	r3, #16
 8005a56:	77fb      	strb	r3, [r7, #31]
 8005a58:	e02b      	b.n	8005ab2 <USART_SetConfig+0x172>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a5c      	ldr	r2, [pc, #368]	@ (8005bd0 <USART_SetConfig+0x290>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d124      	bne.n	8005aae <USART_SetConfig+0x16e>
 8005a64:	4b58      	ldr	r3, [pc, #352]	@ (8005bc8 <USART_SetConfig+0x288>)
 8005a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a68:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005a6c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005a70:	d011      	beq.n	8005a96 <USART_SetConfig+0x156>
 8005a72:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005a76:	d817      	bhi.n	8005aa8 <USART_SetConfig+0x168>
 8005a78:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005a7c:	d011      	beq.n	8005aa2 <USART_SetConfig+0x162>
 8005a7e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005a82:	d811      	bhi.n	8005aa8 <USART_SetConfig+0x168>
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d003      	beq.n	8005a90 <USART_SetConfig+0x150>
 8005a88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a8c:	d006      	beq.n	8005a9c <USART_SetConfig+0x15c>
 8005a8e:	e00b      	b.n	8005aa8 <USART_SetConfig+0x168>
 8005a90:	2300      	movs	r3, #0
 8005a92:	77fb      	strb	r3, [r7, #31]
 8005a94:	e00d      	b.n	8005ab2 <USART_SetConfig+0x172>
 8005a96:	2302      	movs	r3, #2
 8005a98:	77fb      	strb	r3, [r7, #31]
 8005a9a:	e00a      	b.n	8005ab2 <USART_SetConfig+0x172>
 8005a9c:	2304      	movs	r3, #4
 8005a9e:	77fb      	strb	r3, [r7, #31]
 8005aa0:	e007      	b.n	8005ab2 <USART_SetConfig+0x172>
 8005aa2:	2308      	movs	r3, #8
 8005aa4:	77fb      	strb	r3, [r7, #31]
 8005aa6:	e004      	b.n	8005ab2 <USART_SetConfig+0x172>
 8005aa8:	2310      	movs	r3, #16
 8005aaa:	77fb      	strb	r3, [r7, #31]
 8005aac:	e001      	b.n	8005ab2 <USART_SetConfig+0x172>
 8005aae:	2310      	movs	r3, #16
 8005ab0:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8005ab2:	7ffb      	ldrb	r3, [r7, #31]
 8005ab4:	2b08      	cmp	r3, #8
 8005ab6:	d85a      	bhi.n	8005b6e <USART_SetConfig+0x22e>
 8005ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac0 <USART_SetConfig+0x180>)
 8005aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005abe:	bf00      	nop
 8005ac0:	08005ae5 	.word	0x08005ae5
 8005ac4:	08005b03 	.word	0x08005b03
 8005ac8:	08005b21 	.word	0x08005b21
 8005acc:	08005b6f 	.word	0x08005b6f
 8005ad0:	08005b3b 	.word	0x08005b3b
 8005ad4:	08005b6f 	.word	0x08005b6f
 8005ad8:	08005b6f 	.word	0x08005b6f
 8005adc:	08005b6f 	.word	0x08005b6f
 8005ae0:	08005b59 	.word	0x08005b59
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ae4:	f7fe f84a 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 8005ae8:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	005a      	lsls	r2, r3, #1
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	085b      	lsrs	r3, r3, #1
 8005af4:	441a      	add	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005afe:	61bb      	str	r3, [r7, #24]
      break;
 8005b00:	e038      	b.n	8005b74 <USART_SetConfig+0x234>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b02:	f7fe f85d 	bl	8003bc0 <HAL_RCC_GetPCLK2Freq>
 8005b06:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	005a      	lsls	r2, r3, #1
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	085b      	lsrs	r3, r3, #1
 8005b12:	441a      	add	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1c:	61bb      	str	r3, [r7, #24]
      break;
 8005b1e:	e029      	b.n	8005b74 <USART_SetConfig+0x234>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	085b      	lsrs	r3, r3, #1
 8005b26:	f503 0374 	add.w	r3, r3, #15990784	@ 0xf40000
 8005b2a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	6852      	ldr	r2, [r2, #4]
 8005b32:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b36:	61bb      	str	r3, [r7, #24]
      break;
 8005b38:	e01c      	b.n	8005b74 <USART_SetConfig+0x234>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8005b3a:	f7fd ffa9 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 8005b3e:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	005a      	lsls	r2, r3, #1
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	085b      	lsrs	r3, r3, #1
 8005b4a:	441a      	add	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b54:	61bb      	str	r3, [r7, #24]
      break;
 8005b56:	e00d      	b.n	8005b74 <USART_SetConfig+0x234>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	085b      	lsrs	r3, r3, #1
 8005b5e:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6a:	61bb      	str	r3, [r7, #24]
      break;
 8005b6c:	e002      	b.n	8005b74 <USART_SetConfig+0x234>
    default:
      ret = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	77bb      	strb	r3, [r7, #30]
      break;
 8005b72:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	2b0f      	cmp	r3, #15
 8005b78:	d916      	bls.n	8005ba8 <USART_SetConfig+0x268>
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b80:	d212      	bcs.n	8005ba8 <USART_SetConfig+0x268>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	f023 030f 	bic.w	r3, r3, #15
 8005b8a:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	085b      	lsrs	r3, r3, #1
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	89fb      	ldrh	r3, [r7, #14]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	89fa      	ldrh	r2, [r7, #14]
 8005ba4:	60da      	str	r2, [r3, #12]
 8005ba6:	e001      	b.n	8005bac <USART_SetConfig+0x26c>
  }
  else
  {
    ret = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	77bb      	strb	r3, [r7, #30]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	639a      	str	r2, [r3, #56]	@ 0x38
  husart->TxISR   = NULL;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	63da      	str	r2, [r3, #60]	@ 0x3c

  return ret;
 8005bb8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3720      	adds	r7, #32
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	40013800 	.word	0x40013800
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	40004400 	.word	0x40004400
 8005bd0:	40004800 	.word	0x40004800

08005bd4 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af02      	add	r7, sp, #8
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005be2:	f7fb ffd9 	bl	8001b98 <HAL_GetTick>
 8005be6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0308 	and.w	r3, r3, #8
 8005bf2:	2b08      	cmp	r3, #8
 8005bf4:	d10e      	bne.n	8005c14 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8005bf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff fe65 	bl	80058d4 <USART_WaitOnFlagUntilTimeout>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e01e      	b.n	8005c52 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0304 	and.w	r3, r3, #4
 8005c1e:	2b04      	cmp	r3, #4
 8005c20:	d10e      	bne.n	8005c40 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8005c22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7ff fe4f 	bl	80058d4 <USART_WaitOnFlagUntilTimeout>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e008      	b.n	8005c52 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b082      	sub	sp, #8
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c70:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0201 	bic.w	r2, r2, #1
 8005c80:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	63da      	str	r2, [r3, #60]	@ 0x3c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b12      	cmp	r3, #18
 8005c92:	d113      	bne.n	8005cbc <USART_EndTransmit_IT+0x62>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2208      	movs	r2, #8
 8005c9a:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699a      	ldr	r2, [r3, #24]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0208 	orr.w	r2, r2, #8
 8005caa:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff fdbd 	bl	8005834 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005cba:	e00b      	b.n	8005cd4 <USART_EndTransmit_IT+0x7a>
  else if (husart->RxXferCount == 0U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d106      	bne.n	8005cd4 <USART_EndTransmit_IT+0x7a>
    husart->State = HAL_USART_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    HAL_USART_TxRxCpltCallback(husart);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7ff fdba 	bl	8005848 <HAL_USART_TxRxCpltCallback>
}
 8005cd4:	bf00      	nop
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005ce4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005ce8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	43db      	mvns	r3, r3
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005d12:	b084      	sub	sp, #16
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	f107 0014 	add.w	r0, r7, #20
 8005d20:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	b004      	add	sp, #16
 8005d52:	4770      	bx	lr

08005d54 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8005d62:	2300      	movs	r3, #0
 8005d64:	703b      	strb	r3, [r7, #0]
 8005d66:	2300      	movs	r3, #0
 8005d68:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8005d6a:	4b51      	ldr	r3, [pc, #324]	@ (8005eb0 <BSP_GYRO_Init+0x15c>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	4798      	blx	r3
 8005d70:	4603      	mov	r3, r0
 8005d72:	2bd4      	cmp	r3, #212	@ 0xd4
 8005d74:	d005      	beq.n	8005d82 <BSP_GYRO_Init+0x2e>
 8005d76:	4b4e      	ldr	r3, [pc, #312]	@ (8005eb0 <BSP_GYRO_Init+0x15c>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	4798      	blx	r3
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2bd5      	cmp	r3, #213	@ 0xd5
 8005d80:	d145      	bne.n	8005e0e <BSP_GYRO_Init+0xba>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8005d82:	4b4c      	ldr	r3, [pc, #304]	@ (8005eb4 <BSP_GYRO_Init+0x160>)
 8005d84:	4a4a      	ldr	r2, [pc, #296]	@ (8005eb0 <BSP_GYRO_Init+0x15c>)
 8005d86:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8005d88:	2308      	movs	r3, #8
 8005d8a:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8005d90:	2307      	movs	r3, #7
 8005d92:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8005d94:	2330      	movs	r3, #48	@ 0x30
 8005d96:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8005da0:	2310      	movs	r3, #16
 8005da2:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8005da4:	793a      	ldrb	r2, [r7, #4]
 8005da6:	797b      	ldrb	r3, [r7, #5]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8005dac:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8005dae:	4313      	orrs	r3, r2
 8005db0:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8005db2:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8005db4:	4313      	orrs	r3, r2
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8005dba:	7a3a      	ldrb	r2, [r7, #8]
 8005dbc:	7a7b      	ldrb	r3, [r7, #9]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8005dc2:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	021b      	lsls	r3, r3, #8
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	89bb      	ldrh	r3, [r7, #12]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8005dd2:	4b38      	ldr	r3, [pc, #224]	@ (8005eb4 <BSP_GYRO_Init+0x160>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	89ba      	ldrh	r2, [r7, #12]
 8005dda:	4610      	mov	r0, r2
 8005ddc:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8005dde:	2300      	movs	r3, #0
 8005de0:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8005de2:	2300      	movs	r3, #0
 8005de4:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8005de6:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8005de8:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8005dea:	4313      	orrs	r3, r2
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8005df0:	4b30      	ldr	r3, [pc, #192]	@ (8005eb4 <BSP_GYRO_Init+0x160>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df6:	89ba      	ldrh	r2, [r7, #12]
 8005df8:	b2d2      	uxtb	r2, r2
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8005dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8005eb4 <BSP_GYRO_Init+0x160>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e04:	2010      	movs	r0, #16
 8005e06:	4798      	blx	r3

    ret = GYRO_OK;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	73fb      	strb	r3, [r7, #15]
 8005e0c:	e04a      	b.n	8005ea4 <BSP_GYRO_Init+0x150>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 8005e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8005eb8 <BSP_GYRO_Init+0x164>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	4798      	blx	r3
 8005e14:	4603      	mov	r3, r0
 8005e16:	2bd3      	cmp	r3, #211	@ 0xd3
 8005e18:	d144      	bne.n	8005ea4 <BSP_GYRO_Init+0x150>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 8005e1a:	4b26      	ldr	r3, [pc, #152]	@ (8005eb4 <BSP_GYRO_Init+0x160>)
 8005e1c:	4a26      	ldr	r2, [pc, #152]	@ (8005eb8 <BSP_GYRO_Init+0x164>)
 8005e1e:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 8005e20:	2308      	movs	r3, #8
 8005e22:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 8005e24:	2300      	movs	r3, #0
 8005e26:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 8005e28:	2307      	movs	r3, #7
 8005e2a:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 8005e2c:	2330      	movs	r3, #48	@ 0x30
 8005e2e:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 8005e30:	2300      	movs	r3, #0
 8005e32:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 8005e34:	2300      	movs	r3, #0
 8005e36:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 8005e38:	2310      	movs	r3, #16
 8005e3a:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8005e3c:	793a      	ldrb	r2, [r7, #4]
 8005e3e:	797b      	ldrb	r3, [r7, #5]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8005e44:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8005e46:	4313      	orrs	r3, r2
 8005e48:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8005e4a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8005e52:	7a3a      	ldrb	r2, [r7, #8]
 8005e54:	7a7b      	ldrb	r3, [r7, #9]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8005e5a:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	021b      	lsls	r3, r3, #8
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	89bb      	ldrh	r3, [r7, #12]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8005e6a:	4b12      	ldr	r3, [pc, #72]	@ (8005eb4 <BSP_GYRO_Init+0x160>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	89ba      	ldrh	r2, [r7, #12]
 8005e72:	4610      	mov	r0, r2
 8005e74:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 8005e76:	2300      	movs	r3, #0
 8005e78:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8005e7e:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8005e80:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8005e82:	4313      	orrs	r3, r2
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 8005e88:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb4 <BSP_GYRO_Init+0x160>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8e:	89ba      	ldrh	r2, [r7, #12]
 8005e90:	b2d2      	uxtb	r2, r2
 8005e92:	4610      	mov	r0, r2
 8005e94:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 8005e96:	4b07      	ldr	r3, [pc, #28]	@ (8005eb4 <BSP_GYRO_Init+0x160>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9c:	2010      	movs	r0, #16
 8005e9e:	4798      	blx	r3

    ret = GYRO_OK;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	200001d0 	.word	0x200001d0
 8005eb4:	20000880 	.word	0x20000880
 8005eb8:	2000019c 	.word	0x2000019c

08005ebc <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 8005eca:	f000 fc77 	bl	80067bc <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8005ece:	88fb      	ldrh	r3, [r7, #6]
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8005ed4:	f107 030f 	add.w	r3, r7, #15
 8005ed8:	2201      	movs	r2, #1
 8005eda:	2120      	movs	r1, #32
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 fcb3 	bl	8006848 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 8005ee2:	88fb      	ldrh	r3, [r7, #6]
 8005ee4:	0a1b      	lsrs	r3, r3, #8
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 8005eec:	f107 030f 	add.w	r3, r7, #15
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	2123      	movs	r1, #35	@ 0x23
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f000 fca7 	bl	8006848 <GYRO_IO_Write>
}
 8005efa:	bf00      	nop
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 8005f02:	b480      	push	{r7}
 8005f04:	af00      	add	r7, sp, #0
}
 8005f06:	bf00      	nop
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 8005f16:	f000 fc51 	bl	80067bc <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 8005f1a:	1dfb      	adds	r3, r7, #7
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	210f      	movs	r1, #15
 8005f20:	4618      	mov	r0, r3
 8005f22:	f000 fcc3 	bl	80068ac <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 8005f26:	79fb      	ldrb	r3, [r7, #7]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8005f36:	1dfb      	adds	r3, r7, #7
 8005f38:	2201      	movs	r2, #1
 8005f3a:	2124      	movs	r1, #36	@ 0x24
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 fcb5 	bl	80068ac <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 8005f42:	79fb      	ldrb	r3, [r7, #7]
 8005f44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8005f4c:	1dfb      	adds	r3, r7, #7
 8005f4e:	2201      	movs	r2, #1
 8005f50:	2124      	movs	r1, #36	@ 0x24
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 fc78 	bl	8006848 <GYRO_IO_Write>
}
 8005f58:	bf00      	nop
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	4603      	mov	r3, r0
 8005f68:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8005f6e:	88fb      	ldrh	r3, [r7, #6]
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8005f74:	f107 030f 	add.w	r3, r7, #15
 8005f78:	2201      	movs	r2, #1
 8005f7a:	2120      	movs	r1, #32
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 fc63 	bl	8006848 <GYRO_IO_Write>
}
 8005f82:	bf00      	nop
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	4603      	mov	r3, r0
 8005f92:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8005f94:	2300      	movs	r3, #0
 8005f96:	73fb      	strb	r3, [r7, #15]
 8005f98:	2300      	movs	r3, #0
 8005f9a:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8005f9c:	f107 030f 	add.w	r3, r7, #15
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	2130      	movs	r1, #48	@ 0x30
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 fc81 	bl	80068ac <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8005faa:	f107 030e 	add.w	r3, r7, #14
 8005fae:	2201      	movs	r2, #1
 8005fb0:	2122      	movs	r1, #34	@ 0x22
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 fc7a 	bl	80068ac <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8005fc2:	88fb      	ldrh	r3, [r7, #6]
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	121b      	asrs	r3, r3, #8
 8005fc8:	b25a      	sxtb	r2, r3
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
 8005fcc:	b25b      	sxtb	r3, r3
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	b25b      	sxtb	r3, r3
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 8005fd6:	7bbb      	ldrb	r3, [r7, #14]
 8005fd8:	f023 0320 	bic.w	r3, r3, #32
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 8005fe0:	88fb      	ldrh	r3, [r7, #6]
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	7bbb      	ldrb	r3, [r7, #14]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8005fec:	f107 030f 	add.w	r3, r7, #15
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	2130      	movs	r1, #48	@ 0x30
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 fc27 	bl	8006848 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8005ffa:	f107 030e 	add.w	r3, r7, #14
 8005ffe:	2201      	movs	r2, #1
 8006000:	2122      	movs	r1, #34	@ 0x22
 8006002:	4618      	mov	r0, r3
 8006004:	f000 fc20 	bl	8006848 <GYRO_IO_Write>
}
 8006008:	bf00      	nop
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	4603      	mov	r3, r0
 8006018:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800601a:	f107 030f 	add.w	r3, r7, #15
 800601e:	2201      	movs	r2, #1
 8006020:	2122      	movs	r1, #34	@ 0x22
 8006022:	4618      	mov	r0, r3
 8006024:	f000 fc42 	bl	80068ac <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8006028:	79fb      	ldrb	r3, [r7, #7]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10a      	bne.n	8006044 <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 800602e:	7bfb      	ldrb	r3, [r7, #15]
 8006030:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006034:	b2db      	uxtb	r3, r3
 8006036:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 8006038:	7bfb      	ldrb	r3, [r7, #15]
 800603a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800603e:	b2db      	uxtb	r3, r3
 8006040:	73fb      	strb	r3, [r7, #15]
 8006042:	e00c      	b.n	800605e <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 8006044:	79fb      	ldrb	r3, [r7, #7]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d109      	bne.n	800605e <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800604a:	7bfb      	ldrb	r3, [r7, #15]
 800604c:	f023 0308 	bic.w	r3, r3, #8
 8006050:	b2db      	uxtb	r3, r3
 8006052:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	f043 0308 	orr.w	r3, r3, #8
 800605a:	b2db      	uxtb	r3, r3
 800605c:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800605e:	f107 030f 	add.w	r3, r7, #15
 8006062:	2201      	movs	r2, #1
 8006064:	2122      	movs	r1, #34	@ 0x22
 8006066:	4618      	mov	r0, r3
 8006068:	f000 fbee 	bl	8006848 <GYRO_IO_Write>
}
 800606c:	bf00      	nop
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	4603      	mov	r3, r0
 800607c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800607e:	f107 030f 	add.w	r3, r7, #15
 8006082:	2201      	movs	r2, #1
 8006084:	2122      	movs	r1, #34	@ 0x22
 8006086:	4618      	mov	r0, r3
 8006088:	f000 fc10 	bl	80068ac <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 800608c:	79fb      	ldrb	r3, [r7, #7]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d107      	bne.n	80060a2 <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8006092:	7bfb      	ldrb	r3, [r7, #15]
 8006094:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006098:	b2db      	uxtb	r3, r3
 800609a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	73fb      	strb	r3, [r7, #15]
 80060a0:	e009      	b.n	80060b6 <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 80060a2:	79fb      	ldrb	r3, [r7, #7]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d106      	bne.n	80060b6 <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
 80060aa:	f023 0308 	bic.w	r3, r3, #8
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
 80060b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80060b6:	f107 030f 	add.w	r3, r7, #15
 80060ba:	2201      	movs	r2, #1
 80060bc:	2122      	movs	r1, #34	@ 0x22
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fbc2 	bl	8006848 <GYRO_IO_Write>
}
 80060c4:	bf00      	nop
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	4603      	mov	r3, r0
 80060d4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80060d6:	f107 030f 	add.w	r3, r7, #15
 80060da:	2201      	movs	r2, #1
 80060dc:	2121      	movs	r1, #33	@ 0x21
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 fbe4 	bl	80068ac <GYRO_IO_Read>

  tmpreg &= 0xC0;
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
 80060e6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80060ee:	7bfa      	ldrb	r2, [r7, #15]
 80060f0:	79fb      	ldrb	r3, [r7, #7]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80060f8:	f107 030f 	add.w	r3, r7, #15
 80060fc:	2201      	movs	r2, #1
 80060fe:	2121      	movs	r1, #33	@ 0x21
 8006100:	4618      	mov	r0, r3
 8006102:	f000 fba1 	bl	8006848 <GYRO_IO_Write>
}
 8006106:	bf00      	nop
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b084      	sub	sp, #16
 8006112:	af00      	add	r7, sp, #0
 8006114:	4603      	mov	r3, r0
 8006116:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8006118:	f107 030f 	add.w	r3, r7, #15
 800611c:	2201      	movs	r2, #1
 800611e:	2124      	movs	r1, #36	@ 0x24
 8006120:	4618      	mov	r0, r3
 8006122:	f000 fbc3 	bl	80068ac <GYRO_IO_Read>

  tmpreg &= 0xEF;
 8006126:	7bfb      	ldrb	r3, [r7, #15]
 8006128:	f023 0310 	bic.w	r3, r3, #16
 800612c:	b2db      	uxtb	r3, r3
 800612e:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8006130:	7bfa      	ldrb	r2, [r7, #15]
 8006132:	79fb      	ldrb	r3, [r7, #7]
 8006134:	4313      	orrs	r3, r2
 8006136:	b2db      	uxtb	r3, r3
 8006138:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800613a:	f107 030f 	add.w	r3, r7, #15
 800613e:	2201      	movs	r2, #1
 8006140:	2124      	movs	r1, #36	@ 0x24
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fb80 	bl	8006848 <GYRO_IO_Write>
}
 8006148:	bf00      	nop
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08a      	sub	sp, #40	@ 0x28
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 8006158:	2300      	movs	r3, #0
 800615a:	61bb      	str	r3, [r7, #24]
 800615c:	2300      	movs	r3, #0
 800615e:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8006160:	f107 0310 	add.w	r3, r7, #16
 8006164:	2200      	movs	r2, #0
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800616a:	2300      	movs	r3, #0
 800616c:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 800616e:	f04f 0300 	mov.w	r3, #0
 8006172:	627b      	str	r3, [r7, #36]	@ 0x24
  int i = 0;
 8006174:	2300      	movs	r3, #0
 8006176:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 8006178:	f107 030f 	add.w	r3, r7, #15
 800617c:	2201      	movs	r2, #1
 800617e:	2123      	movs	r1, #35	@ 0x23
 8006180:	4618      	mov	r0, r3
 8006182:	f000 fb93 	bl	80068ac <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 8006186:	f107 0318 	add.w	r3, r7, #24
 800618a:	2206      	movs	r2, #6
 800618c:	2128      	movs	r1, #40	@ 0x28
 800618e:	4618      	mov	r0, r3
 8006190:	f000 fb8c 	bl	80068ac <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800619a:	2b00      	cmp	r3, #0
 800619c:	d121      	bne.n	80061e2 <I3G4250D_ReadXYZAngRate+0x92>
  {
    for (i = 0; i < 3; i++)
 800619e:	2300      	movs	r3, #0
 80061a0:	623b      	str	r3, [r7, #32]
 80061a2:	e01a      	b.n	80061da <I3G4250D_ReadXYZAngRate+0x8a>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	3301      	adds	r3, #1
 80061aa:	3328      	adds	r3, #40	@ 0x28
 80061ac:	443b      	add	r3, r7
 80061ae:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80061b2:	021b      	lsls	r3, r3, #8
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	6a3a      	ldr	r2, [r7, #32]
 80061b8:	0052      	lsls	r2, r2, #1
 80061ba:	3228      	adds	r2, #40	@ 0x28
 80061bc:	443a      	add	r2, r7
 80061be:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80061c2:	4413      	add	r3, r2
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	b21a      	sxth	r2, r3
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	005b      	lsls	r3, r3, #1
 80061cc:	3328      	adds	r3, #40	@ 0x28
 80061ce:	443b      	add	r3, r7
 80061d0:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	3301      	adds	r3, #1
 80061d8:	623b      	str	r3, [r7, #32]
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	2b02      	cmp	r3, #2
 80061de:	dde1      	ble.n	80061a4 <I3G4250D_ReadXYZAngRate+0x54>
 80061e0:	e020      	b.n	8006224 <I3G4250D_ReadXYZAngRate+0xd4>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 80061e2:	2300      	movs	r3, #0
 80061e4:	623b      	str	r3, [r7, #32]
 80061e6:	e01a      	b.n	800621e <I3G4250D_ReadXYZAngRate+0xce>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	3328      	adds	r3, #40	@ 0x28
 80061ee:	443b      	add	r3, r7
 80061f0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80061f4:	021b      	lsls	r3, r3, #8
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	6a3a      	ldr	r2, [r7, #32]
 80061fa:	0052      	lsls	r2, r2, #1
 80061fc:	3201      	adds	r2, #1
 80061fe:	3228      	adds	r2, #40	@ 0x28
 8006200:	443a      	add	r2, r7
 8006202:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8006206:	4413      	add	r3, r2
 8006208:	b29b      	uxth	r3, r3
 800620a:	b21a      	sxth	r2, r3
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	3328      	adds	r3, #40	@ 0x28
 8006212:	443b      	add	r3, r7
 8006214:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	3301      	adds	r3, #1
 800621c:	623b      	str	r3, [r7, #32]
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	2b02      	cmp	r3, #2
 8006222:	dde1      	ble.n	80061e8 <I3G4250D_ReadXYZAngRate+0x98>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 8006224:	7bfb      	ldrb	r3, [r7, #15]
 8006226:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800622a:	2b20      	cmp	r3, #32
 800622c:	d00c      	beq.n	8006248 <I3G4250D_ReadXYZAngRate+0xf8>
 800622e:	2b20      	cmp	r3, #32
 8006230:	dc0d      	bgt.n	800624e <I3G4250D_ReadXYZAngRate+0xfe>
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <I3G4250D_ReadXYZAngRate+0xec>
 8006236:	2b10      	cmp	r3, #16
 8006238:	d003      	beq.n	8006242 <I3G4250D_ReadXYZAngRate+0xf2>
 800623a:	e008      	b.n	800624e <I3G4250D_ReadXYZAngRate+0xfe>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 800623c:	4b15      	ldr	r3, [pc, #84]	@ (8006294 <I3G4250D_ReadXYZAngRate+0x144>)
 800623e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8006240:	e005      	b.n	800624e <I3G4250D_ReadXYZAngRate+0xfe>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 8006242:	4b15      	ldr	r3, [pc, #84]	@ (8006298 <I3G4250D_ReadXYZAngRate+0x148>)
 8006244:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8006246:	e002      	b.n	800624e <I3G4250D_ReadXYZAngRate+0xfe>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 8006248:	4b14      	ldr	r3, [pc, #80]	@ (800629c <I3G4250D_ReadXYZAngRate+0x14c>)
 800624a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800624c:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 800624e:	2300      	movs	r3, #0
 8006250:	623b      	str	r3, [r7, #32]
 8006252:	e016      	b.n	8006282 <I3G4250D_ReadXYZAngRate+0x132>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	3328      	adds	r3, #40	@ 0x28
 800625a:	443b      	add	r3, r7
 800625c:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8006260:	ee07 3a90 	vmov	s15, r3
 8006264:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	4413      	add	r3, r2
 8006270:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006278:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	3301      	adds	r3, #1
 8006280:	623b      	str	r3, [r7, #32]
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	2b02      	cmp	r3, #2
 8006286:	dde5      	ble.n	8006254 <I3G4250D_ReadXYZAngRate+0x104>
  }
}
 8006288:	bf00      	nop
 800628a:	bf00      	nop
 800628c:	3728      	adds	r7, #40	@ 0x28
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	410c0000 	.word	0x410c0000
 8006298:	418c0000 	.word	0x418c0000
 800629c:	428c0000 	.word	0x428c0000

080062a0 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80062aa:	2300      	movs	r3, #0
 80062ac:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80062ae:	f000 fa85 	bl	80067bc <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80062b2:	88fb      	ldrh	r3, [r7, #6]
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80062b8:	f107 030f 	add.w	r3, r7, #15
 80062bc:	2201      	movs	r2, #1
 80062be:	2120      	movs	r1, #32
 80062c0:	4618      	mov	r0, r3
 80062c2:	f000 fac1 	bl	8006848 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80062c6:	88fb      	ldrh	r3, [r7, #6]
 80062c8:	0a1b      	lsrs	r3, r3, #8
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80062d0:	f107 030f 	add.w	r3, r7, #15
 80062d4:	2201      	movs	r2, #1
 80062d6:	2123      	movs	r1, #35	@ 0x23
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 fab5 	bl	8006848 <GYRO_IO_Write>
}
 80062de:	bf00      	nop
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 80062e6:	b480      	push	{r7}
 80062e8:	af00      	add	r7, sp, #0
}
 80062ea:	bf00      	nop
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80062fa:	f000 fa5f 	bl	80067bc <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 80062fe:	1dfb      	adds	r3, r7, #7
 8006300:	2201      	movs	r2, #1
 8006302:	210f      	movs	r1, #15
 8006304:	4618      	mov	r0, r3
 8006306:	f000 fad1 	bl	80068ac <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 800630a:	79fb      	ldrb	r3, [r7, #7]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800631a:	1dfb      	adds	r3, r7, #7
 800631c:	2201      	movs	r2, #1
 800631e:	2124      	movs	r1, #36	@ 0x24
 8006320:	4618      	mov	r0, r3
 8006322:	f000 fac3 	bl	80068ac <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8006326:	79fb      	ldrb	r3, [r7, #7]
 8006328:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800632c:	b2db      	uxtb	r3, r3
 800632e:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8006330:	1dfb      	adds	r3, r7, #7
 8006332:	2201      	movs	r2, #1
 8006334:	2124      	movs	r1, #36	@ 0x24
 8006336:	4618      	mov	r0, r3
 8006338:	f000 fa86 	bl	8006848 <GYRO_IO_Write>
}
 800633c:	bf00      	nop
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	4603      	mov	r3, r0
 800634c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800634e:	2300      	movs	r3, #0
 8006350:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8006352:	88fb      	ldrh	r3, [r7, #6]
 8006354:	b2db      	uxtb	r3, r3
 8006356:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8006358:	f107 030f 	add.w	r3, r7, #15
 800635c:	2201      	movs	r2, #1
 800635e:	2120      	movs	r1, #32
 8006360:	4618      	mov	r0, r3
 8006362:	f000 fa71 	bl	8006848 <GYRO_IO_Write>
}
 8006366:	bf00      	nop
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b084      	sub	sp, #16
 8006372:	af00      	add	r7, sp, #0
 8006374:	4603      	mov	r3, r0
 8006376:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8006378:	2300      	movs	r3, #0
 800637a:	73fb      	strb	r3, [r7, #15]
 800637c:	2300      	movs	r3, #0
 800637e:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8006380:	f107 030f 	add.w	r3, r7, #15
 8006384:	2201      	movs	r2, #1
 8006386:	2130      	movs	r1, #48	@ 0x30
 8006388:	4618      	mov	r0, r3
 800638a:	f000 fa8f 	bl	80068ac <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800638e:	f107 030e 	add.w	r3, r7, #14
 8006392:	2201      	movs	r2, #1
 8006394:	2122      	movs	r1, #34	@ 0x22
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fa88 	bl	80068ac <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 800639c:	7bfb      	ldrb	r3, [r7, #15]
 800639e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80063a6:	88fb      	ldrh	r3, [r7, #6]
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	121b      	asrs	r3, r3, #8
 80063ac:	b25a      	sxtb	r2, r3
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
 80063b0:	b25b      	sxtb	r3, r3
 80063b2:	4313      	orrs	r3, r2
 80063b4:	b25b      	sxtb	r3, r3
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80063ba:	7bbb      	ldrb	r3, [r7, #14]
 80063bc:	f023 0320 	bic.w	r3, r3, #32
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80063c4:	88fb      	ldrh	r3, [r7, #6]
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	7bbb      	ldrb	r3, [r7, #14]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80063d0:	f107 030f 	add.w	r3, r7, #15
 80063d4:	2201      	movs	r2, #1
 80063d6:	2130      	movs	r1, #48	@ 0x30
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 fa35 	bl	8006848 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80063de:	f107 030e 	add.w	r3, r7, #14
 80063e2:	2201      	movs	r2, #1
 80063e4:	2122      	movs	r1, #34	@ 0x22
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 fa2e 	bl	8006848 <GYRO_IO_Write>
}
 80063ec:	bf00      	nop
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	4603      	mov	r3, r0
 80063fc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80063fe:	f107 030f 	add.w	r3, r7, #15
 8006402:	2201      	movs	r2, #1
 8006404:	2122      	movs	r1, #34	@ 0x22
 8006406:	4618      	mov	r0, r3
 8006408:	f000 fa50 	bl	80068ac <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800640c:	79fb      	ldrb	r3, [r7, #7]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10a      	bne.n	8006428 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8006412:	7bfb      	ldrb	r3, [r7, #15]
 8006414:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006418:	b2db      	uxtb	r3, r3
 800641a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800641c:	7bfb      	ldrb	r3, [r7, #15]
 800641e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006422:	b2db      	uxtb	r3, r3
 8006424:	73fb      	strb	r3, [r7, #15]
 8006426:	e00c      	b.n	8006442 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8006428:	79fb      	ldrb	r3, [r7, #7]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d109      	bne.n	8006442 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800642e:	7bfb      	ldrb	r3, [r7, #15]
 8006430:	f023 0308 	bic.w	r3, r3, #8
 8006434:	b2db      	uxtb	r3, r3
 8006436:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8006438:	7bfb      	ldrb	r3, [r7, #15]
 800643a:	f043 0308 	orr.w	r3, r3, #8
 800643e:	b2db      	uxtb	r3, r3
 8006440:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8006442:	f107 030f 	add.w	r3, r7, #15
 8006446:	2201      	movs	r2, #1
 8006448:	2122      	movs	r1, #34	@ 0x22
 800644a:	4618      	mov	r0, r3
 800644c:	f000 f9fc 	bl	8006848 <GYRO_IO_Write>
}
 8006450:	bf00      	nop
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	4603      	mov	r3, r0
 8006460:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8006462:	f107 030f 	add.w	r3, r7, #15
 8006466:	2201      	movs	r2, #1
 8006468:	2122      	movs	r1, #34	@ 0x22
 800646a:	4618      	mov	r0, r3
 800646c:	f000 fa1e 	bl	80068ac <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8006470:	79fb      	ldrb	r3, [r7, #7]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d107      	bne.n	8006486 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8006476:	7bfb      	ldrb	r3, [r7, #15]
 8006478:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800647c:	b2db      	uxtb	r3, r3
 800647e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8006480:	7bfb      	ldrb	r3, [r7, #15]
 8006482:	73fb      	strb	r3, [r7, #15]
 8006484:	e009      	b.n	800649a <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8006486:	79fb      	ldrb	r3, [r7, #7]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d106      	bne.n	800649a <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	f023 0308 	bic.w	r3, r3, #8
 8006492:	b2db      	uxtb	r3, r3
 8006494:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8006496:	7bfb      	ldrb	r3, [r7, #15]
 8006498:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800649a:	f107 030f 	add.w	r3, r7, #15
 800649e:	2201      	movs	r2, #1
 80064a0:	2122      	movs	r1, #34	@ 0x22
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 f9d0 	bl	8006848 <GYRO_IO_Write>
}
 80064a8:	bf00      	nop
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	4603      	mov	r3, r0
 80064b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80064ba:	f107 030f 	add.w	r3, r7, #15
 80064be:	2201      	movs	r2, #1
 80064c0:	2121      	movs	r1, #33	@ 0x21
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 f9f2 	bl	80068ac <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
 80064ca:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80064d2:	7bfa      	ldrb	r2, [r7, #15]
 80064d4:	79fb      	ldrb	r3, [r7, #7]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80064dc:	f107 030f 	add.w	r3, r7, #15
 80064e0:	2201      	movs	r2, #1
 80064e2:	2121      	movs	r1, #33	@ 0x21
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 f9af 	bl	8006848 <GYRO_IO_Write>
}
 80064ea:	bf00      	nop
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	4603      	mov	r3, r0
 80064fa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80064fc:	f107 030f 	add.w	r3, r7, #15
 8006500:	2201      	movs	r2, #1
 8006502:	2124      	movs	r1, #36	@ 0x24
 8006504:	4618      	mov	r0, r3
 8006506:	f000 f9d1 	bl	80068ac <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 800650a:	7bfb      	ldrb	r3, [r7, #15]
 800650c:	f023 0310 	bic.w	r3, r3, #16
 8006510:	b2db      	uxtb	r3, r3
 8006512:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8006514:	7bfa      	ldrb	r2, [r7, #15]
 8006516:	79fb      	ldrb	r3, [r7, #7]
 8006518:	4313      	orrs	r3, r2
 800651a:	b2db      	uxtb	r3, r3
 800651c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800651e:	f107 030f 	add.w	r3, r7, #15
 8006522:	2201      	movs	r2, #1
 8006524:	2124      	movs	r1, #36	@ 0x24
 8006526:	4618      	mov	r0, r3
 8006528:	f000 f98e 	bl	8006848 <GYRO_IO_Write>
}
 800652c:	bf00      	nop
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b08a      	sub	sp, #40	@ 0x28
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 800653c:	2300      	movs	r3, #0
 800653e:	61bb      	str	r3, [r7, #24]
 8006540:	2300      	movs	r3, #0
 8006542:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8006544:	f107 0310 	add.w	r3, r7, #16
 8006548:	2200      	movs	r2, #0
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800654e:	2300      	movs	r3, #0
 8006550:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8006552:	f04f 0300 	mov.w	r3, #0
 8006556:	627b      	str	r3, [r7, #36]	@ 0x24
  int i =0;
 8006558:	2300      	movs	r3, #0
 800655a:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800655c:	f107 030f 	add.w	r3, r7, #15
 8006560:	2201      	movs	r2, #1
 8006562:	2123      	movs	r1, #35	@ 0x23
 8006564:	4618      	mov	r0, r3
 8006566:	f000 f9a1 	bl	80068ac <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800656a:	f107 0318 	add.w	r3, r7, #24
 800656e:	2206      	movs	r2, #6
 8006570:	2128      	movs	r1, #40	@ 0x28
 8006572:	4618      	mov	r0, r3
 8006574:	f000 f99a 	bl	80068ac <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800657e:	2b00      	cmp	r3, #0
 8006580:	d121      	bne.n	80065c6 <L3GD20_ReadXYZAngRate+0x92>
  {
    for(i=0; i<3; i++)
 8006582:	2300      	movs	r3, #0
 8006584:	623b      	str	r3, [r7, #32]
 8006586:	e01a      	b.n	80065be <L3GD20_ReadXYZAngRate+0x8a>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	3301      	adds	r3, #1
 800658e:	3328      	adds	r3, #40	@ 0x28
 8006590:	443b      	add	r3, r7
 8006592:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8006596:	021b      	lsls	r3, r3, #8
 8006598:	b29b      	uxth	r3, r3
 800659a:	6a3a      	ldr	r2, [r7, #32]
 800659c:	0052      	lsls	r2, r2, #1
 800659e:	3228      	adds	r2, #40	@ 0x28
 80065a0:	443a      	add	r2, r7
 80065a2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80065a6:	4413      	add	r3, r2
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	b21a      	sxth	r2, r3
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	3328      	adds	r3, #40	@ 0x28
 80065b2:	443b      	add	r3, r7
 80065b4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	3301      	adds	r3, #1
 80065bc:	623b      	str	r3, [r7, #32]
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	dde1      	ble.n	8006588 <L3GD20_ReadXYZAngRate+0x54>
 80065c4:	e020      	b.n	8006608 <L3GD20_ReadXYZAngRate+0xd4>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80065c6:	2300      	movs	r3, #0
 80065c8:	623b      	str	r3, [r7, #32]
 80065ca:	e01a      	b.n	8006602 <L3GD20_ReadXYZAngRate+0xce>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	3328      	adds	r3, #40	@ 0x28
 80065d2:	443b      	add	r3, r7
 80065d4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80065d8:	021b      	lsls	r3, r3, #8
 80065da:	b29b      	uxth	r3, r3
 80065dc:	6a3a      	ldr	r2, [r7, #32]
 80065de:	0052      	lsls	r2, r2, #1
 80065e0:	3201      	adds	r2, #1
 80065e2:	3228      	adds	r2, #40	@ 0x28
 80065e4:	443a      	add	r2, r7
 80065e6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80065ea:	4413      	add	r3, r2
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	b21a      	sxth	r2, r3
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	3328      	adds	r3, #40	@ 0x28
 80065f6:	443b      	add	r3, r7
 80065f8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80065fc:	6a3b      	ldr	r3, [r7, #32]
 80065fe:	3301      	adds	r3, #1
 8006600:	623b      	str	r3, [r7, #32]
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	2b02      	cmp	r3, #2
 8006606:	dde1      	ble.n	80065cc <L3GD20_ReadXYZAngRate+0x98>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8006608:	7bfb      	ldrb	r3, [r7, #15]
 800660a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800660e:	2b20      	cmp	r3, #32
 8006610:	d00c      	beq.n	800662c <L3GD20_ReadXYZAngRate+0xf8>
 8006612:	2b20      	cmp	r3, #32
 8006614:	dc0d      	bgt.n	8006632 <L3GD20_ReadXYZAngRate+0xfe>
 8006616:	2b00      	cmp	r3, #0
 8006618:	d002      	beq.n	8006620 <L3GD20_ReadXYZAngRate+0xec>
 800661a:	2b10      	cmp	r3, #16
 800661c:	d003      	beq.n	8006626 <L3GD20_ReadXYZAngRate+0xf2>
 800661e:	e008      	b.n	8006632 <L3GD20_ReadXYZAngRate+0xfe>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8006620:	4b15      	ldr	r3, [pc, #84]	@ (8006678 <L3GD20_ReadXYZAngRate+0x144>)
 8006622:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8006624:	e005      	b.n	8006632 <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8006626:	4b15      	ldr	r3, [pc, #84]	@ (800667c <L3GD20_ReadXYZAngRate+0x148>)
 8006628:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 800662a:	e002      	b.n	8006632 <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 800662c:	4b14      	ldr	r3, [pc, #80]	@ (8006680 <L3GD20_ReadXYZAngRate+0x14c>)
 800662e:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8006630:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8006632:	2300      	movs	r3, #0
 8006634:	623b      	str	r3, [r7, #32]
 8006636:	e016      	b.n	8006666 <L3GD20_ReadXYZAngRate+0x132>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	005b      	lsls	r3, r3, #1
 800663c:	3328      	adds	r3, #40	@ 0x28
 800663e:	443b      	add	r3, r7
 8006640:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8006644:	ee07 3a90 	vmov	s15, r3
 8006648:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	4413      	add	r3, r2
 8006654:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800665c:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	3301      	adds	r3, #1
 8006664:	623b      	str	r3, [r7, #32]
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	2b02      	cmp	r3, #2
 800666a:	dde5      	ble.n	8006638 <L3GD20_ReadXYZAngRate+0x104>
  }
}
 800666c:	bf00      	nop
 800666e:	bf00      	nop
 8006670:	3728      	adds	r7, #40	@ 0x28
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	410c0000 	.word	0x410c0000
 800667c:	418c0000 	.word	0x418c0000
 8006680:	428c0000 	.word	0x428c0000

08006684 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8006688:	481a      	ldr	r0, [pc, #104]	@ (80066f4 <SPIx_Init+0x70>)
 800668a:	f7fd ff60 	bl	800454e <HAL_SPI_GetState>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d12c      	bne.n	80066ee <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8006694:	4b17      	ldr	r3, [pc, #92]	@ (80066f4 <SPIx_Init+0x70>)
 8006696:	4a18      	ldr	r2, [pc, #96]	@ (80066f8 <SPIx_Init+0x74>)
 8006698:	601a      	str	r2, [r3, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800669a:	4b16      	ldr	r3, [pc, #88]	@ (80066f4 <SPIx_Init+0x70>)
 800669c:	2218      	movs	r2, #24
 800669e:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 80066a0:	4b14      	ldr	r3, [pc, #80]	@ (80066f4 <SPIx_Init+0x70>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80066a6:	4b13      	ldr	r3, [pc, #76]	@ (80066f4 <SPIx_Init+0x70>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80066ac:	4b11      	ldr	r3, [pc, #68]	@ (80066f4 <SPIx_Init+0x70>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066b2:	4b10      	ldr	r3, [pc, #64]	@ (80066f4 <SPIx_Init+0x70>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 80066b8:	4b0e      	ldr	r3, [pc, #56]	@ (80066f4 <SPIx_Init+0x70>)
 80066ba:	2207      	movs	r2, #7
 80066bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80066be:	4b0d      	ldr	r3, [pc, #52]	@ (80066f4 <SPIx_Init+0x70>)
 80066c0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80066c4:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80066c6:	4b0b      	ldr	r3, [pc, #44]	@ (80066f4 <SPIx_Init+0x70>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 80066cc:	4b09      	ldr	r3, [pc, #36]	@ (80066f4 <SPIx_Init+0x70>)
 80066ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066d2:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 80066d4:	4b07      	ldr	r3, [pc, #28]	@ (80066f4 <SPIx_Init+0x70>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80066da:	4b06      	ldr	r3, [pc, #24]	@ (80066f4 <SPIx_Init+0x70>)
 80066dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80066e0:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 80066e2:	4804      	ldr	r0, [pc, #16]	@ (80066f4 <SPIx_Init+0x70>)
 80066e4:	f000 f836 	bl	8006754 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80066e8:	4802      	ldr	r0, [pc, #8]	@ (80066f4 <SPIx_Init+0x70>)
 80066ea:	f7fd fc3b 	bl	8003f64 <HAL_SPI_Init>
  }
}
 80066ee:	bf00      	nop
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	20000884 	.word	0x20000884
 80066f8:	40013000 	.word	0x40013000

080066fc <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af02      	add	r7, sp, #8
 8006702:	4603      	mov	r3, r0
 8006704:	71fb      	strb	r3, [r7, #7]

  uint8_t receivedbyte = 0;
 8006706:	2300      	movs	r3, #0
 8006708:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800670a:	4b0a      	ldr	r3, [pc, #40]	@ (8006734 <SPIx_WriteRead+0x38>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f107 020f 	add.w	r2, r7, #15
 8006712:	1df9      	adds	r1, r7, #7
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	2301      	movs	r3, #1
 8006718:	4807      	ldr	r0, [pc, #28]	@ (8006738 <SPIx_WriteRead+0x3c>)
 800671a:	f7fd fcf6 	bl	800410a <HAL_SPI_TransmitReceive>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8006724:	f000 f80a 	bl	800673c <SPIx_Error>
  }
  
  return receivedbyte;
 8006728:	7bfb      	ldrb	r3, [r7, #15]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	20000204 	.word	0x20000204
 8006738:	20000884 	.word	0x20000884

0800673c <SPIx_Error>:
/**
  * @brief SPIx error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8006740:	4803      	ldr	r0, [pc, #12]	@ (8006750 <SPIx_Error+0x14>)
 8006742:	f7fd fcba 	bl	80040ba <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 8006746:	f7ff ff9d 	bl	8006684 <SPIx_Init>
}
 800674a:	bf00      	nop
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	20000884 	.word	0x20000884

08006754 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b08a      	sub	sp, #40	@ 0x28
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 800675c:	4b16      	ldr	r3, [pc, #88]	@ (80067b8 <SPIx_MspInit+0x64>)
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	4a15      	ldr	r2, [pc, #84]	@ (80067b8 <SPIx_MspInit+0x64>)
 8006762:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006766:	6193      	str	r3, [r2, #24]
 8006768:	4b13      	ldr	r3, [pc, #76]	@ (80067b8 <SPIx_MspInit+0x64>)
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006770:	613b      	str	r3, [r7, #16]
 8006772:	693b      	ldr	r3, [r7, #16]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8006774:	4b10      	ldr	r3, [pc, #64]	@ (80067b8 <SPIx_MspInit+0x64>)
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	4a0f      	ldr	r2, [pc, #60]	@ (80067b8 <SPIx_MspInit+0x64>)
 800677a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800677e:	6153      	str	r3, [r2, #20]
 8006780:	4b0d      	ldr	r3, [pc, #52]	@ (80067b8 <SPIx_MspInit+0x64>)
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006788:	60fb      	str	r3, [r7, #12]
 800678a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800678c:	23e0      	movs	r3, #224	@ 0xe0
 800678e:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8006790:	2302      	movs	r3, #2
 8006792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 8006794:	2300      	movs	r3, #0
 8006796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8006798:	2303      	movs	r3, #3
 800679a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800679c:	2305      	movs	r3, #5
 800679e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80067a0:	f107 0314 	add.w	r3, r7, #20
 80067a4:	4619      	mov	r1, r3
 80067a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80067aa:	f7fb fb51 	bl	8001e50 <HAL_GPIO_Init>
}
 80067ae:	bf00      	nop
 80067b0:	3728      	adds	r7, #40	@ 0x28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	40021000 	.word	0x40021000

080067bc <GYRO_IO_Init>:
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b088      	sub	sp, #32
 80067c0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80067c2:	4b1f      	ldr	r3, [pc, #124]	@ (8006840 <GYRO_IO_Init+0x84>)
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	4a1e      	ldr	r2, [pc, #120]	@ (8006840 <GYRO_IO_Init+0x84>)
 80067c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80067cc:	6153      	str	r3, [r2, #20]
 80067ce:	4b1c      	ldr	r3, [pc, #112]	@ (8006840 <GYRO_IO_Init+0x84>)
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80067d6:	60bb      	str	r3, [r7, #8]
 80067d8:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80067da:	2308      	movs	r3, #8
 80067dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80067de:	2301      	movs	r3, #1
 80067e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80067e2:	2300      	movs	r3, #0
 80067e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80067e6:	2303      	movs	r3, #3
 80067e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80067ea:	f107 030c 	add.w	r3, r7, #12
 80067ee:	4619      	mov	r1, r3
 80067f0:	4814      	ldr	r0, [pc, #80]	@ (8006844 <GYRO_IO_Init+0x88>)
 80067f2:	f7fb fb2d 	bl	8001e50 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 80067f6:	2201      	movs	r2, #1
 80067f8:	2108      	movs	r1, #8
 80067fa:	4812      	ldr	r0, [pc, #72]	@ (8006844 <GYRO_IO_Init+0x88>)
 80067fc:	f7fb fd7e 	bl	80022fc <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8006800:	4b0f      	ldr	r3, [pc, #60]	@ (8006840 <GYRO_IO_Init+0x84>)
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	4a0e      	ldr	r2, [pc, #56]	@ (8006840 <GYRO_IO_Init+0x84>)
 8006806:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800680a:	6153      	str	r3, [r2, #20]
 800680c:	4b0c      	ldr	r3, [pc, #48]	@ (8006840 <GYRO_IO_Init+0x84>)
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006814:	607b      	str	r3, [r7, #4]
 8006816:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8006818:	2303      	movs	r3, #3
 800681a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800681c:	2300      	movs	r3, #0
 800681e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8006820:	2303      	movs	r3, #3
 8006822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8006824:	2300      	movs	r3, #0
 8006826:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8006828:	f107 030c 	add.w	r3, r7, #12
 800682c:	4619      	mov	r1, r3
 800682e:	4805      	ldr	r0, [pc, #20]	@ (8006844 <GYRO_IO_Init+0x88>)
 8006830:	f7fb fb0e 	bl	8001e50 <HAL_GPIO_Init>
  
  SPIx_Init();
 8006834:	f7ff ff26 	bl	8006684 <SPIx_Init>
}
 8006838:	bf00      	nop
 800683a:	3720      	adds	r7, #32
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	40021000 	.word	0x40021000
 8006844:	48001000 	.word	0x48001000

08006848 <GYRO_IO_Write>:
  * @param  WriteAddr GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	70fb      	strb	r3, [r7, #3]
 8006854:	4613      	mov	r3, r2
 8006856:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8006858:	883b      	ldrh	r3, [r7, #0]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d903      	bls.n	8006866 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800685e:	78fb      	ldrb	r3, [r7, #3]
 8006860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006864:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8006866:	2200      	movs	r2, #0
 8006868:	2108      	movs	r1, #8
 800686a:	480f      	ldr	r0, [pc, #60]	@ (80068a8 <GYRO_IO_Write+0x60>)
 800686c:	f7fb fd46 	bl	80022fc <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8006870:	78fb      	ldrb	r3, [r7, #3]
 8006872:	4618      	mov	r0, r3
 8006874:	f7ff ff42 	bl	80066fc <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8006878:	e00a      	b.n	8006890 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff ff3c 	bl	80066fc <SPIx_WriteRead>
    NumByteToWrite--;
 8006884:	883b      	ldrh	r3, [r7, #0]
 8006886:	3b01      	subs	r3, #1
 8006888:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	3301      	adds	r3, #1
 800688e:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8006890:	883b      	ldrh	r3, [r7, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1f1      	bne.n	800687a <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8006896:	2201      	movs	r2, #1
 8006898:	2108      	movs	r1, #8
 800689a:	4803      	ldr	r0, [pc, #12]	@ (80068a8 <GYRO_IO_Write+0x60>)
 800689c:	f7fb fd2e 	bl	80022fc <HAL_GPIO_WritePin>
}
 80068a0:	bf00      	nop
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	48001000 	.word	0x48001000

080068ac <GYRO_IO_Read>:
  * @param  ReadAddr GYROSCOPE's internal address to read from.
  * @param  NumByteToRead number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	460b      	mov	r3, r1
 80068b6:	70fb      	strb	r3, [r7, #3]
 80068b8:	4613      	mov	r3, r2
 80068ba:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 80068bc:	883b      	ldrh	r3, [r7, #0]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d904      	bls.n	80068cc <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80068c2:	78fb      	ldrb	r3, [r7, #3]
 80068c4:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80068c8:	70fb      	strb	r3, [r7, #3]
 80068ca:	e003      	b.n	80068d4 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80068cc:	78fb      	ldrb	r3, [r7, #3]
 80068ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80068d2:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80068d4:	2200      	movs	r2, #0
 80068d6:	2108      	movs	r1, #8
 80068d8:	4810      	ldr	r0, [pc, #64]	@ (800691c <GYRO_IO_Read+0x70>)
 80068da:	f7fb fd0f 	bl	80022fc <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80068de:	78fb      	ldrb	r3, [r7, #3]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7ff ff0b 	bl	80066fc <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80068e6:	e00c      	b.n	8006902 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80068e8:	2000      	movs	r0, #0
 80068ea:	f7ff ff07 	bl	80066fc <SPIx_WriteRead>
 80068ee:	4603      	mov	r3, r0
 80068f0:	461a      	mov	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 80068f6:	883b      	ldrh	r3, [r7, #0]
 80068f8:	3b01      	subs	r3, #1
 80068fa:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	3301      	adds	r3, #1
 8006900:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8006902:	883b      	ldrh	r3, [r7, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1ef      	bne.n	80068e8 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8006908:	2201      	movs	r2, #1
 800690a:	2108      	movs	r1, #8
 800690c:	4803      	ldr	r0, [pc, #12]	@ (800691c <GYRO_IO_Read+0x70>)
 800690e:	f7fb fcf5 	bl	80022fc <HAL_GPIO_WritePin>
}  
 8006912:	bf00      	nop
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	48001000 	.word	0x48001000

08006920 <__cvt>:
 8006920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006924:	ec57 6b10 	vmov	r6, r7, d0
 8006928:	2f00      	cmp	r7, #0
 800692a:	460c      	mov	r4, r1
 800692c:	4619      	mov	r1, r3
 800692e:	463b      	mov	r3, r7
 8006930:	bfbb      	ittet	lt
 8006932:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006936:	461f      	movlt	r7, r3
 8006938:	2300      	movge	r3, #0
 800693a:	232d      	movlt	r3, #45	@ 0x2d
 800693c:	700b      	strb	r3, [r1, #0]
 800693e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006940:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006944:	4691      	mov	r9, r2
 8006946:	f023 0820 	bic.w	r8, r3, #32
 800694a:	bfbc      	itt	lt
 800694c:	4632      	movlt	r2, r6
 800694e:	4616      	movlt	r6, r2
 8006950:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006954:	d005      	beq.n	8006962 <__cvt+0x42>
 8006956:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800695a:	d100      	bne.n	800695e <__cvt+0x3e>
 800695c:	3401      	adds	r4, #1
 800695e:	2102      	movs	r1, #2
 8006960:	e000      	b.n	8006964 <__cvt+0x44>
 8006962:	2103      	movs	r1, #3
 8006964:	ab03      	add	r3, sp, #12
 8006966:	9301      	str	r3, [sp, #4]
 8006968:	ab02      	add	r3, sp, #8
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	ec47 6b10 	vmov	d0, r6, r7
 8006970:	4653      	mov	r3, sl
 8006972:	4622      	mov	r2, r4
 8006974:	f001 f884 	bl	8007a80 <_dtoa_r>
 8006978:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800697c:	4605      	mov	r5, r0
 800697e:	d119      	bne.n	80069b4 <__cvt+0x94>
 8006980:	f019 0f01 	tst.w	r9, #1
 8006984:	d00e      	beq.n	80069a4 <__cvt+0x84>
 8006986:	eb00 0904 	add.w	r9, r0, r4
 800698a:	2200      	movs	r2, #0
 800698c:	2300      	movs	r3, #0
 800698e:	4630      	mov	r0, r6
 8006990:	4639      	mov	r1, r7
 8006992:	f7fa f899 	bl	8000ac8 <__aeabi_dcmpeq>
 8006996:	b108      	cbz	r0, 800699c <__cvt+0x7c>
 8006998:	f8cd 900c 	str.w	r9, [sp, #12]
 800699c:	2230      	movs	r2, #48	@ 0x30
 800699e:	9b03      	ldr	r3, [sp, #12]
 80069a0:	454b      	cmp	r3, r9
 80069a2:	d31e      	bcc.n	80069e2 <__cvt+0xc2>
 80069a4:	9b03      	ldr	r3, [sp, #12]
 80069a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80069a8:	1b5b      	subs	r3, r3, r5
 80069aa:	4628      	mov	r0, r5
 80069ac:	6013      	str	r3, [r2, #0]
 80069ae:	b004      	add	sp, #16
 80069b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80069b8:	eb00 0904 	add.w	r9, r0, r4
 80069bc:	d1e5      	bne.n	800698a <__cvt+0x6a>
 80069be:	7803      	ldrb	r3, [r0, #0]
 80069c0:	2b30      	cmp	r3, #48	@ 0x30
 80069c2:	d10a      	bne.n	80069da <__cvt+0xba>
 80069c4:	2200      	movs	r2, #0
 80069c6:	2300      	movs	r3, #0
 80069c8:	4630      	mov	r0, r6
 80069ca:	4639      	mov	r1, r7
 80069cc:	f7fa f87c 	bl	8000ac8 <__aeabi_dcmpeq>
 80069d0:	b918      	cbnz	r0, 80069da <__cvt+0xba>
 80069d2:	f1c4 0401 	rsb	r4, r4, #1
 80069d6:	f8ca 4000 	str.w	r4, [sl]
 80069da:	f8da 3000 	ldr.w	r3, [sl]
 80069de:	4499      	add	r9, r3
 80069e0:	e7d3      	b.n	800698a <__cvt+0x6a>
 80069e2:	1c59      	adds	r1, r3, #1
 80069e4:	9103      	str	r1, [sp, #12]
 80069e6:	701a      	strb	r2, [r3, #0]
 80069e8:	e7d9      	b.n	800699e <__cvt+0x7e>

080069ea <__exponent>:
 80069ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069ec:	2900      	cmp	r1, #0
 80069ee:	bfba      	itte	lt
 80069f0:	4249      	neglt	r1, r1
 80069f2:	232d      	movlt	r3, #45	@ 0x2d
 80069f4:	232b      	movge	r3, #43	@ 0x2b
 80069f6:	2909      	cmp	r1, #9
 80069f8:	7002      	strb	r2, [r0, #0]
 80069fa:	7043      	strb	r3, [r0, #1]
 80069fc:	dd29      	ble.n	8006a52 <__exponent+0x68>
 80069fe:	f10d 0307 	add.w	r3, sp, #7
 8006a02:	461d      	mov	r5, r3
 8006a04:	270a      	movs	r7, #10
 8006a06:	461a      	mov	r2, r3
 8006a08:	fbb1 f6f7 	udiv	r6, r1, r7
 8006a0c:	fb07 1416 	mls	r4, r7, r6, r1
 8006a10:	3430      	adds	r4, #48	@ 0x30
 8006a12:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006a16:	460c      	mov	r4, r1
 8006a18:	2c63      	cmp	r4, #99	@ 0x63
 8006a1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a1e:	4631      	mov	r1, r6
 8006a20:	dcf1      	bgt.n	8006a06 <__exponent+0x1c>
 8006a22:	3130      	adds	r1, #48	@ 0x30
 8006a24:	1e94      	subs	r4, r2, #2
 8006a26:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006a2a:	1c41      	adds	r1, r0, #1
 8006a2c:	4623      	mov	r3, r4
 8006a2e:	42ab      	cmp	r3, r5
 8006a30:	d30a      	bcc.n	8006a48 <__exponent+0x5e>
 8006a32:	f10d 0309 	add.w	r3, sp, #9
 8006a36:	1a9b      	subs	r3, r3, r2
 8006a38:	42ac      	cmp	r4, r5
 8006a3a:	bf88      	it	hi
 8006a3c:	2300      	movhi	r3, #0
 8006a3e:	3302      	adds	r3, #2
 8006a40:	4403      	add	r3, r0
 8006a42:	1a18      	subs	r0, r3, r0
 8006a44:	b003      	add	sp, #12
 8006a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a48:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006a4c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006a50:	e7ed      	b.n	8006a2e <__exponent+0x44>
 8006a52:	2330      	movs	r3, #48	@ 0x30
 8006a54:	3130      	adds	r1, #48	@ 0x30
 8006a56:	7083      	strb	r3, [r0, #2]
 8006a58:	70c1      	strb	r1, [r0, #3]
 8006a5a:	1d03      	adds	r3, r0, #4
 8006a5c:	e7f1      	b.n	8006a42 <__exponent+0x58>
	...

08006a60 <_printf_float>:
 8006a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a64:	b08d      	sub	sp, #52	@ 0x34
 8006a66:	460c      	mov	r4, r1
 8006a68:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006a6c:	4616      	mov	r6, r2
 8006a6e:	461f      	mov	r7, r3
 8006a70:	4605      	mov	r5, r0
 8006a72:	f000 feef 	bl	8007854 <_localeconv_r>
 8006a76:	6803      	ldr	r3, [r0, #0]
 8006a78:	9304      	str	r3, [sp, #16]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7f9 fbf8 	bl	8000270 <strlen>
 8006a80:	2300      	movs	r3, #0
 8006a82:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a84:	f8d8 3000 	ldr.w	r3, [r8]
 8006a88:	9005      	str	r0, [sp, #20]
 8006a8a:	3307      	adds	r3, #7
 8006a8c:	f023 0307 	bic.w	r3, r3, #7
 8006a90:	f103 0208 	add.w	r2, r3, #8
 8006a94:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006a98:	f8d4 b000 	ldr.w	fp, [r4]
 8006a9c:	f8c8 2000 	str.w	r2, [r8]
 8006aa0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006aa4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006aa8:	9307      	str	r3, [sp, #28]
 8006aaa:	f8cd 8018 	str.w	r8, [sp, #24]
 8006aae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006ab2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ab6:	4b9c      	ldr	r3, [pc, #624]	@ (8006d28 <_printf_float+0x2c8>)
 8006ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8006abc:	f7fa f836 	bl	8000b2c <__aeabi_dcmpun>
 8006ac0:	bb70      	cbnz	r0, 8006b20 <_printf_float+0xc0>
 8006ac2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ac6:	4b98      	ldr	r3, [pc, #608]	@ (8006d28 <_printf_float+0x2c8>)
 8006ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8006acc:	f7fa f810 	bl	8000af0 <__aeabi_dcmple>
 8006ad0:	bb30      	cbnz	r0, 8006b20 <_printf_float+0xc0>
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	4640      	mov	r0, r8
 8006ad8:	4649      	mov	r1, r9
 8006ada:	f7f9 ffff 	bl	8000adc <__aeabi_dcmplt>
 8006ade:	b110      	cbz	r0, 8006ae6 <_printf_float+0x86>
 8006ae0:	232d      	movs	r3, #45	@ 0x2d
 8006ae2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ae6:	4a91      	ldr	r2, [pc, #580]	@ (8006d2c <_printf_float+0x2cc>)
 8006ae8:	4b91      	ldr	r3, [pc, #580]	@ (8006d30 <_printf_float+0x2d0>)
 8006aea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006aee:	bf94      	ite	ls
 8006af0:	4690      	movls	r8, r2
 8006af2:	4698      	movhi	r8, r3
 8006af4:	2303      	movs	r3, #3
 8006af6:	6123      	str	r3, [r4, #16]
 8006af8:	f02b 0304 	bic.w	r3, fp, #4
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	f04f 0900 	mov.w	r9, #0
 8006b02:	9700      	str	r7, [sp, #0]
 8006b04:	4633      	mov	r3, r6
 8006b06:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006b08:	4621      	mov	r1, r4
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	f000 f9d2 	bl	8006eb4 <_printf_common>
 8006b10:	3001      	adds	r0, #1
 8006b12:	f040 808d 	bne.w	8006c30 <_printf_float+0x1d0>
 8006b16:	f04f 30ff 	mov.w	r0, #4294967295
 8006b1a:	b00d      	add	sp, #52	@ 0x34
 8006b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b20:	4642      	mov	r2, r8
 8006b22:	464b      	mov	r3, r9
 8006b24:	4640      	mov	r0, r8
 8006b26:	4649      	mov	r1, r9
 8006b28:	f7fa f800 	bl	8000b2c <__aeabi_dcmpun>
 8006b2c:	b140      	cbz	r0, 8006b40 <_printf_float+0xe0>
 8006b2e:	464b      	mov	r3, r9
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	bfbc      	itt	lt
 8006b34:	232d      	movlt	r3, #45	@ 0x2d
 8006b36:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006b3a:	4a7e      	ldr	r2, [pc, #504]	@ (8006d34 <_printf_float+0x2d4>)
 8006b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8006d38 <_printf_float+0x2d8>)
 8006b3e:	e7d4      	b.n	8006aea <_printf_float+0x8a>
 8006b40:	6863      	ldr	r3, [r4, #4]
 8006b42:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006b46:	9206      	str	r2, [sp, #24]
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	d13b      	bne.n	8006bc4 <_printf_float+0x164>
 8006b4c:	2306      	movs	r3, #6
 8006b4e:	6063      	str	r3, [r4, #4]
 8006b50:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006b54:	2300      	movs	r3, #0
 8006b56:	6022      	str	r2, [r4, #0]
 8006b58:	9303      	str	r3, [sp, #12]
 8006b5a:	ab0a      	add	r3, sp, #40	@ 0x28
 8006b5c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006b60:	ab09      	add	r3, sp, #36	@ 0x24
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	6861      	ldr	r1, [r4, #4]
 8006b66:	ec49 8b10 	vmov	d0, r8, r9
 8006b6a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006b6e:	4628      	mov	r0, r5
 8006b70:	f7ff fed6 	bl	8006920 <__cvt>
 8006b74:	9b06      	ldr	r3, [sp, #24]
 8006b76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b78:	2b47      	cmp	r3, #71	@ 0x47
 8006b7a:	4680      	mov	r8, r0
 8006b7c:	d129      	bne.n	8006bd2 <_printf_float+0x172>
 8006b7e:	1cc8      	adds	r0, r1, #3
 8006b80:	db02      	blt.n	8006b88 <_printf_float+0x128>
 8006b82:	6863      	ldr	r3, [r4, #4]
 8006b84:	4299      	cmp	r1, r3
 8006b86:	dd41      	ble.n	8006c0c <_printf_float+0x1ac>
 8006b88:	f1aa 0a02 	sub.w	sl, sl, #2
 8006b8c:	fa5f fa8a 	uxtb.w	sl, sl
 8006b90:	3901      	subs	r1, #1
 8006b92:	4652      	mov	r2, sl
 8006b94:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006b98:	9109      	str	r1, [sp, #36]	@ 0x24
 8006b9a:	f7ff ff26 	bl	80069ea <__exponent>
 8006b9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ba0:	1813      	adds	r3, r2, r0
 8006ba2:	2a01      	cmp	r2, #1
 8006ba4:	4681      	mov	r9, r0
 8006ba6:	6123      	str	r3, [r4, #16]
 8006ba8:	dc02      	bgt.n	8006bb0 <_printf_float+0x150>
 8006baa:	6822      	ldr	r2, [r4, #0]
 8006bac:	07d2      	lsls	r2, r2, #31
 8006bae:	d501      	bpl.n	8006bb4 <_printf_float+0x154>
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	6123      	str	r3, [r4, #16]
 8006bb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d0a2      	beq.n	8006b02 <_printf_float+0xa2>
 8006bbc:	232d      	movs	r3, #45	@ 0x2d
 8006bbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bc2:	e79e      	b.n	8006b02 <_printf_float+0xa2>
 8006bc4:	9a06      	ldr	r2, [sp, #24]
 8006bc6:	2a47      	cmp	r2, #71	@ 0x47
 8006bc8:	d1c2      	bne.n	8006b50 <_printf_float+0xf0>
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1c0      	bne.n	8006b50 <_printf_float+0xf0>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e7bd      	b.n	8006b4e <_printf_float+0xee>
 8006bd2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006bd6:	d9db      	bls.n	8006b90 <_printf_float+0x130>
 8006bd8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006bdc:	d118      	bne.n	8006c10 <_printf_float+0x1b0>
 8006bde:	2900      	cmp	r1, #0
 8006be0:	6863      	ldr	r3, [r4, #4]
 8006be2:	dd0b      	ble.n	8006bfc <_printf_float+0x19c>
 8006be4:	6121      	str	r1, [r4, #16]
 8006be6:	b913      	cbnz	r3, 8006bee <_printf_float+0x18e>
 8006be8:	6822      	ldr	r2, [r4, #0]
 8006bea:	07d0      	lsls	r0, r2, #31
 8006bec:	d502      	bpl.n	8006bf4 <_printf_float+0x194>
 8006bee:	3301      	adds	r3, #1
 8006bf0:	440b      	add	r3, r1
 8006bf2:	6123      	str	r3, [r4, #16]
 8006bf4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006bf6:	f04f 0900 	mov.w	r9, #0
 8006bfa:	e7db      	b.n	8006bb4 <_printf_float+0x154>
 8006bfc:	b913      	cbnz	r3, 8006c04 <_printf_float+0x1a4>
 8006bfe:	6822      	ldr	r2, [r4, #0]
 8006c00:	07d2      	lsls	r2, r2, #31
 8006c02:	d501      	bpl.n	8006c08 <_printf_float+0x1a8>
 8006c04:	3302      	adds	r3, #2
 8006c06:	e7f4      	b.n	8006bf2 <_printf_float+0x192>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e7f2      	b.n	8006bf2 <_printf_float+0x192>
 8006c0c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006c10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c12:	4299      	cmp	r1, r3
 8006c14:	db05      	blt.n	8006c22 <_printf_float+0x1c2>
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	6121      	str	r1, [r4, #16]
 8006c1a:	07d8      	lsls	r0, r3, #31
 8006c1c:	d5ea      	bpl.n	8006bf4 <_printf_float+0x194>
 8006c1e:	1c4b      	adds	r3, r1, #1
 8006c20:	e7e7      	b.n	8006bf2 <_printf_float+0x192>
 8006c22:	2900      	cmp	r1, #0
 8006c24:	bfd4      	ite	le
 8006c26:	f1c1 0202 	rsble	r2, r1, #2
 8006c2a:	2201      	movgt	r2, #1
 8006c2c:	4413      	add	r3, r2
 8006c2e:	e7e0      	b.n	8006bf2 <_printf_float+0x192>
 8006c30:	6823      	ldr	r3, [r4, #0]
 8006c32:	055a      	lsls	r2, r3, #21
 8006c34:	d407      	bmi.n	8006c46 <_printf_float+0x1e6>
 8006c36:	6923      	ldr	r3, [r4, #16]
 8006c38:	4642      	mov	r2, r8
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	47b8      	blx	r7
 8006c40:	3001      	adds	r0, #1
 8006c42:	d12b      	bne.n	8006c9c <_printf_float+0x23c>
 8006c44:	e767      	b.n	8006b16 <_printf_float+0xb6>
 8006c46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c4a:	f240 80dd 	bls.w	8006e08 <_printf_float+0x3a8>
 8006c4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c52:	2200      	movs	r2, #0
 8006c54:	2300      	movs	r3, #0
 8006c56:	f7f9 ff37 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	d033      	beq.n	8006cc6 <_printf_float+0x266>
 8006c5e:	4a37      	ldr	r2, [pc, #220]	@ (8006d3c <_printf_float+0x2dc>)
 8006c60:	2301      	movs	r3, #1
 8006c62:	4631      	mov	r1, r6
 8006c64:	4628      	mov	r0, r5
 8006c66:	47b8      	blx	r7
 8006c68:	3001      	adds	r0, #1
 8006c6a:	f43f af54 	beq.w	8006b16 <_printf_float+0xb6>
 8006c6e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006c72:	4543      	cmp	r3, r8
 8006c74:	db02      	blt.n	8006c7c <_printf_float+0x21c>
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	07d8      	lsls	r0, r3, #31
 8006c7a:	d50f      	bpl.n	8006c9c <_printf_float+0x23c>
 8006c7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c80:	4631      	mov	r1, r6
 8006c82:	4628      	mov	r0, r5
 8006c84:	47b8      	blx	r7
 8006c86:	3001      	adds	r0, #1
 8006c88:	f43f af45 	beq.w	8006b16 <_printf_float+0xb6>
 8006c8c:	f04f 0900 	mov.w	r9, #0
 8006c90:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c94:	f104 0a1a 	add.w	sl, r4, #26
 8006c98:	45c8      	cmp	r8, r9
 8006c9a:	dc09      	bgt.n	8006cb0 <_printf_float+0x250>
 8006c9c:	6823      	ldr	r3, [r4, #0]
 8006c9e:	079b      	lsls	r3, r3, #30
 8006ca0:	f100 8103 	bmi.w	8006eaa <_printf_float+0x44a>
 8006ca4:	68e0      	ldr	r0, [r4, #12]
 8006ca6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ca8:	4298      	cmp	r0, r3
 8006caa:	bfb8      	it	lt
 8006cac:	4618      	movlt	r0, r3
 8006cae:	e734      	b.n	8006b1a <_printf_float+0xba>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	4652      	mov	r2, sl
 8006cb4:	4631      	mov	r1, r6
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	47b8      	blx	r7
 8006cba:	3001      	adds	r0, #1
 8006cbc:	f43f af2b 	beq.w	8006b16 <_printf_float+0xb6>
 8006cc0:	f109 0901 	add.w	r9, r9, #1
 8006cc4:	e7e8      	b.n	8006c98 <_printf_float+0x238>
 8006cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	dc39      	bgt.n	8006d40 <_printf_float+0x2e0>
 8006ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8006d3c <_printf_float+0x2dc>)
 8006cce:	2301      	movs	r3, #1
 8006cd0:	4631      	mov	r1, r6
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	47b8      	blx	r7
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	f43f af1d 	beq.w	8006b16 <_printf_float+0xb6>
 8006cdc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006ce0:	ea59 0303 	orrs.w	r3, r9, r3
 8006ce4:	d102      	bne.n	8006cec <_printf_float+0x28c>
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	07d9      	lsls	r1, r3, #31
 8006cea:	d5d7      	bpl.n	8006c9c <_printf_float+0x23c>
 8006cec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cf0:	4631      	mov	r1, r6
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	47b8      	blx	r7
 8006cf6:	3001      	adds	r0, #1
 8006cf8:	f43f af0d 	beq.w	8006b16 <_printf_float+0xb6>
 8006cfc:	f04f 0a00 	mov.w	sl, #0
 8006d00:	f104 0b1a 	add.w	fp, r4, #26
 8006d04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d06:	425b      	negs	r3, r3
 8006d08:	4553      	cmp	r3, sl
 8006d0a:	dc01      	bgt.n	8006d10 <_printf_float+0x2b0>
 8006d0c:	464b      	mov	r3, r9
 8006d0e:	e793      	b.n	8006c38 <_printf_float+0x1d8>
 8006d10:	2301      	movs	r3, #1
 8006d12:	465a      	mov	r2, fp
 8006d14:	4631      	mov	r1, r6
 8006d16:	4628      	mov	r0, r5
 8006d18:	47b8      	blx	r7
 8006d1a:	3001      	adds	r0, #1
 8006d1c:	f43f aefb 	beq.w	8006b16 <_printf_float+0xb6>
 8006d20:	f10a 0a01 	add.w	sl, sl, #1
 8006d24:	e7ee      	b.n	8006d04 <_printf_float+0x2a4>
 8006d26:	bf00      	nop
 8006d28:	7fefffff 	.word	0x7fefffff
 8006d2c:	0800b048 	.word	0x0800b048
 8006d30:	0800b04c 	.word	0x0800b04c
 8006d34:	0800b050 	.word	0x0800b050
 8006d38:	0800b054 	.word	0x0800b054
 8006d3c:	0800b058 	.word	0x0800b058
 8006d40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d42:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006d46:	4553      	cmp	r3, sl
 8006d48:	bfa8      	it	ge
 8006d4a:	4653      	movge	r3, sl
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	4699      	mov	r9, r3
 8006d50:	dc36      	bgt.n	8006dc0 <_printf_float+0x360>
 8006d52:	f04f 0b00 	mov.w	fp, #0
 8006d56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d5a:	f104 021a 	add.w	r2, r4, #26
 8006d5e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d60:	9306      	str	r3, [sp, #24]
 8006d62:	eba3 0309 	sub.w	r3, r3, r9
 8006d66:	455b      	cmp	r3, fp
 8006d68:	dc31      	bgt.n	8006dce <_printf_float+0x36e>
 8006d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d6c:	459a      	cmp	sl, r3
 8006d6e:	dc3a      	bgt.n	8006de6 <_printf_float+0x386>
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	07da      	lsls	r2, r3, #31
 8006d74:	d437      	bmi.n	8006de6 <_printf_float+0x386>
 8006d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d78:	ebaa 0903 	sub.w	r9, sl, r3
 8006d7c:	9b06      	ldr	r3, [sp, #24]
 8006d7e:	ebaa 0303 	sub.w	r3, sl, r3
 8006d82:	4599      	cmp	r9, r3
 8006d84:	bfa8      	it	ge
 8006d86:	4699      	movge	r9, r3
 8006d88:	f1b9 0f00 	cmp.w	r9, #0
 8006d8c:	dc33      	bgt.n	8006df6 <_printf_float+0x396>
 8006d8e:	f04f 0800 	mov.w	r8, #0
 8006d92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d96:	f104 0b1a 	add.w	fp, r4, #26
 8006d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d9c:	ebaa 0303 	sub.w	r3, sl, r3
 8006da0:	eba3 0309 	sub.w	r3, r3, r9
 8006da4:	4543      	cmp	r3, r8
 8006da6:	f77f af79 	ble.w	8006c9c <_printf_float+0x23c>
 8006daa:	2301      	movs	r3, #1
 8006dac:	465a      	mov	r2, fp
 8006dae:	4631      	mov	r1, r6
 8006db0:	4628      	mov	r0, r5
 8006db2:	47b8      	blx	r7
 8006db4:	3001      	adds	r0, #1
 8006db6:	f43f aeae 	beq.w	8006b16 <_printf_float+0xb6>
 8006dba:	f108 0801 	add.w	r8, r8, #1
 8006dbe:	e7ec      	b.n	8006d9a <_printf_float+0x33a>
 8006dc0:	4642      	mov	r2, r8
 8006dc2:	4631      	mov	r1, r6
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	47b8      	blx	r7
 8006dc8:	3001      	adds	r0, #1
 8006dca:	d1c2      	bne.n	8006d52 <_printf_float+0x2f2>
 8006dcc:	e6a3      	b.n	8006b16 <_printf_float+0xb6>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	4631      	mov	r1, r6
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	9206      	str	r2, [sp, #24]
 8006dd6:	47b8      	blx	r7
 8006dd8:	3001      	adds	r0, #1
 8006dda:	f43f ae9c 	beq.w	8006b16 <_printf_float+0xb6>
 8006dde:	9a06      	ldr	r2, [sp, #24]
 8006de0:	f10b 0b01 	add.w	fp, fp, #1
 8006de4:	e7bb      	b.n	8006d5e <_printf_float+0x2fe>
 8006de6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dea:	4631      	mov	r1, r6
 8006dec:	4628      	mov	r0, r5
 8006dee:	47b8      	blx	r7
 8006df0:	3001      	adds	r0, #1
 8006df2:	d1c0      	bne.n	8006d76 <_printf_float+0x316>
 8006df4:	e68f      	b.n	8006b16 <_printf_float+0xb6>
 8006df6:	9a06      	ldr	r2, [sp, #24]
 8006df8:	464b      	mov	r3, r9
 8006dfa:	4442      	add	r2, r8
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	4628      	mov	r0, r5
 8006e00:	47b8      	blx	r7
 8006e02:	3001      	adds	r0, #1
 8006e04:	d1c3      	bne.n	8006d8e <_printf_float+0x32e>
 8006e06:	e686      	b.n	8006b16 <_printf_float+0xb6>
 8006e08:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e0c:	f1ba 0f01 	cmp.w	sl, #1
 8006e10:	dc01      	bgt.n	8006e16 <_printf_float+0x3b6>
 8006e12:	07db      	lsls	r3, r3, #31
 8006e14:	d536      	bpl.n	8006e84 <_printf_float+0x424>
 8006e16:	2301      	movs	r3, #1
 8006e18:	4642      	mov	r2, r8
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	47b8      	blx	r7
 8006e20:	3001      	adds	r0, #1
 8006e22:	f43f ae78 	beq.w	8006b16 <_printf_float+0xb6>
 8006e26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e2a:	4631      	mov	r1, r6
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	47b8      	blx	r7
 8006e30:	3001      	adds	r0, #1
 8006e32:	f43f ae70 	beq.w	8006b16 <_printf_float+0xb6>
 8006e36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e42:	f7f9 fe41 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e46:	b9c0      	cbnz	r0, 8006e7a <_printf_float+0x41a>
 8006e48:	4653      	mov	r3, sl
 8006e4a:	f108 0201 	add.w	r2, r8, #1
 8006e4e:	4631      	mov	r1, r6
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b8      	blx	r7
 8006e54:	3001      	adds	r0, #1
 8006e56:	d10c      	bne.n	8006e72 <_printf_float+0x412>
 8006e58:	e65d      	b.n	8006b16 <_printf_float+0xb6>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	465a      	mov	r2, fp
 8006e5e:	4631      	mov	r1, r6
 8006e60:	4628      	mov	r0, r5
 8006e62:	47b8      	blx	r7
 8006e64:	3001      	adds	r0, #1
 8006e66:	f43f ae56 	beq.w	8006b16 <_printf_float+0xb6>
 8006e6a:	f108 0801 	add.w	r8, r8, #1
 8006e6e:	45d0      	cmp	r8, sl
 8006e70:	dbf3      	blt.n	8006e5a <_printf_float+0x3fa>
 8006e72:	464b      	mov	r3, r9
 8006e74:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006e78:	e6df      	b.n	8006c3a <_printf_float+0x1da>
 8006e7a:	f04f 0800 	mov.w	r8, #0
 8006e7e:	f104 0b1a 	add.w	fp, r4, #26
 8006e82:	e7f4      	b.n	8006e6e <_printf_float+0x40e>
 8006e84:	2301      	movs	r3, #1
 8006e86:	4642      	mov	r2, r8
 8006e88:	e7e1      	b.n	8006e4e <_printf_float+0x3ee>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	464a      	mov	r2, r9
 8006e8e:	4631      	mov	r1, r6
 8006e90:	4628      	mov	r0, r5
 8006e92:	47b8      	blx	r7
 8006e94:	3001      	adds	r0, #1
 8006e96:	f43f ae3e 	beq.w	8006b16 <_printf_float+0xb6>
 8006e9a:	f108 0801 	add.w	r8, r8, #1
 8006e9e:	68e3      	ldr	r3, [r4, #12]
 8006ea0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ea2:	1a5b      	subs	r3, r3, r1
 8006ea4:	4543      	cmp	r3, r8
 8006ea6:	dcf0      	bgt.n	8006e8a <_printf_float+0x42a>
 8006ea8:	e6fc      	b.n	8006ca4 <_printf_float+0x244>
 8006eaa:	f04f 0800 	mov.w	r8, #0
 8006eae:	f104 0919 	add.w	r9, r4, #25
 8006eb2:	e7f4      	b.n	8006e9e <_printf_float+0x43e>

08006eb4 <_printf_common>:
 8006eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb8:	4616      	mov	r6, r2
 8006eba:	4698      	mov	r8, r3
 8006ebc:	688a      	ldr	r2, [r1, #8]
 8006ebe:	690b      	ldr	r3, [r1, #16]
 8006ec0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	bfb8      	it	lt
 8006ec8:	4613      	movlt	r3, r2
 8006eca:	6033      	str	r3, [r6, #0]
 8006ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ed0:	4607      	mov	r7, r0
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	b10a      	cbz	r2, 8006eda <_printf_common+0x26>
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	6033      	str	r3, [r6, #0]
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	0699      	lsls	r1, r3, #26
 8006ede:	bf42      	ittt	mi
 8006ee0:	6833      	ldrmi	r3, [r6, #0]
 8006ee2:	3302      	addmi	r3, #2
 8006ee4:	6033      	strmi	r3, [r6, #0]
 8006ee6:	6825      	ldr	r5, [r4, #0]
 8006ee8:	f015 0506 	ands.w	r5, r5, #6
 8006eec:	d106      	bne.n	8006efc <_printf_common+0x48>
 8006eee:	f104 0a19 	add.w	sl, r4, #25
 8006ef2:	68e3      	ldr	r3, [r4, #12]
 8006ef4:	6832      	ldr	r2, [r6, #0]
 8006ef6:	1a9b      	subs	r3, r3, r2
 8006ef8:	42ab      	cmp	r3, r5
 8006efa:	dc26      	bgt.n	8006f4a <_printf_common+0x96>
 8006efc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f00:	6822      	ldr	r2, [r4, #0]
 8006f02:	3b00      	subs	r3, #0
 8006f04:	bf18      	it	ne
 8006f06:	2301      	movne	r3, #1
 8006f08:	0692      	lsls	r2, r2, #26
 8006f0a:	d42b      	bmi.n	8006f64 <_printf_common+0xb0>
 8006f0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f10:	4641      	mov	r1, r8
 8006f12:	4638      	mov	r0, r7
 8006f14:	47c8      	blx	r9
 8006f16:	3001      	adds	r0, #1
 8006f18:	d01e      	beq.n	8006f58 <_printf_common+0xa4>
 8006f1a:	6823      	ldr	r3, [r4, #0]
 8006f1c:	6922      	ldr	r2, [r4, #16]
 8006f1e:	f003 0306 	and.w	r3, r3, #6
 8006f22:	2b04      	cmp	r3, #4
 8006f24:	bf02      	ittt	eq
 8006f26:	68e5      	ldreq	r5, [r4, #12]
 8006f28:	6833      	ldreq	r3, [r6, #0]
 8006f2a:	1aed      	subeq	r5, r5, r3
 8006f2c:	68a3      	ldr	r3, [r4, #8]
 8006f2e:	bf0c      	ite	eq
 8006f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f34:	2500      	movne	r5, #0
 8006f36:	4293      	cmp	r3, r2
 8006f38:	bfc4      	itt	gt
 8006f3a:	1a9b      	subgt	r3, r3, r2
 8006f3c:	18ed      	addgt	r5, r5, r3
 8006f3e:	2600      	movs	r6, #0
 8006f40:	341a      	adds	r4, #26
 8006f42:	42b5      	cmp	r5, r6
 8006f44:	d11a      	bne.n	8006f7c <_printf_common+0xc8>
 8006f46:	2000      	movs	r0, #0
 8006f48:	e008      	b.n	8006f5c <_printf_common+0xa8>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	4652      	mov	r2, sl
 8006f4e:	4641      	mov	r1, r8
 8006f50:	4638      	mov	r0, r7
 8006f52:	47c8      	blx	r9
 8006f54:	3001      	adds	r0, #1
 8006f56:	d103      	bne.n	8006f60 <_printf_common+0xac>
 8006f58:	f04f 30ff 	mov.w	r0, #4294967295
 8006f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f60:	3501      	adds	r5, #1
 8006f62:	e7c6      	b.n	8006ef2 <_printf_common+0x3e>
 8006f64:	18e1      	adds	r1, r4, r3
 8006f66:	1c5a      	adds	r2, r3, #1
 8006f68:	2030      	movs	r0, #48	@ 0x30
 8006f6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f6e:	4422      	add	r2, r4
 8006f70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f78:	3302      	adds	r3, #2
 8006f7a:	e7c7      	b.n	8006f0c <_printf_common+0x58>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	4622      	mov	r2, r4
 8006f80:	4641      	mov	r1, r8
 8006f82:	4638      	mov	r0, r7
 8006f84:	47c8      	blx	r9
 8006f86:	3001      	adds	r0, #1
 8006f88:	d0e6      	beq.n	8006f58 <_printf_common+0xa4>
 8006f8a:	3601      	adds	r6, #1
 8006f8c:	e7d9      	b.n	8006f42 <_printf_common+0x8e>
	...

08006f90 <_printf_i>:
 8006f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f94:	7e0f      	ldrb	r7, [r1, #24]
 8006f96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f98:	2f78      	cmp	r7, #120	@ 0x78
 8006f9a:	4691      	mov	r9, r2
 8006f9c:	4680      	mov	r8, r0
 8006f9e:	460c      	mov	r4, r1
 8006fa0:	469a      	mov	sl, r3
 8006fa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006fa6:	d807      	bhi.n	8006fb8 <_printf_i+0x28>
 8006fa8:	2f62      	cmp	r7, #98	@ 0x62
 8006faa:	d80a      	bhi.n	8006fc2 <_printf_i+0x32>
 8006fac:	2f00      	cmp	r7, #0
 8006fae:	f000 80d2 	beq.w	8007156 <_printf_i+0x1c6>
 8006fb2:	2f58      	cmp	r7, #88	@ 0x58
 8006fb4:	f000 80b9 	beq.w	800712a <_printf_i+0x19a>
 8006fb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006fc0:	e03a      	b.n	8007038 <_printf_i+0xa8>
 8006fc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006fc6:	2b15      	cmp	r3, #21
 8006fc8:	d8f6      	bhi.n	8006fb8 <_printf_i+0x28>
 8006fca:	a101      	add	r1, pc, #4	@ (adr r1, 8006fd0 <_printf_i+0x40>)
 8006fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fd0:	08007029 	.word	0x08007029
 8006fd4:	0800703d 	.word	0x0800703d
 8006fd8:	08006fb9 	.word	0x08006fb9
 8006fdc:	08006fb9 	.word	0x08006fb9
 8006fe0:	08006fb9 	.word	0x08006fb9
 8006fe4:	08006fb9 	.word	0x08006fb9
 8006fe8:	0800703d 	.word	0x0800703d
 8006fec:	08006fb9 	.word	0x08006fb9
 8006ff0:	08006fb9 	.word	0x08006fb9
 8006ff4:	08006fb9 	.word	0x08006fb9
 8006ff8:	08006fb9 	.word	0x08006fb9
 8006ffc:	0800713d 	.word	0x0800713d
 8007000:	08007067 	.word	0x08007067
 8007004:	080070f7 	.word	0x080070f7
 8007008:	08006fb9 	.word	0x08006fb9
 800700c:	08006fb9 	.word	0x08006fb9
 8007010:	0800715f 	.word	0x0800715f
 8007014:	08006fb9 	.word	0x08006fb9
 8007018:	08007067 	.word	0x08007067
 800701c:	08006fb9 	.word	0x08006fb9
 8007020:	08006fb9 	.word	0x08006fb9
 8007024:	080070ff 	.word	0x080070ff
 8007028:	6833      	ldr	r3, [r6, #0]
 800702a:	1d1a      	adds	r2, r3, #4
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6032      	str	r2, [r6, #0]
 8007030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007034:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007038:	2301      	movs	r3, #1
 800703a:	e09d      	b.n	8007178 <_printf_i+0x1e8>
 800703c:	6833      	ldr	r3, [r6, #0]
 800703e:	6820      	ldr	r0, [r4, #0]
 8007040:	1d19      	adds	r1, r3, #4
 8007042:	6031      	str	r1, [r6, #0]
 8007044:	0606      	lsls	r6, r0, #24
 8007046:	d501      	bpl.n	800704c <_printf_i+0xbc>
 8007048:	681d      	ldr	r5, [r3, #0]
 800704a:	e003      	b.n	8007054 <_printf_i+0xc4>
 800704c:	0645      	lsls	r5, r0, #25
 800704e:	d5fb      	bpl.n	8007048 <_printf_i+0xb8>
 8007050:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007054:	2d00      	cmp	r5, #0
 8007056:	da03      	bge.n	8007060 <_printf_i+0xd0>
 8007058:	232d      	movs	r3, #45	@ 0x2d
 800705a:	426d      	negs	r5, r5
 800705c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007060:	4859      	ldr	r0, [pc, #356]	@ (80071c8 <_printf_i+0x238>)
 8007062:	230a      	movs	r3, #10
 8007064:	e011      	b.n	800708a <_printf_i+0xfa>
 8007066:	6821      	ldr	r1, [r4, #0]
 8007068:	6833      	ldr	r3, [r6, #0]
 800706a:	0608      	lsls	r0, r1, #24
 800706c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007070:	d402      	bmi.n	8007078 <_printf_i+0xe8>
 8007072:	0649      	lsls	r1, r1, #25
 8007074:	bf48      	it	mi
 8007076:	b2ad      	uxthmi	r5, r5
 8007078:	2f6f      	cmp	r7, #111	@ 0x6f
 800707a:	4853      	ldr	r0, [pc, #332]	@ (80071c8 <_printf_i+0x238>)
 800707c:	6033      	str	r3, [r6, #0]
 800707e:	bf14      	ite	ne
 8007080:	230a      	movne	r3, #10
 8007082:	2308      	moveq	r3, #8
 8007084:	2100      	movs	r1, #0
 8007086:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800708a:	6866      	ldr	r6, [r4, #4]
 800708c:	60a6      	str	r6, [r4, #8]
 800708e:	2e00      	cmp	r6, #0
 8007090:	bfa2      	ittt	ge
 8007092:	6821      	ldrge	r1, [r4, #0]
 8007094:	f021 0104 	bicge.w	r1, r1, #4
 8007098:	6021      	strge	r1, [r4, #0]
 800709a:	b90d      	cbnz	r5, 80070a0 <_printf_i+0x110>
 800709c:	2e00      	cmp	r6, #0
 800709e:	d04b      	beq.n	8007138 <_printf_i+0x1a8>
 80070a0:	4616      	mov	r6, r2
 80070a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80070a6:	fb03 5711 	mls	r7, r3, r1, r5
 80070aa:	5dc7      	ldrb	r7, [r0, r7]
 80070ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070b0:	462f      	mov	r7, r5
 80070b2:	42bb      	cmp	r3, r7
 80070b4:	460d      	mov	r5, r1
 80070b6:	d9f4      	bls.n	80070a2 <_printf_i+0x112>
 80070b8:	2b08      	cmp	r3, #8
 80070ba:	d10b      	bne.n	80070d4 <_printf_i+0x144>
 80070bc:	6823      	ldr	r3, [r4, #0]
 80070be:	07df      	lsls	r7, r3, #31
 80070c0:	d508      	bpl.n	80070d4 <_printf_i+0x144>
 80070c2:	6923      	ldr	r3, [r4, #16]
 80070c4:	6861      	ldr	r1, [r4, #4]
 80070c6:	4299      	cmp	r1, r3
 80070c8:	bfde      	ittt	le
 80070ca:	2330      	movle	r3, #48	@ 0x30
 80070cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80070d4:	1b92      	subs	r2, r2, r6
 80070d6:	6122      	str	r2, [r4, #16]
 80070d8:	f8cd a000 	str.w	sl, [sp]
 80070dc:	464b      	mov	r3, r9
 80070de:	aa03      	add	r2, sp, #12
 80070e0:	4621      	mov	r1, r4
 80070e2:	4640      	mov	r0, r8
 80070e4:	f7ff fee6 	bl	8006eb4 <_printf_common>
 80070e8:	3001      	adds	r0, #1
 80070ea:	d14a      	bne.n	8007182 <_printf_i+0x1f2>
 80070ec:	f04f 30ff 	mov.w	r0, #4294967295
 80070f0:	b004      	add	sp, #16
 80070f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f6:	6823      	ldr	r3, [r4, #0]
 80070f8:	f043 0320 	orr.w	r3, r3, #32
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	4833      	ldr	r0, [pc, #204]	@ (80071cc <_printf_i+0x23c>)
 8007100:	2778      	movs	r7, #120	@ 0x78
 8007102:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	6831      	ldr	r1, [r6, #0]
 800710a:	061f      	lsls	r7, r3, #24
 800710c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007110:	d402      	bmi.n	8007118 <_printf_i+0x188>
 8007112:	065f      	lsls	r7, r3, #25
 8007114:	bf48      	it	mi
 8007116:	b2ad      	uxthmi	r5, r5
 8007118:	6031      	str	r1, [r6, #0]
 800711a:	07d9      	lsls	r1, r3, #31
 800711c:	bf44      	itt	mi
 800711e:	f043 0320 	orrmi.w	r3, r3, #32
 8007122:	6023      	strmi	r3, [r4, #0]
 8007124:	b11d      	cbz	r5, 800712e <_printf_i+0x19e>
 8007126:	2310      	movs	r3, #16
 8007128:	e7ac      	b.n	8007084 <_printf_i+0xf4>
 800712a:	4827      	ldr	r0, [pc, #156]	@ (80071c8 <_printf_i+0x238>)
 800712c:	e7e9      	b.n	8007102 <_printf_i+0x172>
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	f023 0320 	bic.w	r3, r3, #32
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	e7f6      	b.n	8007126 <_printf_i+0x196>
 8007138:	4616      	mov	r6, r2
 800713a:	e7bd      	b.n	80070b8 <_printf_i+0x128>
 800713c:	6833      	ldr	r3, [r6, #0]
 800713e:	6825      	ldr	r5, [r4, #0]
 8007140:	6961      	ldr	r1, [r4, #20]
 8007142:	1d18      	adds	r0, r3, #4
 8007144:	6030      	str	r0, [r6, #0]
 8007146:	062e      	lsls	r6, r5, #24
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	d501      	bpl.n	8007150 <_printf_i+0x1c0>
 800714c:	6019      	str	r1, [r3, #0]
 800714e:	e002      	b.n	8007156 <_printf_i+0x1c6>
 8007150:	0668      	lsls	r0, r5, #25
 8007152:	d5fb      	bpl.n	800714c <_printf_i+0x1bc>
 8007154:	8019      	strh	r1, [r3, #0]
 8007156:	2300      	movs	r3, #0
 8007158:	6123      	str	r3, [r4, #16]
 800715a:	4616      	mov	r6, r2
 800715c:	e7bc      	b.n	80070d8 <_printf_i+0x148>
 800715e:	6833      	ldr	r3, [r6, #0]
 8007160:	1d1a      	adds	r2, r3, #4
 8007162:	6032      	str	r2, [r6, #0]
 8007164:	681e      	ldr	r6, [r3, #0]
 8007166:	6862      	ldr	r2, [r4, #4]
 8007168:	2100      	movs	r1, #0
 800716a:	4630      	mov	r0, r6
 800716c:	f7f9 f830 	bl	80001d0 <memchr>
 8007170:	b108      	cbz	r0, 8007176 <_printf_i+0x1e6>
 8007172:	1b80      	subs	r0, r0, r6
 8007174:	6060      	str	r0, [r4, #4]
 8007176:	6863      	ldr	r3, [r4, #4]
 8007178:	6123      	str	r3, [r4, #16]
 800717a:	2300      	movs	r3, #0
 800717c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007180:	e7aa      	b.n	80070d8 <_printf_i+0x148>
 8007182:	6923      	ldr	r3, [r4, #16]
 8007184:	4632      	mov	r2, r6
 8007186:	4649      	mov	r1, r9
 8007188:	4640      	mov	r0, r8
 800718a:	47d0      	blx	sl
 800718c:	3001      	adds	r0, #1
 800718e:	d0ad      	beq.n	80070ec <_printf_i+0x15c>
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	079b      	lsls	r3, r3, #30
 8007194:	d413      	bmi.n	80071be <_printf_i+0x22e>
 8007196:	68e0      	ldr	r0, [r4, #12]
 8007198:	9b03      	ldr	r3, [sp, #12]
 800719a:	4298      	cmp	r0, r3
 800719c:	bfb8      	it	lt
 800719e:	4618      	movlt	r0, r3
 80071a0:	e7a6      	b.n	80070f0 <_printf_i+0x160>
 80071a2:	2301      	movs	r3, #1
 80071a4:	4632      	mov	r2, r6
 80071a6:	4649      	mov	r1, r9
 80071a8:	4640      	mov	r0, r8
 80071aa:	47d0      	blx	sl
 80071ac:	3001      	adds	r0, #1
 80071ae:	d09d      	beq.n	80070ec <_printf_i+0x15c>
 80071b0:	3501      	adds	r5, #1
 80071b2:	68e3      	ldr	r3, [r4, #12]
 80071b4:	9903      	ldr	r1, [sp, #12]
 80071b6:	1a5b      	subs	r3, r3, r1
 80071b8:	42ab      	cmp	r3, r5
 80071ba:	dcf2      	bgt.n	80071a2 <_printf_i+0x212>
 80071bc:	e7eb      	b.n	8007196 <_printf_i+0x206>
 80071be:	2500      	movs	r5, #0
 80071c0:	f104 0619 	add.w	r6, r4, #25
 80071c4:	e7f5      	b.n	80071b2 <_printf_i+0x222>
 80071c6:	bf00      	nop
 80071c8:	0800b05a 	.word	0x0800b05a
 80071cc:	0800b06b 	.word	0x0800b06b

080071d0 <_scanf_float>:
 80071d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d4:	b087      	sub	sp, #28
 80071d6:	4617      	mov	r7, r2
 80071d8:	9303      	str	r3, [sp, #12]
 80071da:	688b      	ldr	r3, [r1, #8]
 80071dc:	1e5a      	subs	r2, r3, #1
 80071de:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80071e2:	bf81      	itttt	hi
 80071e4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80071e8:	eb03 0b05 	addhi.w	fp, r3, r5
 80071ec:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80071f0:	608b      	strhi	r3, [r1, #8]
 80071f2:	680b      	ldr	r3, [r1, #0]
 80071f4:	460a      	mov	r2, r1
 80071f6:	f04f 0500 	mov.w	r5, #0
 80071fa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80071fe:	f842 3b1c 	str.w	r3, [r2], #28
 8007202:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007206:	4680      	mov	r8, r0
 8007208:	460c      	mov	r4, r1
 800720a:	bf98      	it	ls
 800720c:	f04f 0b00 	movls.w	fp, #0
 8007210:	9201      	str	r2, [sp, #4]
 8007212:	4616      	mov	r6, r2
 8007214:	46aa      	mov	sl, r5
 8007216:	46a9      	mov	r9, r5
 8007218:	9502      	str	r5, [sp, #8]
 800721a:	68a2      	ldr	r2, [r4, #8]
 800721c:	b152      	cbz	r2, 8007234 <_scanf_float+0x64>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	2b4e      	cmp	r3, #78	@ 0x4e
 8007224:	d864      	bhi.n	80072f0 <_scanf_float+0x120>
 8007226:	2b40      	cmp	r3, #64	@ 0x40
 8007228:	d83c      	bhi.n	80072a4 <_scanf_float+0xd4>
 800722a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800722e:	b2c8      	uxtb	r0, r1
 8007230:	280e      	cmp	r0, #14
 8007232:	d93a      	bls.n	80072aa <_scanf_float+0xda>
 8007234:	f1b9 0f00 	cmp.w	r9, #0
 8007238:	d003      	beq.n	8007242 <_scanf_float+0x72>
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007246:	f1ba 0f01 	cmp.w	sl, #1
 800724a:	f200 8117 	bhi.w	800747c <_scanf_float+0x2ac>
 800724e:	9b01      	ldr	r3, [sp, #4]
 8007250:	429e      	cmp	r6, r3
 8007252:	f200 8108 	bhi.w	8007466 <_scanf_float+0x296>
 8007256:	2001      	movs	r0, #1
 8007258:	b007      	add	sp, #28
 800725a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800725e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007262:	2a0d      	cmp	r2, #13
 8007264:	d8e6      	bhi.n	8007234 <_scanf_float+0x64>
 8007266:	a101      	add	r1, pc, #4	@ (adr r1, 800726c <_scanf_float+0x9c>)
 8007268:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800726c:	080073b3 	.word	0x080073b3
 8007270:	08007235 	.word	0x08007235
 8007274:	08007235 	.word	0x08007235
 8007278:	08007235 	.word	0x08007235
 800727c:	08007413 	.word	0x08007413
 8007280:	080073eb 	.word	0x080073eb
 8007284:	08007235 	.word	0x08007235
 8007288:	08007235 	.word	0x08007235
 800728c:	080073c1 	.word	0x080073c1
 8007290:	08007235 	.word	0x08007235
 8007294:	08007235 	.word	0x08007235
 8007298:	08007235 	.word	0x08007235
 800729c:	08007235 	.word	0x08007235
 80072a0:	08007379 	.word	0x08007379
 80072a4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80072a8:	e7db      	b.n	8007262 <_scanf_float+0x92>
 80072aa:	290e      	cmp	r1, #14
 80072ac:	d8c2      	bhi.n	8007234 <_scanf_float+0x64>
 80072ae:	a001      	add	r0, pc, #4	@ (adr r0, 80072b4 <_scanf_float+0xe4>)
 80072b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80072b4:	08007369 	.word	0x08007369
 80072b8:	08007235 	.word	0x08007235
 80072bc:	08007369 	.word	0x08007369
 80072c0:	080073ff 	.word	0x080073ff
 80072c4:	08007235 	.word	0x08007235
 80072c8:	08007311 	.word	0x08007311
 80072cc:	0800734f 	.word	0x0800734f
 80072d0:	0800734f 	.word	0x0800734f
 80072d4:	0800734f 	.word	0x0800734f
 80072d8:	0800734f 	.word	0x0800734f
 80072dc:	0800734f 	.word	0x0800734f
 80072e0:	0800734f 	.word	0x0800734f
 80072e4:	0800734f 	.word	0x0800734f
 80072e8:	0800734f 	.word	0x0800734f
 80072ec:	0800734f 	.word	0x0800734f
 80072f0:	2b6e      	cmp	r3, #110	@ 0x6e
 80072f2:	d809      	bhi.n	8007308 <_scanf_float+0x138>
 80072f4:	2b60      	cmp	r3, #96	@ 0x60
 80072f6:	d8b2      	bhi.n	800725e <_scanf_float+0x8e>
 80072f8:	2b54      	cmp	r3, #84	@ 0x54
 80072fa:	d07b      	beq.n	80073f4 <_scanf_float+0x224>
 80072fc:	2b59      	cmp	r3, #89	@ 0x59
 80072fe:	d199      	bne.n	8007234 <_scanf_float+0x64>
 8007300:	2d07      	cmp	r5, #7
 8007302:	d197      	bne.n	8007234 <_scanf_float+0x64>
 8007304:	2508      	movs	r5, #8
 8007306:	e02c      	b.n	8007362 <_scanf_float+0x192>
 8007308:	2b74      	cmp	r3, #116	@ 0x74
 800730a:	d073      	beq.n	80073f4 <_scanf_float+0x224>
 800730c:	2b79      	cmp	r3, #121	@ 0x79
 800730e:	e7f6      	b.n	80072fe <_scanf_float+0x12e>
 8007310:	6821      	ldr	r1, [r4, #0]
 8007312:	05c8      	lsls	r0, r1, #23
 8007314:	d51b      	bpl.n	800734e <_scanf_float+0x17e>
 8007316:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800731a:	6021      	str	r1, [r4, #0]
 800731c:	f109 0901 	add.w	r9, r9, #1
 8007320:	f1bb 0f00 	cmp.w	fp, #0
 8007324:	d003      	beq.n	800732e <_scanf_float+0x15e>
 8007326:	3201      	adds	r2, #1
 8007328:	f10b 3bff 	add.w	fp, fp, #4294967295
 800732c:	60a2      	str	r2, [r4, #8]
 800732e:	68a3      	ldr	r3, [r4, #8]
 8007330:	3b01      	subs	r3, #1
 8007332:	60a3      	str	r3, [r4, #8]
 8007334:	6923      	ldr	r3, [r4, #16]
 8007336:	3301      	adds	r3, #1
 8007338:	6123      	str	r3, [r4, #16]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	3b01      	subs	r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	607b      	str	r3, [r7, #4]
 8007342:	f340 8087 	ble.w	8007454 <_scanf_float+0x284>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	3301      	adds	r3, #1
 800734a:	603b      	str	r3, [r7, #0]
 800734c:	e765      	b.n	800721a <_scanf_float+0x4a>
 800734e:	eb1a 0105 	adds.w	r1, sl, r5
 8007352:	f47f af6f 	bne.w	8007234 <_scanf_float+0x64>
 8007356:	6822      	ldr	r2, [r4, #0]
 8007358:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800735c:	6022      	str	r2, [r4, #0]
 800735e:	460d      	mov	r5, r1
 8007360:	468a      	mov	sl, r1
 8007362:	f806 3b01 	strb.w	r3, [r6], #1
 8007366:	e7e2      	b.n	800732e <_scanf_float+0x15e>
 8007368:	6822      	ldr	r2, [r4, #0]
 800736a:	0610      	lsls	r0, r2, #24
 800736c:	f57f af62 	bpl.w	8007234 <_scanf_float+0x64>
 8007370:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007374:	6022      	str	r2, [r4, #0]
 8007376:	e7f4      	b.n	8007362 <_scanf_float+0x192>
 8007378:	f1ba 0f00 	cmp.w	sl, #0
 800737c:	d10e      	bne.n	800739c <_scanf_float+0x1cc>
 800737e:	f1b9 0f00 	cmp.w	r9, #0
 8007382:	d10e      	bne.n	80073a2 <_scanf_float+0x1d2>
 8007384:	6822      	ldr	r2, [r4, #0]
 8007386:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800738a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800738e:	d108      	bne.n	80073a2 <_scanf_float+0x1d2>
 8007390:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007394:	6022      	str	r2, [r4, #0]
 8007396:	f04f 0a01 	mov.w	sl, #1
 800739a:	e7e2      	b.n	8007362 <_scanf_float+0x192>
 800739c:	f1ba 0f02 	cmp.w	sl, #2
 80073a0:	d055      	beq.n	800744e <_scanf_float+0x27e>
 80073a2:	2d01      	cmp	r5, #1
 80073a4:	d002      	beq.n	80073ac <_scanf_float+0x1dc>
 80073a6:	2d04      	cmp	r5, #4
 80073a8:	f47f af44 	bne.w	8007234 <_scanf_float+0x64>
 80073ac:	3501      	adds	r5, #1
 80073ae:	b2ed      	uxtb	r5, r5
 80073b0:	e7d7      	b.n	8007362 <_scanf_float+0x192>
 80073b2:	f1ba 0f01 	cmp.w	sl, #1
 80073b6:	f47f af3d 	bne.w	8007234 <_scanf_float+0x64>
 80073ba:	f04f 0a02 	mov.w	sl, #2
 80073be:	e7d0      	b.n	8007362 <_scanf_float+0x192>
 80073c0:	b97d      	cbnz	r5, 80073e2 <_scanf_float+0x212>
 80073c2:	f1b9 0f00 	cmp.w	r9, #0
 80073c6:	f47f af38 	bne.w	800723a <_scanf_float+0x6a>
 80073ca:	6822      	ldr	r2, [r4, #0]
 80073cc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80073d0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80073d4:	f040 8108 	bne.w	80075e8 <_scanf_float+0x418>
 80073d8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80073dc:	6022      	str	r2, [r4, #0]
 80073de:	2501      	movs	r5, #1
 80073e0:	e7bf      	b.n	8007362 <_scanf_float+0x192>
 80073e2:	2d03      	cmp	r5, #3
 80073e4:	d0e2      	beq.n	80073ac <_scanf_float+0x1dc>
 80073e6:	2d05      	cmp	r5, #5
 80073e8:	e7de      	b.n	80073a8 <_scanf_float+0x1d8>
 80073ea:	2d02      	cmp	r5, #2
 80073ec:	f47f af22 	bne.w	8007234 <_scanf_float+0x64>
 80073f0:	2503      	movs	r5, #3
 80073f2:	e7b6      	b.n	8007362 <_scanf_float+0x192>
 80073f4:	2d06      	cmp	r5, #6
 80073f6:	f47f af1d 	bne.w	8007234 <_scanf_float+0x64>
 80073fa:	2507      	movs	r5, #7
 80073fc:	e7b1      	b.n	8007362 <_scanf_float+0x192>
 80073fe:	6822      	ldr	r2, [r4, #0]
 8007400:	0591      	lsls	r1, r2, #22
 8007402:	f57f af17 	bpl.w	8007234 <_scanf_float+0x64>
 8007406:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800740a:	6022      	str	r2, [r4, #0]
 800740c:	f8cd 9008 	str.w	r9, [sp, #8]
 8007410:	e7a7      	b.n	8007362 <_scanf_float+0x192>
 8007412:	6822      	ldr	r2, [r4, #0]
 8007414:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007418:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800741c:	d006      	beq.n	800742c <_scanf_float+0x25c>
 800741e:	0550      	lsls	r0, r2, #21
 8007420:	f57f af08 	bpl.w	8007234 <_scanf_float+0x64>
 8007424:	f1b9 0f00 	cmp.w	r9, #0
 8007428:	f000 80de 	beq.w	80075e8 <_scanf_float+0x418>
 800742c:	0591      	lsls	r1, r2, #22
 800742e:	bf58      	it	pl
 8007430:	9902      	ldrpl	r1, [sp, #8]
 8007432:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007436:	bf58      	it	pl
 8007438:	eba9 0101 	subpl.w	r1, r9, r1
 800743c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007440:	bf58      	it	pl
 8007442:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007446:	6022      	str	r2, [r4, #0]
 8007448:	f04f 0900 	mov.w	r9, #0
 800744c:	e789      	b.n	8007362 <_scanf_float+0x192>
 800744e:	f04f 0a03 	mov.w	sl, #3
 8007452:	e786      	b.n	8007362 <_scanf_float+0x192>
 8007454:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007458:	4639      	mov	r1, r7
 800745a:	4640      	mov	r0, r8
 800745c:	4798      	blx	r3
 800745e:	2800      	cmp	r0, #0
 8007460:	f43f aedb 	beq.w	800721a <_scanf_float+0x4a>
 8007464:	e6e6      	b.n	8007234 <_scanf_float+0x64>
 8007466:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800746a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800746e:	463a      	mov	r2, r7
 8007470:	4640      	mov	r0, r8
 8007472:	4798      	blx	r3
 8007474:	6923      	ldr	r3, [r4, #16]
 8007476:	3b01      	subs	r3, #1
 8007478:	6123      	str	r3, [r4, #16]
 800747a:	e6e8      	b.n	800724e <_scanf_float+0x7e>
 800747c:	1e6b      	subs	r3, r5, #1
 800747e:	2b06      	cmp	r3, #6
 8007480:	d824      	bhi.n	80074cc <_scanf_float+0x2fc>
 8007482:	2d02      	cmp	r5, #2
 8007484:	d836      	bhi.n	80074f4 <_scanf_float+0x324>
 8007486:	9b01      	ldr	r3, [sp, #4]
 8007488:	429e      	cmp	r6, r3
 800748a:	f67f aee4 	bls.w	8007256 <_scanf_float+0x86>
 800748e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007492:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007496:	463a      	mov	r2, r7
 8007498:	4640      	mov	r0, r8
 800749a:	4798      	blx	r3
 800749c:	6923      	ldr	r3, [r4, #16]
 800749e:	3b01      	subs	r3, #1
 80074a0:	6123      	str	r3, [r4, #16]
 80074a2:	e7f0      	b.n	8007486 <_scanf_float+0x2b6>
 80074a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074a8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80074ac:	463a      	mov	r2, r7
 80074ae:	4640      	mov	r0, r8
 80074b0:	4798      	blx	r3
 80074b2:	6923      	ldr	r3, [r4, #16]
 80074b4:	3b01      	subs	r3, #1
 80074b6:	6123      	str	r3, [r4, #16]
 80074b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074bc:	fa5f fa8a 	uxtb.w	sl, sl
 80074c0:	f1ba 0f02 	cmp.w	sl, #2
 80074c4:	d1ee      	bne.n	80074a4 <_scanf_float+0x2d4>
 80074c6:	3d03      	subs	r5, #3
 80074c8:	b2ed      	uxtb	r5, r5
 80074ca:	1b76      	subs	r6, r6, r5
 80074cc:	6823      	ldr	r3, [r4, #0]
 80074ce:	05da      	lsls	r2, r3, #23
 80074d0:	d530      	bpl.n	8007534 <_scanf_float+0x364>
 80074d2:	055b      	lsls	r3, r3, #21
 80074d4:	d511      	bpl.n	80074fa <_scanf_float+0x32a>
 80074d6:	9b01      	ldr	r3, [sp, #4]
 80074d8:	429e      	cmp	r6, r3
 80074da:	f67f aebc 	bls.w	8007256 <_scanf_float+0x86>
 80074de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80074e6:	463a      	mov	r2, r7
 80074e8:	4640      	mov	r0, r8
 80074ea:	4798      	blx	r3
 80074ec:	6923      	ldr	r3, [r4, #16]
 80074ee:	3b01      	subs	r3, #1
 80074f0:	6123      	str	r3, [r4, #16]
 80074f2:	e7f0      	b.n	80074d6 <_scanf_float+0x306>
 80074f4:	46aa      	mov	sl, r5
 80074f6:	46b3      	mov	fp, r6
 80074f8:	e7de      	b.n	80074b8 <_scanf_float+0x2e8>
 80074fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80074fe:	6923      	ldr	r3, [r4, #16]
 8007500:	2965      	cmp	r1, #101	@ 0x65
 8007502:	f103 33ff 	add.w	r3, r3, #4294967295
 8007506:	f106 35ff 	add.w	r5, r6, #4294967295
 800750a:	6123      	str	r3, [r4, #16]
 800750c:	d00c      	beq.n	8007528 <_scanf_float+0x358>
 800750e:	2945      	cmp	r1, #69	@ 0x45
 8007510:	d00a      	beq.n	8007528 <_scanf_float+0x358>
 8007512:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007516:	463a      	mov	r2, r7
 8007518:	4640      	mov	r0, r8
 800751a:	4798      	blx	r3
 800751c:	6923      	ldr	r3, [r4, #16]
 800751e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007522:	3b01      	subs	r3, #1
 8007524:	1eb5      	subs	r5, r6, #2
 8007526:	6123      	str	r3, [r4, #16]
 8007528:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800752c:	463a      	mov	r2, r7
 800752e:	4640      	mov	r0, r8
 8007530:	4798      	blx	r3
 8007532:	462e      	mov	r6, r5
 8007534:	6822      	ldr	r2, [r4, #0]
 8007536:	f012 0210 	ands.w	r2, r2, #16
 800753a:	d001      	beq.n	8007540 <_scanf_float+0x370>
 800753c:	2000      	movs	r0, #0
 800753e:	e68b      	b.n	8007258 <_scanf_float+0x88>
 8007540:	7032      	strb	r2, [r6, #0]
 8007542:	6823      	ldr	r3, [r4, #0]
 8007544:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007548:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800754c:	d11c      	bne.n	8007588 <_scanf_float+0x3b8>
 800754e:	9b02      	ldr	r3, [sp, #8]
 8007550:	454b      	cmp	r3, r9
 8007552:	eba3 0209 	sub.w	r2, r3, r9
 8007556:	d123      	bne.n	80075a0 <_scanf_float+0x3d0>
 8007558:	9901      	ldr	r1, [sp, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	4640      	mov	r0, r8
 800755e:	f002 fc07 	bl	8009d70 <_strtod_r>
 8007562:	9b03      	ldr	r3, [sp, #12]
 8007564:	6821      	ldr	r1, [r4, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f011 0f02 	tst.w	r1, #2
 800756c:	ec57 6b10 	vmov	r6, r7, d0
 8007570:	f103 0204 	add.w	r2, r3, #4
 8007574:	d01f      	beq.n	80075b6 <_scanf_float+0x3e6>
 8007576:	9903      	ldr	r1, [sp, #12]
 8007578:	600a      	str	r2, [r1, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	e9c3 6700 	strd	r6, r7, [r3]
 8007580:	68e3      	ldr	r3, [r4, #12]
 8007582:	3301      	adds	r3, #1
 8007584:	60e3      	str	r3, [r4, #12]
 8007586:	e7d9      	b.n	800753c <_scanf_float+0x36c>
 8007588:	9b04      	ldr	r3, [sp, #16]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d0e4      	beq.n	8007558 <_scanf_float+0x388>
 800758e:	9905      	ldr	r1, [sp, #20]
 8007590:	230a      	movs	r3, #10
 8007592:	3101      	adds	r1, #1
 8007594:	4640      	mov	r0, r8
 8007596:	f002 fc6b 	bl	8009e70 <_strtol_r>
 800759a:	9b04      	ldr	r3, [sp, #16]
 800759c:	9e05      	ldr	r6, [sp, #20]
 800759e:	1ac2      	subs	r2, r0, r3
 80075a0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80075a4:	429e      	cmp	r6, r3
 80075a6:	bf28      	it	cs
 80075a8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80075ac:	4910      	ldr	r1, [pc, #64]	@ (80075f0 <_scanf_float+0x420>)
 80075ae:	4630      	mov	r0, r6
 80075b0:	f000 f8e4 	bl	800777c <siprintf>
 80075b4:	e7d0      	b.n	8007558 <_scanf_float+0x388>
 80075b6:	f011 0f04 	tst.w	r1, #4
 80075ba:	9903      	ldr	r1, [sp, #12]
 80075bc:	600a      	str	r2, [r1, #0]
 80075be:	d1dc      	bne.n	800757a <_scanf_float+0x3aa>
 80075c0:	681d      	ldr	r5, [r3, #0]
 80075c2:	4632      	mov	r2, r6
 80075c4:	463b      	mov	r3, r7
 80075c6:	4630      	mov	r0, r6
 80075c8:	4639      	mov	r1, r7
 80075ca:	f7f9 faaf 	bl	8000b2c <__aeabi_dcmpun>
 80075ce:	b128      	cbz	r0, 80075dc <_scanf_float+0x40c>
 80075d0:	4808      	ldr	r0, [pc, #32]	@ (80075f4 <_scanf_float+0x424>)
 80075d2:	f000 f9c5 	bl	8007960 <nanf>
 80075d6:	ed85 0a00 	vstr	s0, [r5]
 80075da:	e7d1      	b.n	8007580 <_scanf_float+0x3b0>
 80075dc:	4630      	mov	r0, r6
 80075de:	4639      	mov	r1, r7
 80075e0:	f7f9 fb02 	bl	8000be8 <__aeabi_d2f>
 80075e4:	6028      	str	r0, [r5, #0]
 80075e6:	e7cb      	b.n	8007580 <_scanf_float+0x3b0>
 80075e8:	f04f 0900 	mov.w	r9, #0
 80075ec:	e629      	b.n	8007242 <_scanf_float+0x72>
 80075ee:	bf00      	nop
 80075f0:	0800b07c 	.word	0x0800b07c
 80075f4:	0800b415 	.word	0x0800b415

080075f8 <std>:
 80075f8:	2300      	movs	r3, #0
 80075fa:	b510      	push	{r4, lr}
 80075fc:	4604      	mov	r4, r0
 80075fe:	e9c0 3300 	strd	r3, r3, [r0]
 8007602:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007606:	6083      	str	r3, [r0, #8]
 8007608:	8181      	strh	r1, [r0, #12]
 800760a:	6643      	str	r3, [r0, #100]	@ 0x64
 800760c:	81c2      	strh	r2, [r0, #14]
 800760e:	6183      	str	r3, [r0, #24]
 8007610:	4619      	mov	r1, r3
 8007612:	2208      	movs	r2, #8
 8007614:	305c      	adds	r0, #92	@ 0x5c
 8007616:	f000 f914 	bl	8007842 <memset>
 800761a:	4b0d      	ldr	r3, [pc, #52]	@ (8007650 <std+0x58>)
 800761c:	6263      	str	r3, [r4, #36]	@ 0x24
 800761e:	4b0d      	ldr	r3, [pc, #52]	@ (8007654 <std+0x5c>)
 8007620:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007622:	4b0d      	ldr	r3, [pc, #52]	@ (8007658 <std+0x60>)
 8007624:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007626:	4b0d      	ldr	r3, [pc, #52]	@ (800765c <std+0x64>)
 8007628:	6323      	str	r3, [r4, #48]	@ 0x30
 800762a:	4b0d      	ldr	r3, [pc, #52]	@ (8007660 <std+0x68>)
 800762c:	6224      	str	r4, [r4, #32]
 800762e:	429c      	cmp	r4, r3
 8007630:	d006      	beq.n	8007640 <std+0x48>
 8007632:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007636:	4294      	cmp	r4, r2
 8007638:	d002      	beq.n	8007640 <std+0x48>
 800763a:	33d0      	adds	r3, #208	@ 0xd0
 800763c:	429c      	cmp	r4, r3
 800763e:	d105      	bne.n	800764c <std+0x54>
 8007640:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007648:	f000 b978 	b.w	800793c <__retarget_lock_init_recursive>
 800764c:	bd10      	pop	{r4, pc}
 800764e:	bf00      	nop
 8007650:	080077bd 	.word	0x080077bd
 8007654:	080077df 	.word	0x080077df
 8007658:	08007817 	.word	0x08007817
 800765c:	0800783b 	.word	0x0800783b
 8007660:	200008e8 	.word	0x200008e8

08007664 <stdio_exit_handler>:
 8007664:	4a02      	ldr	r2, [pc, #8]	@ (8007670 <stdio_exit_handler+0xc>)
 8007666:	4903      	ldr	r1, [pc, #12]	@ (8007674 <stdio_exit_handler+0x10>)
 8007668:	4803      	ldr	r0, [pc, #12]	@ (8007678 <stdio_exit_handler+0x14>)
 800766a:	f000 b869 	b.w	8007740 <_fwalk_sglue>
 800766e:	bf00      	nop
 8007670:	20000208 	.word	0x20000208
 8007674:	0800a22d 	.word	0x0800a22d
 8007678:	20000218 	.word	0x20000218

0800767c <cleanup_stdio>:
 800767c:	6841      	ldr	r1, [r0, #4]
 800767e:	4b0c      	ldr	r3, [pc, #48]	@ (80076b0 <cleanup_stdio+0x34>)
 8007680:	4299      	cmp	r1, r3
 8007682:	b510      	push	{r4, lr}
 8007684:	4604      	mov	r4, r0
 8007686:	d001      	beq.n	800768c <cleanup_stdio+0x10>
 8007688:	f002 fdd0 	bl	800a22c <_fflush_r>
 800768c:	68a1      	ldr	r1, [r4, #8]
 800768e:	4b09      	ldr	r3, [pc, #36]	@ (80076b4 <cleanup_stdio+0x38>)
 8007690:	4299      	cmp	r1, r3
 8007692:	d002      	beq.n	800769a <cleanup_stdio+0x1e>
 8007694:	4620      	mov	r0, r4
 8007696:	f002 fdc9 	bl	800a22c <_fflush_r>
 800769a:	68e1      	ldr	r1, [r4, #12]
 800769c:	4b06      	ldr	r3, [pc, #24]	@ (80076b8 <cleanup_stdio+0x3c>)
 800769e:	4299      	cmp	r1, r3
 80076a0:	d004      	beq.n	80076ac <cleanup_stdio+0x30>
 80076a2:	4620      	mov	r0, r4
 80076a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076a8:	f002 bdc0 	b.w	800a22c <_fflush_r>
 80076ac:	bd10      	pop	{r4, pc}
 80076ae:	bf00      	nop
 80076b0:	200008e8 	.word	0x200008e8
 80076b4:	20000950 	.word	0x20000950
 80076b8:	200009b8 	.word	0x200009b8

080076bc <global_stdio_init.part.0>:
 80076bc:	b510      	push	{r4, lr}
 80076be:	4b0b      	ldr	r3, [pc, #44]	@ (80076ec <global_stdio_init.part.0+0x30>)
 80076c0:	4c0b      	ldr	r4, [pc, #44]	@ (80076f0 <global_stdio_init.part.0+0x34>)
 80076c2:	4a0c      	ldr	r2, [pc, #48]	@ (80076f4 <global_stdio_init.part.0+0x38>)
 80076c4:	601a      	str	r2, [r3, #0]
 80076c6:	4620      	mov	r0, r4
 80076c8:	2200      	movs	r2, #0
 80076ca:	2104      	movs	r1, #4
 80076cc:	f7ff ff94 	bl	80075f8 <std>
 80076d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80076d4:	2201      	movs	r2, #1
 80076d6:	2109      	movs	r1, #9
 80076d8:	f7ff ff8e 	bl	80075f8 <std>
 80076dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80076e0:	2202      	movs	r2, #2
 80076e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076e6:	2112      	movs	r1, #18
 80076e8:	f7ff bf86 	b.w	80075f8 <std>
 80076ec:	20000a20 	.word	0x20000a20
 80076f0:	200008e8 	.word	0x200008e8
 80076f4:	08007665 	.word	0x08007665

080076f8 <__sfp_lock_acquire>:
 80076f8:	4801      	ldr	r0, [pc, #4]	@ (8007700 <__sfp_lock_acquire+0x8>)
 80076fa:	f000 b920 	b.w	800793e <__retarget_lock_acquire_recursive>
 80076fe:	bf00      	nop
 8007700:	20000a29 	.word	0x20000a29

08007704 <__sfp_lock_release>:
 8007704:	4801      	ldr	r0, [pc, #4]	@ (800770c <__sfp_lock_release+0x8>)
 8007706:	f000 b91b 	b.w	8007940 <__retarget_lock_release_recursive>
 800770a:	bf00      	nop
 800770c:	20000a29 	.word	0x20000a29

08007710 <__sinit>:
 8007710:	b510      	push	{r4, lr}
 8007712:	4604      	mov	r4, r0
 8007714:	f7ff fff0 	bl	80076f8 <__sfp_lock_acquire>
 8007718:	6a23      	ldr	r3, [r4, #32]
 800771a:	b11b      	cbz	r3, 8007724 <__sinit+0x14>
 800771c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007720:	f7ff bff0 	b.w	8007704 <__sfp_lock_release>
 8007724:	4b04      	ldr	r3, [pc, #16]	@ (8007738 <__sinit+0x28>)
 8007726:	6223      	str	r3, [r4, #32]
 8007728:	4b04      	ldr	r3, [pc, #16]	@ (800773c <__sinit+0x2c>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1f5      	bne.n	800771c <__sinit+0xc>
 8007730:	f7ff ffc4 	bl	80076bc <global_stdio_init.part.0>
 8007734:	e7f2      	b.n	800771c <__sinit+0xc>
 8007736:	bf00      	nop
 8007738:	0800767d 	.word	0x0800767d
 800773c:	20000a20 	.word	0x20000a20

08007740 <_fwalk_sglue>:
 8007740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007744:	4607      	mov	r7, r0
 8007746:	4688      	mov	r8, r1
 8007748:	4614      	mov	r4, r2
 800774a:	2600      	movs	r6, #0
 800774c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007750:	f1b9 0901 	subs.w	r9, r9, #1
 8007754:	d505      	bpl.n	8007762 <_fwalk_sglue+0x22>
 8007756:	6824      	ldr	r4, [r4, #0]
 8007758:	2c00      	cmp	r4, #0
 800775a:	d1f7      	bne.n	800774c <_fwalk_sglue+0xc>
 800775c:	4630      	mov	r0, r6
 800775e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007762:	89ab      	ldrh	r3, [r5, #12]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d907      	bls.n	8007778 <_fwalk_sglue+0x38>
 8007768:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800776c:	3301      	adds	r3, #1
 800776e:	d003      	beq.n	8007778 <_fwalk_sglue+0x38>
 8007770:	4629      	mov	r1, r5
 8007772:	4638      	mov	r0, r7
 8007774:	47c0      	blx	r8
 8007776:	4306      	orrs	r6, r0
 8007778:	3568      	adds	r5, #104	@ 0x68
 800777a:	e7e9      	b.n	8007750 <_fwalk_sglue+0x10>

0800777c <siprintf>:
 800777c:	b40e      	push	{r1, r2, r3}
 800777e:	b500      	push	{lr}
 8007780:	b09c      	sub	sp, #112	@ 0x70
 8007782:	ab1d      	add	r3, sp, #116	@ 0x74
 8007784:	9002      	str	r0, [sp, #8]
 8007786:	9006      	str	r0, [sp, #24]
 8007788:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800778c:	4809      	ldr	r0, [pc, #36]	@ (80077b4 <siprintf+0x38>)
 800778e:	9107      	str	r1, [sp, #28]
 8007790:	9104      	str	r1, [sp, #16]
 8007792:	4909      	ldr	r1, [pc, #36]	@ (80077b8 <siprintf+0x3c>)
 8007794:	f853 2b04 	ldr.w	r2, [r3], #4
 8007798:	9105      	str	r1, [sp, #20]
 800779a:	6800      	ldr	r0, [r0, #0]
 800779c:	9301      	str	r3, [sp, #4]
 800779e:	a902      	add	r1, sp, #8
 80077a0:	f002 fbc4 	bl	8009f2c <_svfiprintf_r>
 80077a4:	9b02      	ldr	r3, [sp, #8]
 80077a6:	2200      	movs	r2, #0
 80077a8:	701a      	strb	r2, [r3, #0]
 80077aa:	b01c      	add	sp, #112	@ 0x70
 80077ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80077b0:	b003      	add	sp, #12
 80077b2:	4770      	bx	lr
 80077b4:	20000214 	.word	0x20000214
 80077b8:	ffff0208 	.word	0xffff0208

080077bc <__sread>:
 80077bc:	b510      	push	{r4, lr}
 80077be:	460c      	mov	r4, r1
 80077c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077c4:	f000 f86c 	bl	80078a0 <_read_r>
 80077c8:	2800      	cmp	r0, #0
 80077ca:	bfab      	itete	ge
 80077cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80077ce:	89a3      	ldrhlt	r3, [r4, #12]
 80077d0:	181b      	addge	r3, r3, r0
 80077d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80077d6:	bfac      	ite	ge
 80077d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80077da:	81a3      	strhlt	r3, [r4, #12]
 80077dc:	bd10      	pop	{r4, pc}

080077de <__swrite>:
 80077de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077e2:	461f      	mov	r7, r3
 80077e4:	898b      	ldrh	r3, [r1, #12]
 80077e6:	05db      	lsls	r3, r3, #23
 80077e8:	4605      	mov	r5, r0
 80077ea:	460c      	mov	r4, r1
 80077ec:	4616      	mov	r6, r2
 80077ee:	d505      	bpl.n	80077fc <__swrite+0x1e>
 80077f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077f4:	2302      	movs	r3, #2
 80077f6:	2200      	movs	r2, #0
 80077f8:	f000 f840 	bl	800787c <_lseek_r>
 80077fc:	89a3      	ldrh	r3, [r4, #12]
 80077fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007802:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007806:	81a3      	strh	r3, [r4, #12]
 8007808:	4632      	mov	r2, r6
 800780a:	463b      	mov	r3, r7
 800780c:	4628      	mov	r0, r5
 800780e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007812:	f000 b857 	b.w	80078c4 <_write_r>

08007816 <__sseek>:
 8007816:	b510      	push	{r4, lr}
 8007818:	460c      	mov	r4, r1
 800781a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800781e:	f000 f82d 	bl	800787c <_lseek_r>
 8007822:	1c43      	adds	r3, r0, #1
 8007824:	89a3      	ldrh	r3, [r4, #12]
 8007826:	bf15      	itete	ne
 8007828:	6560      	strne	r0, [r4, #84]	@ 0x54
 800782a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800782e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007832:	81a3      	strheq	r3, [r4, #12]
 8007834:	bf18      	it	ne
 8007836:	81a3      	strhne	r3, [r4, #12]
 8007838:	bd10      	pop	{r4, pc}

0800783a <__sclose>:
 800783a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800783e:	f000 b80d 	b.w	800785c <_close_r>

08007842 <memset>:
 8007842:	4402      	add	r2, r0
 8007844:	4603      	mov	r3, r0
 8007846:	4293      	cmp	r3, r2
 8007848:	d100      	bne.n	800784c <memset+0xa>
 800784a:	4770      	bx	lr
 800784c:	f803 1b01 	strb.w	r1, [r3], #1
 8007850:	e7f9      	b.n	8007846 <memset+0x4>
	...

08007854 <_localeconv_r>:
 8007854:	4800      	ldr	r0, [pc, #0]	@ (8007858 <_localeconv_r+0x4>)
 8007856:	4770      	bx	lr
 8007858:	20000354 	.word	0x20000354

0800785c <_close_r>:
 800785c:	b538      	push	{r3, r4, r5, lr}
 800785e:	4d06      	ldr	r5, [pc, #24]	@ (8007878 <_close_r+0x1c>)
 8007860:	2300      	movs	r3, #0
 8007862:	4604      	mov	r4, r0
 8007864:	4608      	mov	r0, r1
 8007866:	602b      	str	r3, [r5, #0]
 8007868:	f7fa f842 	bl	80018f0 <_close>
 800786c:	1c43      	adds	r3, r0, #1
 800786e:	d102      	bne.n	8007876 <_close_r+0x1a>
 8007870:	682b      	ldr	r3, [r5, #0]
 8007872:	b103      	cbz	r3, 8007876 <_close_r+0x1a>
 8007874:	6023      	str	r3, [r4, #0]
 8007876:	bd38      	pop	{r3, r4, r5, pc}
 8007878:	20000a24 	.word	0x20000a24

0800787c <_lseek_r>:
 800787c:	b538      	push	{r3, r4, r5, lr}
 800787e:	4d07      	ldr	r5, [pc, #28]	@ (800789c <_lseek_r+0x20>)
 8007880:	4604      	mov	r4, r0
 8007882:	4608      	mov	r0, r1
 8007884:	4611      	mov	r1, r2
 8007886:	2200      	movs	r2, #0
 8007888:	602a      	str	r2, [r5, #0]
 800788a:	461a      	mov	r2, r3
 800788c:	f7fa f857 	bl	800193e <_lseek>
 8007890:	1c43      	adds	r3, r0, #1
 8007892:	d102      	bne.n	800789a <_lseek_r+0x1e>
 8007894:	682b      	ldr	r3, [r5, #0]
 8007896:	b103      	cbz	r3, 800789a <_lseek_r+0x1e>
 8007898:	6023      	str	r3, [r4, #0]
 800789a:	bd38      	pop	{r3, r4, r5, pc}
 800789c:	20000a24 	.word	0x20000a24

080078a0 <_read_r>:
 80078a0:	b538      	push	{r3, r4, r5, lr}
 80078a2:	4d07      	ldr	r5, [pc, #28]	@ (80078c0 <_read_r+0x20>)
 80078a4:	4604      	mov	r4, r0
 80078a6:	4608      	mov	r0, r1
 80078a8:	4611      	mov	r1, r2
 80078aa:	2200      	movs	r2, #0
 80078ac:	602a      	str	r2, [r5, #0]
 80078ae:	461a      	mov	r2, r3
 80078b0:	f7f9 ffe5 	bl	800187e <_read>
 80078b4:	1c43      	adds	r3, r0, #1
 80078b6:	d102      	bne.n	80078be <_read_r+0x1e>
 80078b8:	682b      	ldr	r3, [r5, #0]
 80078ba:	b103      	cbz	r3, 80078be <_read_r+0x1e>
 80078bc:	6023      	str	r3, [r4, #0]
 80078be:	bd38      	pop	{r3, r4, r5, pc}
 80078c0:	20000a24 	.word	0x20000a24

080078c4 <_write_r>:
 80078c4:	b538      	push	{r3, r4, r5, lr}
 80078c6:	4d07      	ldr	r5, [pc, #28]	@ (80078e4 <_write_r+0x20>)
 80078c8:	4604      	mov	r4, r0
 80078ca:	4608      	mov	r0, r1
 80078cc:	4611      	mov	r1, r2
 80078ce:	2200      	movs	r2, #0
 80078d0:	602a      	str	r2, [r5, #0]
 80078d2:	461a      	mov	r2, r3
 80078d4:	f7f9 fff0 	bl	80018b8 <_write>
 80078d8:	1c43      	adds	r3, r0, #1
 80078da:	d102      	bne.n	80078e2 <_write_r+0x1e>
 80078dc:	682b      	ldr	r3, [r5, #0]
 80078de:	b103      	cbz	r3, 80078e2 <_write_r+0x1e>
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	bd38      	pop	{r3, r4, r5, pc}
 80078e4:	20000a24 	.word	0x20000a24

080078e8 <__errno>:
 80078e8:	4b01      	ldr	r3, [pc, #4]	@ (80078f0 <__errno+0x8>)
 80078ea:	6818      	ldr	r0, [r3, #0]
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	20000214 	.word	0x20000214

080078f4 <__libc_init_array>:
 80078f4:	b570      	push	{r4, r5, r6, lr}
 80078f6:	4d0d      	ldr	r5, [pc, #52]	@ (800792c <__libc_init_array+0x38>)
 80078f8:	4c0d      	ldr	r4, [pc, #52]	@ (8007930 <__libc_init_array+0x3c>)
 80078fa:	1b64      	subs	r4, r4, r5
 80078fc:	10a4      	asrs	r4, r4, #2
 80078fe:	2600      	movs	r6, #0
 8007900:	42a6      	cmp	r6, r4
 8007902:	d109      	bne.n	8007918 <__libc_init_array+0x24>
 8007904:	4d0b      	ldr	r5, [pc, #44]	@ (8007934 <__libc_init_array+0x40>)
 8007906:	4c0c      	ldr	r4, [pc, #48]	@ (8007938 <__libc_init_array+0x44>)
 8007908:	f003 fb74 	bl	800aff4 <_init>
 800790c:	1b64      	subs	r4, r4, r5
 800790e:	10a4      	asrs	r4, r4, #2
 8007910:	2600      	movs	r6, #0
 8007912:	42a6      	cmp	r6, r4
 8007914:	d105      	bne.n	8007922 <__libc_init_array+0x2e>
 8007916:	bd70      	pop	{r4, r5, r6, pc}
 8007918:	f855 3b04 	ldr.w	r3, [r5], #4
 800791c:	4798      	blx	r3
 800791e:	3601      	adds	r6, #1
 8007920:	e7ee      	b.n	8007900 <__libc_init_array+0xc>
 8007922:	f855 3b04 	ldr.w	r3, [r5], #4
 8007926:	4798      	blx	r3
 8007928:	3601      	adds	r6, #1
 800792a:	e7f2      	b.n	8007912 <__libc_init_array+0x1e>
 800792c:	0800b480 	.word	0x0800b480
 8007930:	0800b480 	.word	0x0800b480
 8007934:	0800b480 	.word	0x0800b480
 8007938:	0800b484 	.word	0x0800b484

0800793c <__retarget_lock_init_recursive>:
 800793c:	4770      	bx	lr

0800793e <__retarget_lock_acquire_recursive>:
 800793e:	4770      	bx	lr

08007940 <__retarget_lock_release_recursive>:
 8007940:	4770      	bx	lr

08007942 <memcpy>:
 8007942:	440a      	add	r2, r1
 8007944:	4291      	cmp	r1, r2
 8007946:	f100 33ff 	add.w	r3, r0, #4294967295
 800794a:	d100      	bne.n	800794e <memcpy+0xc>
 800794c:	4770      	bx	lr
 800794e:	b510      	push	{r4, lr}
 8007950:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007954:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007958:	4291      	cmp	r1, r2
 800795a:	d1f9      	bne.n	8007950 <memcpy+0xe>
 800795c:	bd10      	pop	{r4, pc}
	...

08007960 <nanf>:
 8007960:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007968 <nanf+0x8>
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	7fc00000 	.word	0x7fc00000

0800796c <quorem>:
 800796c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007970:	6903      	ldr	r3, [r0, #16]
 8007972:	690c      	ldr	r4, [r1, #16]
 8007974:	42a3      	cmp	r3, r4
 8007976:	4607      	mov	r7, r0
 8007978:	db7e      	blt.n	8007a78 <quorem+0x10c>
 800797a:	3c01      	subs	r4, #1
 800797c:	f101 0814 	add.w	r8, r1, #20
 8007980:	00a3      	lsls	r3, r4, #2
 8007982:	f100 0514 	add.w	r5, r0, #20
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800798c:	9301      	str	r3, [sp, #4]
 800798e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007992:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007996:	3301      	adds	r3, #1
 8007998:	429a      	cmp	r2, r3
 800799a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800799e:	fbb2 f6f3 	udiv	r6, r2, r3
 80079a2:	d32e      	bcc.n	8007a02 <quorem+0x96>
 80079a4:	f04f 0a00 	mov.w	sl, #0
 80079a8:	46c4      	mov	ip, r8
 80079aa:	46ae      	mov	lr, r5
 80079ac:	46d3      	mov	fp, sl
 80079ae:	f85c 3b04 	ldr.w	r3, [ip], #4
 80079b2:	b298      	uxth	r0, r3
 80079b4:	fb06 a000 	mla	r0, r6, r0, sl
 80079b8:	0c02      	lsrs	r2, r0, #16
 80079ba:	0c1b      	lsrs	r3, r3, #16
 80079bc:	fb06 2303 	mla	r3, r6, r3, r2
 80079c0:	f8de 2000 	ldr.w	r2, [lr]
 80079c4:	b280      	uxth	r0, r0
 80079c6:	b292      	uxth	r2, r2
 80079c8:	1a12      	subs	r2, r2, r0
 80079ca:	445a      	add	r2, fp
 80079cc:	f8de 0000 	ldr.w	r0, [lr]
 80079d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80079da:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80079de:	b292      	uxth	r2, r2
 80079e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80079e4:	45e1      	cmp	r9, ip
 80079e6:	f84e 2b04 	str.w	r2, [lr], #4
 80079ea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80079ee:	d2de      	bcs.n	80079ae <quorem+0x42>
 80079f0:	9b00      	ldr	r3, [sp, #0]
 80079f2:	58eb      	ldr	r3, [r5, r3]
 80079f4:	b92b      	cbnz	r3, 8007a02 <quorem+0x96>
 80079f6:	9b01      	ldr	r3, [sp, #4]
 80079f8:	3b04      	subs	r3, #4
 80079fa:	429d      	cmp	r5, r3
 80079fc:	461a      	mov	r2, r3
 80079fe:	d32f      	bcc.n	8007a60 <quorem+0xf4>
 8007a00:	613c      	str	r4, [r7, #16]
 8007a02:	4638      	mov	r0, r7
 8007a04:	f001 f9c4 	bl	8008d90 <__mcmp>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	db25      	blt.n	8007a58 <quorem+0xec>
 8007a0c:	4629      	mov	r1, r5
 8007a0e:	2000      	movs	r0, #0
 8007a10:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a14:	f8d1 c000 	ldr.w	ip, [r1]
 8007a18:	fa1f fe82 	uxth.w	lr, r2
 8007a1c:	fa1f f38c 	uxth.w	r3, ip
 8007a20:	eba3 030e 	sub.w	r3, r3, lr
 8007a24:	4403      	add	r3, r0
 8007a26:	0c12      	lsrs	r2, r2, #16
 8007a28:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007a2c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a36:	45c1      	cmp	r9, r8
 8007a38:	f841 3b04 	str.w	r3, [r1], #4
 8007a3c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a40:	d2e6      	bcs.n	8007a10 <quorem+0xa4>
 8007a42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a4a:	b922      	cbnz	r2, 8007a56 <quorem+0xea>
 8007a4c:	3b04      	subs	r3, #4
 8007a4e:	429d      	cmp	r5, r3
 8007a50:	461a      	mov	r2, r3
 8007a52:	d30b      	bcc.n	8007a6c <quorem+0x100>
 8007a54:	613c      	str	r4, [r7, #16]
 8007a56:	3601      	adds	r6, #1
 8007a58:	4630      	mov	r0, r6
 8007a5a:	b003      	add	sp, #12
 8007a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a60:	6812      	ldr	r2, [r2, #0]
 8007a62:	3b04      	subs	r3, #4
 8007a64:	2a00      	cmp	r2, #0
 8007a66:	d1cb      	bne.n	8007a00 <quorem+0x94>
 8007a68:	3c01      	subs	r4, #1
 8007a6a:	e7c6      	b.n	80079fa <quorem+0x8e>
 8007a6c:	6812      	ldr	r2, [r2, #0]
 8007a6e:	3b04      	subs	r3, #4
 8007a70:	2a00      	cmp	r2, #0
 8007a72:	d1ef      	bne.n	8007a54 <quorem+0xe8>
 8007a74:	3c01      	subs	r4, #1
 8007a76:	e7ea      	b.n	8007a4e <quorem+0xe2>
 8007a78:	2000      	movs	r0, #0
 8007a7a:	e7ee      	b.n	8007a5a <quorem+0xee>
 8007a7c:	0000      	movs	r0, r0
	...

08007a80 <_dtoa_r>:
 8007a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a84:	69c7      	ldr	r7, [r0, #28]
 8007a86:	b099      	sub	sp, #100	@ 0x64
 8007a88:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007a8c:	ec55 4b10 	vmov	r4, r5, d0
 8007a90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007a92:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a94:	4683      	mov	fp, r0
 8007a96:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007a9a:	b97f      	cbnz	r7, 8007abc <_dtoa_r+0x3c>
 8007a9c:	2010      	movs	r0, #16
 8007a9e:	f000 fdfd 	bl	800869c <malloc>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	f8cb 001c 	str.w	r0, [fp, #28]
 8007aa8:	b920      	cbnz	r0, 8007ab4 <_dtoa_r+0x34>
 8007aaa:	4ba7      	ldr	r3, [pc, #668]	@ (8007d48 <_dtoa_r+0x2c8>)
 8007aac:	21ef      	movs	r1, #239	@ 0xef
 8007aae:	48a7      	ldr	r0, [pc, #668]	@ (8007d4c <_dtoa_r+0x2cc>)
 8007ab0:	f002 fc2a 	bl	800a308 <__assert_func>
 8007ab4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007ab8:	6007      	str	r7, [r0, #0]
 8007aba:	60c7      	str	r7, [r0, #12]
 8007abc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ac0:	6819      	ldr	r1, [r3, #0]
 8007ac2:	b159      	cbz	r1, 8007adc <_dtoa_r+0x5c>
 8007ac4:	685a      	ldr	r2, [r3, #4]
 8007ac6:	604a      	str	r2, [r1, #4]
 8007ac8:	2301      	movs	r3, #1
 8007aca:	4093      	lsls	r3, r2
 8007acc:	608b      	str	r3, [r1, #8]
 8007ace:	4658      	mov	r0, fp
 8007ad0:	f000 feda 	bl	8008888 <_Bfree>
 8007ad4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]
 8007adc:	1e2b      	subs	r3, r5, #0
 8007ade:	bfb9      	ittee	lt
 8007ae0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007ae4:	9303      	strlt	r3, [sp, #12]
 8007ae6:	2300      	movge	r3, #0
 8007ae8:	6033      	strge	r3, [r6, #0]
 8007aea:	9f03      	ldr	r7, [sp, #12]
 8007aec:	4b98      	ldr	r3, [pc, #608]	@ (8007d50 <_dtoa_r+0x2d0>)
 8007aee:	bfbc      	itt	lt
 8007af0:	2201      	movlt	r2, #1
 8007af2:	6032      	strlt	r2, [r6, #0]
 8007af4:	43bb      	bics	r3, r7
 8007af6:	d112      	bne.n	8007b1e <_dtoa_r+0x9e>
 8007af8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007afa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007afe:	6013      	str	r3, [r2, #0]
 8007b00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b04:	4323      	orrs	r3, r4
 8007b06:	f000 854d 	beq.w	80085a4 <_dtoa_r+0xb24>
 8007b0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007d64 <_dtoa_r+0x2e4>
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 854f 	beq.w	80085b4 <_dtoa_r+0xb34>
 8007b16:	f10a 0303 	add.w	r3, sl, #3
 8007b1a:	f000 bd49 	b.w	80085b0 <_dtoa_r+0xb30>
 8007b1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b22:	2200      	movs	r2, #0
 8007b24:	ec51 0b17 	vmov	r0, r1, d7
 8007b28:	2300      	movs	r3, #0
 8007b2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007b2e:	f7f8 ffcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b32:	4680      	mov	r8, r0
 8007b34:	b158      	cbz	r0, 8007b4e <_dtoa_r+0xce>
 8007b36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007b38:	2301      	movs	r3, #1
 8007b3a:	6013      	str	r3, [r2, #0]
 8007b3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b3e:	b113      	cbz	r3, 8007b46 <_dtoa_r+0xc6>
 8007b40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007b42:	4b84      	ldr	r3, [pc, #528]	@ (8007d54 <_dtoa_r+0x2d4>)
 8007b44:	6013      	str	r3, [r2, #0]
 8007b46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007d68 <_dtoa_r+0x2e8>
 8007b4a:	f000 bd33 	b.w	80085b4 <_dtoa_r+0xb34>
 8007b4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007b52:	aa16      	add	r2, sp, #88	@ 0x58
 8007b54:	a917      	add	r1, sp, #92	@ 0x5c
 8007b56:	4658      	mov	r0, fp
 8007b58:	f001 fa3a 	bl	8008fd0 <__d2b>
 8007b5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007b60:	4681      	mov	r9, r0
 8007b62:	2e00      	cmp	r6, #0
 8007b64:	d077      	beq.n	8007c56 <_dtoa_r+0x1d6>
 8007b66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007b78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007b7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007b80:	4619      	mov	r1, r3
 8007b82:	2200      	movs	r2, #0
 8007b84:	4b74      	ldr	r3, [pc, #464]	@ (8007d58 <_dtoa_r+0x2d8>)
 8007b86:	f7f8 fb7f 	bl	8000288 <__aeabi_dsub>
 8007b8a:	a369      	add	r3, pc, #420	@ (adr r3, 8007d30 <_dtoa_r+0x2b0>)
 8007b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b90:	f7f8 fd32 	bl	80005f8 <__aeabi_dmul>
 8007b94:	a368      	add	r3, pc, #416	@ (adr r3, 8007d38 <_dtoa_r+0x2b8>)
 8007b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9a:	f7f8 fb77 	bl	800028c <__adddf3>
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	460d      	mov	r5, r1
 8007ba4:	f7f8 fcbe 	bl	8000524 <__aeabi_i2d>
 8007ba8:	a365      	add	r3, pc, #404	@ (adr r3, 8007d40 <_dtoa_r+0x2c0>)
 8007baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bae:	f7f8 fd23 	bl	80005f8 <__aeabi_dmul>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	4629      	mov	r1, r5
 8007bba:	f7f8 fb67 	bl	800028c <__adddf3>
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	460d      	mov	r5, r1
 8007bc2:	f7f8 ffc9 	bl	8000b58 <__aeabi_d2iz>
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	4607      	mov	r7, r0
 8007bca:	2300      	movs	r3, #0
 8007bcc:	4620      	mov	r0, r4
 8007bce:	4629      	mov	r1, r5
 8007bd0:	f7f8 ff84 	bl	8000adc <__aeabi_dcmplt>
 8007bd4:	b140      	cbz	r0, 8007be8 <_dtoa_r+0x168>
 8007bd6:	4638      	mov	r0, r7
 8007bd8:	f7f8 fca4 	bl	8000524 <__aeabi_i2d>
 8007bdc:	4622      	mov	r2, r4
 8007bde:	462b      	mov	r3, r5
 8007be0:	f7f8 ff72 	bl	8000ac8 <__aeabi_dcmpeq>
 8007be4:	b900      	cbnz	r0, 8007be8 <_dtoa_r+0x168>
 8007be6:	3f01      	subs	r7, #1
 8007be8:	2f16      	cmp	r7, #22
 8007bea:	d851      	bhi.n	8007c90 <_dtoa_r+0x210>
 8007bec:	4b5b      	ldr	r3, [pc, #364]	@ (8007d5c <_dtoa_r+0x2dc>)
 8007bee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bfa:	f7f8 ff6f 	bl	8000adc <__aeabi_dcmplt>
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	d048      	beq.n	8007c94 <_dtoa_r+0x214>
 8007c02:	3f01      	subs	r7, #1
 8007c04:	2300      	movs	r3, #0
 8007c06:	9312      	str	r3, [sp, #72]	@ 0x48
 8007c08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007c0a:	1b9b      	subs	r3, r3, r6
 8007c0c:	1e5a      	subs	r2, r3, #1
 8007c0e:	bf44      	itt	mi
 8007c10:	f1c3 0801 	rsbmi	r8, r3, #1
 8007c14:	2300      	movmi	r3, #0
 8007c16:	9208      	str	r2, [sp, #32]
 8007c18:	bf54      	ite	pl
 8007c1a:	f04f 0800 	movpl.w	r8, #0
 8007c1e:	9308      	strmi	r3, [sp, #32]
 8007c20:	2f00      	cmp	r7, #0
 8007c22:	db39      	blt.n	8007c98 <_dtoa_r+0x218>
 8007c24:	9b08      	ldr	r3, [sp, #32]
 8007c26:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007c28:	443b      	add	r3, r7
 8007c2a:	9308      	str	r3, [sp, #32]
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c32:	2b09      	cmp	r3, #9
 8007c34:	d864      	bhi.n	8007d00 <_dtoa_r+0x280>
 8007c36:	2b05      	cmp	r3, #5
 8007c38:	bfc4      	itt	gt
 8007c3a:	3b04      	subgt	r3, #4
 8007c3c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c40:	f1a3 0302 	sub.w	r3, r3, #2
 8007c44:	bfcc      	ite	gt
 8007c46:	2400      	movgt	r4, #0
 8007c48:	2401      	movle	r4, #1
 8007c4a:	2b03      	cmp	r3, #3
 8007c4c:	d863      	bhi.n	8007d16 <_dtoa_r+0x296>
 8007c4e:	e8df f003 	tbb	[pc, r3]
 8007c52:	372a      	.short	0x372a
 8007c54:	5535      	.short	0x5535
 8007c56:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007c5a:	441e      	add	r6, r3
 8007c5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007c60:	2b20      	cmp	r3, #32
 8007c62:	bfc1      	itttt	gt
 8007c64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007c68:	409f      	lslgt	r7, r3
 8007c6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007c6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007c72:	bfd6      	itet	le
 8007c74:	f1c3 0320 	rsble	r3, r3, #32
 8007c78:	ea47 0003 	orrgt.w	r0, r7, r3
 8007c7c:	fa04 f003 	lslle.w	r0, r4, r3
 8007c80:	f7f8 fc40 	bl	8000504 <__aeabi_ui2d>
 8007c84:	2201      	movs	r2, #1
 8007c86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007c8a:	3e01      	subs	r6, #1
 8007c8c:	9214      	str	r2, [sp, #80]	@ 0x50
 8007c8e:	e777      	b.n	8007b80 <_dtoa_r+0x100>
 8007c90:	2301      	movs	r3, #1
 8007c92:	e7b8      	b.n	8007c06 <_dtoa_r+0x186>
 8007c94:	9012      	str	r0, [sp, #72]	@ 0x48
 8007c96:	e7b7      	b.n	8007c08 <_dtoa_r+0x188>
 8007c98:	427b      	negs	r3, r7
 8007c9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	eba8 0807 	sub.w	r8, r8, r7
 8007ca2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ca4:	e7c4      	b.n	8007c30 <_dtoa_r+0x1b0>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007caa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	dc35      	bgt.n	8007d1c <_dtoa_r+0x29c>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	9307      	str	r3, [sp, #28]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007cba:	e00b      	b.n	8007cd4 <_dtoa_r+0x254>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e7f3      	b.n	8007ca8 <_dtoa_r+0x228>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cc6:	18fb      	adds	r3, r7, r3
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	9307      	str	r3, [sp, #28]
 8007cd0:	bfb8      	it	lt
 8007cd2:	2301      	movlt	r3, #1
 8007cd4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007cd8:	2100      	movs	r1, #0
 8007cda:	2204      	movs	r2, #4
 8007cdc:	f102 0514 	add.w	r5, r2, #20
 8007ce0:	429d      	cmp	r5, r3
 8007ce2:	d91f      	bls.n	8007d24 <_dtoa_r+0x2a4>
 8007ce4:	6041      	str	r1, [r0, #4]
 8007ce6:	4658      	mov	r0, fp
 8007ce8:	f000 fd8e 	bl	8008808 <_Balloc>
 8007cec:	4682      	mov	sl, r0
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d13c      	bne.n	8007d6c <_dtoa_r+0x2ec>
 8007cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8007d60 <_dtoa_r+0x2e0>)
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	f240 11af 	movw	r1, #431	@ 0x1af
 8007cfa:	e6d8      	b.n	8007aae <_dtoa_r+0x2e>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e7e0      	b.n	8007cc2 <_dtoa_r+0x242>
 8007d00:	2401      	movs	r4, #1
 8007d02:	2300      	movs	r3, #0
 8007d04:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d06:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007d08:	f04f 33ff 	mov.w	r3, #4294967295
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	9307      	str	r3, [sp, #28]
 8007d10:	2200      	movs	r2, #0
 8007d12:	2312      	movs	r3, #18
 8007d14:	e7d0      	b.n	8007cb8 <_dtoa_r+0x238>
 8007d16:	2301      	movs	r3, #1
 8007d18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d1a:	e7f5      	b.n	8007d08 <_dtoa_r+0x288>
 8007d1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	9307      	str	r3, [sp, #28]
 8007d22:	e7d7      	b.n	8007cd4 <_dtoa_r+0x254>
 8007d24:	3101      	adds	r1, #1
 8007d26:	0052      	lsls	r2, r2, #1
 8007d28:	e7d8      	b.n	8007cdc <_dtoa_r+0x25c>
 8007d2a:	bf00      	nop
 8007d2c:	f3af 8000 	nop.w
 8007d30:	636f4361 	.word	0x636f4361
 8007d34:	3fd287a7 	.word	0x3fd287a7
 8007d38:	8b60c8b3 	.word	0x8b60c8b3
 8007d3c:	3fc68a28 	.word	0x3fc68a28
 8007d40:	509f79fb 	.word	0x509f79fb
 8007d44:	3fd34413 	.word	0x3fd34413
 8007d48:	0800b08e 	.word	0x0800b08e
 8007d4c:	0800b0a5 	.word	0x0800b0a5
 8007d50:	7ff00000 	.word	0x7ff00000
 8007d54:	0800b059 	.word	0x0800b059
 8007d58:	3ff80000 	.word	0x3ff80000
 8007d5c:	0800b1a0 	.word	0x0800b1a0
 8007d60:	0800b0fd 	.word	0x0800b0fd
 8007d64:	0800b08a 	.word	0x0800b08a
 8007d68:	0800b058 	.word	0x0800b058
 8007d6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d70:	6018      	str	r0, [r3, #0]
 8007d72:	9b07      	ldr	r3, [sp, #28]
 8007d74:	2b0e      	cmp	r3, #14
 8007d76:	f200 80a4 	bhi.w	8007ec2 <_dtoa_r+0x442>
 8007d7a:	2c00      	cmp	r4, #0
 8007d7c:	f000 80a1 	beq.w	8007ec2 <_dtoa_r+0x442>
 8007d80:	2f00      	cmp	r7, #0
 8007d82:	dd33      	ble.n	8007dec <_dtoa_r+0x36c>
 8007d84:	4bad      	ldr	r3, [pc, #692]	@ (800803c <_dtoa_r+0x5bc>)
 8007d86:	f007 020f 	and.w	r2, r7, #15
 8007d8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d8e:	ed93 7b00 	vldr	d7, [r3]
 8007d92:	05f8      	lsls	r0, r7, #23
 8007d94:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007d98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007d9c:	d516      	bpl.n	8007dcc <_dtoa_r+0x34c>
 8007d9e:	4ba8      	ldr	r3, [pc, #672]	@ (8008040 <_dtoa_r+0x5c0>)
 8007da0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007da4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007da8:	f7f8 fd50 	bl	800084c <__aeabi_ddiv>
 8007dac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007db0:	f004 040f 	and.w	r4, r4, #15
 8007db4:	2603      	movs	r6, #3
 8007db6:	4da2      	ldr	r5, [pc, #648]	@ (8008040 <_dtoa_r+0x5c0>)
 8007db8:	b954      	cbnz	r4, 8007dd0 <_dtoa_r+0x350>
 8007dba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dc2:	f7f8 fd43 	bl	800084c <__aeabi_ddiv>
 8007dc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dca:	e028      	b.n	8007e1e <_dtoa_r+0x39e>
 8007dcc:	2602      	movs	r6, #2
 8007dce:	e7f2      	b.n	8007db6 <_dtoa_r+0x336>
 8007dd0:	07e1      	lsls	r1, r4, #31
 8007dd2:	d508      	bpl.n	8007de6 <_dtoa_r+0x366>
 8007dd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ddc:	f7f8 fc0c 	bl	80005f8 <__aeabi_dmul>
 8007de0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007de4:	3601      	adds	r6, #1
 8007de6:	1064      	asrs	r4, r4, #1
 8007de8:	3508      	adds	r5, #8
 8007dea:	e7e5      	b.n	8007db8 <_dtoa_r+0x338>
 8007dec:	f000 80d2 	beq.w	8007f94 <_dtoa_r+0x514>
 8007df0:	427c      	negs	r4, r7
 8007df2:	4b92      	ldr	r3, [pc, #584]	@ (800803c <_dtoa_r+0x5bc>)
 8007df4:	4d92      	ldr	r5, [pc, #584]	@ (8008040 <_dtoa_r+0x5c0>)
 8007df6:	f004 020f 	and.w	r2, r4, #15
 8007dfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e06:	f7f8 fbf7 	bl	80005f8 <__aeabi_dmul>
 8007e0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e0e:	1124      	asrs	r4, r4, #4
 8007e10:	2300      	movs	r3, #0
 8007e12:	2602      	movs	r6, #2
 8007e14:	2c00      	cmp	r4, #0
 8007e16:	f040 80b2 	bne.w	8007f7e <_dtoa_r+0x4fe>
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1d3      	bne.n	8007dc6 <_dtoa_r+0x346>
 8007e1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007e20:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	f000 80b7 	beq.w	8007f98 <_dtoa_r+0x518>
 8007e2a:	4b86      	ldr	r3, [pc, #536]	@ (8008044 <_dtoa_r+0x5c4>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	4620      	mov	r0, r4
 8007e30:	4629      	mov	r1, r5
 8007e32:	f7f8 fe53 	bl	8000adc <__aeabi_dcmplt>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	f000 80ae 	beq.w	8007f98 <_dtoa_r+0x518>
 8007e3c:	9b07      	ldr	r3, [sp, #28]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 80aa 	beq.w	8007f98 <_dtoa_r+0x518>
 8007e44:	9b00      	ldr	r3, [sp, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	dd37      	ble.n	8007eba <_dtoa_r+0x43a>
 8007e4a:	1e7b      	subs	r3, r7, #1
 8007e4c:	9304      	str	r3, [sp, #16]
 8007e4e:	4620      	mov	r0, r4
 8007e50:	4b7d      	ldr	r3, [pc, #500]	@ (8008048 <_dtoa_r+0x5c8>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	4629      	mov	r1, r5
 8007e56:	f7f8 fbcf 	bl	80005f8 <__aeabi_dmul>
 8007e5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e5e:	9c00      	ldr	r4, [sp, #0]
 8007e60:	3601      	adds	r6, #1
 8007e62:	4630      	mov	r0, r6
 8007e64:	f7f8 fb5e 	bl	8000524 <__aeabi_i2d>
 8007e68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e6c:	f7f8 fbc4 	bl	80005f8 <__aeabi_dmul>
 8007e70:	4b76      	ldr	r3, [pc, #472]	@ (800804c <_dtoa_r+0x5cc>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	f7f8 fa0a 	bl	800028c <__adddf3>
 8007e78:	4605      	mov	r5, r0
 8007e7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007e7e:	2c00      	cmp	r4, #0
 8007e80:	f040 808d 	bne.w	8007f9e <_dtoa_r+0x51e>
 8007e84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e88:	4b71      	ldr	r3, [pc, #452]	@ (8008050 <_dtoa_r+0x5d0>)
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f7f8 f9fc 	bl	8000288 <__aeabi_dsub>
 8007e90:	4602      	mov	r2, r0
 8007e92:	460b      	mov	r3, r1
 8007e94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e98:	462a      	mov	r2, r5
 8007e9a:	4633      	mov	r3, r6
 8007e9c:	f7f8 fe3c 	bl	8000b18 <__aeabi_dcmpgt>
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	f040 828b 	bne.w	80083bc <_dtoa_r+0x93c>
 8007ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eaa:	462a      	mov	r2, r5
 8007eac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007eb0:	f7f8 fe14 	bl	8000adc <__aeabi_dcmplt>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	f040 8128 	bne.w	800810a <_dtoa_r+0x68a>
 8007eba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007ebe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007ec2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f2c0 815a 	blt.w	800817e <_dtoa_r+0x6fe>
 8007eca:	2f0e      	cmp	r7, #14
 8007ecc:	f300 8157 	bgt.w	800817e <_dtoa_r+0x6fe>
 8007ed0:	4b5a      	ldr	r3, [pc, #360]	@ (800803c <_dtoa_r+0x5bc>)
 8007ed2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ed6:	ed93 7b00 	vldr	d7, [r3]
 8007eda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	ed8d 7b00 	vstr	d7, [sp]
 8007ee2:	da03      	bge.n	8007eec <_dtoa_r+0x46c>
 8007ee4:	9b07      	ldr	r3, [sp, #28]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f340 8101 	ble.w	80080ee <_dtoa_r+0x66e>
 8007eec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007ef0:	4656      	mov	r6, sl
 8007ef2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	4629      	mov	r1, r5
 8007efa:	f7f8 fca7 	bl	800084c <__aeabi_ddiv>
 8007efe:	f7f8 fe2b 	bl	8000b58 <__aeabi_d2iz>
 8007f02:	4680      	mov	r8, r0
 8007f04:	f7f8 fb0e 	bl	8000524 <__aeabi_i2d>
 8007f08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f0c:	f7f8 fb74 	bl	80005f8 <__aeabi_dmul>
 8007f10:	4602      	mov	r2, r0
 8007f12:	460b      	mov	r3, r1
 8007f14:	4620      	mov	r0, r4
 8007f16:	4629      	mov	r1, r5
 8007f18:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007f1c:	f7f8 f9b4 	bl	8000288 <__aeabi_dsub>
 8007f20:	f806 4b01 	strb.w	r4, [r6], #1
 8007f24:	9d07      	ldr	r5, [sp, #28]
 8007f26:	eba6 040a 	sub.w	r4, r6, sl
 8007f2a:	42a5      	cmp	r5, r4
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	f040 8117 	bne.w	8008162 <_dtoa_r+0x6e2>
 8007f34:	f7f8 f9aa 	bl	800028c <__adddf3>
 8007f38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	460d      	mov	r5, r1
 8007f40:	f7f8 fdea 	bl	8000b18 <__aeabi_dcmpgt>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	f040 80f9 	bne.w	800813c <_dtoa_r+0x6bc>
 8007f4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f4e:	4620      	mov	r0, r4
 8007f50:	4629      	mov	r1, r5
 8007f52:	f7f8 fdb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f56:	b118      	cbz	r0, 8007f60 <_dtoa_r+0x4e0>
 8007f58:	f018 0f01 	tst.w	r8, #1
 8007f5c:	f040 80ee 	bne.w	800813c <_dtoa_r+0x6bc>
 8007f60:	4649      	mov	r1, r9
 8007f62:	4658      	mov	r0, fp
 8007f64:	f000 fc90 	bl	8008888 <_Bfree>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	7033      	strb	r3, [r6, #0]
 8007f6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007f6e:	3701      	adds	r7, #1
 8007f70:	601f      	str	r7, [r3, #0]
 8007f72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 831d 	beq.w	80085b4 <_dtoa_r+0xb34>
 8007f7a:	601e      	str	r6, [r3, #0]
 8007f7c:	e31a      	b.n	80085b4 <_dtoa_r+0xb34>
 8007f7e:	07e2      	lsls	r2, r4, #31
 8007f80:	d505      	bpl.n	8007f8e <_dtoa_r+0x50e>
 8007f82:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f86:	f7f8 fb37 	bl	80005f8 <__aeabi_dmul>
 8007f8a:	3601      	adds	r6, #1
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	1064      	asrs	r4, r4, #1
 8007f90:	3508      	adds	r5, #8
 8007f92:	e73f      	b.n	8007e14 <_dtoa_r+0x394>
 8007f94:	2602      	movs	r6, #2
 8007f96:	e742      	b.n	8007e1e <_dtoa_r+0x39e>
 8007f98:	9c07      	ldr	r4, [sp, #28]
 8007f9a:	9704      	str	r7, [sp, #16]
 8007f9c:	e761      	b.n	8007e62 <_dtoa_r+0x3e2>
 8007f9e:	4b27      	ldr	r3, [pc, #156]	@ (800803c <_dtoa_r+0x5bc>)
 8007fa0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007fa2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fa6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007faa:	4454      	add	r4, sl
 8007fac:	2900      	cmp	r1, #0
 8007fae:	d053      	beq.n	8008058 <_dtoa_r+0x5d8>
 8007fb0:	4928      	ldr	r1, [pc, #160]	@ (8008054 <_dtoa_r+0x5d4>)
 8007fb2:	2000      	movs	r0, #0
 8007fb4:	f7f8 fc4a 	bl	800084c <__aeabi_ddiv>
 8007fb8:	4633      	mov	r3, r6
 8007fba:	462a      	mov	r2, r5
 8007fbc:	f7f8 f964 	bl	8000288 <__aeabi_dsub>
 8007fc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007fc4:	4656      	mov	r6, sl
 8007fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fca:	f7f8 fdc5 	bl	8000b58 <__aeabi_d2iz>
 8007fce:	4605      	mov	r5, r0
 8007fd0:	f7f8 faa8 	bl	8000524 <__aeabi_i2d>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fdc:	f7f8 f954 	bl	8000288 <__aeabi_dsub>
 8007fe0:	3530      	adds	r5, #48	@ 0x30
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fea:	f806 5b01 	strb.w	r5, [r6], #1
 8007fee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ff2:	f7f8 fd73 	bl	8000adc <__aeabi_dcmplt>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	d171      	bne.n	80080de <_dtoa_r+0x65e>
 8007ffa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ffe:	4911      	ldr	r1, [pc, #68]	@ (8008044 <_dtoa_r+0x5c4>)
 8008000:	2000      	movs	r0, #0
 8008002:	f7f8 f941 	bl	8000288 <__aeabi_dsub>
 8008006:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800800a:	f7f8 fd67 	bl	8000adc <__aeabi_dcmplt>
 800800e:	2800      	cmp	r0, #0
 8008010:	f040 8095 	bne.w	800813e <_dtoa_r+0x6be>
 8008014:	42a6      	cmp	r6, r4
 8008016:	f43f af50 	beq.w	8007eba <_dtoa_r+0x43a>
 800801a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800801e:	4b0a      	ldr	r3, [pc, #40]	@ (8008048 <_dtoa_r+0x5c8>)
 8008020:	2200      	movs	r2, #0
 8008022:	f7f8 fae9 	bl	80005f8 <__aeabi_dmul>
 8008026:	4b08      	ldr	r3, [pc, #32]	@ (8008048 <_dtoa_r+0x5c8>)
 8008028:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800802c:	2200      	movs	r2, #0
 800802e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008032:	f7f8 fae1 	bl	80005f8 <__aeabi_dmul>
 8008036:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800803a:	e7c4      	b.n	8007fc6 <_dtoa_r+0x546>
 800803c:	0800b1a0 	.word	0x0800b1a0
 8008040:	0800b178 	.word	0x0800b178
 8008044:	3ff00000 	.word	0x3ff00000
 8008048:	40240000 	.word	0x40240000
 800804c:	401c0000 	.word	0x401c0000
 8008050:	40140000 	.word	0x40140000
 8008054:	3fe00000 	.word	0x3fe00000
 8008058:	4631      	mov	r1, r6
 800805a:	4628      	mov	r0, r5
 800805c:	f7f8 facc 	bl	80005f8 <__aeabi_dmul>
 8008060:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008064:	9415      	str	r4, [sp, #84]	@ 0x54
 8008066:	4656      	mov	r6, sl
 8008068:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800806c:	f7f8 fd74 	bl	8000b58 <__aeabi_d2iz>
 8008070:	4605      	mov	r5, r0
 8008072:	f7f8 fa57 	bl	8000524 <__aeabi_i2d>
 8008076:	4602      	mov	r2, r0
 8008078:	460b      	mov	r3, r1
 800807a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800807e:	f7f8 f903 	bl	8000288 <__aeabi_dsub>
 8008082:	3530      	adds	r5, #48	@ 0x30
 8008084:	f806 5b01 	strb.w	r5, [r6], #1
 8008088:	4602      	mov	r2, r0
 800808a:	460b      	mov	r3, r1
 800808c:	42a6      	cmp	r6, r4
 800808e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008092:	f04f 0200 	mov.w	r2, #0
 8008096:	d124      	bne.n	80080e2 <_dtoa_r+0x662>
 8008098:	4bac      	ldr	r3, [pc, #688]	@ (800834c <_dtoa_r+0x8cc>)
 800809a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800809e:	f7f8 f8f5 	bl	800028c <__adddf3>
 80080a2:	4602      	mov	r2, r0
 80080a4:	460b      	mov	r3, r1
 80080a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080aa:	f7f8 fd35 	bl	8000b18 <__aeabi_dcmpgt>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d145      	bne.n	800813e <_dtoa_r+0x6be>
 80080b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80080b6:	49a5      	ldr	r1, [pc, #660]	@ (800834c <_dtoa_r+0x8cc>)
 80080b8:	2000      	movs	r0, #0
 80080ba:	f7f8 f8e5 	bl	8000288 <__aeabi_dsub>
 80080be:	4602      	mov	r2, r0
 80080c0:	460b      	mov	r3, r1
 80080c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080c6:	f7f8 fd09 	bl	8000adc <__aeabi_dcmplt>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	f43f aef5 	beq.w	8007eba <_dtoa_r+0x43a>
 80080d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80080d2:	1e73      	subs	r3, r6, #1
 80080d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80080d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80080da:	2b30      	cmp	r3, #48	@ 0x30
 80080dc:	d0f8      	beq.n	80080d0 <_dtoa_r+0x650>
 80080de:	9f04      	ldr	r7, [sp, #16]
 80080e0:	e73e      	b.n	8007f60 <_dtoa_r+0x4e0>
 80080e2:	4b9b      	ldr	r3, [pc, #620]	@ (8008350 <_dtoa_r+0x8d0>)
 80080e4:	f7f8 fa88 	bl	80005f8 <__aeabi_dmul>
 80080e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080ec:	e7bc      	b.n	8008068 <_dtoa_r+0x5e8>
 80080ee:	d10c      	bne.n	800810a <_dtoa_r+0x68a>
 80080f0:	4b98      	ldr	r3, [pc, #608]	@ (8008354 <_dtoa_r+0x8d4>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080f8:	f7f8 fa7e 	bl	80005f8 <__aeabi_dmul>
 80080fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008100:	f7f8 fd00 	bl	8000b04 <__aeabi_dcmpge>
 8008104:	2800      	cmp	r0, #0
 8008106:	f000 8157 	beq.w	80083b8 <_dtoa_r+0x938>
 800810a:	2400      	movs	r4, #0
 800810c:	4625      	mov	r5, r4
 800810e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008110:	43db      	mvns	r3, r3
 8008112:	9304      	str	r3, [sp, #16]
 8008114:	4656      	mov	r6, sl
 8008116:	2700      	movs	r7, #0
 8008118:	4621      	mov	r1, r4
 800811a:	4658      	mov	r0, fp
 800811c:	f000 fbb4 	bl	8008888 <_Bfree>
 8008120:	2d00      	cmp	r5, #0
 8008122:	d0dc      	beq.n	80080de <_dtoa_r+0x65e>
 8008124:	b12f      	cbz	r7, 8008132 <_dtoa_r+0x6b2>
 8008126:	42af      	cmp	r7, r5
 8008128:	d003      	beq.n	8008132 <_dtoa_r+0x6b2>
 800812a:	4639      	mov	r1, r7
 800812c:	4658      	mov	r0, fp
 800812e:	f000 fbab 	bl	8008888 <_Bfree>
 8008132:	4629      	mov	r1, r5
 8008134:	4658      	mov	r0, fp
 8008136:	f000 fba7 	bl	8008888 <_Bfree>
 800813a:	e7d0      	b.n	80080de <_dtoa_r+0x65e>
 800813c:	9704      	str	r7, [sp, #16]
 800813e:	4633      	mov	r3, r6
 8008140:	461e      	mov	r6, r3
 8008142:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008146:	2a39      	cmp	r2, #57	@ 0x39
 8008148:	d107      	bne.n	800815a <_dtoa_r+0x6da>
 800814a:	459a      	cmp	sl, r3
 800814c:	d1f8      	bne.n	8008140 <_dtoa_r+0x6c0>
 800814e:	9a04      	ldr	r2, [sp, #16]
 8008150:	3201      	adds	r2, #1
 8008152:	9204      	str	r2, [sp, #16]
 8008154:	2230      	movs	r2, #48	@ 0x30
 8008156:	f88a 2000 	strb.w	r2, [sl]
 800815a:	781a      	ldrb	r2, [r3, #0]
 800815c:	3201      	adds	r2, #1
 800815e:	701a      	strb	r2, [r3, #0]
 8008160:	e7bd      	b.n	80080de <_dtoa_r+0x65e>
 8008162:	4b7b      	ldr	r3, [pc, #492]	@ (8008350 <_dtoa_r+0x8d0>)
 8008164:	2200      	movs	r2, #0
 8008166:	f7f8 fa47 	bl	80005f8 <__aeabi_dmul>
 800816a:	2200      	movs	r2, #0
 800816c:	2300      	movs	r3, #0
 800816e:	4604      	mov	r4, r0
 8008170:	460d      	mov	r5, r1
 8008172:	f7f8 fca9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008176:	2800      	cmp	r0, #0
 8008178:	f43f aebb 	beq.w	8007ef2 <_dtoa_r+0x472>
 800817c:	e6f0      	b.n	8007f60 <_dtoa_r+0x4e0>
 800817e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008180:	2a00      	cmp	r2, #0
 8008182:	f000 80db 	beq.w	800833c <_dtoa_r+0x8bc>
 8008186:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008188:	2a01      	cmp	r2, #1
 800818a:	f300 80bf 	bgt.w	800830c <_dtoa_r+0x88c>
 800818e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008190:	2a00      	cmp	r2, #0
 8008192:	f000 80b7 	beq.w	8008304 <_dtoa_r+0x884>
 8008196:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800819a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800819c:	4646      	mov	r6, r8
 800819e:	9a08      	ldr	r2, [sp, #32]
 80081a0:	2101      	movs	r1, #1
 80081a2:	441a      	add	r2, r3
 80081a4:	4658      	mov	r0, fp
 80081a6:	4498      	add	r8, r3
 80081a8:	9208      	str	r2, [sp, #32]
 80081aa:	f000 fc6b 	bl	8008a84 <__i2b>
 80081ae:	4605      	mov	r5, r0
 80081b0:	b15e      	cbz	r6, 80081ca <_dtoa_r+0x74a>
 80081b2:	9b08      	ldr	r3, [sp, #32]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	dd08      	ble.n	80081ca <_dtoa_r+0x74a>
 80081b8:	42b3      	cmp	r3, r6
 80081ba:	9a08      	ldr	r2, [sp, #32]
 80081bc:	bfa8      	it	ge
 80081be:	4633      	movge	r3, r6
 80081c0:	eba8 0803 	sub.w	r8, r8, r3
 80081c4:	1af6      	subs	r6, r6, r3
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	9308      	str	r3, [sp, #32]
 80081ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081cc:	b1f3      	cbz	r3, 800820c <_dtoa_r+0x78c>
 80081ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f000 80b7 	beq.w	8008344 <_dtoa_r+0x8c4>
 80081d6:	b18c      	cbz	r4, 80081fc <_dtoa_r+0x77c>
 80081d8:	4629      	mov	r1, r5
 80081da:	4622      	mov	r2, r4
 80081dc:	4658      	mov	r0, fp
 80081de:	f000 fd11 	bl	8008c04 <__pow5mult>
 80081e2:	464a      	mov	r2, r9
 80081e4:	4601      	mov	r1, r0
 80081e6:	4605      	mov	r5, r0
 80081e8:	4658      	mov	r0, fp
 80081ea:	f000 fc61 	bl	8008ab0 <__multiply>
 80081ee:	4649      	mov	r1, r9
 80081f0:	9004      	str	r0, [sp, #16]
 80081f2:	4658      	mov	r0, fp
 80081f4:	f000 fb48 	bl	8008888 <_Bfree>
 80081f8:	9b04      	ldr	r3, [sp, #16]
 80081fa:	4699      	mov	r9, r3
 80081fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081fe:	1b1a      	subs	r2, r3, r4
 8008200:	d004      	beq.n	800820c <_dtoa_r+0x78c>
 8008202:	4649      	mov	r1, r9
 8008204:	4658      	mov	r0, fp
 8008206:	f000 fcfd 	bl	8008c04 <__pow5mult>
 800820a:	4681      	mov	r9, r0
 800820c:	2101      	movs	r1, #1
 800820e:	4658      	mov	r0, fp
 8008210:	f000 fc38 	bl	8008a84 <__i2b>
 8008214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008216:	4604      	mov	r4, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 81cf 	beq.w	80085bc <_dtoa_r+0xb3c>
 800821e:	461a      	mov	r2, r3
 8008220:	4601      	mov	r1, r0
 8008222:	4658      	mov	r0, fp
 8008224:	f000 fcee 	bl	8008c04 <__pow5mult>
 8008228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800822a:	2b01      	cmp	r3, #1
 800822c:	4604      	mov	r4, r0
 800822e:	f300 8095 	bgt.w	800835c <_dtoa_r+0x8dc>
 8008232:	9b02      	ldr	r3, [sp, #8]
 8008234:	2b00      	cmp	r3, #0
 8008236:	f040 8087 	bne.w	8008348 <_dtoa_r+0x8c8>
 800823a:	9b03      	ldr	r3, [sp, #12]
 800823c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008240:	2b00      	cmp	r3, #0
 8008242:	f040 8089 	bne.w	8008358 <_dtoa_r+0x8d8>
 8008246:	9b03      	ldr	r3, [sp, #12]
 8008248:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800824c:	0d1b      	lsrs	r3, r3, #20
 800824e:	051b      	lsls	r3, r3, #20
 8008250:	b12b      	cbz	r3, 800825e <_dtoa_r+0x7de>
 8008252:	9b08      	ldr	r3, [sp, #32]
 8008254:	3301      	adds	r3, #1
 8008256:	9308      	str	r3, [sp, #32]
 8008258:	f108 0801 	add.w	r8, r8, #1
 800825c:	2301      	movs	r3, #1
 800825e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008260:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008262:	2b00      	cmp	r3, #0
 8008264:	f000 81b0 	beq.w	80085c8 <_dtoa_r+0xb48>
 8008268:	6923      	ldr	r3, [r4, #16]
 800826a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800826e:	6918      	ldr	r0, [r3, #16]
 8008270:	f000 fbbc 	bl	80089ec <__hi0bits>
 8008274:	f1c0 0020 	rsb	r0, r0, #32
 8008278:	9b08      	ldr	r3, [sp, #32]
 800827a:	4418      	add	r0, r3
 800827c:	f010 001f 	ands.w	r0, r0, #31
 8008280:	d077      	beq.n	8008372 <_dtoa_r+0x8f2>
 8008282:	f1c0 0320 	rsb	r3, r0, #32
 8008286:	2b04      	cmp	r3, #4
 8008288:	dd6b      	ble.n	8008362 <_dtoa_r+0x8e2>
 800828a:	9b08      	ldr	r3, [sp, #32]
 800828c:	f1c0 001c 	rsb	r0, r0, #28
 8008290:	4403      	add	r3, r0
 8008292:	4480      	add	r8, r0
 8008294:	4406      	add	r6, r0
 8008296:	9308      	str	r3, [sp, #32]
 8008298:	f1b8 0f00 	cmp.w	r8, #0
 800829c:	dd05      	ble.n	80082aa <_dtoa_r+0x82a>
 800829e:	4649      	mov	r1, r9
 80082a0:	4642      	mov	r2, r8
 80082a2:	4658      	mov	r0, fp
 80082a4:	f000 fd08 	bl	8008cb8 <__lshift>
 80082a8:	4681      	mov	r9, r0
 80082aa:	9b08      	ldr	r3, [sp, #32]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	dd05      	ble.n	80082bc <_dtoa_r+0x83c>
 80082b0:	4621      	mov	r1, r4
 80082b2:	461a      	mov	r2, r3
 80082b4:	4658      	mov	r0, fp
 80082b6:	f000 fcff 	bl	8008cb8 <__lshift>
 80082ba:	4604      	mov	r4, r0
 80082bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d059      	beq.n	8008376 <_dtoa_r+0x8f6>
 80082c2:	4621      	mov	r1, r4
 80082c4:	4648      	mov	r0, r9
 80082c6:	f000 fd63 	bl	8008d90 <__mcmp>
 80082ca:	2800      	cmp	r0, #0
 80082cc:	da53      	bge.n	8008376 <_dtoa_r+0x8f6>
 80082ce:	1e7b      	subs	r3, r7, #1
 80082d0:	9304      	str	r3, [sp, #16]
 80082d2:	4649      	mov	r1, r9
 80082d4:	2300      	movs	r3, #0
 80082d6:	220a      	movs	r2, #10
 80082d8:	4658      	mov	r0, fp
 80082da:	f000 faf7 	bl	80088cc <__multadd>
 80082de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082e0:	4681      	mov	r9, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f000 8172 	beq.w	80085cc <_dtoa_r+0xb4c>
 80082e8:	2300      	movs	r3, #0
 80082ea:	4629      	mov	r1, r5
 80082ec:	220a      	movs	r2, #10
 80082ee:	4658      	mov	r0, fp
 80082f0:	f000 faec 	bl	80088cc <__multadd>
 80082f4:	9b00      	ldr	r3, [sp, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	4605      	mov	r5, r0
 80082fa:	dc67      	bgt.n	80083cc <_dtoa_r+0x94c>
 80082fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082fe:	2b02      	cmp	r3, #2
 8008300:	dc41      	bgt.n	8008386 <_dtoa_r+0x906>
 8008302:	e063      	b.n	80083cc <_dtoa_r+0x94c>
 8008304:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008306:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800830a:	e746      	b.n	800819a <_dtoa_r+0x71a>
 800830c:	9b07      	ldr	r3, [sp, #28]
 800830e:	1e5c      	subs	r4, r3, #1
 8008310:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008312:	42a3      	cmp	r3, r4
 8008314:	bfbf      	itttt	lt
 8008316:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008318:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800831a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800831c:	1ae3      	sublt	r3, r4, r3
 800831e:	bfb4      	ite	lt
 8008320:	18d2      	addlt	r2, r2, r3
 8008322:	1b1c      	subge	r4, r3, r4
 8008324:	9b07      	ldr	r3, [sp, #28]
 8008326:	bfbc      	itt	lt
 8008328:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800832a:	2400      	movlt	r4, #0
 800832c:	2b00      	cmp	r3, #0
 800832e:	bfb5      	itete	lt
 8008330:	eba8 0603 	sublt.w	r6, r8, r3
 8008334:	9b07      	ldrge	r3, [sp, #28]
 8008336:	2300      	movlt	r3, #0
 8008338:	4646      	movge	r6, r8
 800833a:	e730      	b.n	800819e <_dtoa_r+0x71e>
 800833c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800833e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008340:	4646      	mov	r6, r8
 8008342:	e735      	b.n	80081b0 <_dtoa_r+0x730>
 8008344:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008346:	e75c      	b.n	8008202 <_dtoa_r+0x782>
 8008348:	2300      	movs	r3, #0
 800834a:	e788      	b.n	800825e <_dtoa_r+0x7de>
 800834c:	3fe00000 	.word	0x3fe00000
 8008350:	40240000 	.word	0x40240000
 8008354:	40140000 	.word	0x40140000
 8008358:	9b02      	ldr	r3, [sp, #8]
 800835a:	e780      	b.n	800825e <_dtoa_r+0x7de>
 800835c:	2300      	movs	r3, #0
 800835e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008360:	e782      	b.n	8008268 <_dtoa_r+0x7e8>
 8008362:	d099      	beq.n	8008298 <_dtoa_r+0x818>
 8008364:	9a08      	ldr	r2, [sp, #32]
 8008366:	331c      	adds	r3, #28
 8008368:	441a      	add	r2, r3
 800836a:	4498      	add	r8, r3
 800836c:	441e      	add	r6, r3
 800836e:	9208      	str	r2, [sp, #32]
 8008370:	e792      	b.n	8008298 <_dtoa_r+0x818>
 8008372:	4603      	mov	r3, r0
 8008374:	e7f6      	b.n	8008364 <_dtoa_r+0x8e4>
 8008376:	9b07      	ldr	r3, [sp, #28]
 8008378:	9704      	str	r7, [sp, #16]
 800837a:	2b00      	cmp	r3, #0
 800837c:	dc20      	bgt.n	80083c0 <_dtoa_r+0x940>
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008382:	2b02      	cmp	r3, #2
 8008384:	dd1e      	ble.n	80083c4 <_dtoa_r+0x944>
 8008386:	9b00      	ldr	r3, [sp, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	f47f aec0 	bne.w	800810e <_dtoa_r+0x68e>
 800838e:	4621      	mov	r1, r4
 8008390:	2205      	movs	r2, #5
 8008392:	4658      	mov	r0, fp
 8008394:	f000 fa9a 	bl	80088cc <__multadd>
 8008398:	4601      	mov	r1, r0
 800839a:	4604      	mov	r4, r0
 800839c:	4648      	mov	r0, r9
 800839e:	f000 fcf7 	bl	8008d90 <__mcmp>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	f77f aeb3 	ble.w	800810e <_dtoa_r+0x68e>
 80083a8:	4656      	mov	r6, sl
 80083aa:	2331      	movs	r3, #49	@ 0x31
 80083ac:	f806 3b01 	strb.w	r3, [r6], #1
 80083b0:	9b04      	ldr	r3, [sp, #16]
 80083b2:	3301      	adds	r3, #1
 80083b4:	9304      	str	r3, [sp, #16]
 80083b6:	e6ae      	b.n	8008116 <_dtoa_r+0x696>
 80083b8:	9c07      	ldr	r4, [sp, #28]
 80083ba:	9704      	str	r7, [sp, #16]
 80083bc:	4625      	mov	r5, r4
 80083be:	e7f3      	b.n	80083a8 <_dtoa_r+0x928>
 80083c0:	9b07      	ldr	r3, [sp, #28]
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f000 8104 	beq.w	80085d4 <_dtoa_r+0xb54>
 80083cc:	2e00      	cmp	r6, #0
 80083ce:	dd05      	ble.n	80083dc <_dtoa_r+0x95c>
 80083d0:	4629      	mov	r1, r5
 80083d2:	4632      	mov	r2, r6
 80083d4:	4658      	mov	r0, fp
 80083d6:	f000 fc6f 	bl	8008cb8 <__lshift>
 80083da:	4605      	mov	r5, r0
 80083dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d05a      	beq.n	8008498 <_dtoa_r+0xa18>
 80083e2:	6869      	ldr	r1, [r5, #4]
 80083e4:	4658      	mov	r0, fp
 80083e6:	f000 fa0f 	bl	8008808 <_Balloc>
 80083ea:	4606      	mov	r6, r0
 80083ec:	b928      	cbnz	r0, 80083fa <_dtoa_r+0x97a>
 80083ee:	4b84      	ldr	r3, [pc, #528]	@ (8008600 <_dtoa_r+0xb80>)
 80083f0:	4602      	mov	r2, r0
 80083f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80083f6:	f7ff bb5a 	b.w	8007aae <_dtoa_r+0x2e>
 80083fa:	692a      	ldr	r2, [r5, #16]
 80083fc:	3202      	adds	r2, #2
 80083fe:	0092      	lsls	r2, r2, #2
 8008400:	f105 010c 	add.w	r1, r5, #12
 8008404:	300c      	adds	r0, #12
 8008406:	f7ff fa9c 	bl	8007942 <memcpy>
 800840a:	2201      	movs	r2, #1
 800840c:	4631      	mov	r1, r6
 800840e:	4658      	mov	r0, fp
 8008410:	f000 fc52 	bl	8008cb8 <__lshift>
 8008414:	f10a 0301 	add.w	r3, sl, #1
 8008418:	9307      	str	r3, [sp, #28]
 800841a:	9b00      	ldr	r3, [sp, #0]
 800841c:	4453      	add	r3, sl
 800841e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008420:	9b02      	ldr	r3, [sp, #8]
 8008422:	f003 0301 	and.w	r3, r3, #1
 8008426:	462f      	mov	r7, r5
 8008428:	930a      	str	r3, [sp, #40]	@ 0x28
 800842a:	4605      	mov	r5, r0
 800842c:	9b07      	ldr	r3, [sp, #28]
 800842e:	4621      	mov	r1, r4
 8008430:	3b01      	subs	r3, #1
 8008432:	4648      	mov	r0, r9
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	f7ff fa99 	bl	800796c <quorem>
 800843a:	4639      	mov	r1, r7
 800843c:	9002      	str	r0, [sp, #8]
 800843e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008442:	4648      	mov	r0, r9
 8008444:	f000 fca4 	bl	8008d90 <__mcmp>
 8008448:	462a      	mov	r2, r5
 800844a:	9008      	str	r0, [sp, #32]
 800844c:	4621      	mov	r1, r4
 800844e:	4658      	mov	r0, fp
 8008450:	f000 fcba 	bl	8008dc8 <__mdiff>
 8008454:	68c2      	ldr	r2, [r0, #12]
 8008456:	4606      	mov	r6, r0
 8008458:	bb02      	cbnz	r2, 800849c <_dtoa_r+0xa1c>
 800845a:	4601      	mov	r1, r0
 800845c:	4648      	mov	r0, r9
 800845e:	f000 fc97 	bl	8008d90 <__mcmp>
 8008462:	4602      	mov	r2, r0
 8008464:	4631      	mov	r1, r6
 8008466:	4658      	mov	r0, fp
 8008468:	920e      	str	r2, [sp, #56]	@ 0x38
 800846a:	f000 fa0d 	bl	8008888 <_Bfree>
 800846e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008470:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008472:	9e07      	ldr	r6, [sp, #28]
 8008474:	ea43 0102 	orr.w	r1, r3, r2
 8008478:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800847a:	4319      	orrs	r1, r3
 800847c:	d110      	bne.n	80084a0 <_dtoa_r+0xa20>
 800847e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008482:	d029      	beq.n	80084d8 <_dtoa_r+0xa58>
 8008484:	9b08      	ldr	r3, [sp, #32]
 8008486:	2b00      	cmp	r3, #0
 8008488:	dd02      	ble.n	8008490 <_dtoa_r+0xa10>
 800848a:	9b02      	ldr	r3, [sp, #8]
 800848c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008490:	9b00      	ldr	r3, [sp, #0]
 8008492:	f883 8000 	strb.w	r8, [r3]
 8008496:	e63f      	b.n	8008118 <_dtoa_r+0x698>
 8008498:	4628      	mov	r0, r5
 800849a:	e7bb      	b.n	8008414 <_dtoa_r+0x994>
 800849c:	2201      	movs	r2, #1
 800849e:	e7e1      	b.n	8008464 <_dtoa_r+0x9e4>
 80084a0:	9b08      	ldr	r3, [sp, #32]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	db04      	blt.n	80084b0 <_dtoa_r+0xa30>
 80084a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084a8:	430b      	orrs	r3, r1
 80084aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80084ac:	430b      	orrs	r3, r1
 80084ae:	d120      	bne.n	80084f2 <_dtoa_r+0xa72>
 80084b0:	2a00      	cmp	r2, #0
 80084b2:	dded      	ble.n	8008490 <_dtoa_r+0xa10>
 80084b4:	4649      	mov	r1, r9
 80084b6:	2201      	movs	r2, #1
 80084b8:	4658      	mov	r0, fp
 80084ba:	f000 fbfd 	bl	8008cb8 <__lshift>
 80084be:	4621      	mov	r1, r4
 80084c0:	4681      	mov	r9, r0
 80084c2:	f000 fc65 	bl	8008d90 <__mcmp>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	dc03      	bgt.n	80084d2 <_dtoa_r+0xa52>
 80084ca:	d1e1      	bne.n	8008490 <_dtoa_r+0xa10>
 80084cc:	f018 0f01 	tst.w	r8, #1
 80084d0:	d0de      	beq.n	8008490 <_dtoa_r+0xa10>
 80084d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80084d6:	d1d8      	bne.n	800848a <_dtoa_r+0xa0a>
 80084d8:	9a00      	ldr	r2, [sp, #0]
 80084da:	2339      	movs	r3, #57	@ 0x39
 80084dc:	7013      	strb	r3, [r2, #0]
 80084de:	4633      	mov	r3, r6
 80084e0:	461e      	mov	r6, r3
 80084e2:	3b01      	subs	r3, #1
 80084e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80084e8:	2a39      	cmp	r2, #57	@ 0x39
 80084ea:	d052      	beq.n	8008592 <_dtoa_r+0xb12>
 80084ec:	3201      	adds	r2, #1
 80084ee:	701a      	strb	r2, [r3, #0]
 80084f0:	e612      	b.n	8008118 <_dtoa_r+0x698>
 80084f2:	2a00      	cmp	r2, #0
 80084f4:	dd07      	ble.n	8008506 <_dtoa_r+0xa86>
 80084f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80084fa:	d0ed      	beq.n	80084d8 <_dtoa_r+0xa58>
 80084fc:	9a00      	ldr	r2, [sp, #0]
 80084fe:	f108 0301 	add.w	r3, r8, #1
 8008502:	7013      	strb	r3, [r2, #0]
 8008504:	e608      	b.n	8008118 <_dtoa_r+0x698>
 8008506:	9b07      	ldr	r3, [sp, #28]
 8008508:	9a07      	ldr	r2, [sp, #28]
 800850a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800850e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008510:	4293      	cmp	r3, r2
 8008512:	d028      	beq.n	8008566 <_dtoa_r+0xae6>
 8008514:	4649      	mov	r1, r9
 8008516:	2300      	movs	r3, #0
 8008518:	220a      	movs	r2, #10
 800851a:	4658      	mov	r0, fp
 800851c:	f000 f9d6 	bl	80088cc <__multadd>
 8008520:	42af      	cmp	r7, r5
 8008522:	4681      	mov	r9, r0
 8008524:	f04f 0300 	mov.w	r3, #0
 8008528:	f04f 020a 	mov.w	r2, #10
 800852c:	4639      	mov	r1, r7
 800852e:	4658      	mov	r0, fp
 8008530:	d107      	bne.n	8008542 <_dtoa_r+0xac2>
 8008532:	f000 f9cb 	bl	80088cc <__multadd>
 8008536:	4607      	mov	r7, r0
 8008538:	4605      	mov	r5, r0
 800853a:	9b07      	ldr	r3, [sp, #28]
 800853c:	3301      	adds	r3, #1
 800853e:	9307      	str	r3, [sp, #28]
 8008540:	e774      	b.n	800842c <_dtoa_r+0x9ac>
 8008542:	f000 f9c3 	bl	80088cc <__multadd>
 8008546:	4629      	mov	r1, r5
 8008548:	4607      	mov	r7, r0
 800854a:	2300      	movs	r3, #0
 800854c:	220a      	movs	r2, #10
 800854e:	4658      	mov	r0, fp
 8008550:	f000 f9bc 	bl	80088cc <__multadd>
 8008554:	4605      	mov	r5, r0
 8008556:	e7f0      	b.n	800853a <_dtoa_r+0xaba>
 8008558:	9b00      	ldr	r3, [sp, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	bfcc      	ite	gt
 800855e:	461e      	movgt	r6, r3
 8008560:	2601      	movle	r6, #1
 8008562:	4456      	add	r6, sl
 8008564:	2700      	movs	r7, #0
 8008566:	4649      	mov	r1, r9
 8008568:	2201      	movs	r2, #1
 800856a:	4658      	mov	r0, fp
 800856c:	f000 fba4 	bl	8008cb8 <__lshift>
 8008570:	4621      	mov	r1, r4
 8008572:	4681      	mov	r9, r0
 8008574:	f000 fc0c 	bl	8008d90 <__mcmp>
 8008578:	2800      	cmp	r0, #0
 800857a:	dcb0      	bgt.n	80084de <_dtoa_r+0xa5e>
 800857c:	d102      	bne.n	8008584 <_dtoa_r+0xb04>
 800857e:	f018 0f01 	tst.w	r8, #1
 8008582:	d1ac      	bne.n	80084de <_dtoa_r+0xa5e>
 8008584:	4633      	mov	r3, r6
 8008586:	461e      	mov	r6, r3
 8008588:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800858c:	2a30      	cmp	r2, #48	@ 0x30
 800858e:	d0fa      	beq.n	8008586 <_dtoa_r+0xb06>
 8008590:	e5c2      	b.n	8008118 <_dtoa_r+0x698>
 8008592:	459a      	cmp	sl, r3
 8008594:	d1a4      	bne.n	80084e0 <_dtoa_r+0xa60>
 8008596:	9b04      	ldr	r3, [sp, #16]
 8008598:	3301      	adds	r3, #1
 800859a:	9304      	str	r3, [sp, #16]
 800859c:	2331      	movs	r3, #49	@ 0x31
 800859e:	f88a 3000 	strb.w	r3, [sl]
 80085a2:	e5b9      	b.n	8008118 <_dtoa_r+0x698>
 80085a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80085a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008604 <_dtoa_r+0xb84>
 80085aa:	b11b      	cbz	r3, 80085b4 <_dtoa_r+0xb34>
 80085ac:	f10a 0308 	add.w	r3, sl, #8
 80085b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80085b2:	6013      	str	r3, [r2, #0]
 80085b4:	4650      	mov	r0, sl
 80085b6:	b019      	add	sp, #100	@ 0x64
 80085b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085be:	2b01      	cmp	r3, #1
 80085c0:	f77f ae37 	ble.w	8008232 <_dtoa_r+0x7b2>
 80085c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80085c8:	2001      	movs	r0, #1
 80085ca:	e655      	b.n	8008278 <_dtoa_r+0x7f8>
 80085cc:	9b00      	ldr	r3, [sp, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f77f aed6 	ble.w	8008380 <_dtoa_r+0x900>
 80085d4:	4656      	mov	r6, sl
 80085d6:	4621      	mov	r1, r4
 80085d8:	4648      	mov	r0, r9
 80085da:	f7ff f9c7 	bl	800796c <quorem>
 80085de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80085e2:	f806 8b01 	strb.w	r8, [r6], #1
 80085e6:	9b00      	ldr	r3, [sp, #0]
 80085e8:	eba6 020a 	sub.w	r2, r6, sl
 80085ec:	4293      	cmp	r3, r2
 80085ee:	ddb3      	ble.n	8008558 <_dtoa_r+0xad8>
 80085f0:	4649      	mov	r1, r9
 80085f2:	2300      	movs	r3, #0
 80085f4:	220a      	movs	r2, #10
 80085f6:	4658      	mov	r0, fp
 80085f8:	f000 f968 	bl	80088cc <__multadd>
 80085fc:	4681      	mov	r9, r0
 80085fe:	e7ea      	b.n	80085d6 <_dtoa_r+0xb56>
 8008600:	0800b0fd 	.word	0x0800b0fd
 8008604:	0800b081 	.word	0x0800b081

08008608 <_free_r>:
 8008608:	b538      	push	{r3, r4, r5, lr}
 800860a:	4605      	mov	r5, r0
 800860c:	2900      	cmp	r1, #0
 800860e:	d041      	beq.n	8008694 <_free_r+0x8c>
 8008610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008614:	1f0c      	subs	r4, r1, #4
 8008616:	2b00      	cmp	r3, #0
 8008618:	bfb8      	it	lt
 800861a:	18e4      	addlt	r4, r4, r3
 800861c:	f000 f8e8 	bl	80087f0 <__malloc_lock>
 8008620:	4a1d      	ldr	r2, [pc, #116]	@ (8008698 <_free_r+0x90>)
 8008622:	6813      	ldr	r3, [r2, #0]
 8008624:	b933      	cbnz	r3, 8008634 <_free_r+0x2c>
 8008626:	6063      	str	r3, [r4, #4]
 8008628:	6014      	str	r4, [r2, #0]
 800862a:	4628      	mov	r0, r5
 800862c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008630:	f000 b8e4 	b.w	80087fc <__malloc_unlock>
 8008634:	42a3      	cmp	r3, r4
 8008636:	d908      	bls.n	800864a <_free_r+0x42>
 8008638:	6820      	ldr	r0, [r4, #0]
 800863a:	1821      	adds	r1, r4, r0
 800863c:	428b      	cmp	r3, r1
 800863e:	bf01      	itttt	eq
 8008640:	6819      	ldreq	r1, [r3, #0]
 8008642:	685b      	ldreq	r3, [r3, #4]
 8008644:	1809      	addeq	r1, r1, r0
 8008646:	6021      	streq	r1, [r4, #0]
 8008648:	e7ed      	b.n	8008626 <_free_r+0x1e>
 800864a:	461a      	mov	r2, r3
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	b10b      	cbz	r3, 8008654 <_free_r+0x4c>
 8008650:	42a3      	cmp	r3, r4
 8008652:	d9fa      	bls.n	800864a <_free_r+0x42>
 8008654:	6811      	ldr	r1, [r2, #0]
 8008656:	1850      	adds	r0, r2, r1
 8008658:	42a0      	cmp	r0, r4
 800865a:	d10b      	bne.n	8008674 <_free_r+0x6c>
 800865c:	6820      	ldr	r0, [r4, #0]
 800865e:	4401      	add	r1, r0
 8008660:	1850      	adds	r0, r2, r1
 8008662:	4283      	cmp	r3, r0
 8008664:	6011      	str	r1, [r2, #0]
 8008666:	d1e0      	bne.n	800862a <_free_r+0x22>
 8008668:	6818      	ldr	r0, [r3, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	6053      	str	r3, [r2, #4]
 800866e:	4408      	add	r0, r1
 8008670:	6010      	str	r0, [r2, #0]
 8008672:	e7da      	b.n	800862a <_free_r+0x22>
 8008674:	d902      	bls.n	800867c <_free_r+0x74>
 8008676:	230c      	movs	r3, #12
 8008678:	602b      	str	r3, [r5, #0]
 800867a:	e7d6      	b.n	800862a <_free_r+0x22>
 800867c:	6820      	ldr	r0, [r4, #0]
 800867e:	1821      	adds	r1, r4, r0
 8008680:	428b      	cmp	r3, r1
 8008682:	bf04      	itt	eq
 8008684:	6819      	ldreq	r1, [r3, #0]
 8008686:	685b      	ldreq	r3, [r3, #4]
 8008688:	6063      	str	r3, [r4, #4]
 800868a:	bf04      	itt	eq
 800868c:	1809      	addeq	r1, r1, r0
 800868e:	6021      	streq	r1, [r4, #0]
 8008690:	6054      	str	r4, [r2, #4]
 8008692:	e7ca      	b.n	800862a <_free_r+0x22>
 8008694:	bd38      	pop	{r3, r4, r5, pc}
 8008696:	bf00      	nop
 8008698:	20000a30 	.word	0x20000a30

0800869c <malloc>:
 800869c:	4b02      	ldr	r3, [pc, #8]	@ (80086a8 <malloc+0xc>)
 800869e:	4601      	mov	r1, r0
 80086a0:	6818      	ldr	r0, [r3, #0]
 80086a2:	f000 b825 	b.w	80086f0 <_malloc_r>
 80086a6:	bf00      	nop
 80086a8:	20000214 	.word	0x20000214

080086ac <sbrk_aligned>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	4e0f      	ldr	r6, [pc, #60]	@ (80086ec <sbrk_aligned+0x40>)
 80086b0:	460c      	mov	r4, r1
 80086b2:	6831      	ldr	r1, [r6, #0]
 80086b4:	4605      	mov	r5, r0
 80086b6:	b911      	cbnz	r1, 80086be <sbrk_aligned+0x12>
 80086b8:	f001 fe0c 	bl	800a2d4 <_sbrk_r>
 80086bc:	6030      	str	r0, [r6, #0]
 80086be:	4621      	mov	r1, r4
 80086c0:	4628      	mov	r0, r5
 80086c2:	f001 fe07 	bl	800a2d4 <_sbrk_r>
 80086c6:	1c43      	adds	r3, r0, #1
 80086c8:	d103      	bne.n	80086d2 <sbrk_aligned+0x26>
 80086ca:	f04f 34ff 	mov.w	r4, #4294967295
 80086ce:	4620      	mov	r0, r4
 80086d0:	bd70      	pop	{r4, r5, r6, pc}
 80086d2:	1cc4      	adds	r4, r0, #3
 80086d4:	f024 0403 	bic.w	r4, r4, #3
 80086d8:	42a0      	cmp	r0, r4
 80086da:	d0f8      	beq.n	80086ce <sbrk_aligned+0x22>
 80086dc:	1a21      	subs	r1, r4, r0
 80086de:	4628      	mov	r0, r5
 80086e0:	f001 fdf8 	bl	800a2d4 <_sbrk_r>
 80086e4:	3001      	adds	r0, #1
 80086e6:	d1f2      	bne.n	80086ce <sbrk_aligned+0x22>
 80086e8:	e7ef      	b.n	80086ca <sbrk_aligned+0x1e>
 80086ea:	bf00      	nop
 80086ec:	20000a2c 	.word	0x20000a2c

080086f0 <_malloc_r>:
 80086f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086f4:	1ccd      	adds	r5, r1, #3
 80086f6:	f025 0503 	bic.w	r5, r5, #3
 80086fa:	3508      	adds	r5, #8
 80086fc:	2d0c      	cmp	r5, #12
 80086fe:	bf38      	it	cc
 8008700:	250c      	movcc	r5, #12
 8008702:	2d00      	cmp	r5, #0
 8008704:	4606      	mov	r6, r0
 8008706:	db01      	blt.n	800870c <_malloc_r+0x1c>
 8008708:	42a9      	cmp	r1, r5
 800870a:	d904      	bls.n	8008716 <_malloc_r+0x26>
 800870c:	230c      	movs	r3, #12
 800870e:	6033      	str	r3, [r6, #0]
 8008710:	2000      	movs	r0, #0
 8008712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008716:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80087ec <_malloc_r+0xfc>
 800871a:	f000 f869 	bl	80087f0 <__malloc_lock>
 800871e:	f8d8 3000 	ldr.w	r3, [r8]
 8008722:	461c      	mov	r4, r3
 8008724:	bb44      	cbnz	r4, 8008778 <_malloc_r+0x88>
 8008726:	4629      	mov	r1, r5
 8008728:	4630      	mov	r0, r6
 800872a:	f7ff ffbf 	bl	80086ac <sbrk_aligned>
 800872e:	1c43      	adds	r3, r0, #1
 8008730:	4604      	mov	r4, r0
 8008732:	d158      	bne.n	80087e6 <_malloc_r+0xf6>
 8008734:	f8d8 4000 	ldr.w	r4, [r8]
 8008738:	4627      	mov	r7, r4
 800873a:	2f00      	cmp	r7, #0
 800873c:	d143      	bne.n	80087c6 <_malloc_r+0xd6>
 800873e:	2c00      	cmp	r4, #0
 8008740:	d04b      	beq.n	80087da <_malloc_r+0xea>
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	4639      	mov	r1, r7
 8008746:	4630      	mov	r0, r6
 8008748:	eb04 0903 	add.w	r9, r4, r3
 800874c:	f001 fdc2 	bl	800a2d4 <_sbrk_r>
 8008750:	4581      	cmp	r9, r0
 8008752:	d142      	bne.n	80087da <_malloc_r+0xea>
 8008754:	6821      	ldr	r1, [r4, #0]
 8008756:	1a6d      	subs	r5, r5, r1
 8008758:	4629      	mov	r1, r5
 800875a:	4630      	mov	r0, r6
 800875c:	f7ff ffa6 	bl	80086ac <sbrk_aligned>
 8008760:	3001      	adds	r0, #1
 8008762:	d03a      	beq.n	80087da <_malloc_r+0xea>
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	442b      	add	r3, r5
 8008768:	6023      	str	r3, [r4, #0]
 800876a:	f8d8 3000 	ldr.w	r3, [r8]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	bb62      	cbnz	r2, 80087cc <_malloc_r+0xdc>
 8008772:	f8c8 7000 	str.w	r7, [r8]
 8008776:	e00f      	b.n	8008798 <_malloc_r+0xa8>
 8008778:	6822      	ldr	r2, [r4, #0]
 800877a:	1b52      	subs	r2, r2, r5
 800877c:	d420      	bmi.n	80087c0 <_malloc_r+0xd0>
 800877e:	2a0b      	cmp	r2, #11
 8008780:	d917      	bls.n	80087b2 <_malloc_r+0xc2>
 8008782:	1961      	adds	r1, r4, r5
 8008784:	42a3      	cmp	r3, r4
 8008786:	6025      	str	r5, [r4, #0]
 8008788:	bf18      	it	ne
 800878a:	6059      	strne	r1, [r3, #4]
 800878c:	6863      	ldr	r3, [r4, #4]
 800878e:	bf08      	it	eq
 8008790:	f8c8 1000 	streq.w	r1, [r8]
 8008794:	5162      	str	r2, [r4, r5]
 8008796:	604b      	str	r3, [r1, #4]
 8008798:	4630      	mov	r0, r6
 800879a:	f000 f82f 	bl	80087fc <__malloc_unlock>
 800879e:	f104 000b 	add.w	r0, r4, #11
 80087a2:	1d23      	adds	r3, r4, #4
 80087a4:	f020 0007 	bic.w	r0, r0, #7
 80087a8:	1ac2      	subs	r2, r0, r3
 80087aa:	bf1c      	itt	ne
 80087ac:	1a1b      	subne	r3, r3, r0
 80087ae:	50a3      	strne	r3, [r4, r2]
 80087b0:	e7af      	b.n	8008712 <_malloc_r+0x22>
 80087b2:	6862      	ldr	r2, [r4, #4]
 80087b4:	42a3      	cmp	r3, r4
 80087b6:	bf0c      	ite	eq
 80087b8:	f8c8 2000 	streq.w	r2, [r8]
 80087bc:	605a      	strne	r2, [r3, #4]
 80087be:	e7eb      	b.n	8008798 <_malloc_r+0xa8>
 80087c0:	4623      	mov	r3, r4
 80087c2:	6864      	ldr	r4, [r4, #4]
 80087c4:	e7ae      	b.n	8008724 <_malloc_r+0x34>
 80087c6:	463c      	mov	r4, r7
 80087c8:	687f      	ldr	r7, [r7, #4]
 80087ca:	e7b6      	b.n	800873a <_malloc_r+0x4a>
 80087cc:	461a      	mov	r2, r3
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	42a3      	cmp	r3, r4
 80087d2:	d1fb      	bne.n	80087cc <_malloc_r+0xdc>
 80087d4:	2300      	movs	r3, #0
 80087d6:	6053      	str	r3, [r2, #4]
 80087d8:	e7de      	b.n	8008798 <_malloc_r+0xa8>
 80087da:	230c      	movs	r3, #12
 80087dc:	6033      	str	r3, [r6, #0]
 80087de:	4630      	mov	r0, r6
 80087e0:	f000 f80c 	bl	80087fc <__malloc_unlock>
 80087e4:	e794      	b.n	8008710 <_malloc_r+0x20>
 80087e6:	6005      	str	r5, [r0, #0]
 80087e8:	e7d6      	b.n	8008798 <_malloc_r+0xa8>
 80087ea:	bf00      	nop
 80087ec:	20000a30 	.word	0x20000a30

080087f0 <__malloc_lock>:
 80087f0:	4801      	ldr	r0, [pc, #4]	@ (80087f8 <__malloc_lock+0x8>)
 80087f2:	f7ff b8a4 	b.w	800793e <__retarget_lock_acquire_recursive>
 80087f6:	bf00      	nop
 80087f8:	20000a28 	.word	0x20000a28

080087fc <__malloc_unlock>:
 80087fc:	4801      	ldr	r0, [pc, #4]	@ (8008804 <__malloc_unlock+0x8>)
 80087fe:	f7ff b89f 	b.w	8007940 <__retarget_lock_release_recursive>
 8008802:	bf00      	nop
 8008804:	20000a28 	.word	0x20000a28

08008808 <_Balloc>:
 8008808:	b570      	push	{r4, r5, r6, lr}
 800880a:	69c6      	ldr	r6, [r0, #28]
 800880c:	4604      	mov	r4, r0
 800880e:	460d      	mov	r5, r1
 8008810:	b976      	cbnz	r6, 8008830 <_Balloc+0x28>
 8008812:	2010      	movs	r0, #16
 8008814:	f7ff ff42 	bl	800869c <malloc>
 8008818:	4602      	mov	r2, r0
 800881a:	61e0      	str	r0, [r4, #28]
 800881c:	b920      	cbnz	r0, 8008828 <_Balloc+0x20>
 800881e:	4b18      	ldr	r3, [pc, #96]	@ (8008880 <_Balloc+0x78>)
 8008820:	4818      	ldr	r0, [pc, #96]	@ (8008884 <_Balloc+0x7c>)
 8008822:	216b      	movs	r1, #107	@ 0x6b
 8008824:	f001 fd70 	bl	800a308 <__assert_func>
 8008828:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800882c:	6006      	str	r6, [r0, #0]
 800882e:	60c6      	str	r6, [r0, #12]
 8008830:	69e6      	ldr	r6, [r4, #28]
 8008832:	68f3      	ldr	r3, [r6, #12]
 8008834:	b183      	cbz	r3, 8008858 <_Balloc+0x50>
 8008836:	69e3      	ldr	r3, [r4, #28]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800883e:	b9b8      	cbnz	r0, 8008870 <_Balloc+0x68>
 8008840:	2101      	movs	r1, #1
 8008842:	fa01 f605 	lsl.w	r6, r1, r5
 8008846:	1d72      	adds	r2, r6, #5
 8008848:	0092      	lsls	r2, r2, #2
 800884a:	4620      	mov	r0, r4
 800884c:	f001 fd7a 	bl	800a344 <_calloc_r>
 8008850:	b160      	cbz	r0, 800886c <_Balloc+0x64>
 8008852:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008856:	e00e      	b.n	8008876 <_Balloc+0x6e>
 8008858:	2221      	movs	r2, #33	@ 0x21
 800885a:	2104      	movs	r1, #4
 800885c:	4620      	mov	r0, r4
 800885e:	f001 fd71 	bl	800a344 <_calloc_r>
 8008862:	69e3      	ldr	r3, [r4, #28]
 8008864:	60f0      	str	r0, [r6, #12]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1e4      	bne.n	8008836 <_Balloc+0x2e>
 800886c:	2000      	movs	r0, #0
 800886e:	bd70      	pop	{r4, r5, r6, pc}
 8008870:	6802      	ldr	r2, [r0, #0]
 8008872:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008876:	2300      	movs	r3, #0
 8008878:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800887c:	e7f7      	b.n	800886e <_Balloc+0x66>
 800887e:	bf00      	nop
 8008880:	0800b08e 	.word	0x0800b08e
 8008884:	0800b10e 	.word	0x0800b10e

08008888 <_Bfree>:
 8008888:	b570      	push	{r4, r5, r6, lr}
 800888a:	69c6      	ldr	r6, [r0, #28]
 800888c:	4605      	mov	r5, r0
 800888e:	460c      	mov	r4, r1
 8008890:	b976      	cbnz	r6, 80088b0 <_Bfree+0x28>
 8008892:	2010      	movs	r0, #16
 8008894:	f7ff ff02 	bl	800869c <malloc>
 8008898:	4602      	mov	r2, r0
 800889a:	61e8      	str	r0, [r5, #28]
 800889c:	b920      	cbnz	r0, 80088a8 <_Bfree+0x20>
 800889e:	4b09      	ldr	r3, [pc, #36]	@ (80088c4 <_Bfree+0x3c>)
 80088a0:	4809      	ldr	r0, [pc, #36]	@ (80088c8 <_Bfree+0x40>)
 80088a2:	218f      	movs	r1, #143	@ 0x8f
 80088a4:	f001 fd30 	bl	800a308 <__assert_func>
 80088a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088ac:	6006      	str	r6, [r0, #0]
 80088ae:	60c6      	str	r6, [r0, #12]
 80088b0:	b13c      	cbz	r4, 80088c2 <_Bfree+0x3a>
 80088b2:	69eb      	ldr	r3, [r5, #28]
 80088b4:	6862      	ldr	r2, [r4, #4]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088bc:	6021      	str	r1, [r4, #0]
 80088be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088c2:	bd70      	pop	{r4, r5, r6, pc}
 80088c4:	0800b08e 	.word	0x0800b08e
 80088c8:	0800b10e 	.word	0x0800b10e

080088cc <__multadd>:
 80088cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d0:	690d      	ldr	r5, [r1, #16]
 80088d2:	4607      	mov	r7, r0
 80088d4:	460c      	mov	r4, r1
 80088d6:	461e      	mov	r6, r3
 80088d8:	f101 0c14 	add.w	ip, r1, #20
 80088dc:	2000      	movs	r0, #0
 80088de:	f8dc 3000 	ldr.w	r3, [ip]
 80088e2:	b299      	uxth	r1, r3
 80088e4:	fb02 6101 	mla	r1, r2, r1, r6
 80088e8:	0c1e      	lsrs	r6, r3, #16
 80088ea:	0c0b      	lsrs	r3, r1, #16
 80088ec:	fb02 3306 	mla	r3, r2, r6, r3
 80088f0:	b289      	uxth	r1, r1
 80088f2:	3001      	adds	r0, #1
 80088f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80088f8:	4285      	cmp	r5, r0
 80088fa:	f84c 1b04 	str.w	r1, [ip], #4
 80088fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008902:	dcec      	bgt.n	80088de <__multadd+0x12>
 8008904:	b30e      	cbz	r6, 800894a <__multadd+0x7e>
 8008906:	68a3      	ldr	r3, [r4, #8]
 8008908:	42ab      	cmp	r3, r5
 800890a:	dc19      	bgt.n	8008940 <__multadd+0x74>
 800890c:	6861      	ldr	r1, [r4, #4]
 800890e:	4638      	mov	r0, r7
 8008910:	3101      	adds	r1, #1
 8008912:	f7ff ff79 	bl	8008808 <_Balloc>
 8008916:	4680      	mov	r8, r0
 8008918:	b928      	cbnz	r0, 8008926 <__multadd+0x5a>
 800891a:	4602      	mov	r2, r0
 800891c:	4b0c      	ldr	r3, [pc, #48]	@ (8008950 <__multadd+0x84>)
 800891e:	480d      	ldr	r0, [pc, #52]	@ (8008954 <__multadd+0x88>)
 8008920:	21ba      	movs	r1, #186	@ 0xba
 8008922:	f001 fcf1 	bl	800a308 <__assert_func>
 8008926:	6922      	ldr	r2, [r4, #16]
 8008928:	3202      	adds	r2, #2
 800892a:	f104 010c 	add.w	r1, r4, #12
 800892e:	0092      	lsls	r2, r2, #2
 8008930:	300c      	adds	r0, #12
 8008932:	f7ff f806 	bl	8007942 <memcpy>
 8008936:	4621      	mov	r1, r4
 8008938:	4638      	mov	r0, r7
 800893a:	f7ff ffa5 	bl	8008888 <_Bfree>
 800893e:	4644      	mov	r4, r8
 8008940:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008944:	3501      	adds	r5, #1
 8008946:	615e      	str	r6, [r3, #20]
 8008948:	6125      	str	r5, [r4, #16]
 800894a:	4620      	mov	r0, r4
 800894c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008950:	0800b0fd 	.word	0x0800b0fd
 8008954:	0800b10e 	.word	0x0800b10e

08008958 <__s2b>:
 8008958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800895c:	460c      	mov	r4, r1
 800895e:	4615      	mov	r5, r2
 8008960:	461f      	mov	r7, r3
 8008962:	2209      	movs	r2, #9
 8008964:	3308      	adds	r3, #8
 8008966:	4606      	mov	r6, r0
 8008968:	fb93 f3f2 	sdiv	r3, r3, r2
 800896c:	2100      	movs	r1, #0
 800896e:	2201      	movs	r2, #1
 8008970:	429a      	cmp	r2, r3
 8008972:	db09      	blt.n	8008988 <__s2b+0x30>
 8008974:	4630      	mov	r0, r6
 8008976:	f7ff ff47 	bl	8008808 <_Balloc>
 800897a:	b940      	cbnz	r0, 800898e <__s2b+0x36>
 800897c:	4602      	mov	r2, r0
 800897e:	4b19      	ldr	r3, [pc, #100]	@ (80089e4 <__s2b+0x8c>)
 8008980:	4819      	ldr	r0, [pc, #100]	@ (80089e8 <__s2b+0x90>)
 8008982:	21d3      	movs	r1, #211	@ 0xd3
 8008984:	f001 fcc0 	bl	800a308 <__assert_func>
 8008988:	0052      	lsls	r2, r2, #1
 800898a:	3101      	adds	r1, #1
 800898c:	e7f0      	b.n	8008970 <__s2b+0x18>
 800898e:	9b08      	ldr	r3, [sp, #32]
 8008990:	6143      	str	r3, [r0, #20]
 8008992:	2d09      	cmp	r5, #9
 8008994:	f04f 0301 	mov.w	r3, #1
 8008998:	6103      	str	r3, [r0, #16]
 800899a:	dd16      	ble.n	80089ca <__s2b+0x72>
 800899c:	f104 0909 	add.w	r9, r4, #9
 80089a0:	46c8      	mov	r8, r9
 80089a2:	442c      	add	r4, r5
 80089a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80089a8:	4601      	mov	r1, r0
 80089aa:	3b30      	subs	r3, #48	@ 0x30
 80089ac:	220a      	movs	r2, #10
 80089ae:	4630      	mov	r0, r6
 80089b0:	f7ff ff8c 	bl	80088cc <__multadd>
 80089b4:	45a0      	cmp	r8, r4
 80089b6:	d1f5      	bne.n	80089a4 <__s2b+0x4c>
 80089b8:	f1a5 0408 	sub.w	r4, r5, #8
 80089bc:	444c      	add	r4, r9
 80089be:	1b2d      	subs	r5, r5, r4
 80089c0:	1963      	adds	r3, r4, r5
 80089c2:	42bb      	cmp	r3, r7
 80089c4:	db04      	blt.n	80089d0 <__s2b+0x78>
 80089c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089ca:	340a      	adds	r4, #10
 80089cc:	2509      	movs	r5, #9
 80089ce:	e7f6      	b.n	80089be <__s2b+0x66>
 80089d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80089d4:	4601      	mov	r1, r0
 80089d6:	3b30      	subs	r3, #48	@ 0x30
 80089d8:	220a      	movs	r2, #10
 80089da:	4630      	mov	r0, r6
 80089dc:	f7ff ff76 	bl	80088cc <__multadd>
 80089e0:	e7ee      	b.n	80089c0 <__s2b+0x68>
 80089e2:	bf00      	nop
 80089e4:	0800b0fd 	.word	0x0800b0fd
 80089e8:	0800b10e 	.word	0x0800b10e

080089ec <__hi0bits>:
 80089ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80089f0:	4603      	mov	r3, r0
 80089f2:	bf36      	itet	cc
 80089f4:	0403      	lslcc	r3, r0, #16
 80089f6:	2000      	movcs	r0, #0
 80089f8:	2010      	movcc	r0, #16
 80089fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089fe:	bf3c      	itt	cc
 8008a00:	021b      	lslcc	r3, r3, #8
 8008a02:	3008      	addcc	r0, #8
 8008a04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a08:	bf3c      	itt	cc
 8008a0a:	011b      	lslcc	r3, r3, #4
 8008a0c:	3004      	addcc	r0, #4
 8008a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a12:	bf3c      	itt	cc
 8008a14:	009b      	lslcc	r3, r3, #2
 8008a16:	3002      	addcc	r0, #2
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	db05      	blt.n	8008a28 <__hi0bits+0x3c>
 8008a1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008a20:	f100 0001 	add.w	r0, r0, #1
 8008a24:	bf08      	it	eq
 8008a26:	2020      	moveq	r0, #32
 8008a28:	4770      	bx	lr

08008a2a <__lo0bits>:
 8008a2a:	6803      	ldr	r3, [r0, #0]
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	f013 0007 	ands.w	r0, r3, #7
 8008a32:	d00b      	beq.n	8008a4c <__lo0bits+0x22>
 8008a34:	07d9      	lsls	r1, r3, #31
 8008a36:	d421      	bmi.n	8008a7c <__lo0bits+0x52>
 8008a38:	0798      	lsls	r0, r3, #30
 8008a3a:	bf49      	itett	mi
 8008a3c:	085b      	lsrmi	r3, r3, #1
 8008a3e:	089b      	lsrpl	r3, r3, #2
 8008a40:	2001      	movmi	r0, #1
 8008a42:	6013      	strmi	r3, [r2, #0]
 8008a44:	bf5c      	itt	pl
 8008a46:	6013      	strpl	r3, [r2, #0]
 8008a48:	2002      	movpl	r0, #2
 8008a4a:	4770      	bx	lr
 8008a4c:	b299      	uxth	r1, r3
 8008a4e:	b909      	cbnz	r1, 8008a54 <__lo0bits+0x2a>
 8008a50:	0c1b      	lsrs	r3, r3, #16
 8008a52:	2010      	movs	r0, #16
 8008a54:	b2d9      	uxtb	r1, r3
 8008a56:	b909      	cbnz	r1, 8008a5c <__lo0bits+0x32>
 8008a58:	3008      	adds	r0, #8
 8008a5a:	0a1b      	lsrs	r3, r3, #8
 8008a5c:	0719      	lsls	r1, r3, #28
 8008a5e:	bf04      	itt	eq
 8008a60:	091b      	lsreq	r3, r3, #4
 8008a62:	3004      	addeq	r0, #4
 8008a64:	0799      	lsls	r1, r3, #30
 8008a66:	bf04      	itt	eq
 8008a68:	089b      	lsreq	r3, r3, #2
 8008a6a:	3002      	addeq	r0, #2
 8008a6c:	07d9      	lsls	r1, r3, #31
 8008a6e:	d403      	bmi.n	8008a78 <__lo0bits+0x4e>
 8008a70:	085b      	lsrs	r3, r3, #1
 8008a72:	f100 0001 	add.w	r0, r0, #1
 8008a76:	d003      	beq.n	8008a80 <__lo0bits+0x56>
 8008a78:	6013      	str	r3, [r2, #0]
 8008a7a:	4770      	bx	lr
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	4770      	bx	lr
 8008a80:	2020      	movs	r0, #32
 8008a82:	4770      	bx	lr

08008a84 <__i2b>:
 8008a84:	b510      	push	{r4, lr}
 8008a86:	460c      	mov	r4, r1
 8008a88:	2101      	movs	r1, #1
 8008a8a:	f7ff febd 	bl	8008808 <_Balloc>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	b928      	cbnz	r0, 8008a9e <__i2b+0x1a>
 8008a92:	4b05      	ldr	r3, [pc, #20]	@ (8008aa8 <__i2b+0x24>)
 8008a94:	4805      	ldr	r0, [pc, #20]	@ (8008aac <__i2b+0x28>)
 8008a96:	f240 1145 	movw	r1, #325	@ 0x145
 8008a9a:	f001 fc35 	bl	800a308 <__assert_func>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	6144      	str	r4, [r0, #20]
 8008aa2:	6103      	str	r3, [r0, #16]
 8008aa4:	bd10      	pop	{r4, pc}
 8008aa6:	bf00      	nop
 8008aa8:	0800b0fd 	.word	0x0800b0fd
 8008aac:	0800b10e 	.word	0x0800b10e

08008ab0 <__multiply>:
 8008ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab4:	4614      	mov	r4, r2
 8008ab6:	690a      	ldr	r2, [r1, #16]
 8008ab8:	6923      	ldr	r3, [r4, #16]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	bfa8      	it	ge
 8008abe:	4623      	movge	r3, r4
 8008ac0:	460f      	mov	r7, r1
 8008ac2:	bfa4      	itt	ge
 8008ac4:	460c      	movge	r4, r1
 8008ac6:	461f      	movge	r7, r3
 8008ac8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008acc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008ad0:	68a3      	ldr	r3, [r4, #8]
 8008ad2:	6861      	ldr	r1, [r4, #4]
 8008ad4:	eb0a 0609 	add.w	r6, sl, r9
 8008ad8:	42b3      	cmp	r3, r6
 8008ada:	b085      	sub	sp, #20
 8008adc:	bfb8      	it	lt
 8008ade:	3101      	addlt	r1, #1
 8008ae0:	f7ff fe92 	bl	8008808 <_Balloc>
 8008ae4:	b930      	cbnz	r0, 8008af4 <__multiply+0x44>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	4b44      	ldr	r3, [pc, #272]	@ (8008bfc <__multiply+0x14c>)
 8008aea:	4845      	ldr	r0, [pc, #276]	@ (8008c00 <__multiply+0x150>)
 8008aec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008af0:	f001 fc0a 	bl	800a308 <__assert_func>
 8008af4:	f100 0514 	add.w	r5, r0, #20
 8008af8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008afc:	462b      	mov	r3, r5
 8008afe:	2200      	movs	r2, #0
 8008b00:	4543      	cmp	r3, r8
 8008b02:	d321      	bcc.n	8008b48 <__multiply+0x98>
 8008b04:	f107 0114 	add.w	r1, r7, #20
 8008b08:	f104 0214 	add.w	r2, r4, #20
 8008b0c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008b10:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008b14:	9302      	str	r3, [sp, #8]
 8008b16:	1b13      	subs	r3, r2, r4
 8008b18:	3b15      	subs	r3, #21
 8008b1a:	f023 0303 	bic.w	r3, r3, #3
 8008b1e:	3304      	adds	r3, #4
 8008b20:	f104 0715 	add.w	r7, r4, #21
 8008b24:	42ba      	cmp	r2, r7
 8008b26:	bf38      	it	cc
 8008b28:	2304      	movcc	r3, #4
 8008b2a:	9301      	str	r3, [sp, #4]
 8008b2c:	9b02      	ldr	r3, [sp, #8]
 8008b2e:	9103      	str	r1, [sp, #12]
 8008b30:	428b      	cmp	r3, r1
 8008b32:	d80c      	bhi.n	8008b4e <__multiply+0x9e>
 8008b34:	2e00      	cmp	r6, #0
 8008b36:	dd03      	ble.n	8008b40 <__multiply+0x90>
 8008b38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d05b      	beq.n	8008bf8 <__multiply+0x148>
 8008b40:	6106      	str	r6, [r0, #16]
 8008b42:	b005      	add	sp, #20
 8008b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b48:	f843 2b04 	str.w	r2, [r3], #4
 8008b4c:	e7d8      	b.n	8008b00 <__multiply+0x50>
 8008b4e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008b52:	f1ba 0f00 	cmp.w	sl, #0
 8008b56:	d024      	beq.n	8008ba2 <__multiply+0xf2>
 8008b58:	f104 0e14 	add.w	lr, r4, #20
 8008b5c:	46a9      	mov	r9, r5
 8008b5e:	f04f 0c00 	mov.w	ip, #0
 8008b62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b66:	f8d9 3000 	ldr.w	r3, [r9]
 8008b6a:	fa1f fb87 	uxth.w	fp, r7
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	fb0a 330b 	mla	r3, sl, fp, r3
 8008b74:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008b78:	f8d9 7000 	ldr.w	r7, [r9]
 8008b7c:	4463      	add	r3, ip
 8008b7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b82:	fb0a c70b 	mla	r7, sl, fp, ip
 8008b86:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b90:	4572      	cmp	r2, lr
 8008b92:	f849 3b04 	str.w	r3, [r9], #4
 8008b96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b9a:	d8e2      	bhi.n	8008b62 <__multiply+0xb2>
 8008b9c:	9b01      	ldr	r3, [sp, #4]
 8008b9e:	f845 c003 	str.w	ip, [r5, r3]
 8008ba2:	9b03      	ldr	r3, [sp, #12]
 8008ba4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008ba8:	3104      	adds	r1, #4
 8008baa:	f1b9 0f00 	cmp.w	r9, #0
 8008bae:	d021      	beq.n	8008bf4 <__multiply+0x144>
 8008bb0:	682b      	ldr	r3, [r5, #0]
 8008bb2:	f104 0c14 	add.w	ip, r4, #20
 8008bb6:	46ae      	mov	lr, r5
 8008bb8:	f04f 0a00 	mov.w	sl, #0
 8008bbc:	f8bc b000 	ldrh.w	fp, [ip]
 8008bc0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008bc4:	fb09 770b 	mla	r7, r9, fp, r7
 8008bc8:	4457      	add	r7, sl
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008bd0:	f84e 3b04 	str.w	r3, [lr], #4
 8008bd4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008bd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bdc:	f8be 3000 	ldrh.w	r3, [lr]
 8008be0:	fb09 330a 	mla	r3, r9, sl, r3
 8008be4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008be8:	4562      	cmp	r2, ip
 8008bea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bee:	d8e5      	bhi.n	8008bbc <__multiply+0x10c>
 8008bf0:	9f01      	ldr	r7, [sp, #4]
 8008bf2:	51eb      	str	r3, [r5, r7]
 8008bf4:	3504      	adds	r5, #4
 8008bf6:	e799      	b.n	8008b2c <__multiply+0x7c>
 8008bf8:	3e01      	subs	r6, #1
 8008bfa:	e79b      	b.n	8008b34 <__multiply+0x84>
 8008bfc:	0800b0fd 	.word	0x0800b0fd
 8008c00:	0800b10e 	.word	0x0800b10e

08008c04 <__pow5mult>:
 8008c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c08:	4615      	mov	r5, r2
 8008c0a:	f012 0203 	ands.w	r2, r2, #3
 8008c0e:	4607      	mov	r7, r0
 8008c10:	460e      	mov	r6, r1
 8008c12:	d007      	beq.n	8008c24 <__pow5mult+0x20>
 8008c14:	4c25      	ldr	r4, [pc, #148]	@ (8008cac <__pow5mult+0xa8>)
 8008c16:	3a01      	subs	r2, #1
 8008c18:	2300      	movs	r3, #0
 8008c1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c1e:	f7ff fe55 	bl	80088cc <__multadd>
 8008c22:	4606      	mov	r6, r0
 8008c24:	10ad      	asrs	r5, r5, #2
 8008c26:	d03d      	beq.n	8008ca4 <__pow5mult+0xa0>
 8008c28:	69fc      	ldr	r4, [r7, #28]
 8008c2a:	b97c      	cbnz	r4, 8008c4c <__pow5mult+0x48>
 8008c2c:	2010      	movs	r0, #16
 8008c2e:	f7ff fd35 	bl	800869c <malloc>
 8008c32:	4602      	mov	r2, r0
 8008c34:	61f8      	str	r0, [r7, #28]
 8008c36:	b928      	cbnz	r0, 8008c44 <__pow5mult+0x40>
 8008c38:	4b1d      	ldr	r3, [pc, #116]	@ (8008cb0 <__pow5mult+0xac>)
 8008c3a:	481e      	ldr	r0, [pc, #120]	@ (8008cb4 <__pow5mult+0xb0>)
 8008c3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008c40:	f001 fb62 	bl	800a308 <__assert_func>
 8008c44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c48:	6004      	str	r4, [r0, #0]
 8008c4a:	60c4      	str	r4, [r0, #12]
 8008c4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008c50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c54:	b94c      	cbnz	r4, 8008c6a <__pow5mult+0x66>
 8008c56:	f240 2171 	movw	r1, #625	@ 0x271
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	f7ff ff12 	bl	8008a84 <__i2b>
 8008c60:	2300      	movs	r3, #0
 8008c62:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c66:	4604      	mov	r4, r0
 8008c68:	6003      	str	r3, [r0, #0]
 8008c6a:	f04f 0900 	mov.w	r9, #0
 8008c6e:	07eb      	lsls	r3, r5, #31
 8008c70:	d50a      	bpl.n	8008c88 <__pow5mult+0x84>
 8008c72:	4631      	mov	r1, r6
 8008c74:	4622      	mov	r2, r4
 8008c76:	4638      	mov	r0, r7
 8008c78:	f7ff ff1a 	bl	8008ab0 <__multiply>
 8008c7c:	4631      	mov	r1, r6
 8008c7e:	4680      	mov	r8, r0
 8008c80:	4638      	mov	r0, r7
 8008c82:	f7ff fe01 	bl	8008888 <_Bfree>
 8008c86:	4646      	mov	r6, r8
 8008c88:	106d      	asrs	r5, r5, #1
 8008c8a:	d00b      	beq.n	8008ca4 <__pow5mult+0xa0>
 8008c8c:	6820      	ldr	r0, [r4, #0]
 8008c8e:	b938      	cbnz	r0, 8008ca0 <__pow5mult+0x9c>
 8008c90:	4622      	mov	r2, r4
 8008c92:	4621      	mov	r1, r4
 8008c94:	4638      	mov	r0, r7
 8008c96:	f7ff ff0b 	bl	8008ab0 <__multiply>
 8008c9a:	6020      	str	r0, [r4, #0]
 8008c9c:	f8c0 9000 	str.w	r9, [r0]
 8008ca0:	4604      	mov	r4, r0
 8008ca2:	e7e4      	b.n	8008c6e <__pow5mult+0x6a>
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008caa:	bf00      	nop
 8008cac:	0800b168 	.word	0x0800b168
 8008cb0:	0800b08e 	.word	0x0800b08e
 8008cb4:	0800b10e 	.word	0x0800b10e

08008cb8 <__lshift>:
 8008cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cbc:	460c      	mov	r4, r1
 8008cbe:	6849      	ldr	r1, [r1, #4]
 8008cc0:	6923      	ldr	r3, [r4, #16]
 8008cc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cc6:	68a3      	ldr	r3, [r4, #8]
 8008cc8:	4607      	mov	r7, r0
 8008cca:	4691      	mov	r9, r2
 8008ccc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008cd0:	f108 0601 	add.w	r6, r8, #1
 8008cd4:	42b3      	cmp	r3, r6
 8008cd6:	db0b      	blt.n	8008cf0 <__lshift+0x38>
 8008cd8:	4638      	mov	r0, r7
 8008cda:	f7ff fd95 	bl	8008808 <_Balloc>
 8008cde:	4605      	mov	r5, r0
 8008ce0:	b948      	cbnz	r0, 8008cf6 <__lshift+0x3e>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	4b28      	ldr	r3, [pc, #160]	@ (8008d88 <__lshift+0xd0>)
 8008ce6:	4829      	ldr	r0, [pc, #164]	@ (8008d8c <__lshift+0xd4>)
 8008ce8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008cec:	f001 fb0c 	bl	800a308 <__assert_func>
 8008cf0:	3101      	adds	r1, #1
 8008cf2:	005b      	lsls	r3, r3, #1
 8008cf4:	e7ee      	b.n	8008cd4 <__lshift+0x1c>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	f100 0114 	add.w	r1, r0, #20
 8008cfc:	f100 0210 	add.w	r2, r0, #16
 8008d00:	4618      	mov	r0, r3
 8008d02:	4553      	cmp	r3, sl
 8008d04:	db33      	blt.n	8008d6e <__lshift+0xb6>
 8008d06:	6920      	ldr	r0, [r4, #16]
 8008d08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d0c:	f104 0314 	add.w	r3, r4, #20
 8008d10:	f019 091f 	ands.w	r9, r9, #31
 8008d14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d1c:	d02b      	beq.n	8008d76 <__lshift+0xbe>
 8008d1e:	f1c9 0e20 	rsb	lr, r9, #32
 8008d22:	468a      	mov	sl, r1
 8008d24:	2200      	movs	r2, #0
 8008d26:	6818      	ldr	r0, [r3, #0]
 8008d28:	fa00 f009 	lsl.w	r0, r0, r9
 8008d2c:	4310      	orrs	r0, r2
 8008d2e:	f84a 0b04 	str.w	r0, [sl], #4
 8008d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d36:	459c      	cmp	ip, r3
 8008d38:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d3c:	d8f3      	bhi.n	8008d26 <__lshift+0x6e>
 8008d3e:	ebac 0304 	sub.w	r3, ip, r4
 8008d42:	3b15      	subs	r3, #21
 8008d44:	f023 0303 	bic.w	r3, r3, #3
 8008d48:	3304      	adds	r3, #4
 8008d4a:	f104 0015 	add.w	r0, r4, #21
 8008d4e:	4584      	cmp	ip, r0
 8008d50:	bf38      	it	cc
 8008d52:	2304      	movcc	r3, #4
 8008d54:	50ca      	str	r2, [r1, r3]
 8008d56:	b10a      	cbz	r2, 8008d5c <__lshift+0xa4>
 8008d58:	f108 0602 	add.w	r6, r8, #2
 8008d5c:	3e01      	subs	r6, #1
 8008d5e:	4638      	mov	r0, r7
 8008d60:	612e      	str	r6, [r5, #16]
 8008d62:	4621      	mov	r1, r4
 8008d64:	f7ff fd90 	bl	8008888 <_Bfree>
 8008d68:	4628      	mov	r0, r5
 8008d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d72:	3301      	adds	r3, #1
 8008d74:	e7c5      	b.n	8008d02 <__lshift+0x4a>
 8008d76:	3904      	subs	r1, #4
 8008d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d80:	459c      	cmp	ip, r3
 8008d82:	d8f9      	bhi.n	8008d78 <__lshift+0xc0>
 8008d84:	e7ea      	b.n	8008d5c <__lshift+0xa4>
 8008d86:	bf00      	nop
 8008d88:	0800b0fd 	.word	0x0800b0fd
 8008d8c:	0800b10e 	.word	0x0800b10e

08008d90 <__mcmp>:
 8008d90:	690a      	ldr	r2, [r1, #16]
 8008d92:	4603      	mov	r3, r0
 8008d94:	6900      	ldr	r0, [r0, #16]
 8008d96:	1a80      	subs	r0, r0, r2
 8008d98:	b530      	push	{r4, r5, lr}
 8008d9a:	d10e      	bne.n	8008dba <__mcmp+0x2a>
 8008d9c:	3314      	adds	r3, #20
 8008d9e:	3114      	adds	r1, #20
 8008da0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008da4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008da8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008dac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008db0:	4295      	cmp	r5, r2
 8008db2:	d003      	beq.n	8008dbc <__mcmp+0x2c>
 8008db4:	d205      	bcs.n	8008dc2 <__mcmp+0x32>
 8008db6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dba:	bd30      	pop	{r4, r5, pc}
 8008dbc:	42a3      	cmp	r3, r4
 8008dbe:	d3f3      	bcc.n	8008da8 <__mcmp+0x18>
 8008dc0:	e7fb      	b.n	8008dba <__mcmp+0x2a>
 8008dc2:	2001      	movs	r0, #1
 8008dc4:	e7f9      	b.n	8008dba <__mcmp+0x2a>
	...

08008dc8 <__mdiff>:
 8008dc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dcc:	4689      	mov	r9, r1
 8008dce:	4606      	mov	r6, r0
 8008dd0:	4611      	mov	r1, r2
 8008dd2:	4648      	mov	r0, r9
 8008dd4:	4614      	mov	r4, r2
 8008dd6:	f7ff ffdb 	bl	8008d90 <__mcmp>
 8008dda:	1e05      	subs	r5, r0, #0
 8008ddc:	d112      	bne.n	8008e04 <__mdiff+0x3c>
 8008dde:	4629      	mov	r1, r5
 8008de0:	4630      	mov	r0, r6
 8008de2:	f7ff fd11 	bl	8008808 <_Balloc>
 8008de6:	4602      	mov	r2, r0
 8008de8:	b928      	cbnz	r0, 8008df6 <__mdiff+0x2e>
 8008dea:	4b3f      	ldr	r3, [pc, #252]	@ (8008ee8 <__mdiff+0x120>)
 8008dec:	f240 2137 	movw	r1, #567	@ 0x237
 8008df0:	483e      	ldr	r0, [pc, #248]	@ (8008eec <__mdiff+0x124>)
 8008df2:	f001 fa89 	bl	800a308 <__assert_func>
 8008df6:	2301      	movs	r3, #1
 8008df8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008dfc:	4610      	mov	r0, r2
 8008dfe:	b003      	add	sp, #12
 8008e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e04:	bfbc      	itt	lt
 8008e06:	464b      	movlt	r3, r9
 8008e08:	46a1      	movlt	r9, r4
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008e10:	bfba      	itte	lt
 8008e12:	461c      	movlt	r4, r3
 8008e14:	2501      	movlt	r5, #1
 8008e16:	2500      	movge	r5, #0
 8008e18:	f7ff fcf6 	bl	8008808 <_Balloc>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	b918      	cbnz	r0, 8008e28 <__mdiff+0x60>
 8008e20:	4b31      	ldr	r3, [pc, #196]	@ (8008ee8 <__mdiff+0x120>)
 8008e22:	f240 2145 	movw	r1, #581	@ 0x245
 8008e26:	e7e3      	b.n	8008df0 <__mdiff+0x28>
 8008e28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008e2c:	6926      	ldr	r6, [r4, #16]
 8008e2e:	60c5      	str	r5, [r0, #12]
 8008e30:	f109 0310 	add.w	r3, r9, #16
 8008e34:	f109 0514 	add.w	r5, r9, #20
 8008e38:	f104 0e14 	add.w	lr, r4, #20
 8008e3c:	f100 0b14 	add.w	fp, r0, #20
 8008e40:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008e44:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008e48:	9301      	str	r3, [sp, #4]
 8008e4a:	46d9      	mov	r9, fp
 8008e4c:	f04f 0c00 	mov.w	ip, #0
 8008e50:	9b01      	ldr	r3, [sp, #4]
 8008e52:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008e56:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008e5a:	9301      	str	r3, [sp, #4]
 8008e5c:	fa1f f38a 	uxth.w	r3, sl
 8008e60:	4619      	mov	r1, r3
 8008e62:	b283      	uxth	r3, r0
 8008e64:	1acb      	subs	r3, r1, r3
 8008e66:	0c00      	lsrs	r0, r0, #16
 8008e68:	4463      	add	r3, ip
 8008e6a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008e6e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008e78:	4576      	cmp	r6, lr
 8008e7a:	f849 3b04 	str.w	r3, [r9], #4
 8008e7e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e82:	d8e5      	bhi.n	8008e50 <__mdiff+0x88>
 8008e84:	1b33      	subs	r3, r6, r4
 8008e86:	3b15      	subs	r3, #21
 8008e88:	f023 0303 	bic.w	r3, r3, #3
 8008e8c:	3415      	adds	r4, #21
 8008e8e:	3304      	adds	r3, #4
 8008e90:	42a6      	cmp	r6, r4
 8008e92:	bf38      	it	cc
 8008e94:	2304      	movcc	r3, #4
 8008e96:	441d      	add	r5, r3
 8008e98:	445b      	add	r3, fp
 8008e9a:	461e      	mov	r6, r3
 8008e9c:	462c      	mov	r4, r5
 8008e9e:	4544      	cmp	r4, r8
 8008ea0:	d30e      	bcc.n	8008ec0 <__mdiff+0xf8>
 8008ea2:	f108 0103 	add.w	r1, r8, #3
 8008ea6:	1b49      	subs	r1, r1, r5
 8008ea8:	f021 0103 	bic.w	r1, r1, #3
 8008eac:	3d03      	subs	r5, #3
 8008eae:	45a8      	cmp	r8, r5
 8008eb0:	bf38      	it	cc
 8008eb2:	2100      	movcc	r1, #0
 8008eb4:	440b      	add	r3, r1
 8008eb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008eba:	b191      	cbz	r1, 8008ee2 <__mdiff+0x11a>
 8008ebc:	6117      	str	r7, [r2, #16]
 8008ebe:	e79d      	b.n	8008dfc <__mdiff+0x34>
 8008ec0:	f854 1b04 	ldr.w	r1, [r4], #4
 8008ec4:	46e6      	mov	lr, ip
 8008ec6:	0c08      	lsrs	r0, r1, #16
 8008ec8:	fa1c fc81 	uxtah	ip, ip, r1
 8008ecc:	4471      	add	r1, lr
 8008ece:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008ed2:	b289      	uxth	r1, r1
 8008ed4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ed8:	f846 1b04 	str.w	r1, [r6], #4
 8008edc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ee0:	e7dd      	b.n	8008e9e <__mdiff+0xd6>
 8008ee2:	3f01      	subs	r7, #1
 8008ee4:	e7e7      	b.n	8008eb6 <__mdiff+0xee>
 8008ee6:	bf00      	nop
 8008ee8:	0800b0fd 	.word	0x0800b0fd
 8008eec:	0800b10e 	.word	0x0800b10e

08008ef0 <__ulp>:
 8008ef0:	b082      	sub	sp, #8
 8008ef2:	ed8d 0b00 	vstr	d0, [sp]
 8008ef6:	9a01      	ldr	r2, [sp, #4]
 8008ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8008f38 <__ulp+0x48>)
 8008efa:	4013      	ands	r3, r2
 8008efc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	dc08      	bgt.n	8008f16 <__ulp+0x26>
 8008f04:	425b      	negs	r3, r3
 8008f06:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008f0a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008f0e:	da04      	bge.n	8008f1a <__ulp+0x2a>
 8008f10:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008f14:	4113      	asrs	r3, r2
 8008f16:	2200      	movs	r2, #0
 8008f18:	e008      	b.n	8008f2c <__ulp+0x3c>
 8008f1a:	f1a2 0314 	sub.w	r3, r2, #20
 8008f1e:	2b1e      	cmp	r3, #30
 8008f20:	bfda      	itte	le
 8008f22:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008f26:	40da      	lsrle	r2, r3
 8008f28:	2201      	movgt	r2, #1
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	4610      	mov	r0, r2
 8008f30:	ec41 0b10 	vmov	d0, r0, r1
 8008f34:	b002      	add	sp, #8
 8008f36:	4770      	bx	lr
 8008f38:	7ff00000 	.word	0x7ff00000

08008f3c <__b2d>:
 8008f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f40:	6906      	ldr	r6, [r0, #16]
 8008f42:	f100 0814 	add.w	r8, r0, #20
 8008f46:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008f4a:	1f37      	subs	r7, r6, #4
 8008f4c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008f50:	4610      	mov	r0, r2
 8008f52:	f7ff fd4b 	bl	80089ec <__hi0bits>
 8008f56:	f1c0 0320 	rsb	r3, r0, #32
 8008f5a:	280a      	cmp	r0, #10
 8008f5c:	600b      	str	r3, [r1, #0]
 8008f5e:	491b      	ldr	r1, [pc, #108]	@ (8008fcc <__b2d+0x90>)
 8008f60:	dc15      	bgt.n	8008f8e <__b2d+0x52>
 8008f62:	f1c0 0c0b 	rsb	ip, r0, #11
 8008f66:	fa22 f30c 	lsr.w	r3, r2, ip
 8008f6a:	45b8      	cmp	r8, r7
 8008f6c:	ea43 0501 	orr.w	r5, r3, r1
 8008f70:	bf34      	ite	cc
 8008f72:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008f76:	2300      	movcs	r3, #0
 8008f78:	3015      	adds	r0, #21
 8008f7a:	fa02 f000 	lsl.w	r0, r2, r0
 8008f7e:	fa23 f30c 	lsr.w	r3, r3, ip
 8008f82:	4303      	orrs	r3, r0
 8008f84:	461c      	mov	r4, r3
 8008f86:	ec45 4b10 	vmov	d0, r4, r5
 8008f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f8e:	45b8      	cmp	r8, r7
 8008f90:	bf3a      	itte	cc
 8008f92:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008f96:	f1a6 0708 	subcc.w	r7, r6, #8
 8008f9a:	2300      	movcs	r3, #0
 8008f9c:	380b      	subs	r0, #11
 8008f9e:	d012      	beq.n	8008fc6 <__b2d+0x8a>
 8008fa0:	f1c0 0120 	rsb	r1, r0, #32
 8008fa4:	fa23 f401 	lsr.w	r4, r3, r1
 8008fa8:	4082      	lsls	r2, r0
 8008faa:	4322      	orrs	r2, r4
 8008fac:	4547      	cmp	r7, r8
 8008fae:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008fb2:	bf8c      	ite	hi
 8008fb4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008fb8:	2200      	movls	r2, #0
 8008fba:	4083      	lsls	r3, r0
 8008fbc:	40ca      	lsrs	r2, r1
 8008fbe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	e7de      	b.n	8008f84 <__b2d+0x48>
 8008fc6:	ea42 0501 	orr.w	r5, r2, r1
 8008fca:	e7db      	b.n	8008f84 <__b2d+0x48>
 8008fcc:	3ff00000 	.word	0x3ff00000

08008fd0 <__d2b>:
 8008fd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008fd4:	460f      	mov	r7, r1
 8008fd6:	2101      	movs	r1, #1
 8008fd8:	ec59 8b10 	vmov	r8, r9, d0
 8008fdc:	4616      	mov	r6, r2
 8008fde:	f7ff fc13 	bl	8008808 <_Balloc>
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	b930      	cbnz	r0, 8008ff4 <__d2b+0x24>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	4b23      	ldr	r3, [pc, #140]	@ (8009078 <__d2b+0xa8>)
 8008fea:	4824      	ldr	r0, [pc, #144]	@ (800907c <__d2b+0xac>)
 8008fec:	f240 310f 	movw	r1, #783	@ 0x30f
 8008ff0:	f001 f98a 	bl	800a308 <__assert_func>
 8008ff4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ff8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ffc:	b10d      	cbz	r5, 8009002 <__d2b+0x32>
 8008ffe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009002:	9301      	str	r3, [sp, #4]
 8009004:	f1b8 0300 	subs.w	r3, r8, #0
 8009008:	d023      	beq.n	8009052 <__d2b+0x82>
 800900a:	4668      	mov	r0, sp
 800900c:	9300      	str	r3, [sp, #0]
 800900e:	f7ff fd0c 	bl	8008a2a <__lo0bits>
 8009012:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009016:	b1d0      	cbz	r0, 800904e <__d2b+0x7e>
 8009018:	f1c0 0320 	rsb	r3, r0, #32
 800901c:	fa02 f303 	lsl.w	r3, r2, r3
 8009020:	430b      	orrs	r3, r1
 8009022:	40c2      	lsrs	r2, r0
 8009024:	6163      	str	r3, [r4, #20]
 8009026:	9201      	str	r2, [sp, #4]
 8009028:	9b01      	ldr	r3, [sp, #4]
 800902a:	61a3      	str	r3, [r4, #24]
 800902c:	2b00      	cmp	r3, #0
 800902e:	bf0c      	ite	eq
 8009030:	2201      	moveq	r2, #1
 8009032:	2202      	movne	r2, #2
 8009034:	6122      	str	r2, [r4, #16]
 8009036:	b1a5      	cbz	r5, 8009062 <__d2b+0x92>
 8009038:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800903c:	4405      	add	r5, r0
 800903e:	603d      	str	r5, [r7, #0]
 8009040:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009044:	6030      	str	r0, [r6, #0]
 8009046:	4620      	mov	r0, r4
 8009048:	b003      	add	sp, #12
 800904a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800904e:	6161      	str	r1, [r4, #20]
 8009050:	e7ea      	b.n	8009028 <__d2b+0x58>
 8009052:	a801      	add	r0, sp, #4
 8009054:	f7ff fce9 	bl	8008a2a <__lo0bits>
 8009058:	9b01      	ldr	r3, [sp, #4]
 800905a:	6163      	str	r3, [r4, #20]
 800905c:	3020      	adds	r0, #32
 800905e:	2201      	movs	r2, #1
 8009060:	e7e8      	b.n	8009034 <__d2b+0x64>
 8009062:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009066:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800906a:	6038      	str	r0, [r7, #0]
 800906c:	6918      	ldr	r0, [r3, #16]
 800906e:	f7ff fcbd 	bl	80089ec <__hi0bits>
 8009072:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009076:	e7e5      	b.n	8009044 <__d2b+0x74>
 8009078:	0800b0fd 	.word	0x0800b0fd
 800907c:	0800b10e 	.word	0x0800b10e

08009080 <__ratio>:
 8009080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009084:	b085      	sub	sp, #20
 8009086:	e9cd 1000 	strd	r1, r0, [sp]
 800908a:	a902      	add	r1, sp, #8
 800908c:	f7ff ff56 	bl	8008f3c <__b2d>
 8009090:	9800      	ldr	r0, [sp, #0]
 8009092:	a903      	add	r1, sp, #12
 8009094:	ec55 4b10 	vmov	r4, r5, d0
 8009098:	f7ff ff50 	bl	8008f3c <__b2d>
 800909c:	9b01      	ldr	r3, [sp, #4]
 800909e:	6919      	ldr	r1, [r3, #16]
 80090a0:	9b00      	ldr	r3, [sp, #0]
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	1ac9      	subs	r1, r1, r3
 80090a6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80090aa:	1a9b      	subs	r3, r3, r2
 80090ac:	ec5b ab10 	vmov	sl, fp, d0
 80090b0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	bfce      	itee	gt
 80090b8:	462a      	movgt	r2, r5
 80090ba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80090be:	465a      	movle	r2, fp
 80090c0:	462f      	mov	r7, r5
 80090c2:	46d9      	mov	r9, fp
 80090c4:	bfcc      	ite	gt
 80090c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80090ca:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80090ce:	464b      	mov	r3, r9
 80090d0:	4652      	mov	r2, sl
 80090d2:	4620      	mov	r0, r4
 80090d4:	4639      	mov	r1, r7
 80090d6:	f7f7 fbb9 	bl	800084c <__aeabi_ddiv>
 80090da:	ec41 0b10 	vmov	d0, r0, r1
 80090de:	b005      	add	sp, #20
 80090e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090e4 <__copybits>:
 80090e4:	3901      	subs	r1, #1
 80090e6:	b570      	push	{r4, r5, r6, lr}
 80090e8:	1149      	asrs	r1, r1, #5
 80090ea:	6914      	ldr	r4, [r2, #16]
 80090ec:	3101      	adds	r1, #1
 80090ee:	f102 0314 	add.w	r3, r2, #20
 80090f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80090f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80090fa:	1f05      	subs	r5, r0, #4
 80090fc:	42a3      	cmp	r3, r4
 80090fe:	d30c      	bcc.n	800911a <__copybits+0x36>
 8009100:	1aa3      	subs	r3, r4, r2
 8009102:	3b11      	subs	r3, #17
 8009104:	f023 0303 	bic.w	r3, r3, #3
 8009108:	3211      	adds	r2, #17
 800910a:	42a2      	cmp	r2, r4
 800910c:	bf88      	it	hi
 800910e:	2300      	movhi	r3, #0
 8009110:	4418      	add	r0, r3
 8009112:	2300      	movs	r3, #0
 8009114:	4288      	cmp	r0, r1
 8009116:	d305      	bcc.n	8009124 <__copybits+0x40>
 8009118:	bd70      	pop	{r4, r5, r6, pc}
 800911a:	f853 6b04 	ldr.w	r6, [r3], #4
 800911e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009122:	e7eb      	b.n	80090fc <__copybits+0x18>
 8009124:	f840 3b04 	str.w	r3, [r0], #4
 8009128:	e7f4      	b.n	8009114 <__copybits+0x30>

0800912a <__any_on>:
 800912a:	f100 0214 	add.w	r2, r0, #20
 800912e:	6900      	ldr	r0, [r0, #16]
 8009130:	114b      	asrs	r3, r1, #5
 8009132:	4298      	cmp	r0, r3
 8009134:	b510      	push	{r4, lr}
 8009136:	db11      	blt.n	800915c <__any_on+0x32>
 8009138:	dd0a      	ble.n	8009150 <__any_on+0x26>
 800913a:	f011 011f 	ands.w	r1, r1, #31
 800913e:	d007      	beq.n	8009150 <__any_on+0x26>
 8009140:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009144:	fa24 f001 	lsr.w	r0, r4, r1
 8009148:	fa00 f101 	lsl.w	r1, r0, r1
 800914c:	428c      	cmp	r4, r1
 800914e:	d10b      	bne.n	8009168 <__any_on+0x3e>
 8009150:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009154:	4293      	cmp	r3, r2
 8009156:	d803      	bhi.n	8009160 <__any_on+0x36>
 8009158:	2000      	movs	r0, #0
 800915a:	bd10      	pop	{r4, pc}
 800915c:	4603      	mov	r3, r0
 800915e:	e7f7      	b.n	8009150 <__any_on+0x26>
 8009160:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009164:	2900      	cmp	r1, #0
 8009166:	d0f5      	beq.n	8009154 <__any_on+0x2a>
 8009168:	2001      	movs	r0, #1
 800916a:	e7f6      	b.n	800915a <__any_on+0x30>

0800916c <sulp>:
 800916c:	b570      	push	{r4, r5, r6, lr}
 800916e:	4604      	mov	r4, r0
 8009170:	460d      	mov	r5, r1
 8009172:	ec45 4b10 	vmov	d0, r4, r5
 8009176:	4616      	mov	r6, r2
 8009178:	f7ff feba 	bl	8008ef0 <__ulp>
 800917c:	ec51 0b10 	vmov	r0, r1, d0
 8009180:	b17e      	cbz	r6, 80091a2 <sulp+0x36>
 8009182:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009186:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800918a:	2b00      	cmp	r3, #0
 800918c:	dd09      	ble.n	80091a2 <sulp+0x36>
 800918e:	051b      	lsls	r3, r3, #20
 8009190:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009194:	2400      	movs	r4, #0
 8009196:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800919a:	4622      	mov	r2, r4
 800919c:	462b      	mov	r3, r5
 800919e:	f7f7 fa2b 	bl	80005f8 <__aeabi_dmul>
 80091a2:	ec41 0b10 	vmov	d0, r0, r1
 80091a6:	bd70      	pop	{r4, r5, r6, pc}

080091a8 <_strtod_l>:
 80091a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ac:	b09f      	sub	sp, #124	@ 0x7c
 80091ae:	460c      	mov	r4, r1
 80091b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80091b2:	2200      	movs	r2, #0
 80091b4:	921a      	str	r2, [sp, #104]	@ 0x68
 80091b6:	9005      	str	r0, [sp, #20]
 80091b8:	f04f 0a00 	mov.w	sl, #0
 80091bc:	f04f 0b00 	mov.w	fp, #0
 80091c0:	460a      	mov	r2, r1
 80091c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80091c4:	7811      	ldrb	r1, [r2, #0]
 80091c6:	292b      	cmp	r1, #43	@ 0x2b
 80091c8:	d04a      	beq.n	8009260 <_strtod_l+0xb8>
 80091ca:	d838      	bhi.n	800923e <_strtod_l+0x96>
 80091cc:	290d      	cmp	r1, #13
 80091ce:	d832      	bhi.n	8009236 <_strtod_l+0x8e>
 80091d0:	2908      	cmp	r1, #8
 80091d2:	d832      	bhi.n	800923a <_strtod_l+0x92>
 80091d4:	2900      	cmp	r1, #0
 80091d6:	d03b      	beq.n	8009250 <_strtod_l+0xa8>
 80091d8:	2200      	movs	r2, #0
 80091da:	920b      	str	r2, [sp, #44]	@ 0x2c
 80091dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80091de:	782a      	ldrb	r2, [r5, #0]
 80091e0:	2a30      	cmp	r2, #48	@ 0x30
 80091e2:	f040 80b3 	bne.w	800934c <_strtod_l+0x1a4>
 80091e6:	786a      	ldrb	r2, [r5, #1]
 80091e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80091ec:	2a58      	cmp	r2, #88	@ 0x58
 80091ee:	d16e      	bne.n	80092ce <_strtod_l+0x126>
 80091f0:	9302      	str	r3, [sp, #8]
 80091f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091f4:	9301      	str	r3, [sp, #4]
 80091f6:	ab1a      	add	r3, sp, #104	@ 0x68
 80091f8:	9300      	str	r3, [sp, #0]
 80091fa:	4a8e      	ldr	r2, [pc, #568]	@ (8009434 <_strtod_l+0x28c>)
 80091fc:	9805      	ldr	r0, [sp, #20]
 80091fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009200:	a919      	add	r1, sp, #100	@ 0x64
 8009202:	f001 f91b 	bl	800a43c <__gethex>
 8009206:	f010 060f 	ands.w	r6, r0, #15
 800920a:	4604      	mov	r4, r0
 800920c:	d005      	beq.n	800921a <_strtod_l+0x72>
 800920e:	2e06      	cmp	r6, #6
 8009210:	d128      	bne.n	8009264 <_strtod_l+0xbc>
 8009212:	3501      	adds	r5, #1
 8009214:	2300      	movs	r3, #0
 8009216:	9519      	str	r5, [sp, #100]	@ 0x64
 8009218:	930b      	str	r3, [sp, #44]	@ 0x2c
 800921a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800921c:	2b00      	cmp	r3, #0
 800921e:	f040 858e 	bne.w	8009d3e <_strtod_l+0xb96>
 8009222:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009224:	b1cb      	cbz	r3, 800925a <_strtod_l+0xb2>
 8009226:	4652      	mov	r2, sl
 8009228:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800922c:	ec43 2b10 	vmov	d0, r2, r3
 8009230:	b01f      	add	sp, #124	@ 0x7c
 8009232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009236:	2920      	cmp	r1, #32
 8009238:	d1ce      	bne.n	80091d8 <_strtod_l+0x30>
 800923a:	3201      	adds	r2, #1
 800923c:	e7c1      	b.n	80091c2 <_strtod_l+0x1a>
 800923e:	292d      	cmp	r1, #45	@ 0x2d
 8009240:	d1ca      	bne.n	80091d8 <_strtod_l+0x30>
 8009242:	2101      	movs	r1, #1
 8009244:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009246:	1c51      	adds	r1, r2, #1
 8009248:	9119      	str	r1, [sp, #100]	@ 0x64
 800924a:	7852      	ldrb	r2, [r2, #1]
 800924c:	2a00      	cmp	r2, #0
 800924e:	d1c5      	bne.n	80091dc <_strtod_l+0x34>
 8009250:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009252:	9419      	str	r4, [sp, #100]	@ 0x64
 8009254:	2b00      	cmp	r3, #0
 8009256:	f040 8570 	bne.w	8009d3a <_strtod_l+0xb92>
 800925a:	4652      	mov	r2, sl
 800925c:	465b      	mov	r3, fp
 800925e:	e7e5      	b.n	800922c <_strtod_l+0x84>
 8009260:	2100      	movs	r1, #0
 8009262:	e7ef      	b.n	8009244 <_strtod_l+0x9c>
 8009264:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009266:	b13a      	cbz	r2, 8009278 <_strtod_l+0xd0>
 8009268:	2135      	movs	r1, #53	@ 0x35
 800926a:	a81c      	add	r0, sp, #112	@ 0x70
 800926c:	f7ff ff3a 	bl	80090e4 <__copybits>
 8009270:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009272:	9805      	ldr	r0, [sp, #20]
 8009274:	f7ff fb08 	bl	8008888 <_Bfree>
 8009278:	3e01      	subs	r6, #1
 800927a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800927c:	2e04      	cmp	r6, #4
 800927e:	d806      	bhi.n	800928e <_strtod_l+0xe6>
 8009280:	e8df f006 	tbb	[pc, r6]
 8009284:	201d0314 	.word	0x201d0314
 8009288:	14          	.byte	0x14
 8009289:	00          	.byte	0x00
 800928a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800928e:	05e1      	lsls	r1, r4, #23
 8009290:	bf48      	it	mi
 8009292:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009296:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800929a:	0d1b      	lsrs	r3, r3, #20
 800929c:	051b      	lsls	r3, r3, #20
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1bb      	bne.n	800921a <_strtod_l+0x72>
 80092a2:	f7fe fb21 	bl	80078e8 <__errno>
 80092a6:	2322      	movs	r3, #34	@ 0x22
 80092a8:	6003      	str	r3, [r0, #0]
 80092aa:	e7b6      	b.n	800921a <_strtod_l+0x72>
 80092ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80092b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80092b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80092b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80092bc:	e7e7      	b.n	800928e <_strtod_l+0xe6>
 80092be:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800943c <_strtod_l+0x294>
 80092c2:	e7e4      	b.n	800928e <_strtod_l+0xe6>
 80092c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80092c8:	f04f 3aff 	mov.w	sl, #4294967295
 80092cc:	e7df      	b.n	800928e <_strtod_l+0xe6>
 80092ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092d0:	1c5a      	adds	r2, r3, #1
 80092d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80092d4:	785b      	ldrb	r3, [r3, #1]
 80092d6:	2b30      	cmp	r3, #48	@ 0x30
 80092d8:	d0f9      	beq.n	80092ce <_strtod_l+0x126>
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d09d      	beq.n	800921a <_strtod_l+0x72>
 80092de:	2301      	movs	r3, #1
 80092e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80092e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80092e6:	2300      	movs	r3, #0
 80092e8:	9308      	str	r3, [sp, #32]
 80092ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80092ec:	461f      	mov	r7, r3
 80092ee:	220a      	movs	r2, #10
 80092f0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80092f2:	7805      	ldrb	r5, [r0, #0]
 80092f4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80092f8:	b2d9      	uxtb	r1, r3
 80092fa:	2909      	cmp	r1, #9
 80092fc:	d928      	bls.n	8009350 <_strtod_l+0x1a8>
 80092fe:	494e      	ldr	r1, [pc, #312]	@ (8009438 <_strtod_l+0x290>)
 8009300:	2201      	movs	r2, #1
 8009302:	f000 ffd5 	bl	800a2b0 <strncmp>
 8009306:	2800      	cmp	r0, #0
 8009308:	d032      	beq.n	8009370 <_strtod_l+0x1c8>
 800930a:	2000      	movs	r0, #0
 800930c:	462a      	mov	r2, r5
 800930e:	4681      	mov	r9, r0
 8009310:	463d      	mov	r5, r7
 8009312:	4603      	mov	r3, r0
 8009314:	2a65      	cmp	r2, #101	@ 0x65
 8009316:	d001      	beq.n	800931c <_strtod_l+0x174>
 8009318:	2a45      	cmp	r2, #69	@ 0x45
 800931a:	d114      	bne.n	8009346 <_strtod_l+0x19e>
 800931c:	b91d      	cbnz	r5, 8009326 <_strtod_l+0x17e>
 800931e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009320:	4302      	orrs	r2, r0
 8009322:	d095      	beq.n	8009250 <_strtod_l+0xa8>
 8009324:	2500      	movs	r5, #0
 8009326:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009328:	1c62      	adds	r2, r4, #1
 800932a:	9219      	str	r2, [sp, #100]	@ 0x64
 800932c:	7862      	ldrb	r2, [r4, #1]
 800932e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009330:	d077      	beq.n	8009422 <_strtod_l+0x27a>
 8009332:	2a2d      	cmp	r2, #45	@ 0x2d
 8009334:	d07b      	beq.n	800942e <_strtod_l+0x286>
 8009336:	f04f 0c00 	mov.w	ip, #0
 800933a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800933e:	2909      	cmp	r1, #9
 8009340:	f240 8082 	bls.w	8009448 <_strtod_l+0x2a0>
 8009344:	9419      	str	r4, [sp, #100]	@ 0x64
 8009346:	f04f 0800 	mov.w	r8, #0
 800934a:	e0a2      	b.n	8009492 <_strtod_l+0x2ea>
 800934c:	2300      	movs	r3, #0
 800934e:	e7c7      	b.n	80092e0 <_strtod_l+0x138>
 8009350:	2f08      	cmp	r7, #8
 8009352:	bfd5      	itete	le
 8009354:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009356:	9908      	ldrgt	r1, [sp, #32]
 8009358:	fb02 3301 	mlale	r3, r2, r1, r3
 800935c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009360:	f100 0001 	add.w	r0, r0, #1
 8009364:	bfd4      	ite	le
 8009366:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009368:	9308      	strgt	r3, [sp, #32]
 800936a:	3701      	adds	r7, #1
 800936c:	9019      	str	r0, [sp, #100]	@ 0x64
 800936e:	e7bf      	b.n	80092f0 <_strtod_l+0x148>
 8009370:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009372:	1c5a      	adds	r2, r3, #1
 8009374:	9219      	str	r2, [sp, #100]	@ 0x64
 8009376:	785a      	ldrb	r2, [r3, #1]
 8009378:	b37f      	cbz	r7, 80093da <_strtod_l+0x232>
 800937a:	4681      	mov	r9, r0
 800937c:	463d      	mov	r5, r7
 800937e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009382:	2b09      	cmp	r3, #9
 8009384:	d912      	bls.n	80093ac <_strtod_l+0x204>
 8009386:	2301      	movs	r3, #1
 8009388:	e7c4      	b.n	8009314 <_strtod_l+0x16c>
 800938a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800938c:	1c5a      	adds	r2, r3, #1
 800938e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009390:	785a      	ldrb	r2, [r3, #1]
 8009392:	3001      	adds	r0, #1
 8009394:	2a30      	cmp	r2, #48	@ 0x30
 8009396:	d0f8      	beq.n	800938a <_strtod_l+0x1e2>
 8009398:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800939c:	2b08      	cmp	r3, #8
 800939e:	f200 84d3 	bhi.w	8009d48 <_strtod_l+0xba0>
 80093a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80093a6:	4681      	mov	r9, r0
 80093a8:	2000      	movs	r0, #0
 80093aa:	4605      	mov	r5, r0
 80093ac:	3a30      	subs	r2, #48	@ 0x30
 80093ae:	f100 0301 	add.w	r3, r0, #1
 80093b2:	d02a      	beq.n	800940a <_strtod_l+0x262>
 80093b4:	4499      	add	r9, r3
 80093b6:	eb00 0c05 	add.w	ip, r0, r5
 80093ba:	462b      	mov	r3, r5
 80093bc:	210a      	movs	r1, #10
 80093be:	4563      	cmp	r3, ip
 80093c0:	d10d      	bne.n	80093de <_strtod_l+0x236>
 80093c2:	1c69      	adds	r1, r5, #1
 80093c4:	4401      	add	r1, r0
 80093c6:	4428      	add	r0, r5
 80093c8:	2808      	cmp	r0, #8
 80093ca:	dc16      	bgt.n	80093fa <_strtod_l+0x252>
 80093cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80093ce:	230a      	movs	r3, #10
 80093d0:	fb03 2300 	mla	r3, r3, r0, r2
 80093d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80093d6:	2300      	movs	r3, #0
 80093d8:	e018      	b.n	800940c <_strtod_l+0x264>
 80093da:	4638      	mov	r0, r7
 80093dc:	e7da      	b.n	8009394 <_strtod_l+0x1ec>
 80093de:	2b08      	cmp	r3, #8
 80093e0:	f103 0301 	add.w	r3, r3, #1
 80093e4:	dc03      	bgt.n	80093ee <_strtod_l+0x246>
 80093e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80093e8:	434e      	muls	r6, r1
 80093ea:	960a      	str	r6, [sp, #40]	@ 0x28
 80093ec:	e7e7      	b.n	80093be <_strtod_l+0x216>
 80093ee:	2b10      	cmp	r3, #16
 80093f0:	bfde      	ittt	le
 80093f2:	9e08      	ldrle	r6, [sp, #32]
 80093f4:	434e      	mulle	r6, r1
 80093f6:	9608      	strle	r6, [sp, #32]
 80093f8:	e7e1      	b.n	80093be <_strtod_l+0x216>
 80093fa:	280f      	cmp	r0, #15
 80093fc:	dceb      	bgt.n	80093d6 <_strtod_l+0x22e>
 80093fe:	9808      	ldr	r0, [sp, #32]
 8009400:	230a      	movs	r3, #10
 8009402:	fb03 2300 	mla	r3, r3, r0, r2
 8009406:	9308      	str	r3, [sp, #32]
 8009408:	e7e5      	b.n	80093d6 <_strtod_l+0x22e>
 800940a:	4629      	mov	r1, r5
 800940c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800940e:	1c50      	adds	r0, r2, #1
 8009410:	9019      	str	r0, [sp, #100]	@ 0x64
 8009412:	7852      	ldrb	r2, [r2, #1]
 8009414:	4618      	mov	r0, r3
 8009416:	460d      	mov	r5, r1
 8009418:	e7b1      	b.n	800937e <_strtod_l+0x1d6>
 800941a:	f04f 0900 	mov.w	r9, #0
 800941e:	2301      	movs	r3, #1
 8009420:	e77d      	b.n	800931e <_strtod_l+0x176>
 8009422:	f04f 0c00 	mov.w	ip, #0
 8009426:	1ca2      	adds	r2, r4, #2
 8009428:	9219      	str	r2, [sp, #100]	@ 0x64
 800942a:	78a2      	ldrb	r2, [r4, #2]
 800942c:	e785      	b.n	800933a <_strtod_l+0x192>
 800942e:	f04f 0c01 	mov.w	ip, #1
 8009432:	e7f8      	b.n	8009426 <_strtod_l+0x27e>
 8009434:	0800b280 	.word	0x0800b280
 8009438:	0800b268 	.word	0x0800b268
 800943c:	7ff00000 	.word	0x7ff00000
 8009440:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009442:	1c51      	adds	r1, r2, #1
 8009444:	9119      	str	r1, [sp, #100]	@ 0x64
 8009446:	7852      	ldrb	r2, [r2, #1]
 8009448:	2a30      	cmp	r2, #48	@ 0x30
 800944a:	d0f9      	beq.n	8009440 <_strtod_l+0x298>
 800944c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009450:	2908      	cmp	r1, #8
 8009452:	f63f af78 	bhi.w	8009346 <_strtod_l+0x19e>
 8009456:	3a30      	subs	r2, #48	@ 0x30
 8009458:	920e      	str	r2, [sp, #56]	@ 0x38
 800945a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800945c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800945e:	f04f 080a 	mov.w	r8, #10
 8009462:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009464:	1c56      	adds	r6, r2, #1
 8009466:	9619      	str	r6, [sp, #100]	@ 0x64
 8009468:	7852      	ldrb	r2, [r2, #1]
 800946a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800946e:	f1be 0f09 	cmp.w	lr, #9
 8009472:	d939      	bls.n	80094e8 <_strtod_l+0x340>
 8009474:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009476:	1a76      	subs	r6, r6, r1
 8009478:	2e08      	cmp	r6, #8
 800947a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800947e:	dc03      	bgt.n	8009488 <_strtod_l+0x2e0>
 8009480:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009482:	4588      	cmp	r8, r1
 8009484:	bfa8      	it	ge
 8009486:	4688      	movge	r8, r1
 8009488:	f1bc 0f00 	cmp.w	ip, #0
 800948c:	d001      	beq.n	8009492 <_strtod_l+0x2ea>
 800948e:	f1c8 0800 	rsb	r8, r8, #0
 8009492:	2d00      	cmp	r5, #0
 8009494:	d14e      	bne.n	8009534 <_strtod_l+0x38c>
 8009496:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009498:	4308      	orrs	r0, r1
 800949a:	f47f aebe 	bne.w	800921a <_strtod_l+0x72>
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f47f aed6 	bne.w	8009250 <_strtod_l+0xa8>
 80094a4:	2a69      	cmp	r2, #105	@ 0x69
 80094a6:	d028      	beq.n	80094fa <_strtod_l+0x352>
 80094a8:	dc25      	bgt.n	80094f6 <_strtod_l+0x34e>
 80094aa:	2a49      	cmp	r2, #73	@ 0x49
 80094ac:	d025      	beq.n	80094fa <_strtod_l+0x352>
 80094ae:	2a4e      	cmp	r2, #78	@ 0x4e
 80094b0:	f47f aece 	bne.w	8009250 <_strtod_l+0xa8>
 80094b4:	499b      	ldr	r1, [pc, #620]	@ (8009724 <_strtod_l+0x57c>)
 80094b6:	a819      	add	r0, sp, #100	@ 0x64
 80094b8:	f001 f9e2 	bl	800a880 <__match>
 80094bc:	2800      	cmp	r0, #0
 80094be:	f43f aec7 	beq.w	8009250 <_strtod_l+0xa8>
 80094c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	2b28      	cmp	r3, #40	@ 0x28
 80094c8:	d12e      	bne.n	8009528 <_strtod_l+0x380>
 80094ca:	4997      	ldr	r1, [pc, #604]	@ (8009728 <_strtod_l+0x580>)
 80094cc:	aa1c      	add	r2, sp, #112	@ 0x70
 80094ce:	a819      	add	r0, sp, #100	@ 0x64
 80094d0:	f001 f9ea 	bl	800a8a8 <__hexnan>
 80094d4:	2805      	cmp	r0, #5
 80094d6:	d127      	bne.n	8009528 <_strtod_l+0x380>
 80094d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80094da:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80094de:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80094e2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80094e6:	e698      	b.n	800921a <_strtod_l+0x72>
 80094e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80094ea:	fb08 2101 	mla	r1, r8, r1, r2
 80094ee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80094f2:	920e      	str	r2, [sp, #56]	@ 0x38
 80094f4:	e7b5      	b.n	8009462 <_strtod_l+0x2ba>
 80094f6:	2a6e      	cmp	r2, #110	@ 0x6e
 80094f8:	e7da      	b.n	80094b0 <_strtod_l+0x308>
 80094fa:	498c      	ldr	r1, [pc, #560]	@ (800972c <_strtod_l+0x584>)
 80094fc:	a819      	add	r0, sp, #100	@ 0x64
 80094fe:	f001 f9bf 	bl	800a880 <__match>
 8009502:	2800      	cmp	r0, #0
 8009504:	f43f aea4 	beq.w	8009250 <_strtod_l+0xa8>
 8009508:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800950a:	4989      	ldr	r1, [pc, #548]	@ (8009730 <_strtod_l+0x588>)
 800950c:	3b01      	subs	r3, #1
 800950e:	a819      	add	r0, sp, #100	@ 0x64
 8009510:	9319      	str	r3, [sp, #100]	@ 0x64
 8009512:	f001 f9b5 	bl	800a880 <__match>
 8009516:	b910      	cbnz	r0, 800951e <_strtod_l+0x376>
 8009518:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800951a:	3301      	adds	r3, #1
 800951c:	9319      	str	r3, [sp, #100]	@ 0x64
 800951e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009740 <_strtod_l+0x598>
 8009522:	f04f 0a00 	mov.w	sl, #0
 8009526:	e678      	b.n	800921a <_strtod_l+0x72>
 8009528:	4882      	ldr	r0, [pc, #520]	@ (8009734 <_strtod_l+0x58c>)
 800952a:	f000 fee5 	bl	800a2f8 <nan>
 800952e:	ec5b ab10 	vmov	sl, fp, d0
 8009532:	e672      	b.n	800921a <_strtod_l+0x72>
 8009534:	eba8 0309 	sub.w	r3, r8, r9
 8009538:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800953a:	9309      	str	r3, [sp, #36]	@ 0x24
 800953c:	2f00      	cmp	r7, #0
 800953e:	bf08      	it	eq
 8009540:	462f      	moveq	r7, r5
 8009542:	2d10      	cmp	r5, #16
 8009544:	462c      	mov	r4, r5
 8009546:	bfa8      	it	ge
 8009548:	2410      	movge	r4, #16
 800954a:	f7f6 ffdb 	bl	8000504 <__aeabi_ui2d>
 800954e:	2d09      	cmp	r5, #9
 8009550:	4682      	mov	sl, r0
 8009552:	468b      	mov	fp, r1
 8009554:	dc13      	bgt.n	800957e <_strtod_l+0x3d6>
 8009556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009558:	2b00      	cmp	r3, #0
 800955a:	f43f ae5e 	beq.w	800921a <_strtod_l+0x72>
 800955e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009560:	dd78      	ble.n	8009654 <_strtod_l+0x4ac>
 8009562:	2b16      	cmp	r3, #22
 8009564:	dc5f      	bgt.n	8009626 <_strtod_l+0x47e>
 8009566:	4974      	ldr	r1, [pc, #464]	@ (8009738 <_strtod_l+0x590>)
 8009568:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800956c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009570:	4652      	mov	r2, sl
 8009572:	465b      	mov	r3, fp
 8009574:	f7f7 f840 	bl	80005f8 <__aeabi_dmul>
 8009578:	4682      	mov	sl, r0
 800957a:	468b      	mov	fp, r1
 800957c:	e64d      	b.n	800921a <_strtod_l+0x72>
 800957e:	4b6e      	ldr	r3, [pc, #440]	@ (8009738 <_strtod_l+0x590>)
 8009580:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009584:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009588:	f7f7 f836 	bl	80005f8 <__aeabi_dmul>
 800958c:	4682      	mov	sl, r0
 800958e:	9808      	ldr	r0, [sp, #32]
 8009590:	468b      	mov	fp, r1
 8009592:	f7f6 ffb7 	bl	8000504 <__aeabi_ui2d>
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	4650      	mov	r0, sl
 800959c:	4659      	mov	r1, fp
 800959e:	f7f6 fe75 	bl	800028c <__adddf3>
 80095a2:	2d0f      	cmp	r5, #15
 80095a4:	4682      	mov	sl, r0
 80095a6:	468b      	mov	fp, r1
 80095a8:	ddd5      	ble.n	8009556 <_strtod_l+0x3ae>
 80095aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095ac:	1b2c      	subs	r4, r5, r4
 80095ae:	441c      	add	r4, r3
 80095b0:	2c00      	cmp	r4, #0
 80095b2:	f340 8096 	ble.w	80096e2 <_strtod_l+0x53a>
 80095b6:	f014 030f 	ands.w	r3, r4, #15
 80095ba:	d00a      	beq.n	80095d2 <_strtod_l+0x42a>
 80095bc:	495e      	ldr	r1, [pc, #376]	@ (8009738 <_strtod_l+0x590>)
 80095be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095c2:	4652      	mov	r2, sl
 80095c4:	465b      	mov	r3, fp
 80095c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095ca:	f7f7 f815 	bl	80005f8 <__aeabi_dmul>
 80095ce:	4682      	mov	sl, r0
 80095d0:	468b      	mov	fp, r1
 80095d2:	f034 040f 	bics.w	r4, r4, #15
 80095d6:	d073      	beq.n	80096c0 <_strtod_l+0x518>
 80095d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80095dc:	dd48      	ble.n	8009670 <_strtod_l+0x4c8>
 80095de:	2400      	movs	r4, #0
 80095e0:	46a0      	mov	r8, r4
 80095e2:	940a      	str	r4, [sp, #40]	@ 0x28
 80095e4:	46a1      	mov	r9, r4
 80095e6:	9a05      	ldr	r2, [sp, #20]
 80095e8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009740 <_strtod_l+0x598>
 80095ec:	2322      	movs	r3, #34	@ 0x22
 80095ee:	6013      	str	r3, [r2, #0]
 80095f0:	f04f 0a00 	mov.w	sl, #0
 80095f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f43f ae0f 	beq.w	800921a <_strtod_l+0x72>
 80095fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095fe:	9805      	ldr	r0, [sp, #20]
 8009600:	f7ff f942 	bl	8008888 <_Bfree>
 8009604:	9805      	ldr	r0, [sp, #20]
 8009606:	4649      	mov	r1, r9
 8009608:	f7ff f93e 	bl	8008888 <_Bfree>
 800960c:	9805      	ldr	r0, [sp, #20]
 800960e:	4641      	mov	r1, r8
 8009610:	f7ff f93a 	bl	8008888 <_Bfree>
 8009614:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009616:	9805      	ldr	r0, [sp, #20]
 8009618:	f7ff f936 	bl	8008888 <_Bfree>
 800961c:	9805      	ldr	r0, [sp, #20]
 800961e:	4621      	mov	r1, r4
 8009620:	f7ff f932 	bl	8008888 <_Bfree>
 8009624:	e5f9      	b.n	800921a <_strtod_l+0x72>
 8009626:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009628:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800962c:	4293      	cmp	r3, r2
 800962e:	dbbc      	blt.n	80095aa <_strtod_l+0x402>
 8009630:	4c41      	ldr	r4, [pc, #260]	@ (8009738 <_strtod_l+0x590>)
 8009632:	f1c5 050f 	rsb	r5, r5, #15
 8009636:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800963a:	4652      	mov	r2, sl
 800963c:	465b      	mov	r3, fp
 800963e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009642:	f7f6 ffd9 	bl	80005f8 <__aeabi_dmul>
 8009646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009648:	1b5d      	subs	r5, r3, r5
 800964a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800964e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009652:	e78f      	b.n	8009574 <_strtod_l+0x3cc>
 8009654:	3316      	adds	r3, #22
 8009656:	dba8      	blt.n	80095aa <_strtod_l+0x402>
 8009658:	4b37      	ldr	r3, [pc, #220]	@ (8009738 <_strtod_l+0x590>)
 800965a:	eba9 0808 	sub.w	r8, r9, r8
 800965e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009662:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009666:	4650      	mov	r0, sl
 8009668:	4659      	mov	r1, fp
 800966a:	f7f7 f8ef 	bl	800084c <__aeabi_ddiv>
 800966e:	e783      	b.n	8009578 <_strtod_l+0x3d0>
 8009670:	4b32      	ldr	r3, [pc, #200]	@ (800973c <_strtod_l+0x594>)
 8009672:	9308      	str	r3, [sp, #32]
 8009674:	2300      	movs	r3, #0
 8009676:	1124      	asrs	r4, r4, #4
 8009678:	4650      	mov	r0, sl
 800967a:	4659      	mov	r1, fp
 800967c:	461e      	mov	r6, r3
 800967e:	2c01      	cmp	r4, #1
 8009680:	dc21      	bgt.n	80096c6 <_strtod_l+0x51e>
 8009682:	b10b      	cbz	r3, 8009688 <_strtod_l+0x4e0>
 8009684:	4682      	mov	sl, r0
 8009686:	468b      	mov	fp, r1
 8009688:	492c      	ldr	r1, [pc, #176]	@ (800973c <_strtod_l+0x594>)
 800968a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800968e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009692:	4652      	mov	r2, sl
 8009694:	465b      	mov	r3, fp
 8009696:	e9d1 0100 	ldrd	r0, r1, [r1]
 800969a:	f7f6 ffad 	bl	80005f8 <__aeabi_dmul>
 800969e:	4b28      	ldr	r3, [pc, #160]	@ (8009740 <_strtod_l+0x598>)
 80096a0:	460a      	mov	r2, r1
 80096a2:	400b      	ands	r3, r1
 80096a4:	4927      	ldr	r1, [pc, #156]	@ (8009744 <_strtod_l+0x59c>)
 80096a6:	428b      	cmp	r3, r1
 80096a8:	4682      	mov	sl, r0
 80096aa:	d898      	bhi.n	80095de <_strtod_l+0x436>
 80096ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80096b0:	428b      	cmp	r3, r1
 80096b2:	bf86      	itte	hi
 80096b4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009748 <_strtod_l+0x5a0>
 80096b8:	f04f 3aff 	movhi.w	sl, #4294967295
 80096bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80096c0:	2300      	movs	r3, #0
 80096c2:	9308      	str	r3, [sp, #32]
 80096c4:	e07a      	b.n	80097bc <_strtod_l+0x614>
 80096c6:	07e2      	lsls	r2, r4, #31
 80096c8:	d505      	bpl.n	80096d6 <_strtod_l+0x52e>
 80096ca:	9b08      	ldr	r3, [sp, #32]
 80096cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d0:	f7f6 ff92 	bl	80005f8 <__aeabi_dmul>
 80096d4:	2301      	movs	r3, #1
 80096d6:	9a08      	ldr	r2, [sp, #32]
 80096d8:	3208      	adds	r2, #8
 80096da:	3601      	adds	r6, #1
 80096dc:	1064      	asrs	r4, r4, #1
 80096de:	9208      	str	r2, [sp, #32]
 80096e0:	e7cd      	b.n	800967e <_strtod_l+0x4d6>
 80096e2:	d0ed      	beq.n	80096c0 <_strtod_l+0x518>
 80096e4:	4264      	negs	r4, r4
 80096e6:	f014 020f 	ands.w	r2, r4, #15
 80096ea:	d00a      	beq.n	8009702 <_strtod_l+0x55a>
 80096ec:	4b12      	ldr	r3, [pc, #72]	@ (8009738 <_strtod_l+0x590>)
 80096ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096f2:	4650      	mov	r0, sl
 80096f4:	4659      	mov	r1, fp
 80096f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fa:	f7f7 f8a7 	bl	800084c <__aeabi_ddiv>
 80096fe:	4682      	mov	sl, r0
 8009700:	468b      	mov	fp, r1
 8009702:	1124      	asrs	r4, r4, #4
 8009704:	d0dc      	beq.n	80096c0 <_strtod_l+0x518>
 8009706:	2c1f      	cmp	r4, #31
 8009708:	dd20      	ble.n	800974c <_strtod_l+0x5a4>
 800970a:	2400      	movs	r4, #0
 800970c:	46a0      	mov	r8, r4
 800970e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009710:	46a1      	mov	r9, r4
 8009712:	9a05      	ldr	r2, [sp, #20]
 8009714:	2322      	movs	r3, #34	@ 0x22
 8009716:	f04f 0a00 	mov.w	sl, #0
 800971a:	f04f 0b00 	mov.w	fp, #0
 800971e:	6013      	str	r3, [r2, #0]
 8009720:	e768      	b.n	80095f4 <_strtod_l+0x44c>
 8009722:	bf00      	nop
 8009724:	0800b055 	.word	0x0800b055
 8009728:	0800b26c 	.word	0x0800b26c
 800972c:	0800b04d 	.word	0x0800b04d
 8009730:	0800b084 	.word	0x0800b084
 8009734:	0800b415 	.word	0x0800b415
 8009738:	0800b1a0 	.word	0x0800b1a0
 800973c:	0800b178 	.word	0x0800b178
 8009740:	7ff00000 	.word	0x7ff00000
 8009744:	7ca00000 	.word	0x7ca00000
 8009748:	7fefffff 	.word	0x7fefffff
 800974c:	f014 0310 	ands.w	r3, r4, #16
 8009750:	bf18      	it	ne
 8009752:	236a      	movne	r3, #106	@ 0x6a
 8009754:	4ea9      	ldr	r6, [pc, #676]	@ (80099fc <_strtod_l+0x854>)
 8009756:	9308      	str	r3, [sp, #32]
 8009758:	4650      	mov	r0, sl
 800975a:	4659      	mov	r1, fp
 800975c:	2300      	movs	r3, #0
 800975e:	07e2      	lsls	r2, r4, #31
 8009760:	d504      	bpl.n	800976c <_strtod_l+0x5c4>
 8009762:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009766:	f7f6 ff47 	bl	80005f8 <__aeabi_dmul>
 800976a:	2301      	movs	r3, #1
 800976c:	1064      	asrs	r4, r4, #1
 800976e:	f106 0608 	add.w	r6, r6, #8
 8009772:	d1f4      	bne.n	800975e <_strtod_l+0x5b6>
 8009774:	b10b      	cbz	r3, 800977a <_strtod_l+0x5d2>
 8009776:	4682      	mov	sl, r0
 8009778:	468b      	mov	fp, r1
 800977a:	9b08      	ldr	r3, [sp, #32]
 800977c:	b1b3      	cbz	r3, 80097ac <_strtod_l+0x604>
 800977e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009782:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009786:	2b00      	cmp	r3, #0
 8009788:	4659      	mov	r1, fp
 800978a:	dd0f      	ble.n	80097ac <_strtod_l+0x604>
 800978c:	2b1f      	cmp	r3, #31
 800978e:	dd55      	ble.n	800983c <_strtod_l+0x694>
 8009790:	2b34      	cmp	r3, #52	@ 0x34
 8009792:	bfde      	ittt	le
 8009794:	f04f 33ff 	movle.w	r3, #4294967295
 8009798:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800979c:	4093      	lslle	r3, r2
 800979e:	f04f 0a00 	mov.w	sl, #0
 80097a2:	bfcc      	ite	gt
 80097a4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80097a8:	ea03 0b01 	andle.w	fp, r3, r1
 80097ac:	2200      	movs	r2, #0
 80097ae:	2300      	movs	r3, #0
 80097b0:	4650      	mov	r0, sl
 80097b2:	4659      	mov	r1, fp
 80097b4:	f7f7 f988 	bl	8000ac8 <__aeabi_dcmpeq>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	d1a6      	bne.n	800970a <_strtod_l+0x562>
 80097bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80097c2:	9805      	ldr	r0, [sp, #20]
 80097c4:	462b      	mov	r3, r5
 80097c6:	463a      	mov	r2, r7
 80097c8:	f7ff f8c6 	bl	8008958 <__s2b>
 80097cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80097ce:	2800      	cmp	r0, #0
 80097d0:	f43f af05 	beq.w	80095de <_strtod_l+0x436>
 80097d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097d6:	2a00      	cmp	r2, #0
 80097d8:	eba9 0308 	sub.w	r3, r9, r8
 80097dc:	bfa8      	it	ge
 80097de:	2300      	movge	r3, #0
 80097e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80097e2:	2400      	movs	r4, #0
 80097e4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80097e8:	9316      	str	r3, [sp, #88]	@ 0x58
 80097ea:	46a0      	mov	r8, r4
 80097ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097ee:	9805      	ldr	r0, [sp, #20]
 80097f0:	6859      	ldr	r1, [r3, #4]
 80097f2:	f7ff f809 	bl	8008808 <_Balloc>
 80097f6:	4681      	mov	r9, r0
 80097f8:	2800      	cmp	r0, #0
 80097fa:	f43f aef4 	beq.w	80095e6 <_strtod_l+0x43e>
 80097fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009800:	691a      	ldr	r2, [r3, #16]
 8009802:	3202      	adds	r2, #2
 8009804:	f103 010c 	add.w	r1, r3, #12
 8009808:	0092      	lsls	r2, r2, #2
 800980a:	300c      	adds	r0, #12
 800980c:	f7fe f899 	bl	8007942 <memcpy>
 8009810:	ec4b ab10 	vmov	d0, sl, fp
 8009814:	9805      	ldr	r0, [sp, #20]
 8009816:	aa1c      	add	r2, sp, #112	@ 0x70
 8009818:	a91b      	add	r1, sp, #108	@ 0x6c
 800981a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800981e:	f7ff fbd7 	bl	8008fd0 <__d2b>
 8009822:	901a      	str	r0, [sp, #104]	@ 0x68
 8009824:	2800      	cmp	r0, #0
 8009826:	f43f aede 	beq.w	80095e6 <_strtod_l+0x43e>
 800982a:	9805      	ldr	r0, [sp, #20]
 800982c:	2101      	movs	r1, #1
 800982e:	f7ff f929 	bl	8008a84 <__i2b>
 8009832:	4680      	mov	r8, r0
 8009834:	b948      	cbnz	r0, 800984a <_strtod_l+0x6a2>
 8009836:	f04f 0800 	mov.w	r8, #0
 800983a:	e6d4      	b.n	80095e6 <_strtod_l+0x43e>
 800983c:	f04f 32ff 	mov.w	r2, #4294967295
 8009840:	fa02 f303 	lsl.w	r3, r2, r3
 8009844:	ea03 0a0a 	and.w	sl, r3, sl
 8009848:	e7b0      	b.n	80097ac <_strtod_l+0x604>
 800984a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800984c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800984e:	2d00      	cmp	r5, #0
 8009850:	bfab      	itete	ge
 8009852:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009854:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009856:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009858:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800985a:	bfac      	ite	ge
 800985c:	18ef      	addge	r7, r5, r3
 800985e:	1b5e      	sublt	r6, r3, r5
 8009860:	9b08      	ldr	r3, [sp, #32]
 8009862:	1aed      	subs	r5, r5, r3
 8009864:	4415      	add	r5, r2
 8009866:	4b66      	ldr	r3, [pc, #408]	@ (8009a00 <_strtod_l+0x858>)
 8009868:	3d01      	subs	r5, #1
 800986a:	429d      	cmp	r5, r3
 800986c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009870:	da50      	bge.n	8009914 <_strtod_l+0x76c>
 8009872:	1b5b      	subs	r3, r3, r5
 8009874:	2b1f      	cmp	r3, #31
 8009876:	eba2 0203 	sub.w	r2, r2, r3
 800987a:	f04f 0101 	mov.w	r1, #1
 800987e:	dc3d      	bgt.n	80098fc <_strtod_l+0x754>
 8009880:	fa01 f303 	lsl.w	r3, r1, r3
 8009884:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009886:	2300      	movs	r3, #0
 8009888:	9310      	str	r3, [sp, #64]	@ 0x40
 800988a:	18bd      	adds	r5, r7, r2
 800988c:	9b08      	ldr	r3, [sp, #32]
 800988e:	42af      	cmp	r7, r5
 8009890:	4416      	add	r6, r2
 8009892:	441e      	add	r6, r3
 8009894:	463b      	mov	r3, r7
 8009896:	bfa8      	it	ge
 8009898:	462b      	movge	r3, r5
 800989a:	42b3      	cmp	r3, r6
 800989c:	bfa8      	it	ge
 800989e:	4633      	movge	r3, r6
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	bfc2      	ittt	gt
 80098a4:	1aed      	subgt	r5, r5, r3
 80098a6:	1af6      	subgt	r6, r6, r3
 80098a8:	1aff      	subgt	r7, r7, r3
 80098aa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	dd16      	ble.n	80098de <_strtod_l+0x736>
 80098b0:	4641      	mov	r1, r8
 80098b2:	9805      	ldr	r0, [sp, #20]
 80098b4:	461a      	mov	r2, r3
 80098b6:	f7ff f9a5 	bl	8008c04 <__pow5mult>
 80098ba:	4680      	mov	r8, r0
 80098bc:	2800      	cmp	r0, #0
 80098be:	d0ba      	beq.n	8009836 <_strtod_l+0x68e>
 80098c0:	4601      	mov	r1, r0
 80098c2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80098c4:	9805      	ldr	r0, [sp, #20]
 80098c6:	f7ff f8f3 	bl	8008ab0 <__multiply>
 80098ca:	900e      	str	r0, [sp, #56]	@ 0x38
 80098cc:	2800      	cmp	r0, #0
 80098ce:	f43f ae8a 	beq.w	80095e6 <_strtod_l+0x43e>
 80098d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098d4:	9805      	ldr	r0, [sp, #20]
 80098d6:	f7fe ffd7 	bl	8008888 <_Bfree>
 80098da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80098de:	2d00      	cmp	r5, #0
 80098e0:	dc1d      	bgt.n	800991e <_strtod_l+0x776>
 80098e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	dd23      	ble.n	8009930 <_strtod_l+0x788>
 80098e8:	4649      	mov	r1, r9
 80098ea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80098ec:	9805      	ldr	r0, [sp, #20]
 80098ee:	f7ff f989 	bl	8008c04 <__pow5mult>
 80098f2:	4681      	mov	r9, r0
 80098f4:	b9e0      	cbnz	r0, 8009930 <_strtod_l+0x788>
 80098f6:	f04f 0900 	mov.w	r9, #0
 80098fa:	e674      	b.n	80095e6 <_strtod_l+0x43e>
 80098fc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009900:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009904:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009908:	35e2      	adds	r5, #226	@ 0xe2
 800990a:	fa01 f305 	lsl.w	r3, r1, r5
 800990e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009910:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009912:	e7ba      	b.n	800988a <_strtod_l+0x6e2>
 8009914:	2300      	movs	r3, #0
 8009916:	9310      	str	r3, [sp, #64]	@ 0x40
 8009918:	2301      	movs	r3, #1
 800991a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800991c:	e7b5      	b.n	800988a <_strtod_l+0x6e2>
 800991e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009920:	9805      	ldr	r0, [sp, #20]
 8009922:	462a      	mov	r2, r5
 8009924:	f7ff f9c8 	bl	8008cb8 <__lshift>
 8009928:	901a      	str	r0, [sp, #104]	@ 0x68
 800992a:	2800      	cmp	r0, #0
 800992c:	d1d9      	bne.n	80098e2 <_strtod_l+0x73a>
 800992e:	e65a      	b.n	80095e6 <_strtod_l+0x43e>
 8009930:	2e00      	cmp	r6, #0
 8009932:	dd07      	ble.n	8009944 <_strtod_l+0x79c>
 8009934:	4649      	mov	r1, r9
 8009936:	9805      	ldr	r0, [sp, #20]
 8009938:	4632      	mov	r2, r6
 800993a:	f7ff f9bd 	bl	8008cb8 <__lshift>
 800993e:	4681      	mov	r9, r0
 8009940:	2800      	cmp	r0, #0
 8009942:	d0d8      	beq.n	80098f6 <_strtod_l+0x74e>
 8009944:	2f00      	cmp	r7, #0
 8009946:	dd08      	ble.n	800995a <_strtod_l+0x7b2>
 8009948:	4641      	mov	r1, r8
 800994a:	9805      	ldr	r0, [sp, #20]
 800994c:	463a      	mov	r2, r7
 800994e:	f7ff f9b3 	bl	8008cb8 <__lshift>
 8009952:	4680      	mov	r8, r0
 8009954:	2800      	cmp	r0, #0
 8009956:	f43f ae46 	beq.w	80095e6 <_strtod_l+0x43e>
 800995a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800995c:	9805      	ldr	r0, [sp, #20]
 800995e:	464a      	mov	r2, r9
 8009960:	f7ff fa32 	bl	8008dc8 <__mdiff>
 8009964:	4604      	mov	r4, r0
 8009966:	2800      	cmp	r0, #0
 8009968:	f43f ae3d 	beq.w	80095e6 <_strtod_l+0x43e>
 800996c:	68c3      	ldr	r3, [r0, #12]
 800996e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009970:	2300      	movs	r3, #0
 8009972:	60c3      	str	r3, [r0, #12]
 8009974:	4641      	mov	r1, r8
 8009976:	f7ff fa0b 	bl	8008d90 <__mcmp>
 800997a:	2800      	cmp	r0, #0
 800997c:	da46      	bge.n	8009a0c <_strtod_l+0x864>
 800997e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009980:	ea53 030a 	orrs.w	r3, r3, sl
 8009984:	d16c      	bne.n	8009a60 <_strtod_l+0x8b8>
 8009986:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800998a:	2b00      	cmp	r3, #0
 800998c:	d168      	bne.n	8009a60 <_strtod_l+0x8b8>
 800998e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009992:	0d1b      	lsrs	r3, r3, #20
 8009994:	051b      	lsls	r3, r3, #20
 8009996:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800999a:	d961      	bls.n	8009a60 <_strtod_l+0x8b8>
 800999c:	6963      	ldr	r3, [r4, #20]
 800999e:	b913      	cbnz	r3, 80099a6 <_strtod_l+0x7fe>
 80099a0:	6923      	ldr	r3, [r4, #16]
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	dd5c      	ble.n	8009a60 <_strtod_l+0x8b8>
 80099a6:	4621      	mov	r1, r4
 80099a8:	2201      	movs	r2, #1
 80099aa:	9805      	ldr	r0, [sp, #20]
 80099ac:	f7ff f984 	bl	8008cb8 <__lshift>
 80099b0:	4641      	mov	r1, r8
 80099b2:	4604      	mov	r4, r0
 80099b4:	f7ff f9ec 	bl	8008d90 <__mcmp>
 80099b8:	2800      	cmp	r0, #0
 80099ba:	dd51      	ble.n	8009a60 <_strtod_l+0x8b8>
 80099bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80099c0:	9a08      	ldr	r2, [sp, #32]
 80099c2:	0d1b      	lsrs	r3, r3, #20
 80099c4:	051b      	lsls	r3, r3, #20
 80099c6:	2a00      	cmp	r2, #0
 80099c8:	d06b      	beq.n	8009aa2 <_strtod_l+0x8fa>
 80099ca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80099ce:	d868      	bhi.n	8009aa2 <_strtod_l+0x8fa>
 80099d0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80099d4:	f67f ae9d 	bls.w	8009712 <_strtod_l+0x56a>
 80099d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009a04 <_strtod_l+0x85c>)
 80099da:	4650      	mov	r0, sl
 80099dc:	4659      	mov	r1, fp
 80099de:	2200      	movs	r2, #0
 80099e0:	f7f6 fe0a 	bl	80005f8 <__aeabi_dmul>
 80099e4:	4b08      	ldr	r3, [pc, #32]	@ (8009a08 <_strtod_l+0x860>)
 80099e6:	400b      	ands	r3, r1
 80099e8:	4682      	mov	sl, r0
 80099ea:	468b      	mov	fp, r1
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	f47f ae05 	bne.w	80095fc <_strtod_l+0x454>
 80099f2:	9a05      	ldr	r2, [sp, #20]
 80099f4:	2322      	movs	r3, #34	@ 0x22
 80099f6:	6013      	str	r3, [r2, #0]
 80099f8:	e600      	b.n	80095fc <_strtod_l+0x454>
 80099fa:	bf00      	nop
 80099fc:	0800b298 	.word	0x0800b298
 8009a00:	fffffc02 	.word	0xfffffc02
 8009a04:	39500000 	.word	0x39500000
 8009a08:	7ff00000 	.word	0x7ff00000
 8009a0c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009a10:	d165      	bne.n	8009ade <_strtod_l+0x936>
 8009a12:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009a14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a18:	b35a      	cbz	r2, 8009a72 <_strtod_l+0x8ca>
 8009a1a:	4a9f      	ldr	r2, [pc, #636]	@ (8009c98 <_strtod_l+0xaf0>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d12b      	bne.n	8009a78 <_strtod_l+0x8d0>
 8009a20:	9b08      	ldr	r3, [sp, #32]
 8009a22:	4651      	mov	r1, sl
 8009a24:	b303      	cbz	r3, 8009a68 <_strtod_l+0x8c0>
 8009a26:	4b9d      	ldr	r3, [pc, #628]	@ (8009c9c <_strtod_l+0xaf4>)
 8009a28:	465a      	mov	r2, fp
 8009a2a:	4013      	ands	r3, r2
 8009a2c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009a30:	f04f 32ff 	mov.w	r2, #4294967295
 8009a34:	d81b      	bhi.n	8009a6e <_strtod_l+0x8c6>
 8009a36:	0d1b      	lsrs	r3, r3, #20
 8009a38:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a40:	4299      	cmp	r1, r3
 8009a42:	d119      	bne.n	8009a78 <_strtod_l+0x8d0>
 8009a44:	4b96      	ldr	r3, [pc, #600]	@ (8009ca0 <_strtod_l+0xaf8>)
 8009a46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d102      	bne.n	8009a52 <_strtod_l+0x8aa>
 8009a4c:	3101      	adds	r1, #1
 8009a4e:	f43f adca 	beq.w	80095e6 <_strtod_l+0x43e>
 8009a52:	4b92      	ldr	r3, [pc, #584]	@ (8009c9c <_strtod_l+0xaf4>)
 8009a54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a56:	401a      	ands	r2, r3
 8009a58:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009a5c:	f04f 0a00 	mov.w	sl, #0
 8009a60:	9b08      	ldr	r3, [sp, #32]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d1b8      	bne.n	80099d8 <_strtod_l+0x830>
 8009a66:	e5c9      	b.n	80095fc <_strtod_l+0x454>
 8009a68:	f04f 33ff 	mov.w	r3, #4294967295
 8009a6c:	e7e8      	b.n	8009a40 <_strtod_l+0x898>
 8009a6e:	4613      	mov	r3, r2
 8009a70:	e7e6      	b.n	8009a40 <_strtod_l+0x898>
 8009a72:	ea53 030a 	orrs.w	r3, r3, sl
 8009a76:	d0a1      	beq.n	80099bc <_strtod_l+0x814>
 8009a78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a7a:	b1db      	cbz	r3, 8009ab4 <_strtod_l+0x90c>
 8009a7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a7e:	4213      	tst	r3, r2
 8009a80:	d0ee      	beq.n	8009a60 <_strtod_l+0x8b8>
 8009a82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a84:	9a08      	ldr	r2, [sp, #32]
 8009a86:	4650      	mov	r0, sl
 8009a88:	4659      	mov	r1, fp
 8009a8a:	b1bb      	cbz	r3, 8009abc <_strtod_l+0x914>
 8009a8c:	f7ff fb6e 	bl	800916c <sulp>
 8009a90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a94:	ec53 2b10 	vmov	r2, r3, d0
 8009a98:	f7f6 fbf8 	bl	800028c <__adddf3>
 8009a9c:	4682      	mov	sl, r0
 8009a9e:	468b      	mov	fp, r1
 8009aa0:	e7de      	b.n	8009a60 <_strtod_l+0x8b8>
 8009aa2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009aa6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009aaa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009aae:	f04f 3aff 	mov.w	sl, #4294967295
 8009ab2:	e7d5      	b.n	8009a60 <_strtod_l+0x8b8>
 8009ab4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ab6:	ea13 0f0a 	tst.w	r3, sl
 8009aba:	e7e1      	b.n	8009a80 <_strtod_l+0x8d8>
 8009abc:	f7ff fb56 	bl	800916c <sulp>
 8009ac0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ac4:	ec53 2b10 	vmov	r2, r3, d0
 8009ac8:	f7f6 fbde 	bl	8000288 <__aeabi_dsub>
 8009acc:	2200      	movs	r2, #0
 8009ace:	2300      	movs	r3, #0
 8009ad0:	4682      	mov	sl, r0
 8009ad2:	468b      	mov	fp, r1
 8009ad4:	f7f6 fff8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d0c1      	beq.n	8009a60 <_strtod_l+0x8b8>
 8009adc:	e619      	b.n	8009712 <_strtod_l+0x56a>
 8009ade:	4641      	mov	r1, r8
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f7ff facd 	bl	8009080 <__ratio>
 8009ae6:	ec57 6b10 	vmov	r6, r7, d0
 8009aea:	2200      	movs	r2, #0
 8009aec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009af0:	4630      	mov	r0, r6
 8009af2:	4639      	mov	r1, r7
 8009af4:	f7f6 fffc 	bl	8000af0 <__aeabi_dcmple>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	d06f      	beq.n	8009bdc <_strtod_l+0xa34>
 8009afc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d17a      	bne.n	8009bf8 <_strtod_l+0xa50>
 8009b02:	f1ba 0f00 	cmp.w	sl, #0
 8009b06:	d158      	bne.n	8009bba <_strtod_l+0xa12>
 8009b08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d15a      	bne.n	8009bc8 <_strtod_l+0xa20>
 8009b12:	4b64      	ldr	r3, [pc, #400]	@ (8009ca4 <_strtod_l+0xafc>)
 8009b14:	2200      	movs	r2, #0
 8009b16:	4630      	mov	r0, r6
 8009b18:	4639      	mov	r1, r7
 8009b1a:	f7f6 ffdf 	bl	8000adc <__aeabi_dcmplt>
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	d159      	bne.n	8009bd6 <_strtod_l+0xa2e>
 8009b22:	4630      	mov	r0, r6
 8009b24:	4639      	mov	r1, r7
 8009b26:	4b60      	ldr	r3, [pc, #384]	@ (8009ca8 <_strtod_l+0xb00>)
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f7f6 fd65 	bl	80005f8 <__aeabi_dmul>
 8009b2e:	4606      	mov	r6, r0
 8009b30:	460f      	mov	r7, r1
 8009b32:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009b36:	9606      	str	r6, [sp, #24]
 8009b38:	9307      	str	r3, [sp, #28]
 8009b3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b3e:	4d57      	ldr	r5, [pc, #348]	@ (8009c9c <_strtod_l+0xaf4>)
 8009b40:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009b44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b46:	401d      	ands	r5, r3
 8009b48:	4b58      	ldr	r3, [pc, #352]	@ (8009cac <_strtod_l+0xb04>)
 8009b4a:	429d      	cmp	r5, r3
 8009b4c:	f040 80b2 	bne.w	8009cb4 <_strtod_l+0xb0c>
 8009b50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b52:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009b56:	ec4b ab10 	vmov	d0, sl, fp
 8009b5a:	f7ff f9c9 	bl	8008ef0 <__ulp>
 8009b5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b62:	ec51 0b10 	vmov	r0, r1, d0
 8009b66:	f7f6 fd47 	bl	80005f8 <__aeabi_dmul>
 8009b6a:	4652      	mov	r2, sl
 8009b6c:	465b      	mov	r3, fp
 8009b6e:	f7f6 fb8d 	bl	800028c <__adddf3>
 8009b72:	460b      	mov	r3, r1
 8009b74:	4949      	ldr	r1, [pc, #292]	@ (8009c9c <_strtod_l+0xaf4>)
 8009b76:	4a4e      	ldr	r2, [pc, #312]	@ (8009cb0 <_strtod_l+0xb08>)
 8009b78:	4019      	ands	r1, r3
 8009b7a:	4291      	cmp	r1, r2
 8009b7c:	4682      	mov	sl, r0
 8009b7e:	d942      	bls.n	8009c06 <_strtod_l+0xa5e>
 8009b80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b82:	4b47      	ldr	r3, [pc, #284]	@ (8009ca0 <_strtod_l+0xaf8>)
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d103      	bne.n	8009b90 <_strtod_l+0x9e8>
 8009b88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	f43f ad2b 	beq.w	80095e6 <_strtod_l+0x43e>
 8009b90:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009ca0 <_strtod_l+0xaf8>
 8009b94:	f04f 3aff 	mov.w	sl, #4294967295
 8009b98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b9a:	9805      	ldr	r0, [sp, #20]
 8009b9c:	f7fe fe74 	bl	8008888 <_Bfree>
 8009ba0:	9805      	ldr	r0, [sp, #20]
 8009ba2:	4649      	mov	r1, r9
 8009ba4:	f7fe fe70 	bl	8008888 <_Bfree>
 8009ba8:	9805      	ldr	r0, [sp, #20]
 8009baa:	4641      	mov	r1, r8
 8009bac:	f7fe fe6c 	bl	8008888 <_Bfree>
 8009bb0:	9805      	ldr	r0, [sp, #20]
 8009bb2:	4621      	mov	r1, r4
 8009bb4:	f7fe fe68 	bl	8008888 <_Bfree>
 8009bb8:	e618      	b.n	80097ec <_strtod_l+0x644>
 8009bba:	f1ba 0f01 	cmp.w	sl, #1
 8009bbe:	d103      	bne.n	8009bc8 <_strtod_l+0xa20>
 8009bc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f43f ada5 	beq.w	8009712 <_strtod_l+0x56a>
 8009bc8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009c78 <_strtod_l+0xad0>
 8009bcc:	4f35      	ldr	r7, [pc, #212]	@ (8009ca4 <_strtod_l+0xafc>)
 8009bce:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009bd2:	2600      	movs	r6, #0
 8009bd4:	e7b1      	b.n	8009b3a <_strtod_l+0x992>
 8009bd6:	4f34      	ldr	r7, [pc, #208]	@ (8009ca8 <_strtod_l+0xb00>)
 8009bd8:	2600      	movs	r6, #0
 8009bda:	e7aa      	b.n	8009b32 <_strtod_l+0x98a>
 8009bdc:	4b32      	ldr	r3, [pc, #200]	@ (8009ca8 <_strtod_l+0xb00>)
 8009bde:	4630      	mov	r0, r6
 8009be0:	4639      	mov	r1, r7
 8009be2:	2200      	movs	r2, #0
 8009be4:	f7f6 fd08 	bl	80005f8 <__aeabi_dmul>
 8009be8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bea:	4606      	mov	r6, r0
 8009bec:	460f      	mov	r7, r1
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d09f      	beq.n	8009b32 <_strtod_l+0x98a>
 8009bf2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009bf6:	e7a0      	b.n	8009b3a <_strtod_l+0x992>
 8009bf8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009c80 <_strtod_l+0xad8>
 8009bfc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c00:	ec57 6b17 	vmov	r6, r7, d7
 8009c04:	e799      	b.n	8009b3a <_strtod_l+0x992>
 8009c06:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009c0a:	9b08      	ldr	r3, [sp, #32]
 8009c0c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d1c1      	bne.n	8009b98 <_strtod_l+0x9f0>
 8009c14:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009c18:	0d1b      	lsrs	r3, r3, #20
 8009c1a:	051b      	lsls	r3, r3, #20
 8009c1c:	429d      	cmp	r5, r3
 8009c1e:	d1bb      	bne.n	8009b98 <_strtod_l+0x9f0>
 8009c20:	4630      	mov	r0, r6
 8009c22:	4639      	mov	r1, r7
 8009c24:	f7f7 f830 	bl	8000c88 <__aeabi_d2lz>
 8009c28:	f7f6 fcb8 	bl	800059c <__aeabi_l2d>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	460b      	mov	r3, r1
 8009c30:	4630      	mov	r0, r6
 8009c32:	4639      	mov	r1, r7
 8009c34:	f7f6 fb28 	bl	8000288 <__aeabi_dsub>
 8009c38:	460b      	mov	r3, r1
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009c40:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009c44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c46:	ea46 060a 	orr.w	r6, r6, sl
 8009c4a:	431e      	orrs	r6, r3
 8009c4c:	d06f      	beq.n	8009d2e <_strtod_l+0xb86>
 8009c4e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009c88 <_strtod_l+0xae0>)
 8009c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c54:	f7f6 ff42 	bl	8000adc <__aeabi_dcmplt>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	f47f accf 	bne.w	80095fc <_strtod_l+0x454>
 8009c5e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009c90 <_strtod_l+0xae8>)
 8009c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c68:	f7f6 ff56 	bl	8000b18 <__aeabi_dcmpgt>
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	d093      	beq.n	8009b98 <_strtod_l+0x9f0>
 8009c70:	e4c4      	b.n	80095fc <_strtod_l+0x454>
 8009c72:	bf00      	nop
 8009c74:	f3af 8000 	nop.w
 8009c78:	00000000 	.word	0x00000000
 8009c7c:	bff00000 	.word	0xbff00000
 8009c80:	00000000 	.word	0x00000000
 8009c84:	3ff00000 	.word	0x3ff00000
 8009c88:	94a03595 	.word	0x94a03595
 8009c8c:	3fdfffff 	.word	0x3fdfffff
 8009c90:	35afe535 	.word	0x35afe535
 8009c94:	3fe00000 	.word	0x3fe00000
 8009c98:	000fffff 	.word	0x000fffff
 8009c9c:	7ff00000 	.word	0x7ff00000
 8009ca0:	7fefffff 	.word	0x7fefffff
 8009ca4:	3ff00000 	.word	0x3ff00000
 8009ca8:	3fe00000 	.word	0x3fe00000
 8009cac:	7fe00000 	.word	0x7fe00000
 8009cb0:	7c9fffff 	.word	0x7c9fffff
 8009cb4:	9b08      	ldr	r3, [sp, #32]
 8009cb6:	b323      	cbz	r3, 8009d02 <_strtod_l+0xb5a>
 8009cb8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009cbc:	d821      	bhi.n	8009d02 <_strtod_l+0xb5a>
 8009cbe:	a328      	add	r3, pc, #160	@ (adr r3, 8009d60 <_strtod_l+0xbb8>)
 8009cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	4639      	mov	r1, r7
 8009cc8:	f7f6 ff12 	bl	8000af0 <__aeabi_dcmple>
 8009ccc:	b1a0      	cbz	r0, 8009cf8 <_strtod_l+0xb50>
 8009cce:	4639      	mov	r1, r7
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	f7f6 ff69 	bl	8000ba8 <__aeabi_d2uiz>
 8009cd6:	2801      	cmp	r0, #1
 8009cd8:	bf38      	it	cc
 8009cda:	2001      	movcc	r0, #1
 8009cdc:	f7f6 fc12 	bl	8000504 <__aeabi_ui2d>
 8009ce0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ce2:	4606      	mov	r6, r0
 8009ce4:	460f      	mov	r7, r1
 8009ce6:	b9fb      	cbnz	r3, 8009d28 <_strtod_l+0xb80>
 8009ce8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009cec:	9014      	str	r0, [sp, #80]	@ 0x50
 8009cee:	9315      	str	r3, [sp, #84]	@ 0x54
 8009cf0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009cf4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009cf8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009cfa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009cfe:	1b5b      	subs	r3, r3, r5
 8009d00:	9311      	str	r3, [sp, #68]	@ 0x44
 8009d02:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009d06:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009d0a:	f7ff f8f1 	bl	8008ef0 <__ulp>
 8009d0e:	4650      	mov	r0, sl
 8009d10:	ec53 2b10 	vmov	r2, r3, d0
 8009d14:	4659      	mov	r1, fp
 8009d16:	f7f6 fc6f 	bl	80005f8 <__aeabi_dmul>
 8009d1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009d1e:	f7f6 fab5 	bl	800028c <__adddf3>
 8009d22:	4682      	mov	sl, r0
 8009d24:	468b      	mov	fp, r1
 8009d26:	e770      	b.n	8009c0a <_strtod_l+0xa62>
 8009d28:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009d2c:	e7e0      	b.n	8009cf0 <_strtod_l+0xb48>
 8009d2e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009d68 <_strtod_l+0xbc0>)
 8009d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d34:	f7f6 fed2 	bl	8000adc <__aeabi_dcmplt>
 8009d38:	e798      	b.n	8009c6c <_strtod_l+0xac4>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d3e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009d40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d42:	6013      	str	r3, [r2, #0]
 8009d44:	f7ff ba6d 	b.w	8009222 <_strtod_l+0x7a>
 8009d48:	2a65      	cmp	r2, #101	@ 0x65
 8009d4a:	f43f ab66 	beq.w	800941a <_strtod_l+0x272>
 8009d4e:	2a45      	cmp	r2, #69	@ 0x45
 8009d50:	f43f ab63 	beq.w	800941a <_strtod_l+0x272>
 8009d54:	2301      	movs	r3, #1
 8009d56:	f7ff bb9e 	b.w	8009496 <_strtod_l+0x2ee>
 8009d5a:	bf00      	nop
 8009d5c:	f3af 8000 	nop.w
 8009d60:	ffc00000 	.word	0xffc00000
 8009d64:	41dfffff 	.word	0x41dfffff
 8009d68:	94a03595 	.word	0x94a03595
 8009d6c:	3fcfffff 	.word	0x3fcfffff

08009d70 <_strtod_r>:
 8009d70:	4b01      	ldr	r3, [pc, #4]	@ (8009d78 <_strtod_r+0x8>)
 8009d72:	f7ff ba19 	b.w	80091a8 <_strtod_l>
 8009d76:	bf00      	nop
 8009d78:	20000264 	.word	0x20000264

08009d7c <_strtol_l.constprop.0>:
 8009d7c:	2b24      	cmp	r3, #36	@ 0x24
 8009d7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d82:	4686      	mov	lr, r0
 8009d84:	4690      	mov	r8, r2
 8009d86:	d801      	bhi.n	8009d8c <_strtol_l.constprop.0+0x10>
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d106      	bne.n	8009d9a <_strtol_l.constprop.0+0x1e>
 8009d8c:	f7fd fdac 	bl	80078e8 <__errno>
 8009d90:	2316      	movs	r3, #22
 8009d92:	6003      	str	r3, [r0, #0]
 8009d94:	2000      	movs	r0, #0
 8009d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d9a:	4834      	ldr	r0, [pc, #208]	@ (8009e6c <_strtol_l.constprop.0+0xf0>)
 8009d9c:	460d      	mov	r5, r1
 8009d9e:	462a      	mov	r2, r5
 8009da0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009da4:	5d06      	ldrb	r6, [r0, r4]
 8009da6:	f016 0608 	ands.w	r6, r6, #8
 8009daa:	d1f8      	bne.n	8009d9e <_strtol_l.constprop.0+0x22>
 8009dac:	2c2d      	cmp	r4, #45	@ 0x2d
 8009dae:	d12d      	bne.n	8009e0c <_strtol_l.constprop.0+0x90>
 8009db0:	782c      	ldrb	r4, [r5, #0]
 8009db2:	2601      	movs	r6, #1
 8009db4:	1c95      	adds	r5, r2, #2
 8009db6:	f033 0210 	bics.w	r2, r3, #16
 8009dba:	d109      	bne.n	8009dd0 <_strtol_l.constprop.0+0x54>
 8009dbc:	2c30      	cmp	r4, #48	@ 0x30
 8009dbe:	d12a      	bne.n	8009e16 <_strtol_l.constprop.0+0x9a>
 8009dc0:	782a      	ldrb	r2, [r5, #0]
 8009dc2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009dc6:	2a58      	cmp	r2, #88	@ 0x58
 8009dc8:	d125      	bne.n	8009e16 <_strtol_l.constprop.0+0x9a>
 8009dca:	786c      	ldrb	r4, [r5, #1]
 8009dcc:	2310      	movs	r3, #16
 8009dce:	3502      	adds	r5, #2
 8009dd0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009dd4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009dd8:	2200      	movs	r2, #0
 8009dda:	fbbc f9f3 	udiv	r9, ip, r3
 8009dde:	4610      	mov	r0, r2
 8009de0:	fb03 ca19 	mls	sl, r3, r9, ip
 8009de4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009de8:	2f09      	cmp	r7, #9
 8009dea:	d81b      	bhi.n	8009e24 <_strtol_l.constprop.0+0xa8>
 8009dec:	463c      	mov	r4, r7
 8009dee:	42a3      	cmp	r3, r4
 8009df0:	dd27      	ble.n	8009e42 <_strtol_l.constprop.0+0xc6>
 8009df2:	1c57      	adds	r7, r2, #1
 8009df4:	d007      	beq.n	8009e06 <_strtol_l.constprop.0+0x8a>
 8009df6:	4581      	cmp	r9, r0
 8009df8:	d320      	bcc.n	8009e3c <_strtol_l.constprop.0+0xc0>
 8009dfa:	d101      	bne.n	8009e00 <_strtol_l.constprop.0+0x84>
 8009dfc:	45a2      	cmp	sl, r4
 8009dfe:	db1d      	blt.n	8009e3c <_strtol_l.constprop.0+0xc0>
 8009e00:	fb00 4003 	mla	r0, r0, r3, r4
 8009e04:	2201      	movs	r2, #1
 8009e06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e0a:	e7eb      	b.n	8009de4 <_strtol_l.constprop.0+0x68>
 8009e0c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009e0e:	bf04      	itt	eq
 8009e10:	782c      	ldrbeq	r4, [r5, #0]
 8009e12:	1c95      	addeq	r5, r2, #2
 8009e14:	e7cf      	b.n	8009db6 <_strtol_l.constprop.0+0x3a>
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d1da      	bne.n	8009dd0 <_strtol_l.constprop.0+0x54>
 8009e1a:	2c30      	cmp	r4, #48	@ 0x30
 8009e1c:	bf0c      	ite	eq
 8009e1e:	2308      	moveq	r3, #8
 8009e20:	230a      	movne	r3, #10
 8009e22:	e7d5      	b.n	8009dd0 <_strtol_l.constprop.0+0x54>
 8009e24:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009e28:	2f19      	cmp	r7, #25
 8009e2a:	d801      	bhi.n	8009e30 <_strtol_l.constprop.0+0xb4>
 8009e2c:	3c37      	subs	r4, #55	@ 0x37
 8009e2e:	e7de      	b.n	8009dee <_strtol_l.constprop.0+0x72>
 8009e30:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009e34:	2f19      	cmp	r7, #25
 8009e36:	d804      	bhi.n	8009e42 <_strtol_l.constprop.0+0xc6>
 8009e38:	3c57      	subs	r4, #87	@ 0x57
 8009e3a:	e7d8      	b.n	8009dee <_strtol_l.constprop.0+0x72>
 8009e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e40:	e7e1      	b.n	8009e06 <_strtol_l.constprop.0+0x8a>
 8009e42:	1c53      	adds	r3, r2, #1
 8009e44:	d108      	bne.n	8009e58 <_strtol_l.constprop.0+0xdc>
 8009e46:	2322      	movs	r3, #34	@ 0x22
 8009e48:	f8ce 3000 	str.w	r3, [lr]
 8009e4c:	4660      	mov	r0, ip
 8009e4e:	f1b8 0f00 	cmp.w	r8, #0
 8009e52:	d0a0      	beq.n	8009d96 <_strtol_l.constprop.0+0x1a>
 8009e54:	1e69      	subs	r1, r5, #1
 8009e56:	e006      	b.n	8009e66 <_strtol_l.constprop.0+0xea>
 8009e58:	b106      	cbz	r6, 8009e5c <_strtol_l.constprop.0+0xe0>
 8009e5a:	4240      	negs	r0, r0
 8009e5c:	f1b8 0f00 	cmp.w	r8, #0
 8009e60:	d099      	beq.n	8009d96 <_strtol_l.constprop.0+0x1a>
 8009e62:	2a00      	cmp	r2, #0
 8009e64:	d1f6      	bne.n	8009e54 <_strtol_l.constprop.0+0xd8>
 8009e66:	f8c8 1000 	str.w	r1, [r8]
 8009e6a:	e794      	b.n	8009d96 <_strtol_l.constprop.0+0x1a>
 8009e6c:	0800b2c1 	.word	0x0800b2c1

08009e70 <_strtol_r>:
 8009e70:	f7ff bf84 	b.w	8009d7c <_strtol_l.constprop.0>

08009e74 <__ssputs_r>:
 8009e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e78:	688e      	ldr	r6, [r1, #8]
 8009e7a:	461f      	mov	r7, r3
 8009e7c:	42be      	cmp	r6, r7
 8009e7e:	680b      	ldr	r3, [r1, #0]
 8009e80:	4682      	mov	sl, r0
 8009e82:	460c      	mov	r4, r1
 8009e84:	4690      	mov	r8, r2
 8009e86:	d82d      	bhi.n	8009ee4 <__ssputs_r+0x70>
 8009e88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009e90:	d026      	beq.n	8009ee0 <__ssputs_r+0x6c>
 8009e92:	6965      	ldr	r5, [r4, #20]
 8009e94:	6909      	ldr	r1, [r1, #16]
 8009e96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e9a:	eba3 0901 	sub.w	r9, r3, r1
 8009e9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ea2:	1c7b      	adds	r3, r7, #1
 8009ea4:	444b      	add	r3, r9
 8009ea6:	106d      	asrs	r5, r5, #1
 8009ea8:	429d      	cmp	r5, r3
 8009eaa:	bf38      	it	cc
 8009eac:	461d      	movcc	r5, r3
 8009eae:	0553      	lsls	r3, r2, #21
 8009eb0:	d527      	bpl.n	8009f02 <__ssputs_r+0x8e>
 8009eb2:	4629      	mov	r1, r5
 8009eb4:	f7fe fc1c 	bl	80086f0 <_malloc_r>
 8009eb8:	4606      	mov	r6, r0
 8009eba:	b360      	cbz	r0, 8009f16 <__ssputs_r+0xa2>
 8009ebc:	6921      	ldr	r1, [r4, #16]
 8009ebe:	464a      	mov	r2, r9
 8009ec0:	f7fd fd3f 	bl	8007942 <memcpy>
 8009ec4:	89a3      	ldrh	r3, [r4, #12]
 8009ec6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009eca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ece:	81a3      	strh	r3, [r4, #12]
 8009ed0:	6126      	str	r6, [r4, #16]
 8009ed2:	6165      	str	r5, [r4, #20]
 8009ed4:	444e      	add	r6, r9
 8009ed6:	eba5 0509 	sub.w	r5, r5, r9
 8009eda:	6026      	str	r6, [r4, #0]
 8009edc:	60a5      	str	r5, [r4, #8]
 8009ede:	463e      	mov	r6, r7
 8009ee0:	42be      	cmp	r6, r7
 8009ee2:	d900      	bls.n	8009ee6 <__ssputs_r+0x72>
 8009ee4:	463e      	mov	r6, r7
 8009ee6:	6820      	ldr	r0, [r4, #0]
 8009ee8:	4632      	mov	r2, r6
 8009eea:	4641      	mov	r1, r8
 8009eec:	f000 f9c6 	bl	800a27c <memmove>
 8009ef0:	68a3      	ldr	r3, [r4, #8]
 8009ef2:	1b9b      	subs	r3, r3, r6
 8009ef4:	60a3      	str	r3, [r4, #8]
 8009ef6:	6823      	ldr	r3, [r4, #0]
 8009ef8:	4433      	add	r3, r6
 8009efa:	6023      	str	r3, [r4, #0]
 8009efc:	2000      	movs	r0, #0
 8009efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f02:	462a      	mov	r2, r5
 8009f04:	f000 fd7d 	bl	800aa02 <_realloc_r>
 8009f08:	4606      	mov	r6, r0
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	d1e0      	bne.n	8009ed0 <__ssputs_r+0x5c>
 8009f0e:	6921      	ldr	r1, [r4, #16]
 8009f10:	4650      	mov	r0, sl
 8009f12:	f7fe fb79 	bl	8008608 <_free_r>
 8009f16:	230c      	movs	r3, #12
 8009f18:	f8ca 3000 	str.w	r3, [sl]
 8009f1c:	89a3      	ldrh	r3, [r4, #12]
 8009f1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f22:	81a3      	strh	r3, [r4, #12]
 8009f24:	f04f 30ff 	mov.w	r0, #4294967295
 8009f28:	e7e9      	b.n	8009efe <__ssputs_r+0x8a>
	...

08009f2c <_svfiprintf_r>:
 8009f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f30:	4698      	mov	r8, r3
 8009f32:	898b      	ldrh	r3, [r1, #12]
 8009f34:	061b      	lsls	r3, r3, #24
 8009f36:	b09d      	sub	sp, #116	@ 0x74
 8009f38:	4607      	mov	r7, r0
 8009f3a:	460d      	mov	r5, r1
 8009f3c:	4614      	mov	r4, r2
 8009f3e:	d510      	bpl.n	8009f62 <_svfiprintf_r+0x36>
 8009f40:	690b      	ldr	r3, [r1, #16]
 8009f42:	b973      	cbnz	r3, 8009f62 <_svfiprintf_r+0x36>
 8009f44:	2140      	movs	r1, #64	@ 0x40
 8009f46:	f7fe fbd3 	bl	80086f0 <_malloc_r>
 8009f4a:	6028      	str	r0, [r5, #0]
 8009f4c:	6128      	str	r0, [r5, #16]
 8009f4e:	b930      	cbnz	r0, 8009f5e <_svfiprintf_r+0x32>
 8009f50:	230c      	movs	r3, #12
 8009f52:	603b      	str	r3, [r7, #0]
 8009f54:	f04f 30ff 	mov.w	r0, #4294967295
 8009f58:	b01d      	add	sp, #116	@ 0x74
 8009f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f5e:	2340      	movs	r3, #64	@ 0x40
 8009f60:	616b      	str	r3, [r5, #20]
 8009f62:	2300      	movs	r3, #0
 8009f64:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f66:	2320      	movs	r3, #32
 8009f68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f70:	2330      	movs	r3, #48	@ 0x30
 8009f72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a110 <_svfiprintf_r+0x1e4>
 8009f76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f7a:	f04f 0901 	mov.w	r9, #1
 8009f7e:	4623      	mov	r3, r4
 8009f80:	469a      	mov	sl, r3
 8009f82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f86:	b10a      	cbz	r2, 8009f8c <_svfiprintf_r+0x60>
 8009f88:	2a25      	cmp	r2, #37	@ 0x25
 8009f8a:	d1f9      	bne.n	8009f80 <_svfiprintf_r+0x54>
 8009f8c:	ebba 0b04 	subs.w	fp, sl, r4
 8009f90:	d00b      	beq.n	8009faa <_svfiprintf_r+0x7e>
 8009f92:	465b      	mov	r3, fp
 8009f94:	4622      	mov	r2, r4
 8009f96:	4629      	mov	r1, r5
 8009f98:	4638      	mov	r0, r7
 8009f9a:	f7ff ff6b 	bl	8009e74 <__ssputs_r>
 8009f9e:	3001      	adds	r0, #1
 8009fa0:	f000 80a7 	beq.w	800a0f2 <_svfiprintf_r+0x1c6>
 8009fa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fa6:	445a      	add	r2, fp
 8009fa8:	9209      	str	r2, [sp, #36]	@ 0x24
 8009faa:	f89a 3000 	ldrb.w	r3, [sl]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	f000 809f 	beq.w	800a0f2 <_svfiprintf_r+0x1c6>
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8009fba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fbe:	f10a 0a01 	add.w	sl, sl, #1
 8009fc2:	9304      	str	r3, [sp, #16]
 8009fc4:	9307      	str	r3, [sp, #28]
 8009fc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009fca:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fcc:	4654      	mov	r4, sl
 8009fce:	2205      	movs	r2, #5
 8009fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fd4:	484e      	ldr	r0, [pc, #312]	@ (800a110 <_svfiprintf_r+0x1e4>)
 8009fd6:	f7f6 f8fb 	bl	80001d0 <memchr>
 8009fda:	9a04      	ldr	r2, [sp, #16]
 8009fdc:	b9d8      	cbnz	r0, 800a016 <_svfiprintf_r+0xea>
 8009fde:	06d0      	lsls	r0, r2, #27
 8009fe0:	bf44      	itt	mi
 8009fe2:	2320      	movmi	r3, #32
 8009fe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fe8:	0711      	lsls	r1, r2, #28
 8009fea:	bf44      	itt	mi
 8009fec:	232b      	movmi	r3, #43	@ 0x2b
 8009fee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ff6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ff8:	d015      	beq.n	800a026 <_svfiprintf_r+0xfa>
 8009ffa:	9a07      	ldr	r2, [sp, #28]
 8009ffc:	4654      	mov	r4, sl
 8009ffe:	2000      	movs	r0, #0
 800a000:	f04f 0c0a 	mov.w	ip, #10
 800a004:	4621      	mov	r1, r4
 800a006:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a00a:	3b30      	subs	r3, #48	@ 0x30
 800a00c:	2b09      	cmp	r3, #9
 800a00e:	d94b      	bls.n	800a0a8 <_svfiprintf_r+0x17c>
 800a010:	b1b0      	cbz	r0, 800a040 <_svfiprintf_r+0x114>
 800a012:	9207      	str	r2, [sp, #28]
 800a014:	e014      	b.n	800a040 <_svfiprintf_r+0x114>
 800a016:	eba0 0308 	sub.w	r3, r0, r8
 800a01a:	fa09 f303 	lsl.w	r3, r9, r3
 800a01e:	4313      	orrs	r3, r2
 800a020:	9304      	str	r3, [sp, #16]
 800a022:	46a2      	mov	sl, r4
 800a024:	e7d2      	b.n	8009fcc <_svfiprintf_r+0xa0>
 800a026:	9b03      	ldr	r3, [sp, #12]
 800a028:	1d19      	adds	r1, r3, #4
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	9103      	str	r1, [sp, #12]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	bfbb      	ittet	lt
 800a032:	425b      	neglt	r3, r3
 800a034:	f042 0202 	orrlt.w	r2, r2, #2
 800a038:	9307      	strge	r3, [sp, #28]
 800a03a:	9307      	strlt	r3, [sp, #28]
 800a03c:	bfb8      	it	lt
 800a03e:	9204      	strlt	r2, [sp, #16]
 800a040:	7823      	ldrb	r3, [r4, #0]
 800a042:	2b2e      	cmp	r3, #46	@ 0x2e
 800a044:	d10a      	bne.n	800a05c <_svfiprintf_r+0x130>
 800a046:	7863      	ldrb	r3, [r4, #1]
 800a048:	2b2a      	cmp	r3, #42	@ 0x2a
 800a04a:	d132      	bne.n	800a0b2 <_svfiprintf_r+0x186>
 800a04c:	9b03      	ldr	r3, [sp, #12]
 800a04e:	1d1a      	adds	r2, r3, #4
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	9203      	str	r2, [sp, #12]
 800a054:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a058:	3402      	adds	r4, #2
 800a05a:	9305      	str	r3, [sp, #20]
 800a05c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a120 <_svfiprintf_r+0x1f4>
 800a060:	7821      	ldrb	r1, [r4, #0]
 800a062:	2203      	movs	r2, #3
 800a064:	4650      	mov	r0, sl
 800a066:	f7f6 f8b3 	bl	80001d0 <memchr>
 800a06a:	b138      	cbz	r0, 800a07c <_svfiprintf_r+0x150>
 800a06c:	9b04      	ldr	r3, [sp, #16]
 800a06e:	eba0 000a 	sub.w	r0, r0, sl
 800a072:	2240      	movs	r2, #64	@ 0x40
 800a074:	4082      	lsls	r2, r0
 800a076:	4313      	orrs	r3, r2
 800a078:	3401      	adds	r4, #1
 800a07a:	9304      	str	r3, [sp, #16]
 800a07c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a080:	4824      	ldr	r0, [pc, #144]	@ (800a114 <_svfiprintf_r+0x1e8>)
 800a082:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a086:	2206      	movs	r2, #6
 800a088:	f7f6 f8a2 	bl	80001d0 <memchr>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	d036      	beq.n	800a0fe <_svfiprintf_r+0x1d2>
 800a090:	4b21      	ldr	r3, [pc, #132]	@ (800a118 <_svfiprintf_r+0x1ec>)
 800a092:	bb1b      	cbnz	r3, 800a0dc <_svfiprintf_r+0x1b0>
 800a094:	9b03      	ldr	r3, [sp, #12]
 800a096:	3307      	adds	r3, #7
 800a098:	f023 0307 	bic.w	r3, r3, #7
 800a09c:	3308      	adds	r3, #8
 800a09e:	9303      	str	r3, [sp, #12]
 800a0a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0a2:	4433      	add	r3, r6
 800a0a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0a6:	e76a      	b.n	8009f7e <_svfiprintf_r+0x52>
 800a0a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0ac:	460c      	mov	r4, r1
 800a0ae:	2001      	movs	r0, #1
 800a0b0:	e7a8      	b.n	800a004 <_svfiprintf_r+0xd8>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	3401      	adds	r4, #1
 800a0b6:	9305      	str	r3, [sp, #20]
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	f04f 0c0a 	mov.w	ip, #10
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0c4:	3a30      	subs	r2, #48	@ 0x30
 800a0c6:	2a09      	cmp	r2, #9
 800a0c8:	d903      	bls.n	800a0d2 <_svfiprintf_r+0x1a6>
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d0c6      	beq.n	800a05c <_svfiprintf_r+0x130>
 800a0ce:	9105      	str	r1, [sp, #20]
 800a0d0:	e7c4      	b.n	800a05c <_svfiprintf_r+0x130>
 800a0d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e7f0      	b.n	800a0be <_svfiprintf_r+0x192>
 800a0dc:	ab03      	add	r3, sp, #12
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	462a      	mov	r2, r5
 800a0e2:	4b0e      	ldr	r3, [pc, #56]	@ (800a11c <_svfiprintf_r+0x1f0>)
 800a0e4:	a904      	add	r1, sp, #16
 800a0e6:	4638      	mov	r0, r7
 800a0e8:	f7fc fcba 	bl	8006a60 <_printf_float>
 800a0ec:	1c42      	adds	r2, r0, #1
 800a0ee:	4606      	mov	r6, r0
 800a0f0:	d1d6      	bne.n	800a0a0 <_svfiprintf_r+0x174>
 800a0f2:	89ab      	ldrh	r3, [r5, #12]
 800a0f4:	065b      	lsls	r3, r3, #25
 800a0f6:	f53f af2d 	bmi.w	8009f54 <_svfiprintf_r+0x28>
 800a0fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a0fc:	e72c      	b.n	8009f58 <_svfiprintf_r+0x2c>
 800a0fe:	ab03      	add	r3, sp, #12
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	462a      	mov	r2, r5
 800a104:	4b05      	ldr	r3, [pc, #20]	@ (800a11c <_svfiprintf_r+0x1f0>)
 800a106:	a904      	add	r1, sp, #16
 800a108:	4638      	mov	r0, r7
 800a10a:	f7fc ff41 	bl	8006f90 <_printf_i>
 800a10e:	e7ed      	b.n	800a0ec <_svfiprintf_r+0x1c0>
 800a110:	0800b3c1 	.word	0x0800b3c1
 800a114:	0800b3cb 	.word	0x0800b3cb
 800a118:	08006a61 	.word	0x08006a61
 800a11c:	08009e75 	.word	0x08009e75
 800a120:	0800b3c7 	.word	0x0800b3c7

0800a124 <__sflush_r>:
 800a124:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a12c:	0716      	lsls	r6, r2, #28
 800a12e:	4605      	mov	r5, r0
 800a130:	460c      	mov	r4, r1
 800a132:	d454      	bmi.n	800a1de <__sflush_r+0xba>
 800a134:	684b      	ldr	r3, [r1, #4]
 800a136:	2b00      	cmp	r3, #0
 800a138:	dc02      	bgt.n	800a140 <__sflush_r+0x1c>
 800a13a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	dd48      	ble.n	800a1d2 <__sflush_r+0xae>
 800a140:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a142:	2e00      	cmp	r6, #0
 800a144:	d045      	beq.n	800a1d2 <__sflush_r+0xae>
 800a146:	2300      	movs	r3, #0
 800a148:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a14c:	682f      	ldr	r7, [r5, #0]
 800a14e:	6a21      	ldr	r1, [r4, #32]
 800a150:	602b      	str	r3, [r5, #0]
 800a152:	d030      	beq.n	800a1b6 <__sflush_r+0x92>
 800a154:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a156:	89a3      	ldrh	r3, [r4, #12]
 800a158:	0759      	lsls	r1, r3, #29
 800a15a:	d505      	bpl.n	800a168 <__sflush_r+0x44>
 800a15c:	6863      	ldr	r3, [r4, #4]
 800a15e:	1ad2      	subs	r2, r2, r3
 800a160:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a162:	b10b      	cbz	r3, 800a168 <__sflush_r+0x44>
 800a164:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a166:	1ad2      	subs	r2, r2, r3
 800a168:	2300      	movs	r3, #0
 800a16a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a16c:	6a21      	ldr	r1, [r4, #32]
 800a16e:	4628      	mov	r0, r5
 800a170:	47b0      	blx	r6
 800a172:	1c43      	adds	r3, r0, #1
 800a174:	89a3      	ldrh	r3, [r4, #12]
 800a176:	d106      	bne.n	800a186 <__sflush_r+0x62>
 800a178:	6829      	ldr	r1, [r5, #0]
 800a17a:	291d      	cmp	r1, #29
 800a17c:	d82b      	bhi.n	800a1d6 <__sflush_r+0xb2>
 800a17e:	4a2a      	ldr	r2, [pc, #168]	@ (800a228 <__sflush_r+0x104>)
 800a180:	410a      	asrs	r2, r1
 800a182:	07d6      	lsls	r6, r2, #31
 800a184:	d427      	bmi.n	800a1d6 <__sflush_r+0xb2>
 800a186:	2200      	movs	r2, #0
 800a188:	6062      	str	r2, [r4, #4]
 800a18a:	04d9      	lsls	r1, r3, #19
 800a18c:	6922      	ldr	r2, [r4, #16]
 800a18e:	6022      	str	r2, [r4, #0]
 800a190:	d504      	bpl.n	800a19c <__sflush_r+0x78>
 800a192:	1c42      	adds	r2, r0, #1
 800a194:	d101      	bne.n	800a19a <__sflush_r+0x76>
 800a196:	682b      	ldr	r3, [r5, #0]
 800a198:	b903      	cbnz	r3, 800a19c <__sflush_r+0x78>
 800a19a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a19c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a19e:	602f      	str	r7, [r5, #0]
 800a1a0:	b1b9      	cbz	r1, 800a1d2 <__sflush_r+0xae>
 800a1a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1a6:	4299      	cmp	r1, r3
 800a1a8:	d002      	beq.n	800a1b0 <__sflush_r+0x8c>
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	f7fe fa2c 	bl	8008608 <_free_r>
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	6363      	str	r3, [r4, #52]	@ 0x34
 800a1b4:	e00d      	b.n	800a1d2 <__sflush_r+0xae>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	47b0      	blx	r6
 800a1bc:	4602      	mov	r2, r0
 800a1be:	1c50      	adds	r0, r2, #1
 800a1c0:	d1c9      	bne.n	800a156 <__sflush_r+0x32>
 800a1c2:	682b      	ldr	r3, [r5, #0]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d0c6      	beq.n	800a156 <__sflush_r+0x32>
 800a1c8:	2b1d      	cmp	r3, #29
 800a1ca:	d001      	beq.n	800a1d0 <__sflush_r+0xac>
 800a1cc:	2b16      	cmp	r3, #22
 800a1ce:	d11e      	bne.n	800a20e <__sflush_r+0xea>
 800a1d0:	602f      	str	r7, [r5, #0]
 800a1d2:	2000      	movs	r0, #0
 800a1d4:	e022      	b.n	800a21c <__sflush_r+0xf8>
 800a1d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1da:	b21b      	sxth	r3, r3
 800a1dc:	e01b      	b.n	800a216 <__sflush_r+0xf2>
 800a1de:	690f      	ldr	r7, [r1, #16]
 800a1e0:	2f00      	cmp	r7, #0
 800a1e2:	d0f6      	beq.n	800a1d2 <__sflush_r+0xae>
 800a1e4:	0793      	lsls	r3, r2, #30
 800a1e6:	680e      	ldr	r6, [r1, #0]
 800a1e8:	bf08      	it	eq
 800a1ea:	694b      	ldreq	r3, [r1, #20]
 800a1ec:	600f      	str	r7, [r1, #0]
 800a1ee:	bf18      	it	ne
 800a1f0:	2300      	movne	r3, #0
 800a1f2:	eba6 0807 	sub.w	r8, r6, r7
 800a1f6:	608b      	str	r3, [r1, #8]
 800a1f8:	f1b8 0f00 	cmp.w	r8, #0
 800a1fc:	dde9      	ble.n	800a1d2 <__sflush_r+0xae>
 800a1fe:	6a21      	ldr	r1, [r4, #32]
 800a200:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a202:	4643      	mov	r3, r8
 800a204:	463a      	mov	r2, r7
 800a206:	4628      	mov	r0, r5
 800a208:	47b0      	blx	r6
 800a20a:	2800      	cmp	r0, #0
 800a20c:	dc08      	bgt.n	800a220 <__sflush_r+0xfc>
 800a20e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a216:	81a3      	strh	r3, [r4, #12]
 800a218:	f04f 30ff 	mov.w	r0, #4294967295
 800a21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a220:	4407      	add	r7, r0
 800a222:	eba8 0800 	sub.w	r8, r8, r0
 800a226:	e7e7      	b.n	800a1f8 <__sflush_r+0xd4>
 800a228:	dfbffffe 	.word	0xdfbffffe

0800a22c <_fflush_r>:
 800a22c:	b538      	push	{r3, r4, r5, lr}
 800a22e:	690b      	ldr	r3, [r1, #16]
 800a230:	4605      	mov	r5, r0
 800a232:	460c      	mov	r4, r1
 800a234:	b913      	cbnz	r3, 800a23c <_fflush_r+0x10>
 800a236:	2500      	movs	r5, #0
 800a238:	4628      	mov	r0, r5
 800a23a:	bd38      	pop	{r3, r4, r5, pc}
 800a23c:	b118      	cbz	r0, 800a246 <_fflush_r+0x1a>
 800a23e:	6a03      	ldr	r3, [r0, #32]
 800a240:	b90b      	cbnz	r3, 800a246 <_fflush_r+0x1a>
 800a242:	f7fd fa65 	bl	8007710 <__sinit>
 800a246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d0f3      	beq.n	800a236 <_fflush_r+0xa>
 800a24e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a250:	07d0      	lsls	r0, r2, #31
 800a252:	d404      	bmi.n	800a25e <_fflush_r+0x32>
 800a254:	0599      	lsls	r1, r3, #22
 800a256:	d402      	bmi.n	800a25e <_fflush_r+0x32>
 800a258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a25a:	f7fd fb70 	bl	800793e <__retarget_lock_acquire_recursive>
 800a25e:	4628      	mov	r0, r5
 800a260:	4621      	mov	r1, r4
 800a262:	f7ff ff5f 	bl	800a124 <__sflush_r>
 800a266:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a268:	07da      	lsls	r2, r3, #31
 800a26a:	4605      	mov	r5, r0
 800a26c:	d4e4      	bmi.n	800a238 <_fflush_r+0xc>
 800a26e:	89a3      	ldrh	r3, [r4, #12]
 800a270:	059b      	lsls	r3, r3, #22
 800a272:	d4e1      	bmi.n	800a238 <_fflush_r+0xc>
 800a274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a276:	f7fd fb63 	bl	8007940 <__retarget_lock_release_recursive>
 800a27a:	e7dd      	b.n	800a238 <_fflush_r+0xc>

0800a27c <memmove>:
 800a27c:	4288      	cmp	r0, r1
 800a27e:	b510      	push	{r4, lr}
 800a280:	eb01 0402 	add.w	r4, r1, r2
 800a284:	d902      	bls.n	800a28c <memmove+0x10>
 800a286:	4284      	cmp	r4, r0
 800a288:	4623      	mov	r3, r4
 800a28a:	d807      	bhi.n	800a29c <memmove+0x20>
 800a28c:	1e43      	subs	r3, r0, #1
 800a28e:	42a1      	cmp	r1, r4
 800a290:	d008      	beq.n	800a2a4 <memmove+0x28>
 800a292:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a296:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a29a:	e7f8      	b.n	800a28e <memmove+0x12>
 800a29c:	4402      	add	r2, r0
 800a29e:	4601      	mov	r1, r0
 800a2a0:	428a      	cmp	r2, r1
 800a2a2:	d100      	bne.n	800a2a6 <memmove+0x2a>
 800a2a4:	bd10      	pop	{r4, pc}
 800a2a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2ae:	e7f7      	b.n	800a2a0 <memmove+0x24>

0800a2b0 <strncmp>:
 800a2b0:	b510      	push	{r4, lr}
 800a2b2:	b16a      	cbz	r2, 800a2d0 <strncmp+0x20>
 800a2b4:	3901      	subs	r1, #1
 800a2b6:	1884      	adds	r4, r0, r2
 800a2b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d103      	bne.n	800a2cc <strncmp+0x1c>
 800a2c4:	42a0      	cmp	r0, r4
 800a2c6:	d001      	beq.n	800a2cc <strncmp+0x1c>
 800a2c8:	2a00      	cmp	r2, #0
 800a2ca:	d1f5      	bne.n	800a2b8 <strncmp+0x8>
 800a2cc:	1ad0      	subs	r0, r2, r3
 800a2ce:	bd10      	pop	{r4, pc}
 800a2d0:	4610      	mov	r0, r2
 800a2d2:	e7fc      	b.n	800a2ce <strncmp+0x1e>

0800a2d4 <_sbrk_r>:
 800a2d4:	b538      	push	{r3, r4, r5, lr}
 800a2d6:	4d06      	ldr	r5, [pc, #24]	@ (800a2f0 <_sbrk_r+0x1c>)
 800a2d8:	2300      	movs	r3, #0
 800a2da:	4604      	mov	r4, r0
 800a2dc:	4608      	mov	r0, r1
 800a2de:	602b      	str	r3, [r5, #0]
 800a2e0:	f7f7 fb3a 	bl	8001958 <_sbrk>
 800a2e4:	1c43      	adds	r3, r0, #1
 800a2e6:	d102      	bne.n	800a2ee <_sbrk_r+0x1a>
 800a2e8:	682b      	ldr	r3, [r5, #0]
 800a2ea:	b103      	cbz	r3, 800a2ee <_sbrk_r+0x1a>
 800a2ec:	6023      	str	r3, [r4, #0]
 800a2ee:	bd38      	pop	{r3, r4, r5, pc}
 800a2f0:	20000a24 	.word	0x20000a24
 800a2f4:	00000000 	.word	0x00000000

0800a2f8 <nan>:
 800a2f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a300 <nan+0x8>
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	00000000 	.word	0x00000000
 800a304:	7ff80000 	.word	0x7ff80000

0800a308 <__assert_func>:
 800a308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a30a:	4614      	mov	r4, r2
 800a30c:	461a      	mov	r2, r3
 800a30e:	4b09      	ldr	r3, [pc, #36]	@ (800a334 <__assert_func+0x2c>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4605      	mov	r5, r0
 800a314:	68d8      	ldr	r0, [r3, #12]
 800a316:	b954      	cbnz	r4, 800a32e <__assert_func+0x26>
 800a318:	4b07      	ldr	r3, [pc, #28]	@ (800a338 <__assert_func+0x30>)
 800a31a:	461c      	mov	r4, r3
 800a31c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a320:	9100      	str	r1, [sp, #0]
 800a322:	462b      	mov	r3, r5
 800a324:	4905      	ldr	r1, [pc, #20]	@ (800a33c <__assert_func+0x34>)
 800a326:	f000 fba7 	bl	800aa78 <fiprintf>
 800a32a:	f000 fbb7 	bl	800aa9c <abort>
 800a32e:	4b04      	ldr	r3, [pc, #16]	@ (800a340 <__assert_func+0x38>)
 800a330:	e7f4      	b.n	800a31c <__assert_func+0x14>
 800a332:	bf00      	nop
 800a334:	20000214 	.word	0x20000214
 800a338:	0800b415 	.word	0x0800b415
 800a33c:	0800b3e7 	.word	0x0800b3e7
 800a340:	0800b3da 	.word	0x0800b3da

0800a344 <_calloc_r>:
 800a344:	b570      	push	{r4, r5, r6, lr}
 800a346:	fba1 5402 	umull	r5, r4, r1, r2
 800a34a:	b93c      	cbnz	r4, 800a35c <_calloc_r+0x18>
 800a34c:	4629      	mov	r1, r5
 800a34e:	f7fe f9cf 	bl	80086f0 <_malloc_r>
 800a352:	4606      	mov	r6, r0
 800a354:	b928      	cbnz	r0, 800a362 <_calloc_r+0x1e>
 800a356:	2600      	movs	r6, #0
 800a358:	4630      	mov	r0, r6
 800a35a:	bd70      	pop	{r4, r5, r6, pc}
 800a35c:	220c      	movs	r2, #12
 800a35e:	6002      	str	r2, [r0, #0]
 800a360:	e7f9      	b.n	800a356 <_calloc_r+0x12>
 800a362:	462a      	mov	r2, r5
 800a364:	4621      	mov	r1, r4
 800a366:	f7fd fa6c 	bl	8007842 <memset>
 800a36a:	e7f5      	b.n	800a358 <_calloc_r+0x14>

0800a36c <rshift>:
 800a36c:	6903      	ldr	r3, [r0, #16]
 800a36e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a372:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a376:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a37a:	f100 0414 	add.w	r4, r0, #20
 800a37e:	dd45      	ble.n	800a40c <rshift+0xa0>
 800a380:	f011 011f 	ands.w	r1, r1, #31
 800a384:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a388:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a38c:	d10c      	bne.n	800a3a8 <rshift+0x3c>
 800a38e:	f100 0710 	add.w	r7, r0, #16
 800a392:	4629      	mov	r1, r5
 800a394:	42b1      	cmp	r1, r6
 800a396:	d334      	bcc.n	800a402 <rshift+0x96>
 800a398:	1a9b      	subs	r3, r3, r2
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	1eea      	subs	r2, r5, #3
 800a39e:	4296      	cmp	r6, r2
 800a3a0:	bf38      	it	cc
 800a3a2:	2300      	movcc	r3, #0
 800a3a4:	4423      	add	r3, r4
 800a3a6:	e015      	b.n	800a3d4 <rshift+0x68>
 800a3a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a3ac:	f1c1 0820 	rsb	r8, r1, #32
 800a3b0:	40cf      	lsrs	r7, r1
 800a3b2:	f105 0e04 	add.w	lr, r5, #4
 800a3b6:	46a1      	mov	r9, r4
 800a3b8:	4576      	cmp	r6, lr
 800a3ba:	46f4      	mov	ip, lr
 800a3bc:	d815      	bhi.n	800a3ea <rshift+0x7e>
 800a3be:	1a9a      	subs	r2, r3, r2
 800a3c0:	0092      	lsls	r2, r2, #2
 800a3c2:	3a04      	subs	r2, #4
 800a3c4:	3501      	adds	r5, #1
 800a3c6:	42ae      	cmp	r6, r5
 800a3c8:	bf38      	it	cc
 800a3ca:	2200      	movcc	r2, #0
 800a3cc:	18a3      	adds	r3, r4, r2
 800a3ce:	50a7      	str	r7, [r4, r2]
 800a3d0:	b107      	cbz	r7, 800a3d4 <rshift+0x68>
 800a3d2:	3304      	adds	r3, #4
 800a3d4:	1b1a      	subs	r2, r3, r4
 800a3d6:	42a3      	cmp	r3, r4
 800a3d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a3dc:	bf08      	it	eq
 800a3de:	2300      	moveq	r3, #0
 800a3e0:	6102      	str	r2, [r0, #16]
 800a3e2:	bf08      	it	eq
 800a3e4:	6143      	streq	r3, [r0, #20]
 800a3e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3ea:	f8dc c000 	ldr.w	ip, [ip]
 800a3ee:	fa0c fc08 	lsl.w	ip, ip, r8
 800a3f2:	ea4c 0707 	orr.w	r7, ip, r7
 800a3f6:	f849 7b04 	str.w	r7, [r9], #4
 800a3fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a3fe:	40cf      	lsrs	r7, r1
 800a400:	e7da      	b.n	800a3b8 <rshift+0x4c>
 800a402:	f851 cb04 	ldr.w	ip, [r1], #4
 800a406:	f847 cf04 	str.w	ip, [r7, #4]!
 800a40a:	e7c3      	b.n	800a394 <rshift+0x28>
 800a40c:	4623      	mov	r3, r4
 800a40e:	e7e1      	b.n	800a3d4 <rshift+0x68>

0800a410 <__hexdig_fun>:
 800a410:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a414:	2b09      	cmp	r3, #9
 800a416:	d802      	bhi.n	800a41e <__hexdig_fun+0xe>
 800a418:	3820      	subs	r0, #32
 800a41a:	b2c0      	uxtb	r0, r0
 800a41c:	4770      	bx	lr
 800a41e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a422:	2b05      	cmp	r3, #5
 800a424:	d801      	bhi.n	800a42a <__hexdig_fun+0x1a>
 800a426:	3847      	subs	r0, #71	@ 0x47
 800a428:	e7f7      	b.n	800a41a <__hexdig_fun+0xa>
 800a42a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a42e:	2b05      	cmp	r3, #5
 800a430:	d801      	bhi.n	800a436 <__hexdig_fun+0x26>
 800a432:	3827      	subs	r0, #39	@ 0x27
 800a434:	e7f1      	b.n	800a41a <__hexdig_fun+0xa>
 800a436:	2000      	movs	r0, #0
 800a438:	4770      	bx	lr
	...

0800a43c <__gethex>:
 800a43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a440:	b085      	sub	sp, #20
 800a442:	468a      	mov	sl, r1
 800a444:	9302      	str	r3, [sp, #8]
 800a446:	680b      	ldr	r3, [r1, #0]
 800a448:	9001      	str	r0, [sp, #4]
 800a44a:	4690      	mov	r8, r2
 800a44c:	1c9c      	adds	r4, r3, #2
 800a44e:	46a1      	mov	r9, r4
 800a450:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a454:	2830      	cmp	r0, #48	@ 0x30
 800a456:	d0fa      	beq.n	800a44e <__gethex+0x12>
 800a458:	eba9 0303 	sub.w	r3, r9, r3
 800a45c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a460:	f7ff ffd6 	bl	800a410 <__hexdig_fun>
 800a464:	4605      	mov	r5, r0
 800a466:	2800      	cmp	r0, #0
 800a468:	d168      	bne.n	800a53c <__gethex+0x100>
 800a46a:	49a0      	ldr	r1, [pc, #640]	@ (800a6ec <__gethex+0x2b0>)
 800a46c:	2201      	movs	r2, #1
 800a46e:	4648      	mov	r0, r9
 800a470:	f7ff ff1e 	bl	800a2b0 <strncmp>
 800a474:	4607      	mov	r7, r0
 800a476:	2800      	cmp	r0, #0
 800a478:	d167      	bne.n	800a54a <__gethex+0x10e>
 800a47a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a47e:	4626      	mov	r6, r4
 800a480:	f7ff ffc6 	bl	800a410 <__hexdig_fun>
 800a484:	2800      	cmp	r0, #0
 800a486:	d062      	beq.n	800a54e <__gethex+0x112>
 800a488:	4623      	mov	r3, r4
 800a48a:	7818      	ldrb	r0, [r3, #0]
 800a48c:	2830      	cmp	r0, #48	@ 0x30
 800a48e:	4699      	mov	r9, r3
 800a490:	f103 0301 	add.w	r3, r3, #1
 800a494:	d0f9      	beq.n	800a48a <__gethex+0x4e>
 800a496:	f7ff ffbb 	bl	800a410 <__hexdig_fun>
 800a49a:	fab0 f580 	clz	r5, r0
 800a49e:	096d      	lsrs	r5, r5, #5
 800a4a0:	f04f 0b01 	mov.w	fp, #1
 800a4a4:	464a      	mov	r2, r9
 800a4a6:	4616      	mov	r6, r2
 800a4a8:	3201      	adds	r2, #1
 800a4aa:	7830      	ldrb	r0, [r6, #0]
 800a4ac:	f7ff ffb0 	bl	800a410 <__hexdig_fun>
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	d1f8      	bne.n	800a4a6 <__gethex+0x6a>
 800a4b4:	498d      	ldr	r1, [pc, #564]	@ (800a6ec <__gethex+0x2b0>)
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	f7ff fef9 	bl	800a2b0 <strncmp>
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d13f      	bne.n	800a542 <__gethex+0x106>
 800a4c2:	b944      	cbnz	r4, 800a4d6 <__gethex+0x9a>
 800a4c4:	1c74      	adds	r4, r6, #1
 800a4c6:	4622      	mov	r2, r4
 800a4c8:	4616      	mov	r6, r2
 800a4ca:	3201      	adds	r2, #1
 800a4cc:	7830      	ldrb	r0, [r6, #0]
 800a4ce:	f7ff ff9f 	bl	800a410 <__hexdig_fun>
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	d1f8      	bne.n	800a4c8 <__gethex+0x8c>
 800a4d6:	1ba4      	subs	r4, r4, r6
 800a4d8:	00a7      	lsls	r7, r4, #2
 800a4da:	7833      	ldrb	r3, [r6, #0]
 800a4dc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a4e0:	2b50      	cmp	r3, #80	@ 0x50
 800a4e2:	d13e      	bne.n	800a562 <__gethex+0x126>
 800a4e4:	7873      	ldrb	r3, [r6, #1]
 800a4e6:	2b2b      	cmp	r3, #43	@ 0x2b
 800a4e8:	d033      	beq.n	800a552 <__gethex+0x116>
 800a4ea:	2b2d      	cmp	r3, #45	@ 0x2d
 800a4ec:	d034      	beq.n	800a558 <__gethex+0x11c>
 800a4ee:	1c71      	adds	r1, r6, #1
 800a4f0:	2400      	movs	r4, #0
 800a4f2:	7808      	ldrb	r0, [r1, #0]
 800a4f4:	f7ff ff8c 	bl	800a410 <__hexdig_fun>
 800a4f8:	1e43      	subs	r3, r0, #1
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	2b18      	cmp	r3, #24
 800a4fe:	d830      	bhi.n	800a562 <__gethex+0x126>
 800a500:	f1a0 0210 	sub.w	r2, r0, #16
 800a504:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a508:	f7ff ff82 	bl	800a410 <__hexdig_fun>
 800a50c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a510:	fa5f fc8c 	uxtb.w	ip, ip
 800a514:	f1bc 0f18 	cmp.w	ip, #24
 800a518:	f04f 030a 	mov.w	r3, #10
 800a51c:	d91e      	bls.n	800a55c <__gethex+0x120>
 800a51e:	b104      	cbz	r4, 800a522 <__gethex+0xe6>
 800a520:	4252      	negs	r2, r2
 800a522:	4417      	add	r7, r2
 800a524:	f8ca 1000 	str.w	r1, [sl]
 800a528:	b1ed      	cbz	r5, 800a566 <__gethex+0x12a>
 800a52a:	f1bb 0f00 	cmp.w	fp, #0
 800a52e:	bf0c      	ite	eq
 800a530:	2506      	moveq	r5, #6
 800a532:	2500      	movne	r5, #0
 800a534:	4628      	mov	r0, r5
 800a536:	b005      	add	sp, #20
 800a538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a53c:	2500      	movs	r5, #0
 800a53e:	462c      	mov	r4, r5
 800a540:	e7b0      	b.n	800a4a4 <__gethex+0x68>
 800a542:	2c00      	cmp	r4, #0
 800a544:	d1c7      	bne.n	800a4d6 <__gethex+0x9a>
 800a546:	4627      	mov	r7, r4
 800a548:	e7c7      	b.n	800a4da <__gethex+0x9e>
 800a54a:	464e      	mov	r6, r9
 800a54c:	462f      	mov	r7, r5
 800a54e:	2501      	movs	r5, #1
 800a550:	e7c3      	b.n	800a4da <__gethex+0x9e>
 800a552:	2400      	movs	r4, #0
 800a554:	1cb1      	adds	r1, r6, #2
 800a556:	e7cc      	b.n	800a4f2 <__gethex+0xb6>
 800a558:	2401      	movs	r4, #1
 800a55a:	e7fb      	b.n	800a554 <__gethex+0x118>
 800a55c:	fb03 0002 	mla	r0, r3, r2, r0
 800a560:	e7ce      	b.n	800a500 <__gethex+0xc4>
 800a562:	4631      	mov	r1, r6
 800a564:	e7de      	b.n	800a524 <__gethex+0xe8>
 800a566:	eba6 0309 	sub.w	r3, r6, r9
 800a56a:	3b01      	subs	r3, #1
 800a56c:	4629      	mov	r1, r5
 800a56e:	2b07      	cmp	r3, #7
 800a570:	dc0a      	bgt.n	800a588 <__gethex+0x14c>
 800a572:	9801      	ldr	r0, [sp, #4]
 800a574:	f7fe f948 	bl	8008808 <_Balloc>
 800a578:	4604      	mov	r4, r0
 800a57a:	b940      	cbnz	r0, 800a58e <__gethex+0x152>
 800a57c:	4b5c      	ldr	r3, [pc, #368]	@ (800a6f0 <__gethex+0x2b4>)
 800a57e:	4602      	mov	r2, r0
 800a580:	21e4      	movs	r1, #228	@ 0xe4
 800a582:	485c      	ldr	r0, [pc, #368]	@ (800a6f4 <__gethex+0x2b8>)
 800a584:	f7ff fec0 	bl	800a308 <__assert_func>
 800a588:	3101      	adds	r1, #1
 800a58a:	105b      	asrs	r3, r3, #1
 800a58c:	e7ef      	b.n	800a56e <__gethex+0x132>
 800a58e:	f100 0a14 	add.w	sl, r0, #20
 800a592:	2300      	movs	r3, #0
 800a594:	4655      	mov	r5, sl
 800a596:	469b      	mov	fp, r3
 800a598:	45b1      	cmp	r9, r6
 800a59a:	d337      	bcc.n	800a60c <__gethex+0x1d0>
 800a59c:	f845 bb04 	str.w	fp, [r5], #4
 800a5a0:	eba5 050a 	sub.w	r5, r5, sl
 800a5a4:	10ad      	asrs	r5, r5, #2
 800a5a6:	6125      	str	r5, [r4, #16]
 800a5a8:	4658      	mov	r0, fp
 800a5aa:	f7fe fa1f 	bl	80089ec <__hi0bits>
 800a5ae:	016d      	lsls	r5, r5, #5
 800a5b0:	f8d8 6000 	ldr.w	r6, [r8]
 800a5b4:	1a2d      	subs	r5, r5, r0
 800a5b6:	42b5      	cmp	r5, r6
 800a5b8:	dd54      	ble.n	800a664 <__gethex+0x228>
 800a5ba:	1bad      	subs	r5, r5, r6
 800a5bc:	4629      	mov	r1, r5
 800a5be:	4620      	mov	r0, r4
 800a5c0:	f7fe fdb3 	bl	800912a <__any_on>
 800a5c4:	4681      	mov	r9, r0
 800a5c6:	b178      	cbz	r0, 800a5e8 <__gethex+0x1ac>
 800a5c8:	1e6b      	subs	r3, r5, #1
 800a5ca:	1159      	asrs	r1, r3, #5
 800a5cc:	f003 021f 	and.w	r2, r3, #31
 800a5d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a5d4:	f04f 0901 	mov.w	r9, #1
 800a5d8:	fa09 f202 	lsl.w	r2, r9, r2
 800a5dc:	420a      	tst	r2, r1
 800a5de:	d003      	beq.n	800a5e8 <__gethex+0x1ac>
 800a5e0:	454b      	cmp	r3, r9
 800a5e2:	dc36      	bgt.n	800a652 <__gethex+0x216>
 800a5e4:	f04f 0902 	mov.w	r9, #2
 800a5e8:	4629      	mov	r1, r5
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	f7ff febe 	bl	800a36c <rshift>
 800a5f0:	442f      	add	r7, r5
 800a5f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5f6:	42bb      	cmp	r3, r7
 800a5f8:	da42      	bge.n	800a680 <__gethex+0x244>
 800a5fa:	9801      	ldr	r0, [sp, #4]
 800a5fc:	4621      	mov	r1, r4
 800a5fe:	f7fe f943 	bl	8008888 <_Bfree>
 800a602:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a604:	2300      	movs	r3, #0
 800a606:	6013      	str	r3, [r2, #0]
 800a608:	25a3      	movs	r5, #163	@ 0xa3
 800a60a:	e793      	b.n	800a534 <__gethex+0xf8>
 800a60c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a610:	2a2e      	cmp	r2, #46	@ 0x2e
 800a612:	d012      	beq.n	800a63a <__gethex+0x1fe>
 800a614:	2b20      	cmp	r3, #32
 800a616:	d104      	bne.n	800a622 <__gethex+0x1e6>
 800a618:	f845 bb04 	str.w	fp, [r5], #4
 800a61c:	f04f 0b00 	mov.w	fp, #0
 800a620:	465b      	mov	r3, fp
 800a622:	7830      	ldrb	r0, [r6, #0]
 800a624:	9303      	str	r3, [sp, #12]
 800a626:	f7ff fef3 	bl	800a410 <__hexdig_fun>
 800a62a:	9b03      	ldr	r3, [sp, #12]
 800a62c:	f000 000f 	and.w	r0, r0, #15
 800a630:	4098      	lsls	r0, r3
 800a632:	ea4b 0b00 	orr.w	fp, fp, r0
 800a636:	3304      	adds	r3, #4
 800a638:	e7ae      	b.n	800a598 <__gethex+0x15c>
 800a63a:	45b1      	cmp	r9, r6
 800a63c:	d8ea      	bhi.n	800a614 <__gethex+0x1d8>
 800a63e:	492b      	ldr	r1, [pc, #172]	@ (800a6ec <__gethex+0x2b0>)
 800a640:	9303      	str	r3, [sp, #12]
 800a642:	2201      	movs	r2, #1
 800a644:	4630      	mov	r0, r6
 800a646:	f7ff fe33 	bl	800a2b0 <strncmp>
 800a64a:	9b03      	ldr	r3, [sp, #12]
 800a64c:	2800      	cmp	r0, #0
 800a64e:	d1e1      	bne.n	800a614 <__gethex+0x1d8>
 800a650:	e7a2      	b.n	800a598 <__gethex+0x15c>
 800a652:	1ea9      	subs	r1, r5, #2
 800a654:	4620      	mov	r0, r4
 800a656:	f7fe fd68 	bl	800912a <__any_on>
 800a65a:	2800      	cmp	r0, #0
 800a65c:	d0c2      	beq.n	800a5e4 <__gethex+0x1a8>
 800a65e:	f04f 0903 	mov.w	r9, #3
 800a662:	e7c1      	b.n	800a5e8 <__gethex+0x1ac>
 800a664:	da09      	bge.n	800a67a <__gethex+0x23e>
 800a666:	1b75      	subs	r5, r6, r5
 800a668:	4621      	mov	r1, r4
 800a66a:	9801      	ldr	r0, [sp, #4]
 800a66c:	462a      	mov	r2, r5
 800a66e:	f7fe fb23 	bl	8008cb8 <__lshift>
 800a672:	1b7f      	subs	r7, r7, r5
 800a674:	4604      	mov	r4, r0
 800a676:	f100 0a14 	add.w	sl, r0, #20
 800a67a:	f04f 0900 	mov.w	r9, #0
 800a67e:	e7b8      	b.n	800a5f2 <__gethex+0x1b6>
 800a680:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a684:	42bd      	cmp	r5, r7
 800a686:	dd6f      	ble.n	800a768 <__gethex+0x32c>
 800a688:	1bed      	subs	r5, r5, r7
 800a68a:	42ae      	cmp	r6, r5
 800a68c:	dc34      	bgt.n	800a6f8 <__gethex+0x2bc>
 800a68e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a692:	2b02      	cmp	r3, #2
 800a694:	d022      	beq.n	800a6dc <__gethex+0x2a0>
 800a696:	2b03      	cmp	r3, #3
 800a698:	d024      	beq.n	800a6e4 <__gethex+0x2a8>
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d115      	bne.n	800a6ca <__gethex+0x28e>
 800a69e:	42ae      	cmp	r6, r5
 800a6a0:	d113      	bne.n	800a6ca <__gethex+0x28e>
 800a6a2:	2e01      	cmp	r6, #1
 800a6a4:	d10b      	bne.n	800a6be <__gethex+0x282>
 800a6a6:	9a02      	ldr	r2, [sp, #8]
 800a6a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a6ac:	6013      	str	r3, [r2, #0]
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	6123      	str	r3, [r4, #16]
 800a6b2:	f8ca 3000 	str.w	r3, [sl]
 800a6b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6b8:	2562      	movs	r5, #98	@ 0x62
 800a6ba:	601c      	str	r4, [r3, #0]
 800a6bc:	e73a      	b.n	800a534 <__gethex+0xf8>
 800a6be:	1e71      	subs	r1, r6, #1
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	f7fe fd32 	bl	800912a <__any_on>
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	d1ed      	bne.n	800a6a6 <__gethex+0x26a>
 800a6ca:	9801      	ldr	r0, [sp, #4]
 800a6cc:	4621      	mov	r1, r4
 800a6ce:	f7fe f8db 	bl	8008888 <_Bfree>
 800a6d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	6013      	str	r3, [r2, #0]
 800a6d8:	2550      	movs	r5, #80	@ 0x50
 800a6da:	e72b      	b.n	800a534 <__gethex+0xf8>
 800a6dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d1f3      	bne.n	800a6ca <__gethex+0x28e>
 800a6e2:	e7e0      	b.n	800a6a6 <__gethex+0x26a>
 800a6e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1dd      	bne.n	800a6a6 <__gethex+0x26a>
 800a6ea:	e7ee      	b.n	800a6ca <__gethex+0x28e>
 800a6ec:	0800b268 	.word	0x0800b268
 800a6f0:	0800b0fd 	.word	0x0800b0fd
 800a6f4:	0800b416 	.word	0x0800b416
 800a6f8:	1e6f      	subs	r7, r5, #1
 800a6fa:	f1b9 0f00 	cmp.w	r9, #0
 800a6fe:	d130      	bne.n	800a762 <__gethex+0x326>
 800a700:	b127      	cbz	r7, 800a70c <__gethex+0x2d0>
 800a702:	4639      	mov	r1, r7
 800a704:	4620      	mov	r0, r4
 800a706:	f7fe fd10 	bl	800912a <__any_on>
 800a70a:	4681      	mov	r9, r0
 800a70c:	117a      	asrs	r2, r7, #5
 800a70e:	2301      	movs	r3, #1
 800a710:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a714:	f007 071f 	and.w	r7, r7, #31
 800a718:	40bb      	lsls	r3, r7
 800a71a:	4213      	tst	r3, r2
 800a71c:	4629      	mov	r1, r5
 800a71e:	4620      	mov	r0, r4
 800a720:	bf18      	it	ne
 800a722:	f049 0902 	orrne.w	r9, r9, #2
 800a726:	f7ff fe21 	bl	800a36c <rshift>
 800a72a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a72e:	1b76      	subs	r6, r6, r5
 800a730:	2502      	movs	r5, #2
 800a732:	f1b9 0f00 	cmp.w	r9, #0
 800a736:	d047      	beq.n	800a7c8 <__gethex+0x38c>
 800a738:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a73c:	2b02      	cmp	r3, #2
 800a73e:	d015      	beq.n	800a76c <__gethex+0x330>
 800a740:	2b03      	cmp	r3, #3
 800a742:	d017      	beq.n	800a774 <__gethex+0x338>
 800a744:	2b01      	cmp	r3, #1
 800a746:	d109      	bne.n	800a75c <__gethex+0x320>
 800a748:	f019 0f02 	tst.w	r9, #2
 800a74c:	d006      	beq.n	800a75c <__gethex+0x320>
 800a74e:	f8da 3000 	ldr.w	r3, [sl]
 800a752:	ea49 0903 	orr.w	r9, r9, r3
 800a756:	f019 0f01 	tst.w	r9, #1
 800a75a:	d10e      	bne.n	800a77a <__gethex+0x33e>
 800a75c:	f045 0510 	orr.w	r5, r5, #16
 800a760:	e032      	b.n	800a7c8 <__gethex+0x38c>
 800a762:	f04f 0901 	mov.w	r9, #1
 800a766:	e7d1      	b.n	800a70c <__gethex+0x2d0>
 800a768:	2501      	movs	r5, #1
 800a76a:	e7e2      	b.n	800a732 <__gethex+0x2f6>
 800a76c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a76e:	f1c3 0301 	rsb	r3, r3, #1
 800a772:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a774:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a776:	2b00      	cmp	r3, #0
 800a778:	d0f0      	beq.n	800a75c <__gethex+0x320>
 800a77a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a77e:	f104 0314 	add.w	r3, r4, #20
 800a782:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a786:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a78a:	f04f 0c00 	mov.w	ip, #0
 800a78e:	4618      	mov	r0, r3
 800a790:	f853 2b04 	ldr.w	r2, [r3], #4
 800a794:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a798:	d01b      	beq.n	800a7d2 <__gethex+0x396>
 800a79a:	3201      	adds	r2, #1
 800a79c:	6002      	str	r2, [r0, #0]
 800a79e:	2d02      	cmp	r5, #2
 800a7a0:	f104 0314 	add.w	r3, r4, #20
 800a7a4:	d13c      	bne.n	800a820 <__gethex+0x3e4>
 800a7a6:	f8d8 2000 	ldr.w	r2, [r8]
 800a7aa:	3a01      	subs	r2, #1
 800a7ac:	42b2      	cmp	r2, r6
 800a7ae:	d109      	bne.n	800a7c4 <__gethex+0x388>
 800a7b0:	1171      	asrs	r1, r6, #5
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a7b8:	f006 061f 	and.w	r6, r6, #31
 800a7bc:	fa02 f606 	lsl.w	r6, r2, r6
 800a7c0:	421e      	tst	r6, r3
 800a7c2:	d13a      	bne.n	800a83a <__gethex+0x3fe>
 800a7c4:	f045 0520 	orr.w	r5, r5, #32
 800a7c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7ca:	601c      	str	r4, [r3, #0]
 800a7cc:	9b02      	ldr	r3, [sp, #8]
 800a7ce:	601f      	str	r7, [r3, #0]
 800a7d0:	e6b0      	b.n	800a534 <__gethex+0xf8>
 800a7d2:	4299      	cmp	r1, r3
 800a7d4:	f843 cc04 	str.w	ip, [r3, #-4]
 800a7d8:	d8d9      	bhi.n	800a78e <__gethex+0x352>
 800a7da:	68a3      	ldr	r3, [r4, #8]
 800a7dc:	459b      	cmp	fp, r3
 800a7de:	db17      	blt.n	800a810 <__gethex+0x3d4>
 800a7e0:	6861      	ldr	r1, [r4, #4]
 800a7e2:	9801      	ldr	r0, [sp, #4]
 800a7e4:	3101      	adds	r1, #1
 800a7e6:	f7fe f80f 	bl	8008808 <_Balloc>
 800a7ea:	4681      	mov	r9, r0
 800a7ec:	b918      	cbnz	r0, 800a7f6 <__gethex+0x3ba>
 800a7ee:	4b1a      	ldr	r3, [pc, #104]	@ (800a858 <__gethex+0x41c>)
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	2184      	movs	r1, #132	@ 0x84
 800a7f4:	e6c5      	b.n	800a582 <__gethex+0x146>
 800a7f6:	6922      	ldr	r2, [r4, #16]
 800a7f8:	3202      	adds	r2, #2
 800a7fa:	f104 010c 	add.w	r1, r4, #12
 800a7fe:	0092      	lsls	r2, r2, #2
 800a800:	300c      	adds	r0, #12
 800a802:	f7fd f89e 	bl	8007942 <memcpy>
 800a806:	4621      	mov	r1, r4
 800a808:	9801      	ldr	r0, [sp, #4]
 800a80a:	f7fe f83d 	bl	8008888 <_Bfree>
 800a80e:	464c      	mov	r4, r9
 800a810:	6923      	ldr	r3, [r4, #16]
 800a812:	1c5a      	adds	r2, r3, #1
 800a814:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a818:	6122      	str	r2, [r4, #16]
 800a81a:	2201      	movs	r2, #1
 800a81c:	615a      	str	r2, [r3, #20]
 800a81e:	e7be      	b.n	800a79e <__gethex+0x362>
 800a820:	6922      	ldr	r2, [r4, #16]
 800a822:	455a      	cmp	r2, fp
 800a824:	dd0b      	ble.n	800a83e <__gethex+0x402>
 800a826:	2101      	movs	r1, #1
 800a828:	4620      	mov	r0, r4
 800a82a:	f7ff fd9f 	bl	800a36c <rshift>
 800a82e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a832:	3701      	adds	r7, #1
 800a834:	42bb      	cmp	r3, r7
 800a836:	f6ff aee0 	blt.w	800a5fa <__gethex+0x1be>
 800a83a:	2501      	movs	r5, #1
 800a83c:	e7c2      	b.n	800a7c4 <__gethex+0x388>
 800a83e:	f016 061f 	ands.w	r6, r6, #31
 800a842:	d0fa      	beq.n	800a83a <__gethex+0x3fe>
 800a844:	4453      	add	r3, sl
 800a846:	f1c6 0620 	rsb	r6, r6, #32
 800a84a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a84e:	f7fe f8cd 	bl	80089ec <__hi0bits>
 800a852:	42b0      	cmp	r0, r6
 800a854:	dbe7      	blt.n	800a826 <__gethex+0x3ea>
 800a856:	e7f0      	b.n	800a83a <__gethex+0x3fe>
 800a858:	0800b0fd 	.word	0x0800b0fd

0800a85c <L_shift>:
 800a85c:	f1c2 0208 	rsb	r2, r2, #8
 800a860:	0092      	lsls	r2, r2, #2
 800a862:	b570      	push	{r4, r5, r6, lr}
 800a864:	f1c2 0620 	rsb	r6, r2, #32
 800a868:	6843      	ldr	r3, [r0, #4]
 800a86a:	6804      	ldr	r4, [r0, #0]
 800a86c:	fa03 f506 	lsl.w	r5, r3, r6
 800a870:	432c      	orrs	r4, r5
 800a872:	40d3      	lsrs	r3, r2
 800a874:	6004      	str	r4, [r0, #0]
 800a876:	f840 3f04 	str.w	r3, [r0, #4]!
 800a87a:	4288      	cmp	r0, r1
 800a87c:	d3f4      	bcc.n	800a868 <L_shift+0xc>
 800a87e:	bd70      	pop	{r4, r5, r6, pc}

0800a880 <__match>:
 800a880:	b530      	push	{r4, r5, lr}
 800a882:	6803      	ldr	r3, [r0, #0]
 800a884:	3301      	adds	r3, #1
 800a886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a88a:	b914      	cbnz	r4, 800a892 <__match+0x12>
 800a88c:	6003      	str	r3, [r0, #0]
 800a88e:	2001      	movs	r0, #1
 800a890:	bd30      	pop	{r4, r5, pc}
 800a892:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a896:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a89a:	2d19      	cmp	r5, #25
 800a89c:	bf98      	it	ls
 800a89e:	3220      	addls	r2, #32
 800a8a0:	42a2      	cmp	r2, r4
 800a8a2:	d0f0      	beq.n	800a886 <__match+0x6>
 800a8a4:	2000      	movs	r0, #0
 800a8a6:	e7f3      	b.n	800a890 <__match+0x10>

0800a8a8 <__hexnan>:
 800a8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ac:	680b      	ldr	r3, [r1, #0]
 800a8ae:	6801      	ldr	r1, [r0, #0]
 800a8b0:	115e      	asrs	r6, r3, #5
 800a8b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a8b6:	f013 031f 	ands.w	r3, r3, #31
 800a8ba:	b087      	sub	sp, #28
 800a8bc:	bf18      	it	ne
 800a8be:	3604      	addne	r6, #4
 800a8c0:	2500      	movs	r5, #0
 800a8c2:	1f37      	subs	r7, r6, #4
 800a8c4:	4682      	mov	sl, r0
 800a8c6:	4690      	mov	r8, r2
 800a8c8:	9301      	str	r3, [sp, #4]
 800a8ca:	f846 5c04 	str.w	r5, [r6, #-4]
 800a8ce:	46b9      	mov	r9, r7
 800a8d0:	463c      	mov	r4, r7
 800a8d2:	9502      	str	r5, [sp, #8]
 800a8d4:	46ab      	mov	fp, r5
 800a8d6:	784a      	ldrb	r2, [r1, #1]
 800a8d8:	1c4b      	adds	r3, r1, #1
 800a8da:	9303      	str	r3, [sp, #12]
 800a8dc:	b342      	cbz	r2, 800a930 <__hexnan+0x88>
 800a8de:	4610      	mov	r0, r2
 800a8e0:	9105      	str	r1, [sp, #20]
 800a8e2:	9204      	str	r2, [sp, #16]
 800a8e4:	f7ff fd94 	bl	800a410 <__hexdig_fun>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	d151      	bne.n	800a990 <__hexnan+0xe8>
 800a8ec:	9a04      	ldr	r2, [sp, #16]
 800a8ee:	9905      	ldr	r1, [sp, #20]
 800a8f0:	2a20      	cmp	r2, #32
 800a8f2:	d818      	bhi.n	800a926 <__hexnan+0x7e>
 800a8f4:	9b02      	ldr	r3, [sp, #8]
 800a8f6:	459b      	cmp	fp, r3
 800a8f8:	dd13      	ble.n	800a922 <__hexnan+0x7a>
 800a8fa:	454c      	cmp	r4, r9
 800a8fc:	d206      	bcs.n	800a90c <__hexnan+0x64>
 800a8fe:	2d07      	cmp	r5, #7
 800a900:	dc04      	bgt.n	800a90c <__hexnan+0x64>
 800a902:	462a      	mov	r2, r5
 800a904:	4649      	mov	r1, r9
 800a906:	4620      	mov	r0, r4
 800a908:	f7ff ffa8 	bl	800a85c <L_shift>
 800a90c:	4544      	cmp	r4, r8
 800a90e:	d952      	bls.n	800a9b6 <__hexnan+0x10e>
 800a910:	2300      	movs	r3, #0
 800a912:	f1a4 0904 	sub.w	r9, r4, #4
 800a916:	f844 3c04 	str.w	r3, [r4, #-4]
 800a91a:	f8cd b008 	str.w	fp, [sp, #8]
 800a91e:	464c      	mov	r4, r9
 800a920:	461d      	mov	r5, r3
 800a922:	9903      	ldr	r1, [sp, #12]
 800a924:	e7d7      	b.n	800a8d6 <__hexnan+0x2e>
 800a926:	2a29      	cmp	r2, #41	@ 0x29
 800a928:	d157      	bne.n	800a9da <__hexnan+0x132>
 800a92a:	3102      	adds	r1, #2
 800a92c:	f8ca 1000 	str.w	r1, [sl]
 800a930:	f1bb 0f00 	cmp.w	fp, #0
 800a934:	d051      	beq.n	800a9da <__hexnan+0x132>
 800a936:	454c      	cmp	r4, r9
 800a938:	d206      	bcs.n	800a948 <__hexnan+0xa0>
 800a93a:	2d07      	cmp	r5, #7
 800a93c:	dc04      	bgt.n	800a948 <__hexnan+0xa0>
 800a93e:	462a      	mov	r2, r5
 800a940:	4649      	mov	r1, r9
 800a942:	4620      	mov	r0, r4
 800a944:	f7ff ff8a 	bl	800a85c <L_shift>
 800a948:	4544      	cmp	r4, r8
 800a94a:	d936      	bls.n	800a9ba <__hexnan+0x112>
 800a94c:	f1a8 0204 	sub.w	r2, r8, #4
 800a950:	4623      	mov	r3, r4
 800a952:	f853 1b04 	ldr.w	r1, [r3], #4
 800a956:	f842 1f04 	str.w	r1, [r2, #4]!
 800a95a:	429f      	cmp	r7, r3
 800a95c:	d2f9      	bcs.n	800a952 <__hexnan+0xaa>
 800a95e:	1b3b      	subs	r3, r7, r4
 800a960:	f023 0303 	bic.w	r3, r3, #3
 800a964:	3304      	adds	r3, #4
 800a966:	3401      	adds	r4, #1
 800a968:	3e03      	subs	r6, #3
 800a96a:	42b4      	cmp	r4, r6
 800a96c:	bf88      	it	hi
 800a96e:	2304      	movhi	r3, #4
 800a970:	4443      	add	r3, r8
 800a972:	2200      	movs	r2, #0
 800a974:	f843 2b04 	str.w	r2, [r3], #4
 800a978:	429f      	cmp	r7, r3
 800a97a:	d2fb      	bcs.n	800a974 <__hexnan+0xcc>
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	b91b      	cbnz	r3, 800a988 <__hexnan+0xe0>
 800a980:	4547      	cmp	r7, r8
 800a982:	d128      	bne.n	800a9d6 <__hexnan+0x12e>
 800a984:	2301      	movs	r3, #1
 800a986:	603b      	str	r3, [r7, #0]
 800a988:	2005      	movs	r0, #5
 800a98a:	b007      	add	sp, #28
 800a98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a990:	3501      	adds	r5, #1
 800a992:	2d08      	cmp	r5, #8
 800a994:	f10b 0b01 	add.w	fp, fp, #1
 800a998:	dd06      	ble.n	800a9a8 <__hexnan+0x100>
 800a99a:	4544      	cmp	r4, r8
 800a99c:	d9c1      	bls.n	800a922 <__hexnan+0x7a>
 800a99e:	2300      	movs	r3, #0
 800a9a0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9a4:	2501      	movs	r5, #1
 800a9a6:	3c04      	subs	r4, #4
 800a9a8:	6822      	ldr	r2, [r4, #0]
 800a9aa:	f000 000f 	and.w	r0, r0, #15
 800a9ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a9b2:	6020      	str	r0, [r4, #0]
 800a9b4:	e7b5      	b.n	800a922 <__hexnan+0x7a>
 800a9b6:	2508      	movs	r5, #8
 800a9b8:	e7b3      	b.n	800a922 <__hexnan+0x7a>
 800a9ba:	9b01      	ldr	r3, [sp, #4]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d0dd      	beq.n	800a97c <__hexnan+0xd4>
 800a9c0:	f1c3 0320 	rsb	r3, r3, #32
 800a9c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a9c8:	40da      	lsrs	r2, r3
 800a9ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	f846 3c04 	str.w	r3, [r6, #-4]
 800a9d4:	e7d2      	b.n	800a97c <__hexnan+0xd4>
 800a9d6:	3f04      	subs	r7, #4
 800a9d8:	e7d0      	b.n	800a97c <__hexnan+0xd4>
 800a9da:	2004      	movs	r0, #4
 800a9dc:	e7d5      	b.n	800a98a <__hexnan+0xe2>

0800a9de <__ascii_mbtowc>:
 800a9de:	b082      	sub	sp, #8
 800a9e0:	b901      	cbnz	r1, 800a9e4 <__ascii_mbtowc+0x6>
 800a9e2:	a901      	add	r1, sp, #4
 800a9e4:	b142      	cbz	r2, 800a9f8 <__ascii_mbtowc+0x1a>
 800a9e6:	b14b      	cbz	r3, 800a9fc <__ascii_mbtowc+0x1e>
 800a9e8:	7813      	ldrb	r3, [r2, #0]
 800a9ea:	600b      	str	r3, [r1, #0]
 800a9ec:	7812      	ldrb	r2, [r2, #0]
 800a9ee:	1e10      	subs	r0, r2, #0
 800a9f0:	bf18      	it	ne
 800a9f2:	2001      	movne	r0, #1
 800a9f4:	b002      	add	sp, #8
 800a9f6:	4770      	bx	lr
 800a9f8:	4610      	mov	r0, r2
 800a9fa:	e7fb      	b.n	800a9f4 <__ascii_mbtowc+0x16>
 800a9fc:	f06f 0001 	mvn.w	r0, #1
 800aa00:	e7f8      	b.n	800a9f4 <__ascii_mbtowc+0x16>

0800aa02 <_realloc_r>:
 800aa02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa06:	4680      	mov	r8, r0
 800aa08:	4615      	mov	r5, r2
 800aa0a:	460c      	mov	r4, r1
 800aa0c:	b921      	cbnz	r1, 800aa18 <_realloc_r+0x16>
 800aa0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa12:	4611      	mov	r1, r2
 800aa14:	f7fd be6c 	b.w	80086f0 <_malloc_r>
 800aa18:	b92a      	cbnz	r2, 800aa26 <_realloc_r+0x24>
 800aa1a:	f7fd fdf5 	bl	8008608 <_free_r>
 800aa1e:	2400      	movs	r4, #0
 800aa20:	4620      	mov	r0, r4
 800aa22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa26:	f000 f840 	bl	800aaaa <_malloc_usable_size_r>
 800aa2a:	4285      	cmp	r5, r0
 800aa2c:	4606      	mov	r6, r0
 800aa2e:	d802      	bhi.n	800aa36 <_realloc_r+0x34>
 800aa30:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aa34:	d8f4      	bhi.n	800aa20 <_realloc_r+0x1e>
 800aa36:	4629      	mov	r1, r5
 800aa38:	4640      	mov	r0, r8
 800aa3a:	f7fd fe59 	bl	80086f0 <_malloc_r>
 800aa3e:	4607      	mov	r7, r0
 800aa40:	2800      	cmp	r0, #0
 800aa42:	d0ec      	beq.n	800aa1e <_realloc_r+0x1c>
 800aa44:	42b5      	cmp	r5, r6
 800aa46:	462a      	mov	r2, r5
 800aa48:	4621      	mov	r1, r4
 800aa4a:	bf28      	it	cs
 800aa4c:	4632      	movcs	r2, r6
 800aa4e:	f7fc ff78 	bl	8007942 <memcpy>
 800aa52:	4621      	mov	r1, r4
 800aa54:	4640      	mov	r0, r8
 800aa56:	f7fd fdd7 	bl	8008608 <_free_r>
 800aa5a:	463c      	mov	r4, r7
 800aa5c:	e7e0      	b.n	800aa20 <_realloc_r+0x1e>

0800aa5e <__ascii_wctomb>:
 800aa5e:	4603      	mov	r3, r0
 800aa60:	4608      	mov	r0, r1
 800aa62:	b141      	cbz	r1, 800aa76 <__ascii_wctomb+0x18>
 800aa64:	2aff      	cmp	r2, #255	@ 0xff
 800aa66:	d904      	bls.n	800aa72 <__ascii_wctomb+0x14>
 800aa68:	228a      	movs	r2, #138	@ 0x8a
 800aa6a:	601a      	str	r2, [r3, #0]
 800aa6c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa70:	4770      	bx	lr
 800aa72:	700a      	strb	r2, [r1, #0]
 800aa74:	2001      	movs	r0, #1
 800aa76:	4770      	bx	lr

0800aa78 <fiprintf>:
 800aa78:	b40e      	push	{r1, r2, r3}
 800aa7a:	b503      	push	{r0, r1, lr}
 800aa7c:	4601      	mov	r1, r0
 800aa7e:	ab03      	add	r3, sp, #12
 800aa80:	4805      	ldr	r0, [pc, #20]	@ (800aa98 <fiprintf+0x20>)
 800aa82:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa86:	6800      	ldr	r0, [r0, #0]
 800aa88:	9301      	str	r3, [sp, #4]
 800aa8a:	f000 f83f 	bl	800ab0c <_vfiprintf_r>
 800aa8e:	b002      	add	sp, #8
 800aa90:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa94:	b003      	add	sp, #12
 800aa96:	4770      	bx	lr
 800aa98:	20000214 	.word	0x20000214

0800aa9c <abort>:
 800aa9c:	b508      	push	{r3, lr}
 800aa9e:	2006      	movs	r0, #6
 800aaa0:	f000 fa08 	bl	800aeb4 <raise>
 800aaa4:	2001      	movs	r0, #1
 800aaa6:	f7f6 fedf 	bl	8001868 <_exit>

0800aaaa <_malloc_usable_size_r>:
 800aaaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaae:	1f18      	subs	r0, r3, #4
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	bfbc      	itt	lt
 800aab4:	580b      	ldrlt	r3, [r1, r0]
 800aab6:	18c0      	addlt	r0, r0, r3
 800aab8:	4770      	bx	lr

0800aaba <__sfputc_r>:
 800aaba:	6893      	ldr	r3, [r2, #8]
 800aabc:	3b01      	subs	r3, #1
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	b410      	push	{r4}
 800aac2:	6093      	str	r3, [r2, #8]
 800aac4:	da08      	bge.n	800aad8 <__sfputc_r+0x1e>
 800aac6:	6994      	ldr	r4, [r2, #24]
 800aac8:	42a3      	cmp	r3, r4
 800aaca:	db01      	blt.n	800aad0 <__sfputc_r+0x16>
 800aacc:	290a      	cmp	r1, #10
 800aace:	d103      	bne.n	800aad8 <__sfputc_r+0x1e>
 800aad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aad4:	f000 b932 	b.w	800ad3c <__swbuf_r>
 800aad8:	6813      	ldr	r3, [r2, #0]
 800aada:	1c58      	adds	r0, r3, #1
 800aadc:	6010      	str	r0, [r2, #0]
 800aade:	7019      	strb	r1, [r3, #0]
 800aae0:	4608      	mov	r0, r1
 800aae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <__sfputs_r>:
 800aae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaea:	4606      	mov	r6, r0
 800aaec:	460f      	mov	r7, r1
 800aaee:	4614      	mov	r4, r2
 800aaf0:	18d5      	adds	r5, r2, r3
 800aaf2:	42ac      	cmp	r4, r5
 800aaf4:	d101      	bne.n	800aafa <__sfputs_r+0x12>
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	e007      	b.n	800ab0a <__sfputs_r+0x22>
 800aafa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aafe:	463a      	mov	r2, r7
 800ab00:	4630      	mov	r0, r6
 800ab02:	f7ff ffda 	bl	800aaba <__sfputc_r>
 800ab06:	1c43      	adds	r3, r0, #1
 800ab08:	d1f3      	bne.n	800aaf2 <__sfputs_r+0xa>
 800ab0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab0c <_vfiprintf_r>:
 800ab0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab10:	460d      	mov	r5, r1
 800ab12:	b09d      	sub	sp, #116	@ 0x74
 800ab14:	4614      	mov	r4, r2
 800ab16:	4698      	mov	r8, r3
 800ab18:	4606      	mov	r6, r0
 800ab1a:	b118      	cbz	r0, 800ab24 <_vfiprintf_r+0x18>
 800ab1c:	6a03      	ldr	r3, [r0, #32]
 800ab1e:	b90b      	cbnz	r3, 800ab24 <_vfiprintf_r+0x18>
 800ab20:	f7fc fdf6 	bl	8007710 <__sinit>
 800ab24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab26:	07d9      	lsls	r1, r3, #31
 800ab28:	d405      	bmi.n	800ab36 <_vfiprintf_r+0x2a>
 800ab2a:	89ab      	ldrh	r3, [r5, #12]
 800ab2c:	059a      	lsls	r2, r3, #22
 800ab2e:	d402      	bmi.n	800ab36 <_vfiprintf_r+0x2a>
 800ab30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab32:	f7fc ff04 	bl	800793e <__retarget_lock_acquire_recursive>
 800ab36:	89ab      	ldrh	r3, [r5, #12]
 800ab38:	071b      	lsls	r3, r3, #28
 800ab3a:	d501      	bpl.n	800ab40 <_vfiprintf_r+0x34>
 800ab3c:	692b      	ldr	r3, [r5, #16]
 800ab3e:	b99b      	cbnz	r3, 800ab68 <_vfiprintf_r+0x5c>
 800ab40:	4629      	mov	r1, r5
 800ab42:	4630      	mov	r0, r6
 800ab44:	f000 f938 	bl	800adb8 <__swsetup_r>
 800ab48:	b170      	cbz	r0, 800ab68 <_vfiprintf_r+0x5c>
 800ab4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab4c:	07dc      	lsls	r4, r3, #31
 800ab4e:	d504      	bpl.n	800ab5a <_vfiprintf_r+0x4e>
 800ab50:	f04f 30ff 	mov.w	r0, #4294967295
 800ab54:	b01d      	add	sp, #116	@ 0x74
 800ab56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab5a:	89ab      	ldrh	r3, [r5, #12]
 800ab5c:	0598      	lsls	r0, r3, #22
 800ab5e:	d4f7      	bmi.n	800ab50 <_vfiprintf_r+0x44>
 800ab60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab62:	f7fc feed 	bl	8007940 <__retarget_lock_release_recursive>
 800ab66:	e7f3      	b.n	800ab50 <_vfiprintf_r+0x44>
 800ab68:	2300      	movs	r3, #0
 800ab6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab6c:	2320      	movs	r3, #32
 800ab6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab72:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab76:	2330      	movs	r3, #48	@ 0x30
 800ab78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ad28 <_vfiprintf_r+0x21c>
 800ab7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab80:	f04f 0901 	mov.w	r9, #1
 800ab84:	4623      	mov	r3, r4
 800ab86:	469a      	mov	sl, r3
 800ab88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab8c:	b10a      	cbz	r2, 800ab92 <_vfiprintf_r+0x86>
 800ab8e:	2a25      	cmp	r2, #37	@ 0x25
 800ab90:	d1f9      	bne.n	800ab86 <_vfiprintf_r+0x7a>
 800ab92:	ebba 0b04 	subs.w	fp, sl, r4
 800ab96:	d00b      	beq.n	800abb0 <_vfiprintf_r+0xa4>
 800ab98:	465b      	mov	r3, fp
 800ab9a:	4622      	mov	r2, r4
 800ab9c:	4629      	mov	r1, r5
 800ab9e:	4630      	mov	r0, r6
 800aba0:	f7ff ffa2 	bl	800aae8 <__sfputs_r>
 800aba4:	3001      	adds	r0, #1
 800aba6:	f000 80a7 	beq.w	800acf8 <_vfiprintf_r+0x1ec>
 800abaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abac:	445a      	add	r2, fp
 800abae:	9209      	str	r2, [sp, #36]	@ 0x24
 800abb0:	f89a 3000 	ldrb.w	r3, [sl]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	f000 809f 	beq.w	800acf8 <_vfiprintf_r+0x1ec>
 800abba:	2300      	movs	r3, #0
 800abbc:	f04f 32ff 	mov.w	r2, #4294967295
 800abc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abc4:	f10a 0a01 	add.w	sl, sl, #1
 800abc8:	9304      	str	r3, [sp, #16]
 800abca:	9307      	str	r3, [sp, #28]
 800abcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abd0:	931a      	str	r3, [sp, #104]	@ 0x68
 800abd2:	4654      	mov	r4, sl
 800abd4:	2205      	movs	r2, #5
 800abd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abda:	4853      	ldr	r0, [pc, #332]	@ (800ad28 <_vfiprintf_r+0x21c>)
 800abdc:	f7f5 faf8 	bl	80001d0 <memchr>
 800abe0:	9a04      	ldr	r2, [sp, #16]
 800abe2:	b9d8      	cbnz	r0, 800ac1c <_vfiprintf_r+0x110>
 800abe4:	06d1      	lsls	r1, r2, #27
 800abe6:	bf44      	itt	mi
 800abe8:	2320      	movmi	r3, #32
 800abea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abee:	0713      	lsls	r3, r2, #28
 800abf0:	bf44      	itt	mi
 800abf2:	232b      	movmi	r3, #43	@ 0x2b
 800abf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abf8:	f89a 3000 	ldrb.w	r3, [sl]
 800abfc:	2b2a      	cmp	r3, #42	@ 0x2a
 800abfe:	d015      	beq.n	800ac2c <_vfiprintf_r+0x120>
 800ac00:	9a07      	ldr	r2, [sp, #28]
 800ac02:	4654      	mov	r4, sl
 800ac04:	2000      	movs	r0, #0
 800ac06:	f04f 0c0a 	mov.w	ip, #10
 800ac0a:	4621      	mov	r1, r4
 800ac0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac10:	3b30      	subs	r3, #48	@ 0x30
 800ac12:	2b09      	cmp	r3, #9
 800ac14:	d94b      	bls.n	800acae <_vfiprintf_r+0x1a2>
 800ac16:	b1b0      	cbz	r0, 800ac46 <_vfiprintf_r+0x13a>
 800ac18:	9207      	str	r2, [sp, #28]
 800ac1a:	e014      	b.n	800ac46 <_vfiprintf_r+0x13a>
 800ac1c:	eba0 0308 	sub.w	r3, r0, r8
 800ac20:	fa09 f303 	lsl.w	r3, r9, r3
 800ac24:	4313      	orrs	r3, r2
 800ac26:	9304      	str	r3, [sp, #16]
 800ac28:	46a2      	mov	sl, r4
 800ac2a:	e7d2      	b.n	800abd2 <_vfiprintf_r+0xc6>
 800ac2c:	9b03      	ldr	r3, [sp, #12]
 800ac2e:	1d19      	adds	r1, r3, #4
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	9103      	str	r1, [sp, #12]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	bfbb      	ittet	lt
 800ac38:	425b      	neglt	r3, r3
 800ac3a:	f042 0202 	orrlt.w	r2, r2, #2
 800ac3e:	9307      	strge	r3, [sp, #28]
 800ac40:	9307      	strlt	r3, [sp, #28]
 800ac42:	bfb8      	it	lt
 800ac44:	9204      	strlt	r2, [sp, #16]
 800ac46:	7823      	ldrb	r3, [r4, #0]
 800ac48:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac4a:	d10a      	bne.n	800ac62 <_vfiprintf_r+0x156>
 800ac4c:	7863      	ldrb	r3, [r4, #1]
 800ac4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac50:	d132      	bne.n	800acb8 <_vfiprintf_r+0x1ac>
 800ac52:	9b03      	ldr	r3, [sp, #12]
 800ac54:	1d1a      	adds	r2, r3, #4
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	9203      	str	r2, [sp, #12]
 800ac5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac5e:	3402      	adds	r4, #2
 800ac60:	9305      	str	r3, [sp, #20]
 800ac62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ad38 <_vfiprintf_r+0x22c>
 800ac66:	7821      	ldrb	r1, [r4, #0]
 800ac68:	2203      	movs	r2, #3
 800ac6a:	4650      	mov	r0, sl
 800ac6c:	f7f5 fab0 	bl	80001d0 <memchr>
 800ac70:	b138      	cbz	r0, 800ac82 <_vfiprintf_r+0x176>
 800ac72:	9b04      	ldr	r3, [sp, #16]
 800ac74:	eba0 000a 	sub.w	r0, r0, sl
 800ac78:	2240      	movs	r2, #64	@ 0x40
 800ac7a:	4082      	lsls	r2, r0
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	3401      	adds	r4, #1
 800ac80:	9304      	str	r3, [sp, #16]
 800ac82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac86:	4829      	ldr	r0, [pc, #164]	@ (800ad2c <_vfiprintf_r+0x220>)
 800ac88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac8c:	2206      	movs	r2, #6
 800ac8e:	f7f5 fa9f 	bl	80001d0 <memchr>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	d03f      	beq.n	800ad16 <_vfiprintf_r+0x20a>
 800ac96:	4b26      	ldr	r3, [pc, #152]	@ (800ad30 <_vfiprintf_r+0x224>)
 800ac98:	bb1b      	cbnz	r3, 800ace2 <_vfiprintf_r+0x1d6>
 800ac9a:	9b03      	ldr	r3, [sp, #12]
 800ac9c:	3307      	adds	r3, #7
 800ac9e:	f023 0307 	bic.w	r3, r3, #7
 800aca2:	3308      	adds	r3, #8
 800aca4:	9303      	str	r3, [sp, #12]
 800aca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aca8:	443b      	add	r3, r7
 800acaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800acac:	e76a      	b.n	800ab84 <_vfiprintf_r+0x78>
 800acae:	fb0c 3202 	mla	r2, ip, r2, r3
 800acb2:	460c      	mov	r4, r1
 800acb4:	2001      	movs	r0, #1
 800acb6:	e7a8      	b.n	800ac0a <_vfiprintf_r+0xfe>
 800acb8:	2300      	movs	r3, #0
 800acba:	3401      	adds	r4, #1
 800acbc:	9305      	str	r3, [sp, #20]
 800acbe:	4619      	mov	r1, r3
 800acc0:	f04f 0c0a 	mov.w	ip, #10
 800acc4:	4620      	mov	r0, r4
 800acc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acca:	3a30      	subs	r2, #48	@ 0x30
 800accc:	2a09      	cmp	r2, #9
 800acce:	d903      	bls.n	800acd8 <_vfiprintf_r+0x1cc>
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d0c6      	beq.n	800ac62 <_vfiprintf_r+0x156>
 800acd4:	9105      	str	r1, [sp, #20]
 800acd6:	e7c4      	b.n	800ac62 <_vfiprintf_r+0x156>
 800acd8:	fb0c 2101 	mla	r1, ip, r1, r2
 800acdc:	4604      	mov	r4, r0
 800acde:	2301      	movs	r3, #1
 800ace0:	e7f0      	b.n	800acc4 <_vfiprintf_r+0x1b8>
 800ace2:	ab03      	add	r3, sp, #12
 800ace4:	9300      	str	r3, [sp, #0]
 800ace6:	462a      	mov	r2, r5
 800ace8:	4b12      	ldr	r3, [pc, #72]	@ (800ad34 <_vfiprintf_r+0x228>)
 800acea:	a904      	add	r1, sp, #16
 800acec:	4630      	mov	r0, r6
 800acee:	f7fb feb7 	bl	8006a60 <_printf_float>
 800acf2:	4607      	mov	r7, r0
 800acf4:	1c78      	adds	r0, r7, #1
 800acf6:	d1d6      	bne.n	800aca6 <_vfiprintf_r+0x19a>
 800acf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800acfa:	07d9      	lsls	r1, r3, #31
 800acfc:	d405      	bmi.n	800ad0a <_vfiprintf_r+0x1fe>
 800acfe:	89ab      	ldrh	r3, [r5, #12]
 800ad00:	059a      	lsls	r2, r3, #22
 800ad02:	d402      	bmi.n	800ad0a <_vfiprintf_r+0x1fe>
 800ad04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad06:	f7fc fe1b 	bl	8007940 <__retarget_lock_release_recursive>
 800ad0a:	89ab      	ldrh	r3, [r5, #12]
 800ad0c:	065b      	lsls	r3, r3, #25
 800ad0e:	f53f af1f 	bmi.w	800ab50 <_vfiprintf_r+0x44>
 800ad12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad14:	e71e      	b.n	800ab54 <_vfiprintf_r+0x48>
 800ad16:	ab03      	add	r3, sp, #12
 800ad18:	9300      	str	r3, [sp, #0]
 800ad1a:	462a      	mov	r2, r5
 800ad1c:	4b05      	ldr	r3, [pc, #20]	@ (800ad34 <_vfiprintf_r+0x228>)
 800ad1e:	a904      	add	r1, sp, #16
 800ad20:	4630      	mov	r0, r6
 800ad22:	f7fc f935 	bl	8006f90 <_printf_i>
 800ad26:	e7e4      	b.n	800acf2 <_vfiprintf_r+0x1e6>
 800ad28:	0800b3c1 	.word	0x0800b3c1
 800ad2c:	0800b3cb 	.word	0x0800b3cb
 800ad30:	08006a61 	.word	0x08006a61
 800ad34:	0800aae9 	.word	0x0800aae9
 800ad38:	0800b3c7 	.word	0x0800b3c7

0800ad3c <__swbuf_r>:
 800ad3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad3e:	460e      	mov	r6, r1
 800ad40:	4614      	mov	r4, r2
 800ad42:	4605      	mov	r5, r0
 800ad44:	b118      	cbz	r0, 800ad4e <__swbuf_r+0x12>
 800ad46:	6a03      	ldr	r3, [r0, #32]
 800ad48:	b90b      	cbnz	r3, 800ad4e <__swbuf_r+0x12>
 800ad4a:	f7fc fce1 	bl	8007710 <__sinit>
 800ad4e:	69a3      	ldr	r3, [r4, #24]
 800ad50:	60a3      	str	r3, [r4, #8]
 800ad52:	89a3      	ldrh	r3, [r4, #12]
 800ad54:	071a      	lsls	r2, r3, #28
 800ad56:	d501      	bpl.n	800ad5c <__swbuf_r+0x20>
 800ad58:	6923      	ldr	r3, [r4, #16]
 800ad5a:	b943      	cbnz	r3, 800ad6e <__swbuf_r+0x32>
 800ad5c:	4621      	mov	r1, r4
 800ad5e:	4628      	mov	r0, r5
 800ad60:	f000 f82a 	bl	800adb8 <__swsetup_r>
 800ad64:	b118      	cbz	r0, 800ad6e <__swbuf_r+0x32>
 800ad66:	f04f 37ff 	mov.w	r7, #4294967295
 800ad6a:	4638      	mov	r0, r7
 800ad6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad6e:	6823      	ldr	r3, [r4, #0]
 800ad70:	6922      	ldr	r2, [r4, #16]
 800ad72:	1a98      	subs	r0, r3, r2
 800ad74:	6963      	ldr	r3, [r4, #20]
 800ad76:	b2f6      	uxtb	r6, r6
 800ad78:	4283      	cmp	r3, r0
 800ad7a:	4637      	mov	r7, r6
 800ad7c:	dc05      	bgt.n	800ad8a <__swbuf_r+0x4e>
 800ad7e:	4621      	mov	r1, r4
 800ad80:	4628      	mov	r0, r5
 800ad82:	f7ff fa53 	bl	800a22c <_fflush_r>
 800ad86:	2800      	cmp	r0, #0
 800ad88:	d1ed      	bne.n	800ad66 <__swbuf_r+0x2a>
 800ad8a:	68a3      	ldr	r3, [r4, #8]
 800ad8c:	3b01      	subs	r3, #1
 800ad8e:	60a3      	str	r3, [r4, #8]
 800ad90:	6823      	ldr	r3, [r4, #0]
 800ad92:	1c5a      	adds	r2, r3, #1
 800ad94:	6022      	str	r2, [r4, #0]
 800ad96:	701e      	strb	r6, [r3, #0]
 800ad98:	6962      	ldr	r2, [r4, #20]
 800ad9a:	1c43      	adds	r3, r0, #1
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d004      	beq.n	800adaa <__swbuf_r+0x6e>
 800ada0:	89a3      	ldrh	r3, [r4, #12]
 800ada2:	07db      	lsls	r3, r3, #31
 800ada4:	d5e1      	bpl.n	800ad6a <__swbuf_r+0x2e>
 800ada6:	2e0a      	cmp	r6, #10
 800ada8:	d1df      	bne.n	800ad6a <__swbuf_r+0x2e>
 800adaa:	4621      	mov	r1, r4
 800adac:	4628      	mov	r0, r5
 800adae:	f7ff fa3d 	bl	800a22c <_fflush_r>
 800adb2:	2800      	cmp	r0, #0
 800adb4:	d0d9      	beq.n	800ad6a <__swbuf_r+0x2e>
 800adb6:	e7d6      	b.n	800ad66 <__swbuf_r+0x2a>

0800adb8 <__swsetup_r>:
 800adb8:	b538      	push	{r3, r4, r5, lr}
 800adba:	4b29      	ldr	r3, [pc, #164]	@ (800ae60 <__swsetup_r+0xa8>)
 800adbc:	4605      	mov	r5, r0
 800adbe:	6818      	ldr	r0, [r3, #0]
 800adc0:	460c      	mov	r4, r1
 800adc2:	b118      	cbz	r0, 800adcc <__swsetup_r+0x14>
 800adc4:	6a03      	ldr	r3, [r0, #32]
 800adc6:	b90b      	cbnz	r3, 800adcc <__swsetup_r+0x14>
 800adc8:	f7fc fca2 	bl	8007710 <__sinit>
 800adcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800add0:	0719      	lsls	r1, r3, #28
 800add2:	d422      	bmi.n	800ae1a <__swsetup_r+0x62>
 800add4:	06da      	lsls	r2, r3, #27
 800add6:	d407      	bmi.n	800ade8 <__swsetup_r+0x30>
 800add8:	2209      	movs	r2, #9
 800adda:	602a      	str	r2, [r5, #0]
 800addc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ade0:	81a3      	strh	r3, [r4, #12]
 800ade2:	f04f 30ff 	mov.w	r0, #4294967295
 800ade6:	e033      	b.n	800ae50 <__swsetup_r+0x98>
 800ade8:	0758      	lsls	r0, r3, #29
 800adea:	d512      	bpl.n	800ae12 <__swsetup_r+0x5a>
 800adec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800adee:	b141      	cbz	r1, 800ae02 <__swsetup_r+0x4a>
 800adf0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800adf4:	4299      	cmp	r1, r3
 800adf6:	d002      	beq.n	800adfe <__swsetup_r+0x46>
 800adf8:	4628      	mov	r0, r5
 800adfa:	f7fd fc05 	bl	8008608 <_free_r>
 800adfe:	2300      	movs	r3, #0
 800ae00:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae02:	89a3      	ldrh	r3, [r4, #12]
 800ae04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ae08:	81a3      	strh	r3, [r4, #12]
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	6063      	str	r3, [r4, #4]
 800ae0e:	6923      	ldr	r3, [r4, #16]
 800ae10:	6023      	str	r3, [r4, #0]
 800ae12:	89a3      	ldrh	r3, [r4, #12]
 800ae14:	f043 0308 	orr.w	r3, r3, #8
 800ae18:	81a3      	strh	r3, [r4, #12]
 800ae1a:	6923      	ldr	r3, [r4, #16]
 800ae1c:	b94b      	cbnz	r3, 800ae32 <__swsetup_r+0x7a>
 800ae1e:	89a3      	ldrh	r3, [r4, #12]
 800ae20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ae24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae28:	d003      	beq.n	800ae32 <__swsetup_r+0x7a>
 800ae2a:	4621      	mov	r1, r4
 800ae2c:	4628      	mov	r0, r5
 800ae2e:	f000 f883 	bl	800af38 <__smakebuf_r>
 800ae32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae36:	f013 0201 	ands.w	r2, r3, #1
 800ae3a:	d00a      	beq.n	800ae52 <__swsetup_r+0x9a>
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	60a2      	str	r2, [r4, #8]
 800ae40:	6962      	ldr	r2, [r4, #20]
 800ae42:	4252      	negs	r2, r2
 800ae44:	61a2      	str	r2, [r4, #24]
 800ae46:	6922      	ldr	r2, [r4, #16]
 800ae48:	b942      	cbnz	r2, 800ae5c <__swsetup_r+0xa4>
 800ae4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ae4e:	d1c5      	bne.n	800addc <__swsetup_r+0x24>
 800ae50:	bd38      	pop	{r3, r4, r5, pc}
 800ae52:	0799      	lsls	r1, r3, #30
 800ae54:	bf58      	it	pl
 800ae56:	6962      	ldrpl	r2, [r4, #20]
 800ae58:	60a2      	str	r2, [r4, #8]
 800ae5a:	e7f4      	b.n	800ae46 <__swsetup_r+0x8e>
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	e7f7      	b.n	800ae50 <__swsetup_r+0x98>
 800ae60:	20000214 	.word	0x20000214

0800ae64 <_raise_r>:
 800ae64:	291f      	cmp	r1, #31
 800ae66:	b538      	push	{r3, r4, r5, lr}
 800ae68:	4605      	mov	r5, r0
 800ae6a:	460c      	mov	r4, r1
 800ae6c:	d904      	bls.n	800ae78 <_raise_r+0x14>
 800ae6e:	2316      	movs	r3, #22
 800ae70:	6003      	str	r3, [r0, #0]
 800ae72:	f04f 30ff 	mov.w	r0, #4294967295
 800ae76:	bd38      	pop	{r3, r4, r5, pc}
 800ae78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ae7a:	b112      	cbz	r2, 800ae82 <_raise_r+0x1e>
 800ae7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae80:	b94b      	cbnz	r3, 800ae96 <_raise_r+0x32>
 800ae82:	4628      	mov	r0, r5
 800ae84:	f000 f830 	bl	800aee8 <_getpid_r>
 800ae88:	4622      	mov	r2, r4
 800ae8a:	4601      	mov	r1, r0
 800ae8c:	4628      	mov	r0, r5
 800ae8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae92:	f000 b817 	b.w	800aec4 <_kill_r>
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d00a      	beq.n	800aeb0 <_raise_r+0x4c>
 800ae9a:	1c59      	adds	r1, r3, #1
 800ae9c:	d103      	bne.n	800aea6 <_raise_r+0x42>
 800ae9e:	2316      	movs	r3, #22
 800aea0:	6003      	str	r3, [r0, #0]
 800aea2:	2001      	movs	r0, #1
 800aea4:	e7e7      	b.n	800ae76 <_raise_r+0x12>
 800aea6:	2100      	movs	r1, #0
 800aea8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aeac:	4620      	mov	r0, r4
 800aeae:	4798      	blx	r3
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	e7e0      	b.n	800ae76 <_raise_r+0x12>

0800aeb4 <raise>:
 800aeb4:	4b02      	ldr	r3, [pc, #8]	@ (800aec0 <raise+0xc>)
 800aeb6:	4601      	mov	r1, r0
 800aeb8:	6818      	ldr	r0, [r3, #0]
 800aeba:	f7ff bfd3 	b.w	800ae64 <_raise_r>
 800aebe:	bf00      	nop
 800aec0:	20000214 	.word	0x20000214

0800aec4 <_kill_r>:
 800aec4:	b538      	push	{r3, r4, r5, lr}
 800aec6:	4d07      	ldr	r5, [pc, #28]	@ (800aee4 <_kill_r+0x20>)
 800aec8:	2300      	movs	r3, #0
 800aeca:	4604      	mov	r4, r0
 800aecc:	4608      	mov	r0, r1
 800aece:	4611      	mov	r1, r2
 800aed0:	602b      	str	r3, [r5, #0]
 800aed2:	f7f6 fcb9 	bl	8001848 <_kill>
 800aed6:	1c43      	adds	r3, r0, #1
 800aed8:	d102      	bne.n	800aee0 <_kill_r+0x1c>
 800aeda:	682b      	ldr	r3, [r5, #0]
 800aedc:	b103      	cbz	r3, 800aee0 <_kill_r+0x1c>
 800aede:	6023      	str	r3, [r4, #0]
 800aee0:	bd38      	pop	{r3, r4, r5, pc}
 800aee2:	bf00      	nop
 800aee4:	20000a24 	.word	0x20000a24

0800aee8 <_getpid_r>:
 800aee8:	f7f6 bca6 	b.w	8001838 <_getpid>

0800aeec <__swhatbuf_r>:
 800aeec:	b570      	push	{r4, r5, r6, lr}
 800aeee:	460c      	mov	r4, r1
 800aef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aef4:	2900      	cmp	r1, #0
 800aef6:	b096      	sub	sp, #88	@ 0x58
 800aef8:	4615      	mov	r5, r2
 800aefa:	461e      	mov	r6, r3
 800aefc:	da0d      	bge.n	800af1a <__swhatbuf_r+0x2e>
 800aefe:	89a3      	ldrh	r3, [r4, #12]
 800af00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800af04:	f04f 0100 	mov.w	r1, #0
 800af08:	bf14      	ite	ne
 800af0a:	2340      	movne	r3, #64	@ 0x40
 800af0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800af10:	2000      	movs	r0, #0
 800af12:	6031      	str	r1, [r6, #0]
 800af14:	602b      	str	r3, [r5, #0]
 800af16:	b016      	add	sp, #88	@ 0x58
 800af18:	bd70      	pop	{r4, r5, r6, pc}
 800af1a:	466a      	mov	r2, sp
 800af1c:	f000 f848 	bl	800afb0 <_fstat_r>
 800af20:	2800      	cmp	r0, #0
 800af22:	dbec      	blt.n	800aefe <__swhatbuf_r+0x12>
 800af24:	9901      	ldr	r1, [sp, #4]
 800af26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800af2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800af2e:	4259      	negs	r1, r3
 800af30:	4159      	adcs	r1, r3
 800af32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af36:	e7eb      	b.n	800af10 <__swhatbuf_r+0x24>

0800af38 <__smakebuf_r>:
 800af38:	898b      	ldrh	r3, [r1, #12]
 800af3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af3c:	079d      	lsls	r5, r3, #30
 800af3e:	4606      	mov	r6, r0
 800af40:	460c      	mov	r4, r1
 800af42:	d507      	bpl.n	800af54 <__smakebuf_r+0x1c>
 800af44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800af48:	6023      	str	r3, [r4, #0]
 800af4a:	6123      	str	r3, [r4, #16]
 800af4c:	2301      	movs	r3, #1
 800af4e:	6163      	str	r3, [r4, #20]
 800af50:	b003      	add	sp, #12
 800af52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af54:	ab01      	add	r3, sp, #4
 800af56:	466a      	mov	r2, sp
 800af58:	f7ff ffc8 	bl	800aeec <__swhatbuf_r>
 800af5c:	9f00      	ldr	r7, [sp, #0]
 800af5e:	4605      	mov	r5, r0
 800af60:	4639      	mov	r1, r7
 800af62:	4630      	mov	r0, r6
 800af64:	f7fd fbc4 	bl	80086f0 <_malloc_r>
 800af68:	b948      	cbnz	r0, 800af7e <__smakebuf_r+0x46>
 800af6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af6e:	059a      	lsls	r2, r3, #22
 800af70:	d4ee      	bmi.n	800af50 <__smakebuf_r+0x18>
 800af72:	f023 0303 	bic.w	r3, r3, #3
 800af76:	f043 0302 	orr.w	r3, r3, #2
 800af7a:	81a3      	strh	r3, [r4, #12]
 800af7c:	e7e2      	b.n	800af44 <__smakebuf_r+0xc>
 800af7e:	89a3      	ldrh	r3, [r4, #12]
 800af80:	6020      	str	r0, [r4, #0]
 800af82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af86:	81a3      	strh	r3, [r4, #12]
 800af88:	9b01      	ldr	r3, [sp, #4]
 800af8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af8e:	b15b      	cbz	r3, 800afa8 <__smakebuf_r+0x70>
 800af90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af94:	4630      	mov	r0, r6
 800af96:	f000 f81d 	bl	800afd4 <_isatty_r>
 800af9a:	b128      	cbz	r0, 800afa8 <__smakebuf_r+0x70>
 800af9c:	89a3      	ldrh	r3, [r4, #12]
 800af9e:	f023 0303 	bic.w	r3, r3, #3
 800afa2:	f043 0301 	orr.w	r3, r3, #1
 800afa6:	81a3      	strh	r3, [r4, #12]
 800afa8:	89a3      	ldrh	r3, [r4, #12]
 800afaa:	431d      	orrs	r5, r3
 800afac:	81a5      	strh	r5, [r4, #12]
 800afae:	e7cf      	b.n	800af50 <__smakebuf_r+0x18>

0800afb0 <_fstat_r>:
 800afb0:	b538      	push	{r3, r4, r5, lr}
 800afb2:	4d07      	ldr	r5, [pc, #28]	@ (800afd0 <_fstat_r+0x20>)
 800afb4:	2300      	movs	r3, #0
 800afb6:	4604      	mov	r4, r0
 800afb8:	4608      	mov	r0, r1
 800afba:	4611      	mov	r1, r2
 800afbc:	602b      	str	r3, [r5, #0]
 800afbe:	f7f6 fca3 	bl	8001908 <_fstat>
 800afc2:	1c43      	adds	r3, r0, #1
 800afc4:	d102      	bne.n	800afcc <_fstat_r+0x1c>
 800afc6:	682b      	ldr	r3, [r5, #0]
 800afc8:	b103      	cbz	r3, 800afcc <_fstat_r+0x1c>
 800afca:	6023      	str	r3, [r4, #0]
 800afcc:	bd38      	pop	{r3, r4, r5, pc}
 800afce:	bf00      	nop
 800afd0:	20000a24 	.word	0x20000a24

0800afd4 <_isatty_r>:
 800afd4:	b538      	push	{r3, r4, r5, lr}
 800afd6:	4d06      	ldr	r5, [pc, #24]	@ (800aff0 <_isatty_r+0x1c>)
 800afd8:	2300      	movs	r3, #0
 800afda:	4604      	mov	r4, r0
 800afdc:	4608      	mov	r0, r1
 800afde:	602b      	str	r3, [r5, #0]
 800afe0:	f7f6 fca2 	bl	8001928 <_isatty>
 800afe4:	1c43      	adds	r3, r0, #1
 800afe6:	d102      	bne.n	800afee <_isatty_r+0x1a>
 800afe8:	682b      	ldr	r3, [r5, #0]
 800afea:	b103      	cbz	r3, 800afee <_isatty_r+0x1a>
 800afec:	6023      	str	r3, [r4, #0]
 800afee:	bd38      	pop	{r3, r4, r5, pc}
 800aff0:	20000a24 	.word	0x20000a24

0800aff4 <_init>:
 800aff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff6:	bf00      	nop
 800aff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800affa:	bc08      	pop	{r3}
 800affc:	469e      	mov	lr, r3
 800affe:	4770      	bx	lr

0800b000 <_fini>:
 800b000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b002:	bf00      	nop
 800b004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b006:	bc08      	pop	{r3}
 800b008:	469e      	mov	lr, r3
 800b00a:	4770      	bx	lr
