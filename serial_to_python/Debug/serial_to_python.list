
serial_to_python.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800213c  0800213c  0000313c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800219c  0800219c  000041b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800219c  0800219c  0000319c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080021a4  080021a4  000041b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021a4  080021a4  000031a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080021a8  080021a8  000031a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b8  20000000  080021ac  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000041b8  2**0
                  CONTENTS
 10 .bss          0000017c  200001b8  200001b8  000041b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000334  20000334  000041b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000041b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000440e  00000000  00000000  000041e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f85  00000000  00000000  000085f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003d8  00000000  00000000  00009580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002c2  00000000  00000000  00009958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f671  00000000  00000000  00009c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005464  00000000  00000000  0003928b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad64c  00000000  00000000  0003e6ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ebd3b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001214  00000000  00000000  000ebd80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  000ecf94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001b8 	.word	0x200001b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002124 	.word	0x08002124

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001bc 	.word	0x200001bc
 80001cc:	08002124 	.word	0x08002124

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027e:	2b00      	cmp	r3, #0
 8000280:	db0b      	blt.n	800029a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f003 021f 	and.w	r2, r3, #31
 8000288:	4907      	ldr	r1, [pc, #28]	@ (80002a8 <__NVIC_EnableIRQ+0x38>)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	095b      	lsrs	r3, r3, #5
 8000290:	2001      	movs	r0, #1
 8000292:	fa00 f202 	lsl.w	r2, r0, r2
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e100 	.word	0xe000e100

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	@ (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	@ (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <enable_ADC12_interrupt>:

int conversion_counter = 0;



void enable_ADC12_interrupt() {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000304:	b672      	cpsid	i
}
 8000306:	bf00      	nop
	__disable_irq();
	NVIC_SetPriority(ADC1_2_IRQn, 5);  // Set Priority
 8000308:	2105      	movs	r1, #5
 800030a:	2012      	movs	r0, #18
 800030c:	f7ff ffce 	bl	80002ac <__NVIC_SetPriority>
	NVIC_EnableIRQ(ADC1_2_IRQn);
 8000310:	2012      	movs	r0, #18
 8000312:	f7ff ffad 	bl	8000270 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000316:	b662      	cpsie	i
}
 8000318:	bf00      	nop
	__enable_irq();
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}

0800031e <enable_ADC3_interrupt>:

void enable_ADC3_interrupt() {
 800031e:	b580      	push	{r7, lr}
 8000320:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000322:	b672      	cpsid	i
}
 8000324:	bf00      	nop
	__disable_irq();
	NVIC_SetPriority(ADC3_IRQn, 4);  // Set Priority
 8000326:	2104      	movs	r1, #4
 8000328:	202f      	movs	r0, #47	@ 0x2f
 800032a:	f7ff ffbf 	bl	80002ac <__NVIC_SetPriority>
	NVIC_EnableIRQ(ADC3_IRQn);
 800032e:	202f      	movs	r0, #47	@ 0x2f
 8000330:	f7ff ff9e 	bl	8000270 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000334:	b662      	cpsie	i
}
 8000336:	bf00      	nop
	__enable_irq();
}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}

0800033c <toggle_EOC_interrupt>:

void toggle_EOC_interrupt(ADCxPort *ADC_port) {
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	ADC_port->ADCx->IER ^= ADC_IER_EOCIE;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	685a      	ldr	r2, [r3, #4]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f082 0204 	eor.w	r2, r2, #4
 8000352:	605a      	str	r2, [r3, #4]
}
 8000354:	bf00      	nop
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr

08000360 <toggle_ADRDY_interrupt>:

void toggle_ADRDY_interrupt(ADCxPort *ADC_port) {
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	ADC_port->ADCx->IER ^= ADC_IER_ADRDYIE;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	685a      	ldr	r2, [r3, #4]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f082 0201 	eor.w	r2, r2, #1
 8000376:	605a      	str	r2, [r3, #4]
}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr

08000384 <toggle_EOS_interrupt>:

void toggle_EOS_interrupt(ADCxPort *ADC_port) {
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	ADC_port->ADCx->IER ^= ADC_IER_EOSIE;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	685a      	ldr	r2, [r3, #4]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f082 0208 	eor.w	r2, r2, #8
 800039a:	605a      	str	r2, [r3, #4]
}
 800039c:	bf00      	nop
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <ADCInitialise>:


void ADCInitialise(ADCxPort *ADC_port) {
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	RCC->AHBENR |= ADC_port->AHBENREnable;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	689a      	ldr	r2, [r3, #8]
 80003b4:	4b4d      	ldr	r3, [pc, #308]	@ (80004ec <ADCInitialise+0x144>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	494c      	ldr	r1, [pc, #304]	@ (80004ec <ADCInitialise+0x144>)
 80003ba:	4313      	orrs	r3, r2
 80003bc:	614b      	str	r3, [r1, #20]

	// set to synchronise the ADC with the clock
	ADC_port->ADCx_Common->CCR |= ADC_port->ClockMode;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	68d9      	ldr	r1, [r3, #12]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	689a      	ldr	r2, [r3, #8]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	430a      	orrs	r2, r1
 80003ce:	609a      	str	r2, [r3, #8]

	// ADEN must be = 0 for configuration (is the default)
	ADC_port->ADCx->CR &= ~ADC_port->VoltageRegulatorClear; // clear voltage regulator enable
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	691b      	ldr	r3, [r3, #16]
 80003d4:	43d9      	mvns	r1, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	689a      	ldr	r2, [r3, #8]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	400a      	ands	r2, r1
 80003e2:	609a      	str	r2, [r3, #8]
	ADC_port->ADCx->CR |= ADC_port->VoltageRegulatorMode; // set ADVREGEN TO 01
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	6959      	ldr	r1, [r3, #20]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	689a      	ldr	r2, [r3, #8]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	430a      	orrs	r2, r1
 80003f4:	609a      	str	r2, [r3, #8]
	ADC_port->ADCx->CR &= ~ADC_port->DifferentialModeForCalibration; // clear bit to enable Single-ended-input
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	43d9      	mvns	r1, r3
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	689a      	ldr	r2, [r3, #8]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	400a      	ands	r2, r1
 8000408:	609a      	str	r2, [r3, #8]

	// calibrate the ADC (self calibration routine)
	ADC_port->ADCx->CR |= ADC_port->ADCCalibrate;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	69d9      	ldr	r1, [r3, #28]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	689a      	ldr	r2, [r3, #8]
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	430a      	orrs	r2, r1
 800041a:	609a      	str	r2, [r3, #8]
	while((ADC_port->ADCx->CR & ADC_port->ADCCalibrate) == ADC_port->ADCCalibrate); // Waiting for the calibration to finish
 800041c:	bf00      	nop
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	689a      	ldr	r2, [r3, #8]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	69db      	ldr	r3, [r3, #28]
 8000428:	401a      	ands	r2, r3
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	69db      	ldr	r3, [r3, #28]
 800042e:	429a      	cmp	r2, r3
 8000430:	d0f5      	beq.n	800041e <ADCInitialise+0x76>

	// select the channel, only one conversion so it goes in
	//  the first conversion slot (SQ1)
	//  and the L value should be 0 (L=0000 does one conversion only)
	ADC_port->ADCx->SQR1 = 0; // clear any existing channel requests
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2200      	movs	r2, #0
 8000438:	631a      	str	r2, [r3, #48]	@ 0x30
	ADC_port->ADCx->SQR1 |= ADC_port->Channel1 << ADC_port->Channel1Pos; // request channel 2
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000442:	fa02 f103 	lsl.w	r1, r2, r3
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	430a      	orrs	r2, r1
 8000452:	631a      	str	r2, [r3, #48]	@ 0x30
	ADC_port->ADCx->SQR1 |= ADC_port->Channel2 << ADC_port->Channel2Pos; // request channel 2
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800045c:	fa02 f103 	lsl.w	r1, r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	430a      	orrs	r2, r1
 800046c:	631a      	str	r2, [r3, #48]	@ 0x30
	ADC_port->ADCx->SQR1 |= ADC_port->Channel3 << ADC_port->Channel3Pos; // request channel 2
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000476:	fa02 f103 	lsl.w	r1, r2, r3
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	430a      	orrs	r2, r1
 8000486:	631a      	str	r2, [r3, #48]	@ 0x30
	ADC_port->ADCx->SQR1 |= ADC_port->Channel4 << ADC_port->Channel4Pos; // request channel 2
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000490:	fa02 f103 	lsl.w	r1, r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	430a      	orrs	r2, r1
 80004a0:	631a      	str	r2, [r3, #48]	@ 0x30
	ADC_port->ADCx->SQR1 |= ADC_port->NumChannels << ADC_port->NumChannelsPos; // set the number of channels to read
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	6a1a      	ldr	r2, [r3, #32]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004aa:	fa02 f103 	lsl.w	r1, r2, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	430a      	orrs	r2, r1
 80004ba:	631a      	str	r2, [r3, #48]	@ 0x30

	// one shot mode
	ADC_port->ADCx->CFGR |= ADC_port->RunningMode;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	68da      	ldr	r2, [r3, #12]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	430a      	orrs	r2, r1
 80004cc:	60da      	str	r2, [r3, #12]

	// Enable ADC
	ADC_port->ADCx->CR |= ADC_port->ADCEnable;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	689a      	ldr	r2, [r3, #8]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	430a      	orrs	r2, r1
 80004de:	609a      	str	r2, [r3, #8]
	//ADC1->CR |= ADC_CR_ADEN;

}
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	40021000 	.word	0x40021000

080004f0 <SingleReadMultiChannelADCInterrupt>:

void SingleReadMultiChannelADCInterrupt(ADCxPort *ADC_port) {
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	// get a pointer to the location of the LEDs
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80004f8:	4b87      	ldr	r3, [pc, #540]	@ (8000718 <SingleReadMultiChannelADCInterrupt+0x228>)
 80004fa:	60fb      	str	r3, [r7, #12]
			}
		}

	*/
		// request the process to start
		ADC_port->ADCx->CR |= ADC_port->ADCStart;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	689a      	ldr	r2, [r3, #8]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	430a      	orrs	r2, r1
 800050c:	609a      	str	r2, [r3, #8]

		if (((ADC_port->ADCx->ISR & ADC_ISR_EOC) != 0) && (ADC_port->value_4 == 0)){
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f003 0304 	and.w	r3, r3, #4
 8000518:	2b00      	cmp	r3, #0
 800051a:	d04b      	beq.n	80005b4 <SingleReadMultiChannelADCInterrupt+0xc4>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8000522:	b29b      	uxth	r3, r3
 8000524:	2b00      	cmp	r3, #0
 8000526:	d145      	bne.n	80005b4 <SingleReadMultiChannelADCInterrupt+0xc4>
			if (ADC_port->conversion_counter == 0) {
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800052e:	b29b      	uxth	r3, r3
 8000530:	2b00      	cmp	r3, #0
 8000532:	d13f      	bne.n	80005b4 <SingleReadMultiChannelADCInterrupt+0xc4>
					ADC_port->value_1 = ADC_port->ADCx->DR;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800053a:	b29a      	uxth	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
					ADC_port->conversion_counter++;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8000548:	b29b      	uxth	r3, r3
 800054a:	3301      	adds	r3, #1
 800054c:	b29a      	uxth	r2, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
					ADC_port->value_2 = ADC_port->ADCx->DR;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800055a:	b29a      	uxth	r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
					ADC_port->conversion_counter++;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8000568:	b29b      	uxth	r3, r3
 800056a:	3301      	adds	r3, #1
 800056c:	b29a      	uxth	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
					ADC_port->value_3 = ADC_port->ADCx->DR;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800057a:	b29a      	uxth	r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
					ADC_port->conversion_counter++;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8000588:	b29b      	uxth	r3, r3
 800058a:	3301      	adds	r3, #1
 800058c:	b29a      	uxth	r2, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
					ADC_port->value_4 = ADC_port->ADCx->DR;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059a:	b29a      	uxth	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
					ADC_port->conversion_counter++;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	3301      	adds	r3, #1
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
			}
		}
		//Conversion Sequence has been finished
		if (((ADC_port->ADCx->ISR & ADC_ISR_EOS) != 0) && (ADC_port->conversion_counter > ADC_port->NumChannels)){
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f003 0308 	and.w	r3, r3, #8
 80005be:	2b00      	cmp	r3, #0
 80005c0:	f000 80a3 	beq.w	800070a <SingleReadMultiChannelADCInterrupt+0x21a>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	461a      	mov	r2, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	6a1b      	ldr	r3, [r3, #32]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	f240 8099 	bls.w	800070a <SingleReadMultiChannelADCInterrupt+0x21a>
			//Reset sequence flag
			//ADC2->ISR &= ADC_ISR_EOS;

			//Get scaled values so we can put them into the display/LEDs
			ADC_port->scale_1 = ADC_port->value_1 / (0xfff / 2);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80005de:	b29a      	uxth	r2, r3
 80005e0:	4b4e      	ldr	r3, [pc, #312]	@ (800071c <SingleReadMultiChannelADCInterrupt+0x22c>)
 80005e2:	fba3 1302 	umull	r1, r3, r3, r2
 80005e6:	1ad2      	subs	r2, r2, r3
 80005e8:	0852      	lsrs	r2, r2, #1
 80005ea:	4413      	add	r3, r2
 80005ec:	0a9b      	lsrs	r3, r3, #10
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

			if (ADC_port->scale_1 > 1) {
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d903      	bls.n	800060a <SingleReadMultiChannelADCInterrupt+0x11a>
				ADC_port->scale_1 = 1;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2201      	movs	r2, #1
 8000606:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
			}

			// full range is 12 bits (0xFFF maximum)
			// divide the scale into 4 even partitions (for 4 leds)
			ADC_port->scale_2 = ADC_port->value_2 / (0xfff / 2);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8000610:	b29a      	uxth	r2, r3
 8000612:	4b42      	ldr	r3, [pc, #264]	@ (800071c <SingleReadMultiChannelADCInterrupt+0x22c>)
 8000614:	fba3 1302 	umull	r1, r3, r3, r2
 8000618:	1ad2      	subs	r2, r2, r3
 800061a:	0852      	lsrs	r2, r2, #1
 800061c:	4413      	add	r3, r2
 800061e:	0a9b      	lsrs	r3, r3, #10
 8000620:	b29a      	uxth	r2, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

			if (ADC_port->scale_2 > 1) {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800062e:	b29b      	uxth	r3, r3
 8000630:	2b01      	cmp	r3, #1
 8000632:	d903      	bls.n	800063c <SingleReadMultiChannelADCInterrupt+0x14c>
				ADC_port->scale_2 = 1;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2201      	movs	r2, #1
 8000638:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
			}

			ADC_port->scale_3 = ADC_port->value_3 / (0xfff / 2);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8000642:	b29a      	uxth	r2, r3
 8000644:	4b35      	ldr	r3, [pc, #212]	@ (800071c <SingleReadMultiChannelADCInterrupt+0x22c>)
 8000646:	fba3 1302 	umull	r1, r3, r3, r2
 800064a:	1ad2      	subs	r2, r2, r3
 800064c:	0852      	lsrs	r2, r2, #1
 800064e:	4413      	add	r3, r2
 8000650:	0a9b      	lsrs	r3, r3, #10
 8000652:	b29a      	uxth	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

			if (ADC_port->scale_3 > 1) {
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8000660:	b29b      	uxth	r3, r3
 8000662:	2b01      	cmp	r3, #1
 8000664:	d903      	bls.n	800066e <SingleReadMultiChannelADCInterrupt+0x17e>
				ADC_port->scale_3 = 1;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2201      	movs	r2, #1
 800066a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
			}

			ADC_port->scale_4 = ADC_port->value_4 / (0xfff / 2);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8000674:	b29a      	uxth	r2, r3
 8000676:	4b29      	ldr	r3, [pc, #164]	@ (800071c <SingleReadMultiChannelADCInterrupt+0x22c>)
 8000678:	fba3 1302 	umull	r1, r3, r3, r2
 800067c:	1ad2      	subs	r2, r2, r3
 800067e:	0852      	lsrs	r2, r2, #1
 8000680:	4413      	add	r3, r2
 8000682:	0a9b      	lsrs	r3, r3, #10
 8000684:	b29a      	uxth	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

			if (ADC_port->scale_4 > 1) {
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8000692:	b29b      	uxth	r3, r3
 8000694:	2b01      	cmp	r3, #1
 8000696:	d903      	bls.n	80006a0 <SingleReadMultiChannelADCInterrupt+0x1b0>
				ADC_port->scale_4 = 1;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2201      	movs	r2, #1
 800069c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
			}
			// draw the state of channel 2 in the first 4 LEDs
			// and the state of channel 3 in the second set of 4 LEDs
			*led_register = 1 << ADC_port->scale_1 | 1 << (ADC_port->scale_2 + 2) | 1 << (ADC_port->scale_3 + 4); //| 1 << (ADC_port->scale_4 + 6);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	461a      	mov	r2, r3
 80006aa:	2301      	movs	r3, #1
 80006ac:	4093      	lsls	r3, r2
 80006ae:	b25a      	sxtb	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	3302      	adds	r3, #2
 80006ba:	2101      	movs	r1, #1
 80006bc:	fa01 f303 	lsl.w	r3, r1, r3
 80006c0:	b25b      	sxtb	r3, r3
 80006c2:	4313      	orrs	r3, r2
 80006c4:	b25a      	sxtb	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	3304      	adds	r3, #4
 80006d0:	2101      	movs	r1, #1
 80006d2:	fa01 f303 	lsl.w	r3, r1, r3
 80006d6:	b25b      	sxtb	r3, r3
 80006d8:	4313      	orrs	r3, r2
 80006da:	b25b      	sxtb	r3, r3
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	701a      	strb	r2, [r3, #0]
			ADC_port->value_1 = 0;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2200      	movs	r2, #0
 80006e6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
			ADC_port->value_2 = 0;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2200      	movs	r2, #0
 80006ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
			ADC_port->value_3 = 0;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2200      	movs	r2, #0
 80006f6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
			ADC_port->value_4 = 0;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2200      	movs	r2, #0
 80006fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
			ADC_port->conversion_counter = 0;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2200      	movs	r2, #0
 8000706:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
		}

	//}

}
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	48001015 	.word	0x48001015
 800071c:	00200401 	.word	0x00200401

08000720 <__NVIC_EnableIRQ>:
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	2b00      	cmp	r3, #0
 8000730:	db0b      	blt.n	800074a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	f003 021f 	and.w	r2, r3, #31
 8000738:	4907      	ldr	r1, [pc, #28]	@ (8000758 <__NVIC_EnableIRQ+0x38>)
 800073a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073e:	095b      	lsrs	r3, r3, #5
 8000740:	2001      	movs	r0, #1
 8000742:	fa00 f202 	lsl.w	r2, r0, r2
 8000746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000e100 	.word	0xe000e100

0800075c <__NVIC_DisableIRQ>:
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	2b00      	cmp	r3, #0
 800076c:	db12      	blt.n	8000794 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	f003 021f 	and.w	r2, r3, #31
 8000774:	490a      	ldr	r1, [pc, #40]	@ (80007a0 <__NVIC_DisableIRQ+0x44>)
 8000776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077a:	095b      	lsrs	r3, r3, #5
 800077c:	2001      	movs	r0, #1
 800077e:	fa00 f202 	lsl.w	r2, r0, r2
 8000782:	3320      	adds	r3, #32
 8000784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000788:	f3bf 8f4f 	dsb	sy
}
 800078c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800078e:	f3bf 8f6f 	isb	sy
}
 8000792:	bf00      	nop
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	e000e100 	.word	0xe000e100

080007a4 <__NVIC_ClearPendingIRQ>:
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	db0c      	blt.n	80007d0 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	f003 021f 	and.w	r2, r3, #31
 80007bc:	4907      	ldr	r1, [pc, #28]	@ (80007dc <__NVIC_ClearPendingIRQ+0x38>)
 80007be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c2:	095b      	lsrs	r3, r3, #5
 80007c4:	2001      	movs	r0, #1
 80007c6:	fa00 f202 	lsl.w	r2, r0, r2
 80007ca:	3360      	adds	r3, #96	@ 0x60
 80007cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	e000e100 	.word	0xe000e100

080007e0 <__NVIC_SetPriority>:
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	6039      	str	r1, [r7, #0]
 80007ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	db0a      	blt.n	800080a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	490c      	ldr	r1, [pc, #48]	@ (800082c <__NVIC_SetPriority+0x4c>)
 80007fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fe:	0112      	lsls	r2, r2, #4
 8000800:	b2d2      	uxtb	r2, r2
 8000802:	440b      	add	r3, r1
 8000804:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000808:	e00a      	b.n	8000820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4908      	ldr	r1, [pc, #32]	@ (8000830 <__NVIC_SetPriority+0x50>)
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	f003 030f 	and.w	r3, r3, #15
 8000816:	3b04      	subs	r3, #4
 8000818:	0112      	lsls	r2, r2, #4
 800081a:	b2d2      	uxtb	r2, r2
 800081c:	440b      	add	r3, r1
 800081e:	761a      	strb	r2, [r3, #24]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	e000e100 	.word	0xe000e100
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000838:	f3bf 8f4f 	dsb	sy
}
 800083c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <__NVIC_SystemReset+0x24>)
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000846:	4904      	ldr	r1, [pc, #16]	@ (8000858 <__NVIC_SystemReset+0x24>)
 8000848:	4b04      	ldr	r3, [pc, #16]	@ (800085c <__NVIC_SystemReset+0x28>)
 800084a:	4313      	orrs	r3, r2
 800084c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800084e:	f3bf 8f4f 	dsb	sy
}
 8000852:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <__NVIC_SystemReset+0x20>
 8000858:	e000ed00 	.word	0xe000ed00
 800085c:	05fa0004 	.word	0x05fa0004

08000860 <enable_clocks>:
void (*TIM2_interrupt)(GameData *game_data1) = 0x00;
void (*on_timer2_complete)(ADCxPort *ADC_port, GameData *game_data1) = 0x00;
void (*on_button_press)() = 0x00;

// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000864:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <enable_clocks+0x34>)
 8000866:	695b      	ldr	r3, [r3, #20]
 8000868:	4a0a      	ldr	r2, [pc, #40]	@ (8000894 <enable_clocks+0x34>)
 800086a:	f443 1338 	orr.w	r3, r3, #3014656	@ 0x2e0000
 800086e:	6153      	str	r3, [r2, #20]

	// enable the clock for ADC1
	RCC->AHBENR |= RCC_AHBENR_ADC12EN;
 8000870:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <enable_clocks+0x34>)
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	4a07      	ldr	r2, [pc, #28]	@ (8000894 <enable_clocks+0x34>)
 8000876:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800087a:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBENR_ADC34EN;
 800087c:	4b05      	ldr	r3, [pc, #20]	@ (8000894 <enable_clocks+0x34>)
 800087e:	695b      	ldr	r3, [r3, #20]
 8000880:	4a04      	ldr	r2, [pc, #16]	@ (8000894 <enable_clocks+0x34>)
 8000882:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000886:	6153      	str	r3, [r2, #20]
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000

08000898 <initialise_board>:

// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0

	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <initialise_board+0x20>)
 80008a0:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f245 5255 	movw	r2, #21845	@ 0x5555
 80008a8:	801a      	strh	r2, [r3, #0]
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	48001002 	.word	0x48001002

080008bc <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler() {
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	if (ADC12_interrupt != 0x00) {
 80008c0:	4b04      	ldr	r3, [pc, #16]	@ (80008d4 <ADC1_2_IRQHandler+0x18>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d003      	beq.n	80008d0 <ADC1_2_IRQHandler+0x14>
		ADC12_interrupt(&ADC2_Port);
 80008c8:	4b02      	ldr	r3, [pc, #8]	@ (80008d4 <ADC1_2_IRQHandler+0x18>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4802      	ldr	r0, [pc, #8]	@ (80008d8 <ADC1_2_IRQHandler+0x1c>)
 80008ce:	4798      	blx	r3
	}
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200001d4 	.word	0x200001d4
 80008d8:	20000000 	.word	0x20000000

080008dc <ADC3_IRQHandler>:

void ADC3_IRQHandler() {
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

	if (ADC3_interrupt != 0x00) {
 80008e0:	4b04      	ldr	r3, [pc, #16]	@ (80008f4 <ADC3_IRQHandler+0x18>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d003      	beq.n	80008f0 <ADC3_IRQHandler+0x14>
		ADC3_interrupt(&ADC3_Port);
 80008e8:	4b02      	ldr	r3, [pc, #8]	@ (80008f4 <ADC3_IRQHandler+0x18>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4802      	ldr	r0, [pc, #8]	@ (80008f8 <ADC3_IRQHandler+0x1c>)
 80008ee:	4798      	blx	r3
	}
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200001d8 	.word	0x200001d8
 80008f8:	20000068 	.word	0x20000068

080008fc <EXTI0_IRQHandler>:

//Initialises Game

void EXTI0_IRQHandler(void) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	// run the button press handler (make sure it is not null first !)
	if (on_button_press != 0x00) {
 8000900:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <EXTI0_IRQHandler+0x34>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d004      	beq.n	8000912 <EXTI0_IRQHandler+0x16>
		on_button_press(&ADC2_Port, &game_data1);
 8000908:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <EXTI0_IRQHandler+0x34>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4909      	ldr	r1, [pc, #36]	@ (8000934 <EXTI0_IRQHandler+0x38>)
 800090e:	480a      	ldr	r0, [pc, #40]	@ (8000938 <EXTI0_IRQHandler+0x3c>)
 8000910:	4798      	blx	r3
	}

	if (game_data1.GamePhaseValue == 1){
 8000912:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <EXTI0_IRQHandler+0x38>)
 8000914:	789b      	ldrb	r3, [r3, #2]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b01      	cmp	r3, #1
 800091a:	d101      	bne.n	8000920 <EXTI0_IRQHandler+0x24>
		Phase1();
 800091c:	f000 f944 	bl	8000ba8 <Phase1>
	}


	// reset the interrupt (so it doesn't keep firing until the next trigger)
	EXTI->PR |= EXTI_PR_PR0;
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <EXTI0_IRQHandler+0x40>)
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	4a05      	ldr	r2, [pc, #20]	@ (800093c <EXTI0_IRQHandler+0x40>)
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	6153      	str	r3, [r2, #20]
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200001e0 	.word	0x200001e0
 8000934:	200000d0 	.word	0x200000d0
 8000938:	20000000 	.word	0x20000000
 800093c:	40010400 	.word	0x40010400

08000940 <EnableEXTIInterrupt>:

void EnableEXTIInterrupt() {
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	//  otherwise can lead to strange behaviour
	__disable_irq();

	// Enable the system configuration controller (SYSCFG in RCC)
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000948:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <EnableEXTIInterrupt+0x48>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a0e      	ldr	r2, [pc, #56]	@ (8000988 <EnableEXTIInterrupt+0x48>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6193      	str	r3, [r2, #24]

	// External Interrupts details on large manual page 294)
	// PA0 is on interrupt EXTI0 large manual - page 250
	// EXTI0 in  SYSCFG_EXTICR1 needs to be 0x00 (SYSCFG_EXTICR1_EXTI0_PA)
	SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 8000954:	4b0d      	ldr	r3, [pc, #52]	@ (800098c <EnableEXTIInterrupt+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]

	//  Select EXTI0 interrupt on rising edge
	EXTI->RTSR |= EXTI_RTSR_TR0; // rising edge of EXTI line 0 (includes PA0)
 800095a:	4b0d      	ldr	r3, [pc, #52]	@ (8000990 <EnableEXTIInterrupt+0x50>)
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	4a0c      	ldr	r2, [pc, #48]	@ (8000990 <EnableEXTIInterrupt+0x50>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6093      	str	r3, [r2, #8]

	// set the interrupt from EXTI line 0 as 'not masked' - as in, enable it.
	EXTI->IMR |= EXTI_IMR_MR0;
 8000966:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <EnableEXTIInterrupt+0x50>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a09      	ldr	r2, [pc, #36]	@ (8000990 <EnableEXTIInterrupt+0x50>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6013      	str	r3, [r2, #0]

	// Tell the NVIC module that EXTI0 interrupts should be handled
	NVIC_SetPriority(EXTI0_IRQn, 1);  // Set Priority
 8000972:	2101      	movs	r1, #1
 8000974:	2006      	movs	r0, #6
 8000976:	f7ff ff33 	bl	80007e0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 800097a:	2006      	movs	r0, #6
 800097c:	f7ff fed0 	bl	8000720 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000980:	b662      	cpsie	i
}
 8000982:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40021000 	.word	0x40021000
 800098c:	40010000 	.word	0x40010000
 8000990:	40010400 	.word	0x40010400

08000994 <Timer2CompletionFunction>:

void Timer2CompletionFunction() {
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	if (game_data1.GamePhaseValue == 1) {
 8000998:	4b1b      	ldr	r3, [pc, #108]	@ (8000a08 <Timer2CompletionFunction+0x74>)
 800099a:	789b      	ldrb	r3, [r3, #2]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d10c      	bne.n	80009bc <Timer2CompletionFunction+0x28>
		on_timer2_complete = &spin_and_count_leds;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <Timer2CompletionFunction+0x78>)
 80009a4:	4a1a      	ldr	r2, [pc, #104]	@ (8000a10 <Timer2CompletionFunction+0x7c>)
 80009a6:	601a      	str	r2, [r3, #0]
		if (on_timer2_complete != 0x00) {
 80009a8:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <Timer2CompletionFunction+0x78>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d028      	beq.n	8000a02 <Timer2CompletionFunction+0x6e>
			on_timer2_complete(&ADC3_Port, &game_data1);
 80009b0:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <Timer2CompletionFunction+0x78>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4914      	ldr	r1, [pc, #80]	@ (8000a08 <Timer2CompletionFunction+0x74>)
 80009b6:	4817      	ldr	r0, [pc, #92]	@ (8000a14 <Timer2CompletionFunction+0x80>)
 80009b8:	4798      	blx	r3
		if (on_timer2_complete != 0x00) {
			on_timer2_complete(&ADC2_Port, &game_data1);
		}
	}

}
 80009ba:	e022      	b.n	8000a02 <Timer2CompletionFunction+0x6e>
	else if (game_data1.GamePhaseValue == 2) {
 80009bc:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <Timer2CompletionFunction+0x74>)
 80009be:	789b      	ldrb	r3, [r3, #2]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d10c      	bne.n	80009e0 <Timer2CompletionFunction+0x4c>
		on_timer2_complete = &GameTimer;
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <Timer2CompletionFunction+0x78>)
 80009c8:	4a13      	ldr	r2, [pc, #76]	@ (8000a18 <Timer2CompletionFunction+0x84>)
 80009ca:	601a      	str	r2, [r3, #0]
		if (on_timer2_complete != 0x00) {
 80009cc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <Timer2CompletionFunction+0x78>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d016      	beq.n	8000a02 <Timer2CompletionFunction+0x6e>
			on_timer2_complete(&ADC2_Port, &game_data1);
 80009d4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <Timer2CompletionFunction+0x78>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	490b      	ldr	r1, [pc, #44]	@ (8000a08 <Timer2CompletionFunction+0x74>)
 80009da:	4810      	ldr	r0, [pc, #64]	@ (8000a1c <Timer2CompletionFunction+0x88>)
 80009dc:	4798      	blx	r3
}
 80009de:	e010      	b.n	8000a02 <Timer2CompletionFunction+0x6e>
	else if (game_data1.GamePhaseValue == 3) {
 80009e0:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <Timer2CompletionFunction+0x74>)
 80009e2:	789b      	ldrb	r3, [r3, #2]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b03      	cmp	r3, #3
 80009e8:	d10b      	bne.n	8000a02 <Timer2CompletionFunction+0x6e>
		on_timer2_complete = &FlashEndLights;
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <Timer2CompletionFunction+0x78>)
 80009ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000a20 <Timer2CompletionFunction+0x8c>)
 80009ee:	601a      	str	r2, [r3, #0]
		if (on_timer2_complete != 0x00) {
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <Timer2CompletionFunction+0x78>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d004      	beq.n	8000a02 <Timer2CompletionFunction+0x6e>
			on_timer2_complete(&ADC2_Port, &game_data1);
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <Timer2CompletionFunction+0x78>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4902      	ldr	r1, [pc, #8]	@ (8000a08 <Timer2CompletionFunction+0x74>)
 80009fe:	4807      	ldr	r0, [pc, #28]	@ (8000a1c <Timer2CompletionFunction+0x88>)
 8000a00:	4798      	blx	r3
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000d0 	.word	0x200000d0
 8000a0c:	200001dc 	.word	0x200001dc
 8000a10:	08000d9d 	.word	0x08000d9d
 8000a14:	20000068 	.word	0x20000068
 8000a18:	08000e45 	.word	0x08000e45
 8000a1c:	20000000 	.word	0x20000000
 8000a20:	08000e99 	.word	0x08000e99

08000a24 <Timer4CompletionFunction>:

void Timer4CompletionFunction() {
 8000a24:	b5b0      	push	{r4, r5, r7, lr}
 8000a26:	b094      	sub	sp, #80	@ 0x50
 8000a28:	af04      	add	r7, sp, #16
	uint8_t string_to_send[64] = "This is a string !\r\n";
 8000a2a:	4b5a      	ldr	r3, [pc, #360]	@ (8000b94 <Timer4CompletionFunction+0x170>)
 8000a2c:	463c      	mov	r4, r7
 8000a2e:	461d      	mov	r5, r3
 8000a30:	6828      	ldr	r0, [r5, #0]
 8000a32:	6869      	ldr	r1, [r5, #4]
 8000a34:	68aa      	ldr	r2, [r5, #8]
 8000a36:	68eb      	ldr	r3, [r5, #12]
 8000a38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3a:	6928      	ldr	r0, [r5, #16]
 8000a3c:	6020      	str	r0, [r4, #0]
 8000a3e:	7d2b      	ldrb	r3, [r5, #20]
 8000a40:	7123      	strb	r3, [r4, #4]
 8000a42:	f107 0315 	add.w	r3, r7, #21
 8000a46:	222b      	movs	r2, #43	@ 0x2b
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 feea 	bl	8001824 <memset>
	sprintf(string_to_send, "%hu,%hu,%hd,%hd,%hd\r\n", game_data1.GamePhaseValue , game_data1.Checkpoint1, game_data1.Checkpoint2, game_data1.Checkpoint3, game_data1.WonOrLost);
 8000a50:	4b51      	ldr	r3, [pc, #324]	@ (8000b98 <Timer4CompletionFunction+0x174>)
 8000a52:	789b      	ldrb	r3, [r3, #2]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	461c      	mov	r4, r3
 8000a58:	4b4f      	ldr	r3, [pc, #316]	@ (8000b98 <Timer4CompletionFunction+0x174>)
 8000a5a:	799b      	ldrb	r3, [r3, #6]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	461d      	mov	r5, r3
 8000a60:	4b4d      	ldr	r3, [pc, #308]	@ (8000b98 <Timer4CompletionFunction+0x174>)
 8000a62:	79db      	ldrb	r3, [r3, #7]
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	461a      	mov	r2, r3
 8000a68:	4b4b      	ldr	r3, [pc, #300]	@ (8000b98 <Timer4CompletionFunction+0x174>)
 8000a6a:	7a1b      	ldrb	r3, [r3, #8]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4b49      	ldr	r3, [pc, #292]	@ (8000b98 <Timer4CompletionFunction+0x174>)
 8000a72:	7a5b      	ldrb	r3, [r3, #9]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	4638      	mov	r0, r7
 8000a78:	9302      	str	r3, [sp, #8]
 8000a7a:	9101      	str	r1, [sp, #4]
 8000a7c:	9200      	str	r2, [sp, #0]
 8000a7e:	462b      	mov	r3, r5
 8000a80:	4622      	mov	r2, r4
 8000a82:	4946      	ldr	r1, [pc, #280]	@ (8000b9c <Timer4CompletionFunction+0x178>)
 8000a84:	f000 feae 	bl	80017e4 <siprintf>
	SerialOutputString(string_to_send, &USART1_PORT);
 8000a88:	463b      	mov	r3, r7
 8000a8a:	4945      	ldr	r1, [pc, #276]	@ (8000ba0 <Timer4CompletionFunction+0x17c>)
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 fcd8 	bl	8001442 <SerialOutputString>
	if (game_data1.TimerMode == 1) {
 8000a92:	4b41      	ldr	r3, [pc, #260]	@ (8000b98 <Timer4CompletionFunction+0x174>)
 8000a94:	78db      	ldrb	r3, [r3, #3]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d139      	bne.n	8000b10 <Timer4CompletionFunction+0xec>
		if (ADC2_Port.scale_1 == 1){
 8000a9c:	4b41      	ldr	r3, [pc, #260]	@ (8000ba4 <Timer4CompletionFunction+0x180>)
 8000a9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d102      	bne.n	8000aae <Timer4CompletionFunction+0x8a>
			game_data1.Checkpoint1 = 1;
 8000aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8000b98 <Timer4CompletionFunction+0x174>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	719a      	strb	r2, [r3, #6]
		}
		if (ADC2_Port.scale_2 == 1){
 8000aae:	4b3d      	ldr	r3, [pc, #244]	@ (8000ba4 <Timer4CompletionFunction+0x180>)
 8000ab0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d102      	bne.n	8000ac0 <Timer4CompletionFunction+0x9c>
			game_data1.Checkpoint2 = 1;
 8000aba:	4b37      	ldr	r3, [pc, #220]	@ (8000b98 <Timer4CompletionFunction+0x174>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	71da      	strb	r2, [r3, #7]
		}
		if (ADC2_Port.scale_3 == 1){
 8000ac0:	4b38      	ldr	r3, [pc, #224]	@ (8000ba4 <Timer4CompletionFunction+0x180>)
 8000ac2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d102      	bne.n	8000ad2 <Timer4CompletionFunction+0xae>
			game_data1.Checkpoint3 = 1;
 8000acc:	4b32      	ldr	r3, [pc, #200]	@ (8000b98 <Timer4CompletionFunction+0x174>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	721a      	strb	r2, [r3, #8]
		}
		//Check if checkpoints have been passed
		if ((game_data1.Checkpoint1 && game_data1.Checkpoint2 && game_data1.Checkpoint3) == 1){
 8000ad2:	4b31      	ldr	r3, [pc, #196]	@ (8000b98 <Timer4CompletionFunction+0x174>)
 8000ad4:	799b      	ldrb	r3, [r3, #6]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d00b      	beq.n	8000af4 <Timer4CompletionFunction+0xd0>
 8000adc:	4b2e      	ldr	r3, [pc, #184]	@ (8000b98 <Timer4CompletionFunction+0x174>)
 8000ade:	79db      	ldrb	r3, [r3, #7]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d006      	beq.n	8000af4 <Timer4CompletionFunction+0xd0>
 8000ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8000b98 <Timer4CompletionFunction+0x174>)
 8000ae8:	7a1b      	ldrb	r3, [r3, #8]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <Timer4CompletionFunction+0xd0>
 8000af0:	2301      	movs	r3, #1
 8000af2:	e000      	b.n	8000af6 <Timer4CompletionFunction+0xd2>
 8000af4:	2300      	movs	r3, #0
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d148      	bne.n	8000b8c <Timer4CompletionFunction+0x168>
			game_data1.GamePhaseValue = 3;
 8000afa:	4b27      	ldr	r3, [pc, #156]	@ (8000b98 <Timer4CompletionFunction+0x174>)
 8000afc:	2203      	movs	r2, #3
 8000afe:	709a      	strb	r2, [r3, #2]
			game_data1.WonOrLost = 1;
 8000b00:	4b25      	ldr	r3, [pc, #148]	@ (8000b98 <Timer4CompletionFunction+0x174>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	725a      	strb	r2, [r3, #9]
			FlashEndLights(&ADC2_Port, &game_data1);
 8000b06:	4924      	ldr	r1, [pc, #144]	@ (8000b98 <Timer4CompletionFunction+0x174>)
 8000b08:	4826      	ldr	r0, [pc, #152]	@ (8000ba4 <Timer4CompletionFunction+0x180>)
 8000b0a:	f000 f9c5 	bl	8000e98 <FlashEndLights>
			FlashEndLights(&ADC2_Port, &game_data1);
		}

	}

}
 8000b0e:	e03d      	b.n	8000b8c <Timer4CompletionFunction+0x168>
	else if (game_data1.TimerMode == 2) {
 8000b10:	4b21      	ldr	r3, [pc, #132]	@ (8000b98 <Timer4CompletionFunction+0x174>)
 8000b12:	78db      	ldrb	r3, [r3, #3]
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d138      	bne.n	8000b8c <Timer4CompletionFunction+0x168>
		if (ADC2_Port.scale_1 == 1){
 8000b1a:	4b22      	ldr	r3, [pc, #136]	@ (8000ba4 <Timer4CompletionFunction+0x180>)
 8000b1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d102      	bne.n	8000b2c <Timer4CompletionFunction+0x108>
			game_data1.Checkpoint1 = 1;
 8000b26:	4b1c      	ldr	r3, [pc, #112]	@ (8000b98 <Timer4CompletionFunction+0x174>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	719a      	strb	r2, [r3, #6]
		if (ADC2_Port.scale_2 == 1){
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba4 <Timer4CompletionFunction+0x180>)
 8000b2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d102      	bne.n	8000b3e <Timer4CompletionFunction+0x11a>
			game_data1.Checkpoint2 = 1;
 8000b38:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <Timer4CompletionFunction+0x174>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	71da      	strb	r2, [r3, #7]
		if (ADC2_Port.scale_3 == 1){
 8000b3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <Timer4CompletionFunction+0x180>)
 8000b40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d102      	bne.n	8000b50 <Timer4CompletionFunction+0x12c>
			game_data1.Checkpoint3 = 1;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <Timer4CompletionFunction+0x174>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	721a      	strb	r2, [r3, #8]
		if ((game_data1.Checkpoint1 && game_data1.Checkpoint2 && game_data1.Checkpoint3) == 1){
 8000b50:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <Timer4CompletionFunction+0x174>)
 8000b52:	799b      	ldrb	r3, [r3, #6]
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00b      	beq.n	8000b72 <Timer4CompletionFunction+0x14e>
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <Timer4CompletionFunction+0x174>)
 8000b5c:	79db      	ldrb	r3, [r3, #7]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d006      	beq.n	8000b72 <Timer4CompletionFunction+0x14e>
 8000b64:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <Timer4CompletionFunction+0x174>)
 8000b66:	7a1b      	ldrb	r3, [r3, #8]
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <Timer4CompletionFunction+0x14e>
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e000      	b.n	8000b74 <Timer4CompletionFunction+0x150>
 8000b72:	2300      	movs	r3, #0
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d109      	bne.n	8000b8c <Timer4CompletionFunction+0x168>
			game_data1.GamePhaseValue = 3;
 8000b78:	4b07      	ldr	r3, [pc, #28]	@ (8000b98 <Timer4CompletionFunction+0x174>)
 8000b7a:	2203      	movs	r2, #3
 8000b7c:	709a      	strb	r2, [r3, #2]
			game_data1.WonOrLost = 1;
 8000b7e:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <Timer4CompletionFunction+0x174>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	725a      	strb	r2, [r3, #9]
			FlashEndLights(&ADC2_Port, &game_data1);
 8000b84:	4904      	ldr	r1, [pc, #16]	@ (8000b98 <Timer4CompletionFunction+0x174>)
 8000b86:	4807      	ldr	r0, [pc, #28]	@ (8000ba4 <Timer4CompletionFunction+0x180>)
 8000b88:	f000 f986 	bl	8000e98 <FlashEndLights>
}
 8000b8c:	bf00      	nop
 8000b8e:	3740      	adds	r7, #64	@ 0x40
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bdb0      	pop	{r4, r5, r7, pc}
 8000b94:	08002154 	.word	0x08002154
 8000b98:	200000d0 	.word	0x200000d0
 8000b9c:	0800213c 	.word	0x0800213c
 8000ba0:	200000dc 	.word	0x200000dc
 8000ba4:	20000000 	.word	0x20000000

08000ba8 <Phase1>:

void Phase1(){
 8000ba8:	b5b0      	push	{r4, r5, r7, lr}
 8000baa:	b096      	sub	sp, #88	@ 0x58
 8000bac:	af04      	add	r7, sp, #16


	enable_clocks();
 8000bae:	f7ff fe57 	bl	8000860 <enable_clocks>
	initialise_board();
 8000bb2:	f7ff fe71 	bl	8000898 <initialise_board>

	SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	492f      	ldr	r1, [pc, #188]	@ (8000c78 <Phase1+0xd0>)
 8000bba:	2004      	movs	r0, #4
 8000bbc:	f000 fbb6 	bl	800132c <SerialInitialise>
	uint8_t string_to_send[64] = "This is a string !\r\n";
 8000bc0:	4b2e      	ldr	r3, [pc, #184]	@ (8000c7c <Phase1+0xd4>)
 8000bc2:	1d3c      	adds	r4, r7, #4
 8000bc4:	461d      	mov	r5, r3
 8000bc6:	6828      	ldr	r0, [r5, #0]
 8000bc8:	6869      	ldr	r1, [r5, #4]
 8000bca:	68aa      	ldr	r2, [r5, #8]
 8000bcc:	68eb      	ldr	r3, [r5, #12]
 8000bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd0:	6928      	ldr	r0, [r5, #16]
 8000bd2:	6020      	str	r0, [r4, #0]
 8000bd4:	7d2b      	ldrb	r3, [r5, #20]
 8000bd6:	7123      	strb	r3, [r4, #4]
 8000bd8:	f107 0319 	add.w	r3, r7, #25
 8000bdc:	222b      	movs	r2, #43	@ 0x2b
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 fe1f 	bl	8001824 <memset>
	sprintf(string_to_send, "%hu,%hu,%hd,%hd,%hd\r\n", game_data1.GamePhaseValue , game_data1.Checkpoint1, game_data1.Checkpoint2, game_data1.Checkpoint3, game_data1.WonOrLost);
 8000be6:	4b26      	ldr	r3, [pc, #152]	@ (8000c80 <Phase1+0xd8>)
 8000be8:	789b      	ldrb	r3, [r3, #2]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	461c      	mov	r4, r3
 8000bee:	4b24      	ldr	r3, [pc, #144]	@ (8000c80 <Phase1+0xd8>)
 8000bf0:	799b      	ldrb	r3, [r3, #6]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	461d      	mov	r5, r3
 8000bf6:	4b22      	ldr	r3, [pc, #136]	@ (8000c80 <Phase1+0xd8>)
 8000bf8:	79db      	ldrb	r3, [r3, #7]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b20      	ldr	r3, [pc, #128]	@ (8000c80 <Phase1+0xd8>)
 8000c00:	7a1b      	ldrb	r3, [r3, #8]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	4619      	mov	r1, r3
 8000c06:	4b1e      	ldr	r3, [pc, #120]	@ (8000c80 <Phase1+0xd8>)
 8000c08:	7a5b      	ldrb	r3, [r3, #9]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	1d38      	adds	r0, r7, #4
 8000c0e:	9302      	str	r3, [sp, #8]
 8000c10:	9101      	str	r1, [sp, #4]
 8000c12:	9200      	str	r2, [sp, #0]
 8000c14:	462b      	mov	r3, r5
 8000c16:	4622      	mov	r2, r4
 8000c18:	491a      	ldr	r1, [pc, #104]	@ (8000c84 <Phase1+0xdc>)
 8000c1a:	f000 fde3 	bl	80017e4 <siprintf>
	SerialOutputString(string_to_send, &USART1_PORT);
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	4915      	ldr	r1, [pc, #84]	@ (8000c78 <Phase1+0xd0>)
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 fc0d 	bl	8001442 <SerialOutputString>

	on_button_press = &RestartGame;
 8000c28:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <Phase1+0xe0>)
 8000c2a:	4a18      	ldr	r2, [pc, #96]	@ (8000c8c <Phase1+0xe4>)
 8000c2c:	601a      	str	r2, [r3, #0]
	EnableEXTIInterrupt();
 8000c2e:	f7ff fe87 	bl	8000940 <EnableEXTIInterrupt>
	enable_timer_interrupt();
 8000c32:	f000 fd83 	bl	800173c <enable_timer_interrupt>

	ADC3_interrupt = &SingleReadMultiChannelADCInterrupt;
 8000c36:	4b16      	ldr	r3, [pc, #88]	@ (8000c90 <Phase1+0xe8>)
 8000c38:	4a16      	ldr	r2, [pc, #88]	@ (8000c94 <Phase1+0xec>)
 8000c3a:	601a      	str	r2, [r3, #0]
	enable_ADC3_interrupt();
 8000c3c:	f7ff fb6f 	bl	800031e <enable_ADC3_interrupt>
	toggle_EOC_interrupt(&ADC3_Port);
 8000c40:	4815      	ldr	r0, [pc, #84]	@ (8000c98 <Phase1+0xf0>)
 8000c42:	f7ff fb7b 	bl	800033c <toggle_EOC_interrupt>
	toggle_ADRDY_interrupt(&ADC3_Port);
 8000c46:	4814      	ldr	r0, [pc, #80]	@ (8000c98 <Phase1+0xf0>)
 8000c48:	f7ff fb8a 	bl	8000360 <toggle_ADRDY_interrupt>
	toggle_EOS_interrupt(&ADC3_Port);
 8000c4c:	4812      	ldr	r0, [pc, #72]	@ (8000c98 <Phase1+0xf0>)
 8000c4e:	f7ff fb99 	bl	8000384 <toggle_EOS_interrupt>

	on_timer2_complete = &spin_and_count_leds;
 8000c52:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <Phase1+0xf4>)
 8000c54:	4a12      	ldr	r2, [pc, #72]	@ (8000ca0 <Phase1+0xf8>)
 8000c56:	601a      	str	r2, [r3, #0]
	uint32_t period = 1000; // ms
 8000c58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c5c:	647b      	str	r3, [r7, #68]	@ 0x44
	TimerInitialise(&TIM2_init, period, &Timer2CompletionFunction);
 8000c5e:	4a11      	ldr	r2, [pc, #68]	@ (8000ca4 <Phase1+0xfc>)
 8000c60:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000c62:	4811      	ldr	r0, [pc, #68]	@ (8000ca8 <Phase1+0x100>)
 8000c64:	f000 fcd0 	bl	8001608 <TimerInitialise>
	ADCInitialise(&ADC3_Port);
 8000c68:	480b      	ldr	r0, [pc, #44]	@ (8000c98 <Phase1+0xf0>)
 8000c6a:	f7ff fb9d 	bl	80003a8 <ADCInitialise>
}
 8000c6e:	bf00      	nop
 8000c70:	3748      	adds	r7, #72	@ 0x48
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bdb0      	pop	{r4, r5, r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200000dc 	.word	0x200000dc
 8000c7c:	08002154 	.word	0x08002154
 8000c80:	200000d0 	.word	0x200000d0
 8000c84:	0800213c 	.word	0x0800213c
 8000c88:	200001e0 	.word	0x200001e0
 8000c8c:	08001231 	.word	0x08001231
 8000c90:	200001d8 	.word	0x200001d8
 8000c94:	080004f1 	.word	0x080004f1
 8000c98:	20000068 	.word	0x20000068
 8000c9c:	200001dc 	.word	0x200001dc
 8000ca0:	08000d9d 	.word	0x08000d9d
 8000ca4:	08000995 	.word	0x08000995
 8000ca8:	20000114 	.word	0x20000114

08000cac <Phase2>:

void Phase2(){
 8000cac:	b5b0      	push	{r4, r5, r7, lr}
 8000cae:	b096      	sub	sp, #88	@ 0x58
 8000cb0:	af04      	add	r7, sp, #16
	toggle_EOC_interrupt(&ADC3_Port);
 8000cb2:	482e      	ldr	r0, [pc, #184]	@ (8000d6c <Phase2+0xc0>)
 8000cb4:	f7ff fb42 	bl	800033c <toggle_EOC_interrupt>
	toggle_ADRDY_interrupt(&ADC3_Port);
 8000cb8:	482c      	ldr	r0, [pc, #176]	@ (8000d6c <Phase2+0xc0>)
 8000cba:	f7ff fb51 	bl	8000360 <toggle_ADRDY_interrupt>
	toggle_EOS_interrupt(&ADC3_Port);
 8000cbe:	482b      	ldr	r0, [pc, #172]	@ (8000d6c <Phase2+0xc0>)
 8000cc0:	f7ff fb60 	bl	8000384 <toggle_EOS_interrupt>

	uint8_t string_to_send[64] = "This is a string !\r\n";
 8000cc4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d70 <Phase2+0xc4>)
 8000cc6:	1d3c      	adds	r4, r7, #4
 8000cc8:	461d      	mov	r5, r3
 8000cca:	6828      	ldr	r0, [r5, #0]
 8000ccc:	6869      	ldr	r1, [r5, #4]
 8000cce:	68aa      	ldr	r2, [r5, #8]
 8000cd0:	68eb      	ldr	r3, [r5, #12]
 8000cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cd4:	6928      	ldr	r0, [r5, #16]
 8000cd6:	6020      	str	r0, [r4, #0]
 8000cd8:	7d2b      	ldrb	r3, [r5, #20]
 8000cda:	7123      	strb	r3, [r4, #4]
 8000cdc:	f107 0319 	add.w	r3, r7, #25
 8000ce0:	222b      	movs	r2, #43	@ 0x2b
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 fd9d 	bl	8001824 <memset>
	sprintf(string_to_send, "%hu,%hu,%hd,%hd,%hd\r\n", game_data1.GamePhaseValue , game_data1.Checkpoint1, game_data1.Checkpoint2, game_data1.Checkpoint3, game_data1.WonOrLost);
 8000cea:	4b22      	ldr	r3, [pc, #136]	@ (8000d74 <Phase2+0xc8>)
 8000cec:	789b      	ldrb	r3, [r3, #2]
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	461c      	mov	r4, r3
 8000cf2:	4b20      	ldr	r3, [pc, #128]	@ (8000d74 <Phase2+0xc8>)
 8000cf4:	799b      	ldrb	r3, [r3, #6]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	461d      	mov	r5, r3
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000d74 <Phase2+0xc8>)
 8000cfc:	79db      	ldrb	r3, [r3, #7]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b1c      	ldr	r3, [pc, #112]	@ (8000d74 <Phase2+0xc8>)
 8000d04:	7a1b      	ldrb	r3, [r3, #8]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <Phase2+0xc8>)
 8000d0c:	7a5b      	ldrb	r3, [r3, #9]
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	1d38      	adds	r0, r7, #4
 8000d12:	9302      	str	r3, [sp, #8]
 8000d14:	9101      	str	r1, [sp, #4]
 8000d16:	9200      	str	r2, [sp, #0]
 8000d18:	462b      	mov	r3, r5
 8000d1a:	4622      	mov	r2, r4
 8000d1c:	4916      	ldr	r1, [pc, #88]	@ (8000d78 <Phase2+0xcc>)
 8000d1e:	f000 fd61 	bl	80017e4 <siprintf>
	SerialOutputString(string_to_send, &USART1_PORT);
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	4915      	ldr	r1, [pc, #84]	@ (8000d7c <Phase2+0xd0>)
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 fb8b 	bl	8001442 <SerialOutputString>

	ADC12_interrupt = &SingleReadMultiChannelADCInterrupt;
 8000d2c:	4b14      	ldr	r3, [pc, #80]	@ (8000d80 <Phase2+0xd4>)
 8000d2e:	4a15      	ldr	r2, [pc, #84]	@ (8000d84 <Phase2+0xd8>)
 8000d30:	601a      	str	r2, [r3, #0]
	enable_ADC12_interrupt();
 8000d32:	f7ff fae5 	bl	8000300 <enable_ADC12_interrupt>
	toggle_EOC_interrupt(&ADC2_Port);
 8000d36:	4814      	ldr	r0, [pc, #80]	@ (8000d88 <Phase2+0xdc>)
 8000d38:	f7ff fb00 	bl	800033c <toggle_EOC_interrupt>
	toggle_ADRDY_interrupt(&ADC2_Port);
 8000d3c:	4812      	ldr	r0, [pc, #72]	@ (8000d88 <Phase2+0xdc>)
 8000d3e:	f7ff fb0f 	bl	8000360 <toggle_ADRDY_interrupt>
	toggle_EOS_interrupt(&ADC2_Port);
 8000d42:	4811      	ldr	r0, [pc, #68]	@ (8000d88 <Phase2+0xdc>)
 8000d44:	f7ff fb1e 	bl	8000384 <toggle_EOS_interrupt>

	on_timer2_complete = &spin_and_count_leds;
 8000d48:	4b10      	ldr	r3, [pc, #64]	@ (8000d8c <Phase2+0xe0>)
 8000d4a:	4a11      	ldr	r2, [pc, #68]	@ (8000d90 <Phase2+0xe4>)
 8000d4c:	601a      	str	r2, [r3, #0]
	uint32_t period = 10; // ms
 8000d4e:	230a      	movs	r3, #10
 8000d50:	647b      	str	r3, [r7, #68]	@ 0x44
	TimerInitialise(&TIM4_init, period, &Timer4CompletionFunction);
 8000d52:	4a10      	ldr	r2, [pc, #64]	@ (8000d94 <Phase2+0xe8>)
 8000d54:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000d56:	4810      	ldr	r0, [pc, #64]	@ (8000d98 <Phase2+0xec>)
 8000d58:	f000 fc56 	bl	8001608 <TimerInitialise>
	ADCInitialise(&ADC2_Port);
 8000d5c:	480a      	ldr	r0, [pc, #40]	@ (8000d88 <Phase2+0xdc>)
 8000d5e:	f7ff fb23 	bl	80003a8 <ADCInitialise>


}
 8000d62:	bf00      	nop
 8000d64:	3748      	adds	r7, #72	@ 0x48
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bdb0      	pop	{r4, r5, r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000068 	.word	0x20000068
 8000d70:	08002154 	.word	0x08002154
 8000d74:	200000d0 	.word	0x200000d0
 8000d78:	0800213c 	.word	0x0800213c
 8000d7c:	200000dc 	.word	0x200000dc
 8000d80:	200001d4 	.word	0x200001d4
 8000d84:	080004f1 	.word	0x080004f1
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	200001dc 	.word	0x200001dc
 8000d90:	08000d9d 	.word	0x08000d9d
 8000d94:	08000a25 	.word	0x08000a25
 8000d98:	2000013c 	.word	0x2000013c

08000d9c <spin_and_count_leds>:


void spin_and_count_leds(ADCxPort *ADC, GameData *game_data){
 8000d9c:	b480      	push	{r7}
 8000d9e:	b087      	sub	sp, #28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000da6:	4b26      	ldr	r3, [pc, #152]	@ (8000e40 <spin_and_count_leds+0xa4>)
 8000da8:	60fb      	str	r3, [r7, #12]
	int position = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]


	if (ADC->scale_1 == 1){
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d107      	bne.n	8000dca <spin_and_count_leds+0x2e>
		game_data->StartCounter++;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	785b      	ldrb	r3, [r3, #1]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	705a      	strb	r2, [r3, #1]
 8000dc8:	e002      	b.n	8000dd0 <spin_and_count_leds+0x34>
	}
	else {
		game_data->StartCounter = 0;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	705a      	strb	r2, [r3, #1]

		for (uint32_t i = 0; i < 0x4FFF; i++);

	}
	*/
	if (game_data->StartCounter >= game_data->StartValue){
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	785b      	ldrb	r3, [r3, #1]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d329      	bcc.n	8000e34 <spin_and_count_leds+0x98>
		for (int i = 0; i <= game_data->StartCounter; i++) {
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	e014      	b.n	8000e10 <spin_and_count_leds+0x74>
			*led_register |= 1 << (8 - i);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	b25a      	sxtb	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	f1c3 0308 	rsb	r3, r3, #8
 8000df2:	2101      	movs	r1, #1
 8000df4:	fa01 f303 	lsl.w	r3, r1, r3
 8000df8:	b25b      	sxtb	r3, r3
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	701a      	strb	r2, [r3, #0]
			game_data->GamePhaseValue = 2;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	2202      	movs	r2, #2
 8000e08:	709a      	strb	r2, [r3, #2]
		for (int i = 0; i <= game_data->StartCounter; i++) {
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	785b      	ldrb	r3, [r3, #1]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	461a      	mov	r2, r3
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	dde3      	ble.n	8000de6 <spin_and_count_leds+0x4a>
		}
		//Flash leds to Start
		for (uint32_t i = 0; i < 0xAFFF; i++);
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	e002      	b.n	8000e2a <spin_and_count_leds+0x8e>
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	3301      	adds	r3, #1
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	f64a 72fe 	movw	r2, #45054	@ 0xaffe
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d9f7      	bls.n	8000e24 <spin_and_count_leds+0x88>
	}
}
 8000e34:	bf00      	nop
 8000e36:	371c      	adds	r7, #28
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	48001015 	.word	0x48001015

08000e44 <GameTimer>:

void GameTimer(ADCxPort *ADC, GameData *game_data){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
	//Changing to Game Phase 2 settings
	if ((ADC->ADCx->CR & ADC->ADCEnable) == 0) {
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e58:	4013      	ands	r3, r2
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <GameTimer+0x1e>
		Phase2();
 8000e5e:	f7ff ff25 	bl	8000cac <Phase2>
	}
	if (game_data->Phase2Timer == game_data->Phase2TimeLimit){
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	791b      	ldrb	r3, [r3, #4]
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	795b      	ldrb	r3, [r3, #5]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d106      	bne.n	8000e80 <GameTimer+0x3c>
		game_data->GamePhaseValue = 3;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	2203      	movs	r2, #3
 8000e76:	709a      	strb	r2, [r3, #2]
		game_data->WonOrLost = 0;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	725a      	strb	r2, [r3, #9]
	}
	else {
		game_data->Phase2Timer++;
	}

}
 8000e7e:	e006      	b.n	8000e8e <GameTimer+0x4a>
		game_data->Phase2Timer++;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	791b      	ldrb	r3, [r3, #4]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	3301      	adds	r3, #1
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	711a      	strb	r2, [r3, #4]
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <FlashEndLights>:

void FlashEndLights(ADCxPort *ADC, GameData *game_data){
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	b0a8      	sub	sp, #160	@ 0xa0
 8000e9c:	af04      	add	r7, sp, #16
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000ea2:	4bad      	ldr	r3, [pc, #692]	@ (8001158 <FlashEndLights+0x2c0>)
 8000ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t led_state = 0x00;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

	uint8_t string_to_send[64] = "This is a string !\r\n";
 8000eac:	4bab      	ldr	r3, [pc, #684]	@ (800115c <FlashEndLights+0x2c4>)
 8000eae:	f107 0408 	add.w	r4, r7, #8
 8000eb2:	461d      	mov	r5, r3
 8000eb4:	6828      	ldr	r0, [r5, #0]
 8000eb6:	6869      	ldr	r1, [r5, #4]
 8000eb8:	68aa      	ldr	r2, [r5, #8]
 8000eba:	68eb      	ldr	r3, [r5, #12]
 8000ebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ebe:	6928      	ldr	r0, [r5, #16]
 8000ec0:	6020      	str	r0, [r4, #0]
 8000ec2:	7d2b      	ldrb	r3, [r5, #20]
 8000ec4:	7123      	strb	r3, [r4, #4]
 8000ec6:	f107 031d 	add.w	r3, r7, #29
 8000eca:	222b      	movs	r2, #43	@ 0x2b
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fca8 	bl	8001824 <memset>
	sprintf(string_to_send, "%hu,%hu,%hd,%hd,%hd\r\n", game_data1.GamePhaseValue , game_data1.Checkpoint1, game_data1.Checkpoint2, game_data1.Checkpoint3, game_data1.WonOrLost);
 8000ed4:	4ba2      	ldr	r3, [pc, #648]	@ (8001160 <FlashEndLights+0x2c8>)
 8000ed6:	789b      	ldrb	r3, [r3, #2]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	461c      	mov	r4, r3
 8000edc:	4ba0      	ldr	r3, [pc, #640]	@ (8001160 <FlashEndLights+0x2c8>)
 8000ede:	799b      	ldrb	r3, [r3, #6]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	461d      	mov	r5, r3
 8000ee4:	4b9e      	ldr	r3, [pc, #632]	@ (8001160 <FlashEndLights+0x2c8>)
 8000ee6:	79db      	ldrb	r3, [r3, #7]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b9c      	ldr	r3, [pc, #624]	@ (8001160 <FlashEndLights+0x2c8>)
 8000eee:	7a1b      	ldrb	r3, [r3, #8]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4b9a      	ldr	r3, [pc, #616]	@ (8001160 <FlashEndLights+0x2c8>)
 8000ef6:	7a5b      	ldrb	r3, [r3, #9]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	f107 0008 	add.w	r0, r7, #8
 8000efe:	9302      	str	r3, [sp, #8]
 8000f00:	9101      	str	r1, [sp, #4]
 8000f02:	9200      	str	r2, [sp, #0]
 8000f04:	462b      	mov	r3, r5
 8000f06:	4622      	mov	r2, r4
 8000f08:	4996      	ldr	r1, [pc, #600]	@ (8001164 <FlashEndLights+0x2cc>)
 8000f0a:	f000 fc6b 	bl	80017e4 <siprintf>
	SerialOutputString(string_to_send, &USART1_PORT);
 8000f0e:	f107 0308 	add.w	r3, r7, #8
 8000f12:	4995      	ldr	r1, [pc, #596]	@ (8001168 <FlashEndLights+0x2d0>)
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 fa94 	bl	8001442 <SerialOutputString>

	while (game_data->GamePhaseValue == 3){
 8000f1a:	e17d      	b.n	8001218 <FlashEndLights+0x380>
		//Spin Leds and stack them
		for (int j = 0; j <= 7; j ++) {
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000f22:	e05f      	b.n	8000fe4 <FlashEndLights+0x14c>
			for (int i = 0; i <= 7; i++){
 8000f24:	2300      	movs	r3, #0
 8000f26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000f2a:	e052      	b.n	8000fd2 <FlashEndLights+0x13a>
				*led_register = led_state;
 8000f2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f2e:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8000f32:	701a      	strb	r2, [r3, #0]
				*led_register |= 1 << i;
 8000f34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b25a      	sxtb	r2, r3
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f4e:	701a      	strb	r2, [r3, #0]
				if (i == 7 - j){
 8000f50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000f54:	f1c3 0307 	rsb	r3, r3, #7
 8000f58:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d11d      	bne.n	8000f9c <FlashEndLights+0x104>
					*led_register |= 1 << (7 - j);
 8000f60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	b25a      	sxtb	r2, r3
 8000f66:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000f6a:	f1c3 0307 	rsb	r3, r3, #7
 8000f6e:	2101      	movs	r1, #1
 8000f70:	fa01 f303 	lsl.w	r3, r1, r3
 8000f74:	b25b      	sxtb	r3, r3
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f7e:	701a      	strb	r2, [r3, #0]
					led_state |= 1 << (7 - j);
 8000f80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000f84:	f1c3 0307 	rsb	r3, r3, #7
 8000f88:	2201      	movs	r2, #1
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	b25a      	sxtb	r2, r3
 8000f90:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b25b      	sxtb	r3, r3
 8000f98:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				for (uint32_t wait = 0; wait < (0xAFFF/(8-j)); wait++);
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000fa2:	e004      	b.n	8000fae <FlashEndLights+0x116>
 8000fa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000fa8:	3301      	adds	r3, #1
 8000faa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000fae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000fb2:	f1c3 0308 	rsb	r3, r3, #8
 8000fb6:	f64a 72ff 	movw	r2, #45055	@ 0xafff
 8000fba:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d3ed      	bcc.n	8000fa4 <FlashEndLights+0x10c>
			for (int i = 0; i <= 7; i++){
 8000fc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000fcc:	3301      	adds	r3, #1
 8000fce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000fd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000fd6:	2b07      	cmp	r3, #7
 8000fd8:	dda8      	ble.n	8000f2c <FlashEndLights+0x94>
		for (int j = 0; j <= 7; j ++) {
 8000fda:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000fde:	3301      	adds	r3, #1
 8000fe0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000fe4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000fe8:	2b07      	cmp	r3, #7
 8000fea:	dd9b      	ble.n	8000f24 <FlashEndLights+0x8c>
			}
		}
		//Spins leds and unstacks them
		for (uint32_t wait = 0; wait < (0xFFFF/(16)); wait++);
 8000fec:	2300      	movs	r3, #0
 8000fee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000ff0:	e002      	b.n	8000ff8 <FlashEndLights+0x160>
 8000ff2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000ff8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000ffa:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d9f7      	bls.n	8000ff2 <FlashEndLights+0x15a>
		int backwards_count = 7;
 8001002:	2307      	movs	r3, #7
 8001004:	67bb      	str	r3, [r7, #120]	@ 0x78
		for (int j = 0; j <= 7; j++) {
 8001006:	2300      	movs	r3, #0
 8001008:	677b      	str	r3, [r7, #116]	@ 0x74
 800100a:	e04c      	b.n	80010a6 <FlashEndLights+0x20e>
			int led_removal_number = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	673b      	str	r3, [r7, #112]	@ 0x70
			for (int i = 7; i >= 0; i--) {
 8001010:	2307      	movs	r3, #7
 8001012:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001014:	e03e      	b.n	8001094 <FlashEndLights+0x1fc>
				*led_register = led_state;
 8001016:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001018:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 800101c:	701a      	strb	r2, [r3, #0]
				*led_register ^= 1 << (7 - backwards_count - led_removal_number);
 800101e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b25a      	sxtb	r2, r3
 8001024:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001026:	f1c3 0107 	rsb	r1, r3, #7
 800102a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800102c:	1acb      	subs	r3, r1, r3
 800102e:	2101      	movs	r1, #1
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	b25b      	sxtb	r3, r3
 8001036:	4053      	eors	r3, r2
 8001038:	b25b      	sxtb	r3, r3
 800103a:	b2da      	uxtb	r2, r3
 800103c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800103e:	701a      	strb	r2, [r3, #0]
				if (i == 7 - j){
 8001040:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001042:	f1c3 0307 	rsb	r3, r3, #7
 8001046:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001048:	429a      	cmp	r2, r3
 800104a:	d10c      	bne.n	8001066 <FlashEndLights+0x1ce>
					led_state ^= 1 << (7 - i);
 800104c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800104e:	f1c3 0307 	rsb	r3, r3, #7
 8001052:	2201      	movs	r2, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	b25a      	sxtb	r2, r3
 800105a:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 800105e:	4053      	eors	r3, r2
 8001060:	b25b      	sxtb	r3, r3
 8001062:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				led_removal_number++;
 8001066:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001068:	3301      	adds	r3, #1
 800106a:	673b      	str	r3, [r7, #112]	@ 0x70
				for (uint32_t wait = 0; wait < (0xAFFF/(8-backwards_count)); wait++);
 800106c:	2300      	movs	r3, #0
 800106e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001070:	e002      	b.n	8001078 <FlashEndLights+0x1e0>
 8001072:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001074:	3301      	adds	r3, #1
 8001076:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001078:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800107a:	f1c3 0308 	rsb	r3, r3, #8
 800107e:	f64a 72ff 	movw	r2, #45055	@ 0xafff
 8001082:	fb92 f3f3 	sdiv	r3, r2, r3
 8001086:	461a      	mov	r2, r3
 8001088:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800108a:	4293      	cmp	r3, r2
 800108c:	d3f1      	bcc.n	8001072 <FlashEndLights+0x1da>
			for (int i = 7; i >= 0; i--) {
 800108e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001090:	3b01      	subs	r3, #1
 8001092:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001094:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001096:	2b00      	cmp	r3, #0
 8001098:	dabd      	bge.n	8001016 <FlashEndLights+0x17e>
			}
			backwards_count--;
 800109a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800109c:	3b01      	subs	r3, #1
 800109e:	67bb      	str	r3, [r7, #120]	@ 0x78
		for (int j = 0; j <= 7; j++) {
 80010a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010a2:	3301      	adds	r3, #1
 80010a4:	677b      	str	r3, [r7, #116]	@ 0x74
 80010a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010a8:	2b07      	cmp	r3, #7
 80010aa:	ddaf      	ble.n	800100c <FlashEndLights+0x174>
		}

		//Spins leds
		for (int j = 0; j <= 7; j++) {
 80010ac:	2300      	movs	r3, #0
 80010ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80010b0:	e036      	b.n	8001120 <FlashEndLights+0x288>
			for (int i = 0; i <= 7; i++) {
 80010b2:	2300      	movs	r3, #0
 80010b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80010b6:	e02d      	b.n	8001114 <FlashEndLights+0x27c>
				*led_register = led_state;
 80010b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010ba:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 80010be:	701a      	strb	r2, [r3, #0]
				*led_register ^= 1 << i;
 80010c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b25a      	sxtb	r2, r3
 80010c6:	2101      	movs	r1, #1
 80010c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	4053      	eors	r3, r2
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010d8:	701a      	strb	r2, [r3, #0]
				if (i == 1 + j){
 80010da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010dc:	3301      	adds	r3, #1
 80010de:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d103      	bne.n	80010ec <FlashEndLights+0x254>
					*led_register ^= 0 << (1 + j);
 80010e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010e6:	781a      	ldrb	r2, [r3, #0]
 80010e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010ea:	701a      	strb	r2, [r3, #0]
					led_state ^= 0 << (1 + j);
				}
				for (uint32_t wait = 0; wait < (0xAFFF/(8-j)); wait++);
 80010ec:	2300      	movs	r3, #0
 80010ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80010f0:	e002      	b.n	80010f8 <FlashEndLights+0x260>
 80010f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010f4:	3301      	adds	r3, #1
 80010f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80010f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010fa:	f1c3 0308 	rsb	r3, r3, #8
 80010fe:	f64a 72ff 	movw	r2, #45055	@ 0xafff
 8001102:	fb92 f3f3 	sdiv	r3, r2, r3
 8001106:	461a      	mov	r2, r3
 8001108:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800110a:	4293      	cmp	r3, r2
 800110c:	d3f1      	bcc.n	80010f2 <FlashEndLights+0x25a>
			for (int i = 0; i <= 7; i++) {
 800110e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001110:	3301      	adds	r3, #1
 8001112:	663b      	str	r3, [r7, #96]	@ 0x60
 8001114:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001116:	2b07      	cmp	r3, #7
 8001118:	ddce      	ble.n	80010b8 <FlashEndLights+0x220>
		for (int j = 0; j <= 7; j++) {
 800111a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800111c:	3301      	adds	r3, #1
 800111e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001120:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001122:	2b07      	cmp	r3, #7
 8001124:	ddc5      	ble.n	80010b2 <FlashEndLights+0x21a>
					led_state |= 1 << (0 + j);
				}
				for (uint32_t wait = 0; wait < (0xAFFF/(8-j)); wait++);
			}
		}*/
		led_state = 0x00;
 8001126:	2300      	movs	r3, #0
 8001128:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		//This makes the leds jump one by one slow to fast
		*led_register = 0x00;
 800112c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
		for (uint32_t wait = 0; wait < (0xAFFF/(1)); wait++);
 8001132:	2300      	movs	r3, #0
 8001134:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001136:	e002      	b.n	800113e <FlashEndLights+0x2a6>
 8001138:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800113a:	3301      	adds	r3, #1
 800113c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800113e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001140:	f64a 72fe 	movw	r2, #45054	@ 0xaffe
 8001144:	4293      	cmp	r3, r2
 8001146:	d9f7      	bls.n	8001138 <FlashEndLights+0x2a0>
		backwards_count = 8;
 8001148:	2308      	movs	r3, #8
 800114a:	67bb      	str	r3, [r7, #120]	@ 0x78
		for (int j = 0; j <= 8; j++) {
 800114c:	2300      	movs	r3, #0
 800114e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001150:	e05c      	b.n	800120c <FlashEndLights+0x374>
			for (int i = 0; i <= 8; i++) {
 8001152:	2300      	movs	r3, #0
 8001154:	653b      	str	r3, [r7, #80]	@ 0x50
 8001156:	e050      	b.n	80011fa <FlashEndLights+0x362>
 8001158:	48001015 	.word	0x48001015
 800115c:	08002154 	.word	0x08002154
 8001160:	200000d0 	.word	0x200000d0
 8001164:	0800213c 	.word	0x0800213c
 8001168:	200000dc 	.word	0x200000dc
				*led_register = led_state;
 800116c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800116e:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8001172:	701a      	strb	r2, [r3, #0]
				//*led_register &= 0 << i;
				if (i == j){
 8001174:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001178:	429a      	cmp	r2, r3
 800117a:	d12a      	bne.n	80011d2 <FlashEndLights+0x33a>
					if (j == 0) {
 800117c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10d      	bne.n	800119e <FlashEndLights+0x306>
						*led_register |= 1 << (7);
 8001182:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800118a:	b2da      	uxtb	r2, r3
 800118c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800118e:	701a      	strb	r2, [r3, #0]
						led_state &= 1 << (7);
 8001190:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001194:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001198:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800119c:	e019      	b.n	80011d2 <FlashEndLights+0x33a>
					}
					else {
						*led_register |= 1 << (j-1);
 800119e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	b25a      	sxtb	r2, r3
 80011a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011a6:	3b01      	subs	r3, #1
 80011a8:	2101      	movs	r1, #1
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011b8:	701a      	strb	r2, [r3, #0]
						led_state &= 1 << (j-1);
 80011ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011bc:	3b01      	subs	r3, #1
 80011be:	2201      	movs	r2, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	b25a      	sxtb	r2, r3
 80011c6:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 80011ca:	4013      	ands	r3, r2
 80011cc:	b25b      	sxtb	r3, r3
 80011ce:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					}
				}
				for (uint32_t wait = 0; wait < (0xAFFF/(9-backwards_count)); wait++);
 80011d2:	2300      	movs	r3, #0
 80011d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80011d6:	e002      	b.n	80011de <FlashEndLights+0x346>
 80011d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011da:	3301      	adds	r3, #1
 80011dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80011de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80011e0:	f1c3 0309 	rsb	r3, r3, #9
 80011e4:	f64a 72ff 	movw	r2, #45055	@ 0xafff
 80011e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80011ec:	461a      	mov	r2, r3
 80011ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d3f1      	bcc.n	80011d8 <FlashEndLights+0x340>
			for (int i = 0; i <= 8; i++) {
 80011f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011f6:	3301      	adds	r3, #1
 80011f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80011fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	ddb5      	ble.n	800116c <FlashEndLights+0x2d4>
			}
			backwards_count--;
 8001200:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001202:	3b01      	subs	r3, #1
 8001204:	67bb      	str	r3, [r7, #120]	@ 0x78
		for (int j = 0; j <= 8; j++) {
 8001206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001208:	3301      	adds	r3, #1
 800120a:	657b      	str	r3, [r7, #84]	@ 0x54
 800120c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800120e:	2b08      	cmp	r3, #8
 8001210:	dd9f      	ble.n	8001152 <FlashEndLights+0x2ba>
			for (uint32_t wait = 0; wait < (0xFFFFF/(8-j)); wait++);
		}*/


		//Reset the leds
		led_state = 0x00;
 8001212:	2300      	movs	r3, #0
 8001214:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	while (game_data->GamePhaseValue == 3){
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	789b      	ldrb	r3, [r3, #2]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b03      	cmp	r3, #3
 8001220:	f43f ae7c 	beq.w	8000f1c <FlashEndLights+0x84>
	}
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	3790      	adds	r7, #144	@ 0x90
 800122a:	46bd      	mov	sp, r7
 800122c:	bdb0      	pop	{r4, r5, r7, pc}
 800122e:	bf00      	nop

08001230 <RestartGame>:

void RestartGame(ADCxPort *ADC, GameData *game_data){
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800123a:	4b37      	ldr	r3, [pc, #220]	@ (8001318 <RestartGame+0xe8>)
 800123c:	60bb      	str	r3, [r7, #8]
	//Flash Leds
	*led_register = 0x00;
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 0x1FFFF; i++);
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	e002      	b.n	8001250 <RestartGame+0x20>
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3301      	adds	r3, #1
 800124e:	61fb      	str	r3, [r7, #28]
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	4a32      	ldr	r2, [pc, #200]	@ (800131c <RestartGame+0xec>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d9f8      	bls.n	800124a <RestartGame+0x1a>
	*led_register = 0xFF;
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	22ff      	movs	r2, #255	@ 0xff
 800125c:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 0x1FFFF; i++);
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
 8001262:	e002      	b.n	800126a <RestartGame+0x3a>
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	3301      	adds	r3, #1
 8001268:	61bb      	str	r3, [r7, #24]
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	4a2b      	ldr	r2, [pc, #172]	@ (800131c <RestartGame+0xec>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d9f8      	bls.n	8001264 <RestartGame+0x34>
	*led_register = 0x00;
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 0x1FFFF; i++);
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	e002      	b.n	8001284 <RestartGame+0x54>
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	3301      	adds	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	4a25      	ldr	r2, [pc, #148]	@ (800131c <RestartGame+0xec>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d9f8      	bls.n	800127e <RestartGame+0x4e>
	*led_register = 0xFF;
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	22ff      	movs	r2, #255	@ 0xff
 8001290:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 0x1FFFF; i++);
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	e002      	b.n	800129e <RestartGame+0x6e>
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	3301      	adds	r3, #1
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	4a1e      	ldr	r2, [pc, #120]	@ (800131c <RestartGame+0xec>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d9f8      	bls.n	8001298 <RestartGame+0x68>
	*led_register = 0x00;
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 0x1FFFF; i++);
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	e002      	b.n	80012b8 <RestartGame+0x88>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	3301      	adds	r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4a18      	ldr	r2, [pc, #96]	@ (800131c <RestartGame+0xec>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d9f8      	bls.n	80012b2 <RestartGame+0x82>
	game_data->Checkpoint1 = 0;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	2200      	movs	r2, #0
 80012c4:	719a      	strb	r2, [r3, #6]
	game_data->Checkpoint2 = 0;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	2200      	movs	r2, #0
 80012ca:	71da      	strb	r2, [r3, #7]
	game_data->Checkpoint3 = 0;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	2200      	movs	r2, #0
 80012d0:	721a      	strb	r2, [r3, #8]
	game_data->Phase2Timer = 0;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	2200      	movs	r2, #0
 80012d6:	711a      	strb	r2, [r3, #4]
	game_data->StartCounter = 0;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	2200      	movs	r2, #0
 80012dc:	705a      	strb	r2, [r3, #1]
	game_data->GamePhaseValue = 1;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	2201      	movs	r2, #1
 80012e2:	709a      	strb	r2, [r3, #2]

	NVIC_ClearPendingIRQ(TIM2_IRQn);
 80012e4:	201c      	movs	r0, #28
 80012e6:	f7ff fa5d 	bl	80007a4 <__NVIC_ClearPendingIRQ>
	NVIC_ClearPendingIRQ(TIM4_IRQn);
 80012ea:	201e      	movs	r0, #30
 80012ec:	f7ff fa5a 	bl	80007a4 <__NVIC_ClearPendingIRQ>
	NVIC_ClearPendingIRQ(ADC1_2_IRQn);
 80012f0:	2012      	movs	r0, #18
 80012f2:	f7ff fa57 	bl	80007a4 <__NVIC_ClearPendingIRQ>
	NVIC_ClearPendingIRQ(ADC3_IRQn);
 80012f6:	202f      	movs	r0, #47	@ 0x2f
 80012f8:	f7ff fa54 	bl	80007a4 <__NVIC_ClearPendingIRQ>
	NVIC_DisableIRQ(TIM2_IRQn);
 80012fc:	201c      	movs	r0, #28
 80012fe:	f7ff fa2d 	bl	800075c <__NVIC_DisableIRQ>
	NVIC_DisableIRQ(TIM4_IRQn);
 8001302:	201e      	movs	r0, #30
 8001304:	f7ff fa2a 	bl	800075c <__NVIC_DisableIRQ>
	NVIC_DisableIRQ(ADC1_2_IRQn);
 8001308:	2012      	movs	r0, #18
 800130a:	f7ff fa27 	bl	800075c <__NVIC_DisableIRQ>
	NVIC_DisableIRQ(ADC3_IRQn);
 800130e:	202f      	movs	r0, #47	@ 0x2f
 8001310:	f7ff fa24 	bl	800075c <__NVIC_DisableIRQ>
  	NVIC_SystemReset();
 8001314:	f7ff fa8e 	bl	8000834 <__NVIC_SystemReset>
 8001318:	48001015 	.word	0x48001015
 800131c:	0001fffe 	.word	0x0001fffe

08001320 <main>:




int main(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0


	Phase1();
 8001324:	f7ff fc40 	bl	8000ba8 <Phase1>
	else{
		ContinuousReadSingleChannel(&ADC3_Port);

	}*/

	for(;;);
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <main+0x8>

0800132c <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 800132c:	b480      	push	{r7}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	635a      	str	r2, [r3, #52]	@ 0x34

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800133e:	4b33      	ldr	r3, [pc, #204]	@ (800140c <SerialInitialise+0xe0>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	4a32      	ldr	r2, [pc, #200]	@ (800140c <SerialInitialise+0xe0>)
 8001344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001348:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800134a:	4b30      	ldr	r3, [pc, #192]	@ (800140c <SerialInitialise+0xe0>)
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	4a2f      	ldr	r2, [pc, #188]	@ (800140c <SerialInitialise+0xe0>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	2b02      	cmp	r3, #2
 800135c:	d106      	bne.n	800136c <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 800135e:	4b2b      	ldr	r3, [pc, #172]	@ (800140c <SerialInitialise+0xe0>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	4a2a      	ldr	r2, [pc, #168]	@ (800140c <SerialInitialise+0xe0>)
 8001364:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001368:	6153      	str	r3, [r2, #20]
		break;
 800136a:	e000      	b.n	800136e <SerialInitialise+0x42>
	default:
		break;
 800136c:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	6a12      	ldr	r2, [r2, #32]
 8001376:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137c:	68ba      	ldr	r2, [r7, #8]
 800137e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001380:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	6959      	ldr	r1, [r3, #20]
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	430a      	orrs	r2, r1
 80013a0:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	d820      	bhi.n	80013f0 <SerialInitialise+0xc4>
 80013ae:	a201      	add	r2, pc, #4	@ (adr r2, 80013b4 <SerialInitialise+0x88>)
 80013b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b4:	080013c9 	.word	0x080013c9
 80013b8:	080013d1 	.word	0x080013d1
 80013bc:	080013d9 	.word	0x080013d9
 80013c0:	080013e1 	.word	0x080013e1
 80013c4:	080013e9 	.word	0x080013e9
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	2246      	movs	r2, #70	@ 0x46
 80013cc:	801a      	strh	r2, [r3, #0]
		break;
 80013ce:	e00f      	b.n	80013f0 <SerialInitialise+0xc4>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	2246      	movs	r2, #70	@ 0x46
 80013d4:	801a      	strh	r2, [r3, #0]
		break;
 80013d6:	e00b      	b.n	80013f0 <SerialInitialise+0xc4>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2246      	movs	r2, #70	@ 0x46
 80013dc:	801a      	strh	r2, [r3, #0]
		break;
 80013de:	e007      	b.n	80013f0 <SerialInitialise+0xc4>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	2246      	movs	r2, #70	@ 0x46
 80013e4:	801a      	strh	r2, [r3, #0]
		break;
 80013e6:	e003      	b.n	80013f0 <SerialInitialise+0xc4>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	2246      	movs	r2, #70	@ 0x46
 80013ec:	801a      	strh	r2, [r3, #0]
		break;
 80013ee:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f042 020d 	orr.w	r2, r2, #13
 80013fe:	601a      	str	r2, [r3, #0]
}
 8001400:	bf00      	nop
 8001402:	371c      	adds	r7, #28
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	40021000 	.word	0x40021000

08001410 <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 800141c:	bf00      	nop
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f8      	beq.n	800141e <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	79fa      	ldrb	r2, [r7, #7]
 8001432:	b292      	uxth	r2, r2
 8001434:	801a      	strh	r2, [r3, #0]
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8001442:	b580      	push	{r7, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 8001450:	e00b      	b.n	800146a <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	6839      	ldr	r1, [r7, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ffd9 	bl	8001410 <SerialOutputChar>
		counter++;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	3301      	adds	r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
		pt++;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3301      	adds	r3, #1
 8001468:	607b      	str	r3, [r7, #4]
	while(*pt) {
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1ef      	bne.n	8001452 <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	4798      	blx	r3
}
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800148e:	bf00      	nop
 8001490:	e7fd      	b.n	800148e <NMI_Handler+0x4>

08001492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001496:	bf00      	nop
 8001498:	e7fd      	b.n	8001496 <HardFault_Handler+0x4>

0800149a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800149e:	bf00      	nop
 80014a0:	e7fd      	b.n	800149e <MemManage_Handler+0x4>

080014a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a6:	bf00      	nop
 80014a8:	e7fd      	b.n	80014a6 <BusFault_Handler+0x4>

080014aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ae:	bf00      	nop
 80014b0:	e7fd      	b.n	80014ae <UsageFault_Handler+0x4>

080014b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e0:	f000 f96c 	bl	80017bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f0:	4a14      	ldr	r2, [pc, #80]	@ (8001544 <_sbrk+0x5c>)
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <_sbrk+0x60>)
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014fc:	4b13      	ldr	r3, [pc, #76]	@ (800154c <_sbrk+0x64>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d102      	bne.n	800150a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001504:	4b11      	ldr	r3, [pc, #68]	@ (800154c <_sbrk+0x64>)
 8001506:	4a12      	ldr	r2, [pc, #72]	@ (8001550 <_sbrk+0x68>)
 8001508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800150a:	4b10      	ldr	r3, [pc, #64]	@ (800154c <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	429a      	cmp	r2, r3
 8001516:	d207      	bcs.n	8001528 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001518:	f000 f98c 	bl	8001834 <__errno>
 800151c:	4603      	mov	r3, r0
 800151e:	220c      	movs	r2, #12
 8001520:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
 8001526:	e009      	b.n	800153c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001528:	4b08      	ldr	r3, [pc, #32]	@ (800154c <_sbrk+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800152e:	4b07      	ldr	r3, [pc, #28]	@ (800154c <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	4a05      	ldr	r2, [pc, #20]	@ (800154c <_sbrk+0x64>)
 8001538:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153a:	68fb      	ldr	r3, [r7, #12]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	2000a000 	.word	0x2000a000
 8001548:	00000400 	.word	0x00000400
 800154c:	200001e4 	.word	0x200001e4
 8001550:	20000338 	.word	0x20000338

08001554 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <SystemInit+0x20>)
 800155a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800155e:	4a05      	ldr	r2, [pc, #20]	@ (8001574 <SystemInit+0x20>)
 8001560:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001564:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_EnableIRQ>:
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	2b00      	cmp	r3, #0
 8001588:	db0b      	blt.n	80015a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	f003 021f 	and.w	r2, r3, #31
 8001590:	4907      	ldr	r1, [pc, #28]	@ (80015b0 <__NVIC_EnableIRQ+0x38>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	095b      	lsrs	r3, r3, #5
 8001598:	2001      	movs	r0, #1
 800159a:	fa00 f202 	lsl.w	r2, r0, r2
 800159e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000e100 	.word	0xe000e100

080015b4 <__NVIC_SetPriority>:
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	6039      	str	r1, [r7, #0]
 80015be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	db0a      	blt.n	80015de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	490c      	ldr	r1, [pc, #48]	@ (8001600 <__NVIC_SetPriority+0x4c>)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	0112      	lsls	r2, r2, #4
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	440b      	add	r3, r1
 80015d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80015dc:	e00a      	b.n	80015f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4908      	ldr	r1, [pc, #32]	@ (8001604 <__NVIC_SetPriority+0x50>)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	3b04      	subs	r3, #4
 80015ec:	0112      	lsls	r2, r2, #4
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	440b      	add	r3, r1
 80015f2:	761a      	strb	r2, [r3, #24]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000e100 	.word	0xe000e100
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <TimerInitialise>:
		TIM_DIER_UIE, 		// enable update interrupt
		0x00,
};

// initialise a hardware timer
void TimerInitialise(HardwareTimer *hardware_timer, uint32_t delay, void (*completion_function)()) {
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]

    // Enable clock
    RCC->APB1ENR |= hardware_timer->MaskAPB1ENR;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	695a      	ldr	r2, [r3, #20]
 8001618:	4b1c      	ldr	r3, [pc, #112]	@ (800168c <TimerInitialise+0x84>)
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	491b      	ldr	r1, [pc, #108]	@ (800168c <TimerInitialise+0x84>)
 800161e:	4313      	orrs	r3, r2
 8001620:	61cb      	str	r3, [r1, #28]

    // set prescaler
    hardware_timer->PrescaleValue = 7999; // bring clock speed down to 1kHz
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001628:	809a      	strh	r2, [r3, #4]
    hardware_timer->TIMx->PSC = hardware_timer->PrescaleValue;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	889b      	ldrh	r3, [r3, #4]
 800162e:	b29a      	uxth	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	629a      	str	r2, [r3, #40]	@ 0x28

    // set auto reload register to delay time
    hardware_timer->ARRValue = delay;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	68ba      	ldr	r2, [r7, #8]
 800163a:	609a      	str	r2, [r3, #8]
    hardware_timer->TIMx->ARR = hardware_timer->ARRValue;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	6892      	ldr	r2, [r2, #8]
 8001644:	62da      	str	r2, [r3, #44]	@ 0x2c

    // set CR1 mask
    hardware_timer->TIMx->CR1 |= hardware_timer->MaskCR1;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	69d9      	ldr	r1, [r3, #28]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	601a      	str	r2, [r3, #0]

    // set DIER mask
    hardware_timer->TIMx->DIER |= hardware_timer->MaskDIER;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6a19      	ldr	r1, [r3, #32]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	60da      	str	r2, [r3, #12]

    // set the timer completion function
    hardware_timer->timer_completion_function = completion_function;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	625a      	str	r2, [r3, #36]	@ 0x24

    // start TIMx
    hardware_timer->TIMx->CR1 |= TIM_CR1_CEN;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0201 	orr.w	r2, r2, #1
 800167e:	601a      	str	r2, [r3, #0]
}
 8001680:	bf00      	nop
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	40021000 	.word	0x40021000

08001690 <TIM2_IRQHandler>:


// tim2 overflow handler
void TIM2_IRQHandler(void) {
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 8001694:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d01e      	beq.n	80016e0 <TIM2_IRQHandler+0x50>
        TIM2->SR &= ~TIM_SR_UIF; // Clear the interrupt flag
 80016a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016ac:	f023 0301 	bic.w	r3, r3, #1
 80016b0:	6113      	str	r3, [r2, #16]

        if (TIM2_init.oneShotMode) {
 80016b2:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <TIM2_IRQHandler+0x54>)
 80016b4:	7b1b      	ldrb	r3, [r3, #12]
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00a      	beq.n	80016d2 <TIM2_IRQHandler+0x42>
            TIM2->CR1 &= ~TIM_CR1_CEN; // Stop the timer if in one-shot mode
 80016bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016c6:	f023 0301 	bic.w	r3, r3, #1
 80016ca:	6013      	str	r3, [r2, #0]

            TIM2_init.oneShotMode = 0; // turn off the oneshot mode
 80016cc:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <TIM2_IRQHandler+0x54>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	731a      	strb	r2, [r3, #12]
        }

        if (TIM2_init.timer_completion_function != NULL) {
 80016d2:	4b04      	ldr	r3, [pc, #16]	@ (80016e4 <TIM2_IRQHandler+0x54>)
 80016d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d002      	beq.n	80016e0 <TIM2_IRQHandler+0x50>
            TIM2_init.timer_completion_function();
 80016da:	4b02      	ldr	r3, [pc, #8]	@ (80016e4 <TIM2_IRQHandler+0x54>)
 80016dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016de:	4798      	blx	r3
        }
    }
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000114 	.word	0x20000114

080016e8 <TIM4_IRQHandler>:

// tim4 overflow handler
void TIM4_IRQHandler(void) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
    if (TIM4->SR & TIM_SR_UIF) {
 80016ec:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <TIM4_IRQHandler+0x4c>)
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d01a      	beq.n	800172e <TIM4_IRQHandler+0x46>
        TIM4->SR &= ~TIM_SR_UIF; // Clear the interrupt flag
 80016f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001734 <TIM4_IRQHandler+0x4c>)
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001734 <TIM4_IRQHandler+0x4c>)
 80016fe:	f023 0301 	bic.w	r3, r3, #1
 8001702:	6113      	str	r3, [r2, #16]

        if (TIM4_init.oneShotMode) {
 8001704:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <TIM4_IRQHandler+0x50>)
 8001706:	7b1b      	ldrb	r3, [r3, #12]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d008      	beq.n	8001720 <TIM4_IRQHandler+0x38>

        	TIM4->CR1 &= ~TIM_CR1_CEN; // Stop the timer if in one-shot mode
 800170e:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <TIM4_IRQHandler+0x4c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a08      	ldr	r2, [pc, #32]	@ (8001734 <TIM4_IRQHandler+0x4c>)
 8001714:	f023 0301 	bic.w	r3, r3, #1
 8001718:	6013      	str	r3, [r2, #0]

            TIM4_init.oneShotMode = 0; // turn off the oneshot mode
 800171a:	4b07      	ldr	r3, [pc, #28]	@ (8001738 <TIM4_IRQHandler+0x50>)
 800171c:	2200      	movs	r2, #0
 800171e:	731a      	strb	r2, [r3, #12]
        }

        if (TIM4_init.timer_completion_function != NULL) {
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <TIM4_IRQHandler+0x50>)
 8001722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001724:	2b00      	cmp	r3, #0
 8001726:	d002      	beq.n	800172e <TIM4_IRQHandler+0x46>
            TIM4_init.timer_completion_function();
 8001728:	4b03      	ldr	r3, [pc, #12]	@ (8001738 <TIM4_IRQHandler+0x50>)
 800172a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172c:	4798      	blx	r3
        }
    }
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40000800 	.word	0x40000800
 8001738:	2000013c 	.word	0x2000013c

0800173c <enable_timer_interrupt>:


// enable the timer overflow interrupt
void enable_timer_interrupt() {
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001740:	b672      	cpsid	i
}
 8001742:	bf00      	nop
    // disable interrupts
	__disable_irq();

	NVIC_SetPriority(TIM2_IRQn, 3); // Set priority
 8001744:	2103      	movs	r1, #3
 8001746:	201c      	movs	r0, #28
 8001748:	f7ff ff34 	bl	80015b4 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn); 		// Enable TIM2 IRQ
 800174c:	201c      	movs	r0, #28
 800174e:	f7ff ff13 	bl	8001578 <__NVIC_EnableIRQ>

	NVIC_SetPriority(TIM4_IRQn, 2); // Set priority
 8001752:	2102      	movs	r1, #2
 8001754:	201e      	movs	r0, #30
 8001756:	f7ff ff2d 	bl	80015b4 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM4_IRQn); 		// Enable TIM4 IRQ
 800175a:	201e      	movs	r0, #30
 800175c:	f7ff ff0c 	bl	8001578 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001760:	b662      	cpsie	i
}
 8001762:	bf00      	nop

    // re-enable interrupts
    __enable_irq();
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001768:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017a0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800176c:	f7ff fef2 	bl	8001554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001770:	480c      	ldr	r0, [pc, #48]	@ (80017a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001772:	490d      	ldr	r1, [pc, #52]	@ (80017a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001774:	4a0d      	ldr	r2, [pc, #52]	@ (80017ac <LoopForever+0xe>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001778:	e002      	b.n	8001780 <LoopCopyDataInit>

0800177a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800177c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177e:	3304      	adds	r3, #4

08001780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001784:	d3f9      	bcc.n	800177a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001786:	4a0a      	ldr	r2, [pc, #40]	@ (80017b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001788:	4c0a      	ldr	r4, [pc, #40]	@ (80017b4 <LoopForever+0x16>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800178c:	e001      	b.n	8001792 <LoopFillZerobss>

0800178e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001790:	3204      	adds	r2, #4

08001792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001794:	d3fb      	bcc.n	800178e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001796:	f000 f853 	bl	8001840 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800179a:	f7ff fdc1 	bl	8001320 <main>

0800179e <LoopForever>:

LoopForever:
    b LoopForever
 800179e:	e7fe      	b.n	800179e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017a0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80017a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a8:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 80017ac:	080021ac 	.word	0x080021ac
  ldr r2, =_sbss
 80017b0:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 80017b4:	20000334 	.word	0x20000334

080017b8 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017b8:	e7fe      	b.n	80017b8 <ADC4_IRQHandler>
	...

080017bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_IncTick+0x20>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <HAL_IncTick+0x24>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a04      	ldr	r2, [pc, #16]	@ (80017e0 <HAL_IncTick+0x24>)
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000164 	.word	0x20000164
 80017e0:	200001e8 	.word	0x200001e8

080017e4 <siprintf>:
 80017e4:	b40e      	push	{r1, r2, r3}
 80017e6:	b500      	push	{lr}
 80017e8:	b09c      	sub	sp, #112	@ 0x70
 80017ea:	ab1d      	add	r3, sp, #116	@ 0x74
 80017ec:	9002      	str	r0, [sp, #8]
 80017ee:	9006      	str	r0, [sp, #24]
 80017f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80017f4:	4809      	ldr	r0, [pc, #36]	@ (800181c <siprintf+0x38>)
 80017f6:	9107      	str	r1, [sp, #28]
 80017f8:	9104      	str	r1, [sp, #16]
 80017fa:	4909      	ldr	r1, [pc, #36]	@ (8001820 <siprintf+0x3c>)
 80017fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8001800:	9105      	str	r1, [sp, #20]
 8001802:	6800      	ldr	r0, [r0, #0]
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	a902      	add	r1, sp, #8
 8001808:	f000 f9a2 	bl	8001b50 <_svfiprintf_r>
 800180c:	9b02      	ldr	r3, [sp, #8]
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
 8001812:	b01c      	add	sp, #112	@ 0x70
 8001814:	f85d eb04 	ldr.w	lr, [sp], #4
 8001818:	b003      	add	sp, #12
 800181a:	4770      	bx	lr
 800181c:	20000168 	.word	0x20000168
 8001820:	ffff0208 	.word	0xffff0208

08001824 <memset>:
 8001824:	4402      	add	r2, r0
 8001826:	4603      	mov	r3, r0
 8001828:	4293      	cmp	r3, r2
 800182a:	d100      	bne.n	800182e <memset+0xa>
 800182c:	4770      	bx	lr
 800182e:	f803 1b01 	strb.w	r1, [r3], #1
 8001832:	e7f9      	b.n	8001828 <memset+0x4>

08001834 <__errno>:
 8001834:	4b01      	ldr	r3, [pc, #4]	@ (800183c <__errno+0x8>)
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000168 	.word	0x20000168

08001840 <__libc_init_array>:
 8001840:	b570      	push	{r4, r5, r6, lr}
 8001842:	4d0d      	ldr	r5, [pc, #52]	@ (8001878 <__libc_init_array+0x38>)
 8001844:	4c0d      	ldr	r4, [pc, #52]	@ (800187c <__libc_init_array+0x3c>)
 8001846:	1b64      	subs	r4, r4, r5
 8001848:	10a4      	asrs	r4, r4, #2
 800184a:	2600      	movs	r6, #0
 800184c:	42a6      	cmp	r6, r4
 800184e:	d109      	bne.n	8001864 <__libc_init_array+0x24>
 8001850:	4d0b      	ldr	r5, [pc, #44]	@ (8001880 <__libc_init_array+0x40>)
 8001852:	4c0c      	ldr	r4, [pc, #48]	@ (8001884 <__libc_init_array+0x44>)
 8001854:	f000 fc66 	bl	8002124 <_init>
 8001858:	1b64      	subs	r4, r4, r5
 800185a:	10a4      	asrs	r4, r4, #2
 800185c:	2600      	movs	r6, #0
 800185e:	42a6      	cmp	r6, r4
 8001860:	d105      	bne.n	800186e <__libc_init_array+0x2e>
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	f855 3b04 	ldr.w	r3, [r5], #4
 8001868:	4798      	blx	r3
 800186a:	3601      	adds	r6, #1
 800186c:	e7ee      	b.n	800184c <__libc_init_array+0xc>
 800186e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001872:	4798      	blx	r3
 8001874:	3601      	adds	r6, #1
 8001876:	e7f2      	b.n	800185e <__libc_init_array+0x1e>
 8001878:	080021a4 	.word	0x080021a4
 800187c:	080021a4 	.word	0x080021a4
 8001880:	080021a4 	.word	0x080021a4
 8001884:	080021a8 	.word	0x080021a8

08001888 <__retarget_lock_acquire_recursive>:
 8001888:	4770      	bx	lr

0800188a <__retarget_lock_release_recursive>:
 800188a:	4770      	bx	lr

0800188c <memcpy>:
 800188c:	440a      	add	r2, r1
 800188e:	4291      	cmp	r1, r2
 8001890:	f100 33ff 	add.w	r3, r0, #4294967295
 8001894:	d100      	bne.n	8001898 <memcpy+0xc>
 8001896:	4770      	bx	lr
 8001898:	b510      	push	{r4, lr}
 800189a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800189e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80018a2:	4291      	cmp	r1, r2
 80018a4:	d1f9      	bne.n	800189a <memcpy+0xe>
 80018a6:	bd10      	pop	{r4, pc}

080018a8 <_free_r>:
 80018a8:	b538      	push	{r3, r4, r5, lr}
 80018aa:	4605      	mov	r5, r0
 80018ac:	2900      	cmp	r1, #0
 80018ae:	d041      	beq.n	8001934 <_free_r+0x8c>
 80018b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80018b4:	1f0c      	subs	r4, r1, #4
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	bfb8      	it	lt
 80018ba:	18e4      	addlt	r4, r4, r3
 80018bc:	f000 f8e0 	bl	8001a80 <__malloc_lock>
 80018c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001938 <_free_r+0x90>)
 80018c2:	6813      	ldr	r3, [r2, #0]
 80018c4:	b933      	cbnz	r3, 80018d4 <_free_r+0x2c>
 80018c6:	6063      	str	r3, [r4, #4]
 80018c8:	6014      	str	r4, [r2, #0]
 80018ca:	4628      	mov	r0, r5
 80018cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018d0:	f000 b8dc 	b.w	8001a8c <__malloc_unlock>
 80018d4:	42a3      	cmp	r3, r4
 80018d6:	d908      	bls.n	80018ea <_free_r+0x42>
 80018d8:	6820      	ldr	r0, [r4, #0]
 80018da:	1821      	adds	r1, r4, r0
 80018dc:	428b      	cmp	r3, r1
 80018de:	bf01      	itttt	eq
 80018e0:	6819      	ldreq	r1, [r3, #0]
 80018e2:	685b      	ldreq	r3, [r3, #4]
 80018e4:	1809      	addeq	r1, r1, r0
 80018e6:	6021      	streq	r1, [r4, #0]
 80018e8:	e7ed      	b.n	80018c6 <_free_r+0x1e>
 80018ea:	461a      	mov	r2, r3
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	b10b      	cbz	r3, 80018f4 <_free_r+0x4c>
 80018f0:	42a3      	cmp	r3, r4
 80018f2:	d9fa      	bls.n	80018ea <_free_r+0x42>
 80018f4:	6811      	ldr	r1, [r2, #0]
 80018f6:	1850      	adds	r0, r2, r1
 80018f8:	42a0      	cmp	r0, r4
 80018fa:	d10b      	bne.n	8001914 <_free_r+0x6c>
 80018fc:	6820      	ldr	r0, [r4, #0]
 80018fe:	4401      	add	r1, r0
 8001900:	1850      	adds	r0, r2, r1
 8001902:	4283      	cmp	r3, r0
 8001904:	6011      	str	r1, [r2, #0]
 8001906:	d1e0      	bne.n	80018ca <_free_r+0x22>
 8001908:	6818      	ldr	r0, [r3, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	6053      	str	r3, [r2, #4]
 800190e:	4408      	add	r0, r1
 8001910:	6010      	str	r0, [r2, #0]
 8001912:	e7da      	b.n	80018ca <_free_r+0x22>
 8001914:	d902      	bls.n	800191c <_free_r+0x74>
 8001916:	230c      	movs	r3, #12
 8001918:	602b      	str	r3, [r5, #0]
 800191a:	e7d6      	b.n	80018ca <_free_r+0x22>
 800191c:	6820      	ldr	r0, [r4, #0]
 800191e:	1821      	adds	r1, r4, r0
 8001920:	428b      	cmp	r3, r1
 8001922:	bf04      	itt	eq
 8001924:	6819      	ldreq	r1, [r3, #0]
 8001926:	685b      	ldreq	r3, [r3, #4]
 8001928:	6063      	str	r3, [r4, #4]
 800192a:	bf04      	itt	eq
 800192c:	1809      	addeq	r1, r1, r0
 800192e:	6021      	streq	r1, [r4, #0]
 8001930:	6054      	str	r4, [r2, #4]
 8001932:	e7ca      	b.n	80018ca <_free_r+0x22>
 8001934:	bd38      	pop	{r3, r4, r5, pc}
 8001936:	bf00      	nop
 8001938:	20000330 	.word	0x20000330

0800193c <sbrk_aligned>:
 800193c:	b570      	push	{r4, r5, r6, lr}
 800193e:	4e0f      	ldr	r6, [pc, #60]	@ (800197c <sbrk_aligned+0x40>)
 8001940:	460c      	mov	r4, r1
 8001942:	6831      	ldr	r1, [r6, #0]
 8001944:	4605      	mov	r5, r0
 8001946:	b911      	cbnz	r1, 800194e <sbrk_aligned+0x12>
 8001948:	f000 fba6 	bl	8002098 <_sbrk_r>
 800194c:	6030      	str	r0, [r6, #0]
 800194e:	4621      	mov	r1, r4
 8001950:	4628      	mov	r0, r5
 8001952:	f000 fba1 	bl	8002098 <_sbrk_r>
 8001956:	1c43      	adds	r3, r0, #1
 8001958:	d103      	bne.n	8001962 <sbrk_aligned+0x26>
 800195a:	f04f 34ff 	mov.w	r4, #4294967295
 800195e:	4620      	mov	r0, r4
 8001960:	bd70      	pop	{r4, r5, r6, pc}
 8001962:	1cc4      	adds	r4, r0, #3
 8001964:	f024 0403 	bic.w	r4, r4, #3
 8001968:	42a0      	cmp	r0, r4
 800196a:	d0f8      	beq.n	800195e <sbrk_aligned+0x22>
 800196c:	1a21      	subs	r1, r4, r0
 800196e:	4628      	mov	r0, r5
 8001970:	f000 fb92 	bl	8002098 <_sbrk_r>
 8001974:	3001      	adds	r0, #1
 8001976:	d1f2      	bne.n	800195e <sbrk_aligned+0x22>
 8001978:	e7ef      	b.n	800195a <sbrk_aligned+0x1e>
 800197a:	bf00      	nop
 800197c:	2000032c 	.word	0x2000032c

08001980 <_malloc_r>:
 8001980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001984:	1ccd      	adds	r5, r1, #3
 8001986:	f025 0503 	bic.w	r5, r5, #3
 800198a:	3508      	adds	r5, #8
 800198c:	2d0c      	cmp	r5, #12
 800198e:	bf38      	it	cc
 8001990:	250c      	movcc	r5, #12
 8001992:	2d00      	cmp	r5, #0
 8001994:	4606      	mov	r6, r0
 8001996:	db01      	blt.n	800199c <_malloc_r+0x1c>
 8001998:	42a9      	cmp	r1, r5
 800199a:	d904      	bls.n	80019a6 <_malloc_r+0x26>
 800199c:	230c      	movs	r3, #12
 800199e:	6033      	str	r3, [r6, #0]
 80019a0:	2000      	movs	r0, #0
 80019a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001a7c <_malloc_r+0xfc>
 80019aa:	f000 f869 	bl	8001a80 <__malloc_lock>
 80019ae:	f8d8 3000 	ldr.w	r3, [r8]
 80019b2:	461c      	mov	r4, r3
 80019b4:	bb44      	cbnz	r4, 8001a08 <_malloc_r+0x88>
 80019b6:	4629      	mov	r1, r5
 80019b8:	4630      	mov	r0, r6
 80019ba:	f7ff ffbf 	bl	800193c <sbrk_aligned>
 80019be:	1c43      	adds	r3, r0, #1
 80019c0:	4604      	mov	r4, r0
 80019c2:	d158      	bne.n	8001a76 <_malloc_r+0xf6>
 80019c4:	f8d8 4000 	ldr.w	r4, [r8]
 80019c8:	4627      	mov	r7, r4
 80019ca:	2f00      	cmp	r7, #0
 80019cc:	d143      	bne.n	8001a56 <_malloc_r+0xd6>
 80019ce:	2c00      	cmp	r4, #0
 80019d0:	d04b      	beq.n	8001a6a <_malloc_r+0xea>
 80019d2:	6823      	ldr	r3, [r4, #0]
 80019d4:	4639      	mov	r1, r7
 80019d6:	4630      	mov	r0, r6
 80019d8:	eb04 0903 	add.w	r9, r4, r3
 80019dc:	f000 fb5c 	bl	8002098 <_sbrk_r>
 80019e0:	4581      	cmp	r9, r0
 80019e2:	d142      	bne.n	8001a6a <_malloc_r+0xea>
 80019e4:	6821      	ldr	r1, [r4, #0]
 80019e6:	1a6d      	subs	r5, r5, r1
 80019e8:	4629      	mov	r1, r5
 80019ea:	4630      	mov	r0, r6
 80019ec:	f7ff ffa6 	bl	800193c <sbrk_aligned>
 80019f0:	3001      	adds	r0, #1
 80019f2:	d03a      	beq.n	8001a6a <_malloc_r+0xea>
 80019f4:	6823      	ldr	r3, [r4, #0]
 80019f6:	442b      	add	r3, r5
 80019f8:	6023      	str	r3, [r4, #0]
 80019fa:	f8d8 3000 	ldr.w	r3, [r8]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	bb62      	cbnz	r2, 8001a5c <_malloc_r+0xdc>
 8001a02:	f8c8 7000 	str.w	r7, [r8]
 8001a06:	e00f      	b.n	8001a28 <_malloc_r+0xa8>
 8001a08:	6822      	ldr	r2, [r4, #0]
 8001a0a:	1b52      	subs	r2, r2, r5
 8001a0c:	d420      	bmi.n	8001a50 <_malloc_r+0xd0>
 8001a0e:	2a0b      	cmp	r2, #11
 8001a10:	d917      	bls.n	8001a42 <_malloc_r+0xc2>
 8001a12:	1961      	adds	r1, r4, r5
 8001a14:	42a3      	cmp	r3, r4
 8001a16:	6025      	str	r5, [r4, #0]
 8001a18:	bf18      	it	ne
 8001a1a:	6059      	strne	r1, [r3, #4]
 8001a1c:	6863      	ldr	r3, [r4, #4]
 8001a1e:	bf08      	it	eq
 8001a20:	f8c8 1000 	streq.w	r1, [r8]
 8001a24:	5162      	str	r2, [r4, r5]
 8001a26:	604b      	str	r3, [r1, #4]
 8001a28:	4630      	mov	r0, r6
 8001a2a:	f000 f82f 	bl	8001a8c <__malloc_unlock>
 8001a2e:	f104 000b 	add.w	r0, r4, #11
 8001a32:	1d23      	adds	r3, r4, #4
 8001a34:	f020 0007 	bic.w	r0, r0, #7
 8001a38:	1ac2      	subs	r2, r0, r3
 8001a3a:	bf1c      	itt	ne
 8001a3c:	1a1b      	subne	r3, r3, r0
 8001a3e:	50a3      	strne	r3, [r4, r2]
 8001a40:	e7af      	b.n	80019a2 <_malloc_r+0x22>
 8001a42:	6862      	ldr	r2, [r4, #4]
 8001a44:	42a3      	cmp	r3, r4
 8001a46:	bf0c      	ite	eq
 8001a48:	f8c8 2000 	streq.w	r2, [r8]
 8001a4c:	605a      	strne	r2, [r3, #4]
 8001a4e:	e7eb      	b.n	8001a28 <_malloc_r+0xa8>
 8001a50:	4623      	mov	r3, r4
 8001a52:	6864      	ldr	r4, [r4, #4]
 8001a54:	e7ae      	b.n	80019b4 <_malloc_r+0x34>
 8001a56:	463c      	mov	r4, r7
 8001a58:	687f      	ldr	r7, [r7, #4]
 8001a5a:	e7b6      	b.n	80019ca <_malloc_r+0x4a>
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	42a3      	cmp	r3, r4
 8001a62:	d1fb      	bne.n	8001a5c <_malloc_r+0xdc>
 8001a64:	2300      	movs	r3, #0
 8001a66:	6053      	str	r3, [r2, #4]
 8001a68:	e7de      	b.n	8001a28 <_malloc_r+0xa8>
 8001a6a:	230c      	movs	r3, #12
 8001a6c:	6033      	str	r3, [r6, #0]
 8001a6e:	4630      	mov	r0, r6
 8001a70:	f000 f80c 	bl	8001a8c <__malloc_unlock>
 8001a74:	e794      	b.n	80019a0 <_malloc_r+0x20>
 8001a76:	6005      	str	r5, [r0, #0]
 8001a78:	e7d6      	b.n	8001a28 <_malloc_r+0xa8>
 8001a7a:	bf00      	nop
 8001a7c:	20000330 	.word	0x20000330

08001a80 <__malloc_lock>:
 8001a80:	4801      	ldr	r0, [pc, #4]	@ (8001a88 <__malloc_lock+0x8>)
 8001a82:	f7ff bf01 	b.w	8001888 <__retarget_lock_acquire_recursive>
 8001a86:	bf00      	nop
 8001a88:	20000328 	.word	0x20000328

08001a8c <__malloc_unlock>:
 8001a8c:	4801      	ldr	r0, [pc, #4]	@ (8001a94 <__malloc_unlock+0x8>)
 8001a8e:	f7ff befc 	b.w	800188a <__retarget_lock_release_recursive>
 8001a92:	bf00      	nop
 8001a94:	20000328 	.word	0x20000328

08001a98 <__ssputs_r>:
 8001a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a9c:	688e      	ldr	r6, [r1, #8]
 8001a9e:	461f      	mov	r7, r3
 8001aa0:	42be      	cmp	r6, r7
 8001aa2:	680b      	ldr	r3, [r1, #0]
 8001aa4:	4682      	mov	sl, r0
 8001aa6:	460c      	mov	r4, r1
 8001aa8:	4690      	mov	r8, r2
 8001aaa:	d82d      	bhi.n	8001b08 <__ssputs_r+0x70>
 8001aac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001ab0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001ab4:	d026      	beq.n	8001b04 <__ssputs_r+0x6c>
 8001ab6:	6965      	ldr	r5, [r4, #20]
 8001ab8:	6909      	ldr	r1, [r1, #16]
 8001aba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001abe:	eba3 0901 	sub.w	r9, r3, r1
 8001ac2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001ac6:	1c7b      	adds	r3, r7, #1
 8001ac8:	444b      	add	r3, r9
 8001aca:	106d      	asrs	r5, r5, #1
 8001acc:	429d      	cmp	r5, r3
 8001ace:	bf38      	it	cc
 8001ad0:	461d      	movcc	r5, r3
 8001ad2:	0553      	lsls	r3, r2, #21
 8001ad4:	d527      	bpl.n	8001b26 <__ssputs_r+0x8e>
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	f7ff ff52 	bl	8001980 <_malloc_r>
 8001adc:	4606      	mov	r6, r0
 8001ade:	b360      	cbz	r0, 8001b3a <__ssputs_r+0xa2>
 8001ae0:	6921      	ldr	r1, [r4, #16]
 8001ae2:	464a      	mov	r2, r9
 8001ae4:	f7ff fed2 	bl	800188c <memcpy>
 8001ae8:	89a3      	ldrh	r3, [r4, #12]
 8001aea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001af2:	81a3      	strh	r3, [r4, #12]
 8001af4:	6126      	str	r6, [r4, #16]
 8001af6:	6165      	str	r5, [r4, #20]
 8001af8:	444e      	add	r6, r9
 8001afa:	eba5 0509 	sub.w	r5, r5, r9
 8001afe:	6026      	str	r6, [r4, #0]
 8001b00:	60a5      	str	r5, [r4, #8]
 8001b02:	463e      	mov	r6, r7
 8001b04:	42be      	cmp	r6, r7
 8001b06:	d900      	bls.n	8001b0a <__ssputs_r+0x72>
 8001b08:	463e      	mov	r6, r7
 8001b0a:	6820      	ldr	r0, [r4, #0]
 8001b0c:	4632      	mov	r2, r6
 8001b0e:	4641      	mov	r1, r8
 8001b10:	f000 faa8 	bl	8002064 <memmove>
 8001b14:	68a3      	ldr	r3, [r4, #8]
 8001b16:	1b9b      	subs	r3, r3, r6
 8001b18:	60a3      	str	r3, [r4, #8]
 8001b1a:	6823      	ldr	r3, [r4, #0]
 8001b1c:	4433      	add	r3, r6
 8001b1e:	6023      	str	r3, [r4, #0]
 8001b20:	2000      	movs	r0, #0
 8001b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b26:	462a      	mov	r2, r5
 8001b28:	f000 fac6 	bl	80020b8 <_realloc_r>
 8001b2c:	4606      	mov	r6, r0
 8001b2e:	2800      	cmp	r0, #0
 8001b30:	d1e0      	bne.n	8001af4 <__ssputs_r+0x5c>
 8001b32:	6921      	ldr	r1, [r4, #16]
 8001b34:	4650      	mov	r0, sl
 8001b36:	f7ff feb7 	bl	80018a8 <_free_r>
 8001b3a:	230c      	movs	r3, #12
 8001b3c:	f8ca 3000 	str.w	r3, [sl]
 8001b40:	89a3      	ldrh	r3, [r4, #12]
 8001b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b46:	81a3      	strh	r3, [r4, #12]
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4c:	e7e9      	b.n	8001b22 <__ssputs_r+0x8a>
	...

08001b50 <_svfiprintf_r>:
 8001b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b54:	4698      	mov	r8, r3
 8001b56:	898b      	ldrh	r3, [r1, #12]
 8001b58:	061b      	lsls	r3, r3, #24
 8001b5a:	b09d      	sub	sp, #116	@ 0x74
 8001b5c:	4607      	mov	r7, r0
 8001b5e:	460d      	mov	r5, r1
 8001b60:	4614      	mov	r4, r2
 8001b62:	d510      	bpl.n	8001b86 <_svfiprintf_r+0x36>
 8001b64:	690b      	ldr	r3, [r1, #16]
 8001b66:	b973      	cbnz	r3, 8001b86 <_svfiprintf_r+0x36>
 8001b68:	2140      	movs	r1, #64	@ 0x40
 8001b6a:	f7ff ff09 	bl	8001980 <_malloc_r>
 8001b6e:	6028      	str	r0, [r5, #0]
 8001b70:	6128      	str	r0, [r5, #16]
 8001b72:	b930      	cbnz	r0, 8001b82 <_svfiprintf_r+0x32>
 8001b74:	230c      	movs	r3, #12
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295
 8001b7c:	b01d      	add	sp, #116	@ 0x74
 8001b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b82:	2340      	movs	r3, #64	@ 0x40
 8001b84:	616b      	str	r3, [r5, #20]
 8001b86:	2300      	movs	r3, #0
 8001b88:	9309      	str	r3, [sp, #36]	@ 0x24
 8001b8a:	2320      	movs	r3, #32
 8001b8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001b90:	f8cd 800c 	str.w	r8, [sp, #12]
 8001b94:	2330      	movs	r3, #48	@ 0x30
 8001b96:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001d34 <_svfiprintf_r+0x1e4>
 8001b9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001b9e:	f04f 0901 	mov.w	r9, #1
 8001ba2:	4623      	mov	r3, r4
 8001ba4:	469a      	mov	sl, r3
 8001ba6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001baa:	b10a      	cbz	r2, 8001bb0 <_svfiprintf_r+0x60>
 8001bac:	2a25      	cmp	r2, #37	@ 0x25
 8001bae:	d1f9      	bne.n	8001ba4 <_svfiprintf_r+0x54>
 8001bb0:	ebba 0b04 	subs.w	fp, sl, r4
 8001bb4:	d00b      	beq.n	8001bce <_svfiprintf_r+0x7e>
 8001bb6:	465b      	mov	r3, fp
 8001bb8:	4622      	mov	r2, r4
 8001bba:	4629      	mov	r1, r5
 8001bbc:	4638      	mov	r0, r7
 8001bbe:	f7ff ff6b 	bl	8001a98 <__ssputs_r>
 8001bc2:	3001      	adds	r0, #1
 8001bc4:	f000 80a7 	beq.w	8001d16 <_svfiprintf_r+0x1c6>
 8001bc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001bca:	445a      	add	r2, fp
 8001bcc:	9209      	str	r2, [sp, #36]	@ 0x24
 8001bce:	f89a 3000 	ldrb.w	r3, [sl]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 809f 	beq.w	8001d16 <_svfiprintf_r+0x1c6>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f04f 32ff 	mov.w	r2, #4294967295
 8001bde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001be2:	f10a 0a01 	add.w	sl, sl, #1
 8001be6:	9304      	str	r3, [sp, #16]
 8001be8:	9307      	str	r3, [sp, #28]
 8001bea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001bee:	931a      	str	r3, [sp, #104]	@ 0x68
 8001bf0:	4654      	mov	r4, sl
 8001bf2:	2205      	movs	r2, #5
 8001bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bf8:	484e      	ldr	r0, [pc, #312]	@ (8001d34 <_svfiprintf_r+0x1e4>)
 8001bfa:	f7fe fae9 	bl	80001d0 <memchr>
 8001bfe:	9a04      	ldr	r2, [sp, #16]
 8001c00:	b9d8      	cbnz	r0, 8001c3a <_svfiprintf_r+0xea>
 8001c02:	06d0      	lsls	r0, r2, #27
 8001c04:	bf44      	itt	mi
 8001c06:	2320      	movmi	r3, #32
 8001c08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001c0c:	0711      	lsls	r1, r2, #28
 8001c0e:	bf44      	itt	mi
 8001c10:	232b      	movmi	r3, #43	@ 0x2b
 8001c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001c16:	f89a 3000 	ldrb.w	r3, [sl]
 8001c1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c1c:	d015      	beq.n	8001c4a <_svfiprintf_r+0xfa>
 8001c1e:	9a07      	ldr	r2, [sp, #28]
 8001c20:	4654      	mov	r4, sl
 8001c22:	2000      	movs	r0, #0
 8001c24:	f04f 0c0a 	mov.w	ip, #10
 8001c28:	4621      	mov	r1, r4
 8001c2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c2e:	3b30      	subs	r3, #48	@ 0x30
 8001c30:	2b09      	cmp	r3, #9
 8001c32:	d94b      	bls.n	8001ccc <_svfiprintf_r+0x17c>
 8001c34:	b1b0      	cbz	r0, 8001c64 <_svfiprintf_r+0x114>
 8001c36:	9207      	str	r2, [sp, #28]
 8001c38:	e014      	b.n	8001c64 <_svfiprintf_r+0x114>
 8001c3a:	eba0 0308 	sub.w	r3, r0, r8
 8001c3e:	fa09 f303 	lsl.w	r3, r9, r3
 8001c42:	4313      	orrs	r3, r2
 8001c44:	9304      	str	r3, [sp, #16]
 8001c46:	46a2      	mov	sl, r4
 8001c48:	e7d2      	b.n	8001bf0 <_svfiprintf_r+0xa0>
 8001c4a:	9b03      	ldr	r3, [sp, #12]
 8001c4c:	1d19      	adds	r1, r3, #4
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	9103      	str	r1, [sp, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	bfbb      	ittet	lt
 8001c56:	425b      	neglt	r3, r3
 8001c58:	f042 0202 	orrlt.w	r2, r2, #2
 8001c5c:	9307      	strge	r3, [sp, #28]
 8001c5e:	9307      	strlt	r3, [sp, #28]
 8001c60:	bfb8      	it	lt
 8001c62:	9204      	strlt	r2, [sp, #16]
 8001c64:	7823      	ldrb	r3, [r4, #0]
 8001c66:	2b2e      	cmp	r3, #46	@ 0x2e
 8001c68:	d10a      	bne.n	8001c80 <_svfiprintf_r+0x130>
 8001c6a:	7863      	ldrb	r3, [r4, #1]
 8001c6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c6e:	d132      	bne.n	8001cd6 <_svfiprintf_r+0x186>
 8001c70:	9b03      	ldr	r3, [sp, #12]
 8001c72:	1d1a      	adds	r2, r3, #4
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	9203      	str	r2, [sp, #12]
 8001c78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001c7c:	3402      	adds	r4, #2
 8001c7e:	9305      	str	r3, [sp, #20]
 8001c80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001d44 <_svfiprintf_r+0x1f4>
 8001c84:	7821      	ldrb	r1, [r4, #0]
 8001c86:	2203      	movs	r2, #3
 8001c88:	4650      	mov	r0, sl
 8001c8a:	f7fe faa1 	bl	80001d0 <memchr>
 8001c8e:	b138      	cbz	r0, 8001ca0 <_svfiprintf_r+0x150>
 8001c90:	9b04      	ldr	r3, [sp, #16]
 8001c92:	eba0 000a 	sub.w	r0, r0, sl
 8001c96:	2240      	movs	r2, #64	@ 0x40
 8001c98:	4082      	lsls	r2, r0
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	3401      	adds	r4, #1
 8001c9e:	9304      	str	r3, [sp, #16]
 8001ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ca4:	4824      	ldr	r0, [pc, #144]	@ (8001d38 <_svfiprintf_r+0x1e8>)
 8001ca6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001caa:	2206      	movs	r2, #6
 8001cac:	f7fe fa90 	bl	80001d0 <memchr>
 8001cb0:	2800      	cmp	r0, #0
 8001cb2:	d036      	beq.n	8001d22 <_svfiprintf_r+0x1d2>
 8001cb4:	4b21      	ldr	r3, [pc, #132]	@ (8001d3c <_svfiprintf_r+0x1ec>)
 8001cb6:	bb1b      	cbnz	r3, 8001d00 <_svfiprintf_r+0x1b0>
 8001cb8:	9b03      	ldr	r3, [sp, #12]
 8001cba:	3307      	adds	r3, #7
 8001cbc:	f023 0307 	bic.w	r3, r3, #7
 8001cc0:	3308      	adds	r3, #8
 8001cc2:	9303      	str	r3, [sp, #12]
 8001cc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001cc6:	4433      	add	r3, r6
 8001cc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8001cca:	e76a      	b.n	8001ba2 <_svfiprintf_r+0x52>
 8001ccc:	fb0c 3202 	mla	r2, ip, r2, r3
 8001cd0:	460c      	mov	r4, r1
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	e7a8      	b.n	8001c28 <_svfiprintf_r+0xd8>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	3401      	adds	r4, #1
 8001cda:	9305      	str	r3, [sp, #20]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f04f 0c0a 	mov.w	ip, #10
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001ce8:	3a30      	subs	r2, #48	@ 0x30
 8001cea:	2a09      	cmp	r2, #9
 8001cec:	d903      	bls.n	8001cf6 <_svfiprintf_r+0x1a6>
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0c6      	beq.n	8001c80 <_svfiprintf_r+0x130>
 8001cf2:	9105      	str	r1, [sp, #20]
 8001cf4:	e7c4      	b.n	8001c80 <_svfiprintf_r+0x130>
 8001cf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e7f0      	b.n	8001ce2 <_svfiprintf_r+0x192>
 8001d00:	ab03      	add	r3, sp, #12
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	462a      	mov	r2, r5
 8001d06:	4b0e      	ldr	r3, [pc, #56]	@ (8001d40 <_svfiprintf_r+0x1f0>)
 8001d08:	a904      	add	r1, sp, #16
 8001d0a:	4638      	mov	r0, r7
 8001d0c:	f3af 8000 	nop.w
 8001d10:	1c42      	adds	r2, r0, #1
 8001d12:	4606      	mov	r6, r0
 8001d14:	d1d6      	bne.n	8001cc4 <_svfiprintf_r+0x174>
 8001d16:	89ab      	ldrh	r3, [r5, #12]
 8001d18:	065b      	lsls	r3, r3, #25
 8001d1a:	f53f af2d 	bmi.w	8001b78 <_svfiprintf_r+0x28>
 8001d1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001d20:	e72c      	b.n	8001b7c <_svfiprintf_r+0x2c>
 8001d22:	ab03      	add	r3, sp, #12
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	462a      	mov	r2, r5
 8001d28:	4b05      	ldr	r3, [pc, #20]	@ (8001d40 <_svfiprintf_r+0x1f0>)
 8001d2a:	a904      	add	r1, sp, #16
 8001d2c:	4638      	mov	r0, r7
 8001d2e:	f000 f879 	bl	8001e24 <_printf_i>
 8001d32:	e7ed      	b.n	8001d10 <_svfiprintf_r+0x1c0>
 8001d34:	08002169 	.word	0x08002169
 8001d38:	08002173 	.word	0x08002173
 8001d3c:	00000000 	.word	0x00000000
 8001d40:	08001a99 	.word	0x08001a99
 8001d44:	0800216f 	.word	0x0800216f

08001d48 <_printf_common>:
 8001d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d4c:	4616      	mov	r6, r2
 8001d4e:	4698      	mov	r8, r3
 8001d50:	688a      	ldr	r2, [r1, #8]
 8001d52:	690b      	ldr	r3, [r1, #16]
 8001d54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	bfb8      	it	lt
 8001d5c:	4613      	movlt	r3, r2
 8001d5e:	6033      	str	r3, [r6, #0]
 8001d60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001d64:	4607      	mov	r7, r0
 8001d66:	460c      	mov	r4, r1
 8001d68:	b10a      	cbz	r2, 8001d6e <_printf_common+0x26>
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	6033      	str	r3, [r6, #0]
 8001d6e:	6823      	ldr	r3, [r4, #0]
 8001d70:	0699      	lsls	r1, r3, #26
 8001d72:	bf42      	ittt	mi
 8001d74:	6833      	ldrmi	r3, [r6, #0]
 8001d76:	3302      	addmi	r3, #2
 8001d78:	6033      	strmi	r3, [r6, #0]
 8001d7a:	6825      	ldr	r5, [r4, #0]
 8001d7c:	f015 0506 	ands.w	r5, r5, #6
 8001d80:	d106      	bne.n	8001d90 <_printf_common+0x48>
 8001d82:	f104 0a19 	add.w	sl, r4, #25
 8001d86:	68e3      	ldr	r3, [r4, #12]
 8001d88:	6832      	ldr	r2, [r6, #0]
 8001d8a:	1a9b      	subs	r3, r3, r2
 8001d8c:	42ab      	cmp	r3, r5
 8001d8e:	dc26      	bgt.n	8001dde <_printf_common+0x96>
 8001d90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001d94:	6822      	ldr	r2, [r4, #0]
 8001d96:	3b00      	subs	r3, #0
 8001d98:	bf18      	it	ne
 8001d9a:	2301      	movne	r3, #1
 8001d9c:	0692      	lsls	r2, r2, #26
 8001d9e:	d42b      	bmi.n	8001df8 <_printf_common+0xb0>
 8001da0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001da4:	4641      	mov	r1, r8
 8001da6:	4638      	mov	r0, r7
 8001da8:	47c8      	blx	r9
 8001daa:	3001      	adds	r0, #1
 8001dac:	d01e      	beq.n	8001dec <_printf_common+0xa4>
 8001dae:	6823      	ldr	r3, [r4, #0]
 8001db0:	6922      	ldr	r2, [r4, #16]
 8001db2:	f003 0306 	and.w	r3, r3, #6
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf02      	ittt	eq
 8001dba:	68e5      	ldreq	r5, [r4, #12]
 8001dbc:	6833      	ldreq	r3, [r6, #0]
 8001dbe:	1aed      	subeq	r5, r5, r3
 8001dc0:	68a3      	ldr	r3, [r4, #8]
 8001dc2:	bf0c      	ite	eq
 8001dc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001dc8:	2500      	movne	r5, #0
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	bfc4      	itt	gt
 8001dce:	1a9b      	subgt	r3, r3, r2
 8001dd0:	18ed      	addgt	r5, r5, r3
 8001dd2:	2600      	movs	r6, #0
 8001dd4:	341a      	adds	r4, #26
 8001dd6:	42b5      	cmp	r5, r6
 8001dd8:	d11a      	bne.n	8001e10 <_printf_common+0xc8>
 8001dda:	2000      	movs	r0, #0
 8001ddc:	e008      	b.n	8001df0 <_printf_common+0xa8>
 8001dde:	2301      	movs	r3, #1
 8001de0:	4652      	mov	r2, sl
 8001de2:	4641      	mov	r1, r8
 8001de4:	4638      	mov	r0, r7
 8001de6:	47c8      	blx	r9
 8001de8:	3001      	adds	r0, #1
 8001dea:	d103      	bne.n	8001df4 <_printf_common+0xac>
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295
 8001df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001df4:	3501      	adds	r5, #1
 8001df6:	e7c6      	b.n	8001d86 <_printf_common+0x3e>
 8001df8:	18e1      	adds	r1, r4, r3
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	2030      	movs	r0, #48	@ 0x30
 8001dfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001e02:	4422      	add	r2, r4
 8001e04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001e08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	e7c7      	b.n	8001da0 <_printf_common+0x58>
 8001e10:	2301      	movs	r3, #1
 8001e12:	4622      	mov	r2, r4
 8001e14:	4641      	mov	r1, r8
 8001e16:	4638      	mov	r0, r7
 8001e18:	47c8      	blx	r9
 8001e1a:	3001      	adds	r0, #1
 8001e1c:	d0e6      	beq.n	8001dec <_printf_common+0xa4>
 8001e1e:	3601      	adds	r6, #1
 8001e20:	e7d9      	b.n	8001dd6 <_printf_common+0x8e>
	...

08001e24 <_printf_i>:
 8001e24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e28:	7e0f      	ldrb	r7, [r1, #24]
 8001e2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001e2c:	2f78      	cmp	r7, #120	@ 0x78
 8001e2e:	4691      	mov	r9, r2
 8001e30:	4680      	mov	r8, r0
 8001e32:	460c      	mov	r4, r1
 8001e34:	469a      	mov	sl, r3
 8001e36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001e3a:	d807      	bhi.n	8001e4c <_printf_i+0x28>
 8001e3c:	2f62      	cmp	r7, #98	@ 0x62
 8001e3e:	d80a      	bhi.n	8001e56 <_printf_i+0x32>
 8001e40:	2f00      	cmp	r7, #0
 8001e42:	f000 80d2 	beq.w	8001fea <_printf_i+0x1c6>
 8001e46:	2f58      	cmp	r7, #88	@ 0x58
 8001e48:	f000 80b9 	beq.w	8001fbe <_printf_i+0x19a>
 8001e4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001e50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001e54:	e03a      	b.n	8001ecc <_printf_i+0xa8>
 8001e56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001e5a:	2b15      	cmp	r3, #21
 8001e5c:	d8f6      	bhi.n	8001e4c <_printf_i+0x28>
 8001e5e:	a101      	add	r1, pc, #4	@ (adr r1, 8001e64 <_printf_i+0x40>)
 8001e60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001e64:	08001ebd 	.word	0x08001ebd
 8001e68:	08001ed1 	.word	0x08001ed1
 8001e6c:	08001e4d 	.word	0x08001e4d
 8001e70:	08001e4d 	.word	0x08001e4d
 8001e74:	08001e4d 	.word	0x08001e4d
 8001e78:	08001e4d 	.word	0x08001e4d
 8001e7c:	08001ed1 	.word	0x08001ed1
 8001e80:	08001e4d 	.word	0x08001e4d
 8001e84:	08001e4d 	.word	0x08001e4d
 8001e88:	08001e4d 	.word	0x08001e4d
 8001e8c:	08001e4d 	.word	0x08001e4d
 8001e90:	08001fd1 	.word	0x08001fd1
 8001e94:	08001efb 	.word	0x08001efb
 8001e98:	08001f8b 	.word	0x08001f8b
 8001e9c:	08001e4d 	.word	0x08001e4d
 8001ea0:	08001e4d 	.word	0x08001e4d
 8001ea4:	08001ff3 	.word	0x08001ff3
 8001ea8:	08001e4d 	.word	0x08001e4d
 8001eac:	08001efb 	.word	0x08001efb
 8001eb0:	08001e4d 	.word	0x08001e4d
 8001eb4:	08001e4d 	.word	0x08001e4d
 8001eb8:	08001f93 	.word	0x08001f93
 8001ebc:	6833      	ldr	r3, [r6, #0]
 8001ebe:	1d1a      	adds	r2, r3, #4
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6032      	str	r2, [r6, #0]
 8001ec4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ec8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e09d      	b.n	800200c <_printf_i+0x1e8>
 8001ed0:	6833      	ldr	r3, [r6, #0]
 8001ed2:	6820      	ldr	r0, [r4, #0]
 8001ed4:	1d19      	adds	r1, r3, #4
 8001ed6:	6031      	str	r1, [r6, #0]
 8001ed8:	0606      	lsls	r6, r0, #24
 8001eda:	d501      	bpl.n	8001ee0 <_printf_i+0xbc>
 8001edc:	681d      	ldr	r5, [r3, #0]
 8001ede:	e003      	b.n	8001ee8 <_printf_i+0xc4>
 8001ee0:	0645      	lsls	r5, r0, #25
 8001ee2:	d5fb      	bpl.n	8001edc <_printf_i+0xb8>
 8001ee4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001ee8:	2d00      	cmp	r5, #0
 8001eea:	da03      	bge.n	8001ef4 <_printf_i+0xd0>
 8001eec:	232d      	movs	r3, #45	@ 0x2d
 8001eee:	426d      	negs	r5, r5
 8001ef0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001ef4:	4859      	ldr	r0, [pc, #356]	@ (800205c <_printf_i+0x238>)
 8001ef6:	230a      	movs	r3, #10
 8001ef8:	e011      	b.n	8001f1e <_printf_i+0xfa>
 8001efa:	6821      	ldr	r1, [r4, #0]
 8001efc:	6833      	ldr	r3, [r6, #0]
 8001efe:	0608      	lsls	r0, r1, #24
 8001f00:	f853 5b04 	ldr.w	r5, [r3], #4
 8001f04:	d402      	bmi.n	8001f0c <_printf_i+0xe8>
 8001f06:	0649      	lsls	r1, r1, #25
 8001f08:	bf48      	it	mi
 8001f0a:	b2ad      	uxthmi	r5, r5
 8001f0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8001f0e:	4853      	ldr	r0, [pc, #332]	@ (800205c <_printf_i+0x238>)
 8001f10:	6033      	str	r3, [r6, #0]
 8001f12:	bf14      	ite	ne
 8001f14:	230a      	movne	r3, #10
 8001f16:	2308      	moveq	r3, #8
 8001f18:	2100      	movs	r1, #0
 8001f1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001f1e:	6866      	ldr	r6, [r4, #4]
 8001f20:	60a6      	str	r6, [r4, #8]
 8001f22:	2e00      	cmp	r6, #0
 8001f24:	bfa2      	ittt	ge
 8001f26:	6821      	ldrge	r1, [r4, #0]
 8001f28:	f021 0104 	bicge.w	r1, r1, #4
 8001f2c:	6021      	strge	r1, [r4, #0]
 8001f2e:	b90d      	cbnz	r5, 8001f34 <_printf_i+0x110>
 8001f30:	2e00      	cmp	r6, #0
 8001f32:	d04b      	beq.n	8001fcc <_printf_i+0x1a8>
 8001f34:	4616      	mov	r6, r2
 8001f36:	fbb5 f1f3 	udiv	r1, r5, r3
 8001f3a:	fb03 5711 	mls	r7, r3, r1, r5
 8001f3e:	5dc7      	ldrb	r7, [r0, r7]
 8001f40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001f44:	462f      	mov	r7, r5
 8001f46:	42bb      	cmp	r3, r7
 8001f48:	460d      	mov	r5, r1
 8001f4a:	d9f4      	bls.n	8001f36 <_printf_i+0x112>
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d10b      	bne.n	8001f68 <_printf_i+0x144>
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	07df      	lsls	r7, r3, #31
 8001f54:	d508      	bpl.n	8001f68 <_printf_i+0x144>
 8001f56:	6923      	ldr	r3, [r4, #16]
 8001f58:	6861      	ldr	r1, [r4, #4]
 8001f5a:	4299      	cmp	r1, r3
 8001f5c:	bfde      	ittt	le
 8001f5e:	2330      	movle	r3, #48	@ 0x30
 8001f60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001f64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001f68:	1b92      	subs	r2, r2, r6
 8001f6a:	6122      	str	r2, [r4, #16]
 8001f6c:	f8cd a000 	str.w	sl, [sp]
 8001f70:	464b      	mov	r3, r9
 8001f72:	aa03      	add	r2, sp, #12
 8001f74:	4621      	mov	r1, r4
 8001f76:	4640      	mov	r0, r8
 8001f78:	f7ff fee6 	bl	8001d48 <_printf_common>
 8001f7c:	3001      	adds	r0, #1
 8001f7e:	d14a      	bne.n	8002016 <_printf_i+0x1f2>
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295
 8001f84:	b004      	add	sp, #16
 8001f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f8a:	6823      	ldr	r3, [r4, #0]
 8001f8c:	f043 0320 	orr.w	r3, r3, #32
 8001f90:	6023      	str	r3, [r4, #0]
 8001f92:	4833      	ldr	r0, [pc, #204]	@ (8002060 <_printf_i+0x23c>)
 8001f94:	2778      	movs	r7, #120	@ 0x78
 8001f96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001f9a:	6823      	ldr	r3, [r4, #0]
 8001f9c:	6831      	ldr	r1, [r6, #0]
 8001f9e:	061f      	lsls	r7, r3, #24
 8001fa0:	f851 5b04 	ldr.w	r5, [r1], #4
 8001fa4:	d402      	bmi.n	8001fac <_printf_i+0x188>
 8001fa6:	065f      	lsls	r7, r3, #25
 8001fa8:	bf48      	it	mi
 8001faa:	b2ad      	uxthmi	r5, r5
 8001fac:	6031      	str	r1, [r6, #0]
 8001fae:	07d9      	lsls	r1, r3, #31
 8001fb0:	bf44      	itt	mi
 8001fb2:	f043 0320 	orrmi.w	r3, r3, #32
 8001fb6:	6023      	strmi	r3, [r4, #0]
 8001fb8:	b11d      	cbz	r5, 8001fc2 <_printf_i+0x19e>
 8001fba:	2310      	movs	r3, #16
 8001fbc:	e7ac      	b.n	8001f18 <_printf_i+0xf4>
 8001fbe:	4827      	ldr	r0, [pc, #156]	@ (800205c <_printf_i+0x238>)
 8001fc0:	e7e9      	b.n	8001f96 <_printf_i+0x172>
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	f023 0320 	bic.w	r3, r3, #32
 8001fc8:	6023      	str	r3, [r4, #0]
 8001fca:	e7f6      	b.n	8001fba <_printf_i+0x196>
 8001fcc:	4616      	mov	r6, r2
 8001fce:	e7bd      	b.n	8001f4c <_printf_i+0x128>
 8001fd0:	6833      	ldr	r3, [r6, #0]
 8001fd2:	6825      	ldr	r5, [r4, #0]
 8001fd4:	6961      	ldr	r1, [r4, #20]
 8001fd6:	1d18      	adds	r0, r3, #4
 8001fd8:	6030      	str	r0, [r6, #0]
 8001fda:	062e      	lsls	r6, r5, #24
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	d501      	bpl.n	8001fe4 <_printf_i+0x1c0>
 8001fe0:	6019      	str	r1, [r3, #0]
 8001fe2:	e002      	b.n	8001fea <_printf_i+0x1c6>
 8001fe4:	0668      	lsls	r0, r5, #25
 8001fe6:	d5fb      	bpl.n	8001fe0 <_printf_i+0x1bc>
 8001fe8:	8019      	strh	r1, [r3, #0]
 8001fea:	2300      	movs	r3, #0
 8001fec:	6123      	str	r3, [r4, #16]
 8001fee:	4616      	mov	r6, r2
 8001ff0:	e7bc      	b.n	8001f6c <_printf_i+0x148>
 8001ff2:	6833      	ldr	r3, [r6, #0]
 8001ff4:	1d1a      	adds	r2, r3, #4
 8001ff6:	6032      	str	r2, [r6, #0]
 8001ff8:	681e      	ldr	r6, [r3, #0]
 8001ffa:	6862      	ldr	r2, [r4, #4]
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4630      	mov	r0, r6
 8002000:	f7fe f8e6 	bl	80001d0 <memchr>
 8002004:	b108      	cbz	r0, 800200a <_printf_i+0x1e6>
 8002006:	1b80      	subs	r0, r0, r6
 8002008:	6060      	str	r0, [r4, #4]
 800200a:	6863      	ldr	r3, [r4, #4]
 800200c:	6123      	str	r3, [r4, #16]
 800200e:	2300      	movs	r3, #0
 8002010:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002014:	e7aa      	b.n	8001f6c <_printf_i+0x148>
 8002016:	6923      	ldr	r3, [r4, #16]
 8002018:	4632      	mov	r2, r6
 800201a:	4649      	mov	r1, r9
 800201c:	4640      	mov	r0, r8
 800201e:	47d0      	blx	sl
 8002020:	3001      	adds	r0, #1
 8002022:	d0ad      	beq.n	8001f80 <_printf_i+0x15c>
 8002024:	6823      	ldr	r3, [r4, #0]
 8002026:	079b      	lsls	r3, r3, #30
 8002028:	d413      	bmi.n	8002052 <_printf_i+0x22e>
 800202a:	68e0      	ldr	r0, [r4, #12]
 800202c:	9b03      	ldr	r3, [sp, #12]
 800202e:	4298      	cmp	r0, r3
 8002030:	bfb8      	it	lt
 8002032:	4618      	movlt	r0, r3
 8002034:	e7a6      	b.n	8001f84 <_printf_i+0x160>
 8002036:	2301      	movs	r3, #1
 8002038:	4632      	mov	r2, r6
 800203a:	4649      	mov	r1, r9
 800203c:	4640      	mov	r0, r8
 800203e:	47d0      	blx	sl
 8002040:	3001      	adds	r0, #1
 8002042:	d09d      	beq.n	8001f80 <_printf_i+0x15c>
 8002044:	3501      	adds	r5, #1
 8002046:	68e3      	ldr	r3, [r4, #12]
 8002048:	9903      	ldr	r1, [sp, #12]
 800204a:	1a5b      	subs	r3, r3, r1
 800204c:	42ab      	cmp	r3, r5
 800204e:	dcf2      	bgt.n	8002036 <_printf_i+0x212>
 8002050:	e7eb      	b.n	800202a <_printf_i+0x206>
 8002052:	2500      	movs	r5, #0
 8002054:	f104 0619 	add.w	r6, r4, #25
 8002058:	e7f5      	b.n	8002046 <_printf_i+0x222>
 800205a:	bf00      	nop
 800205c:	0800217a 	.word	0x0800217a
 8002060:	0800218b 	.word	0x0800218b

08002064 <memmove>:
 8002064:	4288      	cmp	r0, r1
 8002066:	b510      	push	{r4, lr}
 8002068:	eb01 0402 	add.w	r4, r1, r2
 800206c:	d902      	bls.n	8002074 <memmove+0x10>
 800206e:	4284      	cmp	r4, r0
 8002070:	4623      	mov	r3, r4
 8002072:	d807      	bhi.n	8002084 <memmove+0x20>
 8002074:	1e43      	subs	r3, r0, #1
 8002076:	42a1      	cmp	r1, r4
 8002078:	d008      	beq.n	800208c <memmove+0x28>
 800207a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800207e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002082:	e7f8      	b.n	8002076 <memmove+0x12>
 8002084:	4402      	add	r2, r0
 8002086:	4601      	mov	r1, r0
 8002088:	428a      	cmp	r2, r1
 800208a:	d100      	bne.n	800208e <memmove+0x2a>
 800208c:	bd10      	pop	{r4, pc}
 800208e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002092:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002096:	e7f7      	b.n	8002088 <memmove+0x24>

08002098 <_sbrk_r>:
 8002098:	b538      	push	{r3, r4, r5, lr}
 800209a:	4d06      	ldr	r5, [pc, #24]	@ (80020b4 <_sbrk_r+0x1c>)
 800209c:	2300      	movs	r3, #0
 800209e:	4604      	mov	r4, r0
 80020a0:	4608      	mov	r0, r1
 80020a2:	602b      	str	r3, [r5, #0]
 80020a4:	f7ff fa20 	bl	80014e8 <_sbrk>
 80020a8:	1c43      	adds	r3, r0, #1
 80020aa:	d102      	bne.n	80020b2 <_sbrk_r+0x1a>
 80020ac:	682b      	ldr	r3, [r5, #0]
 80020ae:	b103      	cbz	r3, 80020b2 <_sbrk_r+0x1a>
 80020b0:	6023      	str	r3, [r4, #0]
 80020b2:	bd38      	pop	{r3, r4, r5, pc}
 80020b4:	20000324 	.word	0x20000324

080020b8 <_realloc_r>:
 80020b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020bc:	4680      	mov	r8, r0
 80020be:	4615      	mov	r5, r2
 80020c0:	460c      	mov	r4, r1
 80020c2:	b921      	cbnz	r1, 80020ce <_realloc_r+0x16>
 80020c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020c8:	4611      	mov	r1, r2
 80020ca:	f7ff bc59 	b.w	8001980 <_malloc_r>
 80020ce:	b92a      	cbnz	r2, 80020dc <_realloc_r+0x24>
 80020d0:	f7ff fbea 	bl	80018a8 <_free_r>
 80020d4:	2400      	movs	r4, #0
 80020d6:	4620      	mov	r0, r4
 80020d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020dc:	f000 f81a 	bl	8002114 <_malloc_usable_size_r>
 80020e0:	4285      	cmp	r5, r0
 80020e2:	4606      	mov	r6, r0
 80020e4:	d802      	bhi.n	80020ec <_realloc_r+0x34>
 80020e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80020ea:	d8f4      	bhi.n	80020d6 <_realloc_r+0x1e>
 80020ec:	4629      	mov	r1, r5
 80020ee:	4640      	mov	r0, r8
 80020f0:	f7ff fc46 	bl	8001980 <_malloc_r>
 80020f4:	4607      	mov	r7, r0
 80020f6:	2800      	cmp	r0, #0
 80020f8:	d0ec      	beq.n	80020d4 <_realloc_r+0x1c>
 80020fa:	42b5      	cmp	r5, r6
 80020fc:	462a      	mov	r2, r5
 80020fe:	4621      	mov	r1, r4
 8002100:	bf28      	it	cs
 8002102:	4632      	movcs	r2, r6
 8002104:	f7ff fbc2 	bl	800188c <memcpy>
 8002108:	4621      	mov	r1, r4
 800210a:	4640      	mov	r0, r8
 800210c:	f7ff fbcc 	bl	80018a8 <_free_r>
 8002110:	463c      	mov	r4, r7
 8002112:	e7e0      	b.n	80020d6 <_realloc_r+0x1e>

08002114 <_malloc_usable_size_r>:
 8002114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002118:	1f18      	subs	r0, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	bfbc      	itt	lt
 800211e:	580b      	ldrlt	r3, [r1, r0]
 8002120:	18c0      	addlt	r0, r0, r3
 8002122:	4770      	bx	lr

08002124 <_init>:
 8002124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002126:	bf00      	nop
 8002128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800212a:	bc08      	pop	{r3}
 800212c:	469e      	mov	lr, r3
 800212e:	4770      	bx	lr

08002130 <_fini>:
 8002130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002132:	bf00      	nop
 8002134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002136:	bc08      	pop	{r3}
 8002138:	469e      	mov	lr, r3
 800213a:	4770      	bx	lr
