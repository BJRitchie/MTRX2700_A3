
Joystick Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000aa0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c38  08000c38  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c38  08000c38  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08000c38  08000c38  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c38  08000c38  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c38  08000c38  00010c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c3c  08000c3c  00010c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08000c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          0000001c  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000044  20000044  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000c58  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000434  00000000  00000000  00020cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000c8  00000000  00000000  00021128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000086  00000000  00000000  000211f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00015b80  00000000  00000000  00021276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000140d  00000000  00000000  00036df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00075fc2  00000000  00000000  00038203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000002f0  00000000  00000000  000ae1c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  000ae4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000028 	.word	0x20000028
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000c20 	.word	0x08000c20

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000002c 	.word	0x2000002c
 80001d4:	08000c20 	.word	0x08000c20

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2uiz>:
 80007a4:	004a      	lsls	r2, r1, #1
 80007a6:	d211      	bcs.n	80007cc <__aeabi_d2uiz+0x28>
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ac:	d211      	bcs.n	80007d2 <__aeabi_d2uiz+0x2e>
 80007ae:	d50d      	bpl.n	80007cc <__aeabi_d2uiz+0x28>
 80007b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d40e      	bmi.n	80007d8 <__aeabi_d2uiz+0x34>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ca:	4770      	bx	lr
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	4770      	bx	lr
 80007d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d6:	d102      	bne.n	80007de <__aeabi_d2uiz+0x3a>
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	4770      	bx	lr
 80007de:	f04f 0000 	mov.w	r0, #0
 80007e2:	4770      	bx	lr

080007e4 <enable_clocks>:
	uint16_t y_coordinate;
};


// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <enable_clocks+0x1c>)
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	4a04      	ldr	r2, [pc, #16]	; (8000800 <enable_clocks+0x1c>)
 80007ee:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 80007f2:	6153      	str	r3, [r2, #20]
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <initialise_board>:

// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0

	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <initialise_board+0x20>)
 800080c:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f245 5255 	movw	r2, #21845	; 0x5555
 8000814:	801a      	strh	r2, [r3, #0]
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	48001002 	.word	0x48001002

08000828 <finished_transmission>:

	return ADC1->DR;
}


void finished_transmission(uint32_t bytes_sent) {
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
//	volatile uint32_t test = 0;
//	// make a very simple delay
//	for (volatile uint32_t i = 0; i < 0x100; i++) {
//		// waste time !
//	}
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <SingleReadMultiChannelADC>:

void SingleReadMultiChannelADC() {
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0

	// get a pointer to the location of the LEDs
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000842:	4b39      	ldr	r3, [pc, #228]	; (8000928 <SingleReadMultiChannelADC+0xec>)
 8000844:	607b      	str	r3, [r7, #4]

	// enable the clock for ADC1
	RCC->AHBENR |= RCC_AHBENR_ADC12EN;
 8000846:	4b39      	ldr	r3, [pc, #228]	; (800092c <SingleReadMultiChannelADC+0xf0>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	4a38      	ldr	r2, [pc, #224]	; (800092c <SingleReadMultiChannelADC+0xf0>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000850:	6153      	str	r3, [r2, #20]

	// set to synchronise the ADC with the clock
	ADC12_COMMON->CCR |= ADC12_CCR_CKMODE_0;
 8000852:	4b37      	ldr	r3, [pc, #220]	; (8000930 <SingleReadMultiChannelADC+0xf4>)
 8000854:	689b      	ldr	r3, [r3, #8]
 8000856:	4a36      	ldr	r2, [pc, #216]	; (8000930 <SingleReadMultiChannelADC+0xf4>)
 8000858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800085c:	6093      	str	r3, [r2, #8]

	// ADEN must be = 0 for configuration (is the default)
	ADC1->CR &= ~ADC_CR_ADVREGEN; // clear voltage regulator enable
 800085e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000868:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800086c:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADVREGEN_0; // set ADVREGEN TO 01
 800086e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087c:	6093      	str	r3, [r2, #8]
	ADC1->CR &= ~ADC_CR_ADCALDIF; // clear bit to enable Single-ended-input
 800087e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000888:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800088c:	6093      	str	r3, [r2, #8]

	// calibrate the ADC (self calibration routine)
	ADC1->CR |= ADC_CR_ADCAL;
 800088e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000898:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800089c:	6093      	str	r3, [r2, #8]
	while((ADC1->CR & ADC_CR_ADCAL) == ADC_CR_ADCAL); // Waiting for the calibration to finish
 800089e:	bf00      	nop
 80008a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80008aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008ae:	d0f7      	beq.n	80008a0 <SingleReadMultiChannelADC+0x64>

	// We want to read from two channels each sequence
	//  the first channel goes in SQ1
	//  the second channel goes in SQ2
	//  the number of channels to read = 2, so the L value is 1
	ADC1->SQR1 = 0;
 80008b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80008b4:	2200      	movs	r2, #0
 80008b6:	631a      	str	r2, [r3, #48]	; 0x30
	ADC1->SQR1 |= 0x02 << ADC_SQR1_SQ1_Pos; // set the request for channel 2
 80008b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c6:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SQR1 |= 0x03 << ADC_SQR1_SQ2_Pos; // set the request for channel 3
 80008c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008d2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80008d6:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SQR1 |= 0x01 << ADC_SQR1_L_Pos; // set the number of channels to read
 80008d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	6313      	str	r3, [r2, #48]	; 0x30

	// single shot mode
	ADC1->CFGR &= ~ADC_CFGR_CONT;
 80008e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008f6:	60d3      	str	r3, [r2, #12]

	// Enable the ADC
	ADC1->CR |= ADC_CR_ADEN;
 80008f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	6093      	str	r3, [r2, #8]

	// Wait the ADC to be ready.
	while (ADC1->ISR == 0);
 8000908:	bf00      	nop
 800090a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d0fa      	beq.n	800090a <SingleReadMultiChannelADC+0xce>

	uint16_t value_1 = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	807b      	strh	r3, [r7, #2]
	uint16_t value_2 = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	803b      	strh	r3, [r7, #0]
//		uint8_t string_to_send[100];
//		sprintf(string_to_send, "Testing X: %u		Y: %u\r\n", x_coordinate, y_coordinate);
//
//		SerialOutputString(string_to_send, &USART1_PORT);
//	}
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	48001015 	.word	0x48001015
 800092c:	40021000 	.word	0x40021000
 8000930:	50000300 	.word	0x50000300
 8000934:	00000000 	.word	0x00000000

08000938 <setup_adc>:
	struct joystick_position current_pos = {x_coordinate, y_coordinate};
	return current_pos;
}


void setup_adc(void) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
	enable_clocks();
 800093e:	f7ff ff51 	bl	80007e4 <enable_clocks>
	initialise_board();
 8000942:	f7ff ff5f 	bl	8000804 <initialise_board>
	SerialInitialise(BAUD_115200, &USART1_PORT, &finished_transmission);
 8000946:	4a4a      	ldr	r2, [pc, #296]	; (8000a70 <setup_adc+0x138>)
 8000948:	494a      	ldr	r1, [pc, #296]	; (8000a74 <setup_adc+0x13c>)
 800094a:	2004      	movs	r0, #4
 800094c:	f000 f89c 	bl	8000a88 <SerialInitialise>
	SingleReadMultiChannelADC();
 8000950:	f7ff ff74 	bl	800083c <SingleReadMultiChannelADC>
	for(;;) {
		uint16_t value_1 = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	817b      	strh	r3, [r7, #10]
			uint16_t value_2 = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	813b      	strh	r3, [r7, #8]

			ADC1->CR |= ADC_CR_ADSTART;
 800095c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000966:	f043 0304 	orr.w	r3, r3, #4
 800096a:	6093      	str	r3, [r2, #8]

					// Wait for the end of the first conversion
			while(!(ADC1->ISR & ADC_ISR_EOC));
 800096c:	bf00      	nop
 800096e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f003 0304 	and.w	r3, r3, #4
 8000978:	2b00      	cmp	r3, #0
 800097a:	d0f8      	beq.n	800096e <setup_adc+0x36>
					// read the first value
			value_1 = ADC1->DR;
 800097c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	817b      	strh	r3, [r7, #10]
					// Max left: 1980
					// Max right: 4096
					// Map this range to 0-1000

			while(!(ADC1->ISR & ADC_ISR_EOC));
 8000984:	bf00      	nop
 8000986:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f003 0304 	and.w	r3, r3, #4
 8000990:	2b00      	cmp	r3, #0
 8000992:	d0f8      	beq.n	8000986 <setup_adc+0x4e>
			value_2 = ADC1->DR;
 8000994:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	813b      	strh	r3, [r7, #8]

			ADC1->ISR |= ADC_ISR_EOS;
 800099c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009a6:	f043 0308 	orr.w	r3, r3, #8
 80009aa:	6013      	str	r3, [r2, #0]


			uint16_t mapped_value_1 = (1000.0 / (4100.0- 3250.0)) * (value_1 - 3250.0);
 80009ac:	897b      	ldrh	r3, [r7, #10]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fe8e 	bl	80006d0 <__aeabi_i2d>
 80009b4:	a326      	add	r3, pc, #152	; (adr r3, 8000a50 <setup_adc+0x118>)
 80009b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009ba:	f7ff fd3b 	bl	8000434 <__aeabi_dsub>
 80009be:	4602      	mov	r2, r0
 80009c0:	460b      	mov	r3, r1
 80009c2:	4610      	mov	r0, r2
 80009c4:	4619      	mov	r1, r3
 80009c6:	a324      	add	r3, pc, #144	; (adr r3, 8000a58 <setup_adc+0x120>)
 80009c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009cc:	f7ff fc04 	bl	80001d8 <__aeabi_dmul>
 80009d0:	4602      	mov	r2, r0
 80009d2:	460b      	mov	r3, r1
 80009d4:	4610      	mov	r0, r2
 80009d6:	4619      	mov	r1, r3
 80009d8:	f7ff fee4 	bl	80007a4 <__aeabi_d2uiz>
 80009dc:	4603      	mov	r3, r0
 80009de:	81fb      	strh	r3, [r7, #14]
			mapped_value_1 = 1000 - mapped_value_1;
 80009e0:	89fb      	ldrh	r3, [r7, #14]
 80009e2:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80009e6:	81fb      	strh	r3, [r7, #14]
			if (mapped_value_1 > 1000) {
 80009e8:	89fb      	ldrh	r3, [r7, #14]
 80009ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009ee:	d901      	bls.n	80009f4 <setup_adc+0xbc>
				mapped_value_1 = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	81fb      	strh	r3, [r7, #14]
					// read the second value
		//	value_2 = ADC1->DR;
					// Max forward: 2410
					// Max back: 3390
					// Map this range to 0-1000
			uint16_t mapped_value_2 = (1000.0 / (3950.0- 2250.0)) * (value_2 - 2250.0);
 80009f4:	893b      	ldrh	r3, [r7, #8]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fe6a 	bl	80006d0 <__aeabi_i2d>
 80009fc:	a318      	add	r3, pc, #96	; (adr r3, 8000a60 <setup_adc+0x128>)
 80009fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a02:	f7ff fd17 	bl	8000434 <__aeabi_dsub>
 8000a06:	4602      	mov	r2, r0
 8000a08:	460b      	mov	r3, r1
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	a316      	add	r3, pc, #88	; (adr r3, 8000a68 <setup_adc+0x130>)
 8000a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a14:	f7ff fbe0 	bl	80001d8 <__aeabi_dmul>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	4610      	mov	r0, r2
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f7ff fec0 	bl	80007a4 <__aeabi_d2uiz>
 8000a24:	4603      	mov	r3, r0
 8000a26:	81bb      	strh	r3, [r7, #12]
			mapped_value_2 = 1000 - mapped_value_2;
 8000a28:	89bb      	ldrh	r3, [r7, #12]
 8000a2a:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8000a2e:	81bb      	strh	r3, [r7, #12]
			if (mapped_value_2 > 1000) {
 8000a30:	89bb      	ldrh	r3, [r7, #12]
 8000a32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a36:	d901      	bls.n	8000a3c <setup_adc+0x104>
				mapped_value_2 = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	81bb      	strh	r3, [r7, #12]
			}

			uint16_t x_coordinate = mapped_value_1;
 8000a3c:	89fb      	ldrh	r3, [r7, #14]
 8000a3e:	80fb      	strh	r3, [r7, #6]
			uint16_t y_coordinate = mapped_value_2;
 8000a40:	89bb      	ldrh	r3, [r7, #12]
 8000a42:	80bb      	strh	r3, [r7, #4]

					// reset the sequence flag
			struct joystick_position current_pos = {x_coordinate, y_coordinate};
 8000a44:	88fb      	ldrh	r3, [r7, #6]
 8000a46:	803b      	strh	r3, [r7, #0]
 8000a48:	88bb      	ldrh	r3, [r7, #4]
 8000a4a:	807b      	strh	r3, [r7, #2]
	for(;;) {
 8000a4c:	e782      	b.n	8000954 <setup_adc+0x1c>
 8000a4e:	bf00      	nop
 8000a50:	00000000 	.word	0x00000000
 8000a54:	40a96400 	.word	0x40a96400
 8000a58:	d2d2d2d3 	.word	0xd2d2d2d3
 8000a5c:	3ff2d2d2 	.word	0x3ff2d2d2
 8000a60:	00000000 	.word	0x00000000
 8000a64:	40a19400 	.word	0x40a19400
 8000a68:	d2d2d2d3 	.word	0xd2d2d2d3
 8000a6c:	3fe2d2d2 	.word	0x3fe2d2d2
 8000a70:	08000829 	.word	0x08000829
 8000a74:	20000000 	.word	0x20000000

08000a78 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


int main(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	setup_adc();
 8000a7c:	f7ff ff5c 	bl	8000938 <setup_adc>
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <SerialInitialise>:
		};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000a88:	b480      	push	{r7}
 8000a8a:	b087      	sub	sp, #28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000a9a:	4b39      	ldr	r3, [pc, #228]	; (8000b80 <SerialInitialise+0xf8>)
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	4a38      	ldr	r2, [pc, #224]	; (8000b80 <SerialInitialise+0xf8>)
 8000aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000aa6:	4b36      	ldr	r3, [pc, #216]	; (8000b80 <SerialInitialise+0xf8>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	4a35      	ldr	r2, [pc, #212]	; (8000b80 <SerialInitialise+0xf8>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	691a      	ldr	r2, [r3, #16]
 8000ab6:	4b32      	ldr	r3, [pc, #200]	; (8000b80 <SerialInitialise+0xf8>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	4931      	ldr	r1, [pc, #196]	; (8000b80 <SerialInitialise+0xf8>)
 8000abc:	4313      	orrs	r3, r2
 8000abe:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	68ba      	ldr	r2, [r7, #8]
 8000ac6:	6952      	ldr	r2, [r2, #20]
 8000ac8:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	68ba      	ldr	r2, [r7, #8]
 8000ad0:	6992      	ldr	r2, [r2, #24]
 8000ad2:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	69d9      	ldr	r1, [r3, #28]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	6a1a      	ldr	r2, [r3, #32]
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	6a19      	ldr	r1, [r3, #32]
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	430a      	orrs	r2, r1
 8000af6:	625a      	str	r2, [r3, #36]	; 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	68da      	ldr	r2, [r3, #12]
 8000afc:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <SerialInitialise+0xf8>)
 8000afe:	69db      	ldr	r3, [r3, #28]
 8000b00:	491f      	ldr	r1, [pc, #124]	; (8000b80 <SerialInitialise+0xf8>)
 8000b02:	4313      	orrs	r3, r2
 8000b04:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <SerialInitialise+0xf8>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	491c      	ldr	r1, [pc, #112]	; (8000b80 <SerialInitialise+0xf8>)
 8000b10:	4313      	orrs	r3, r2
 8000b12:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	330c      	adds	r3, #12
 8000b1a:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	d820      	bhi.n	8000b64 <SerialInitialise+0xdc>
 8000b22:	a201      	add	r2, pc, #4	; (adr r2, 8000b28 <SerialInitialise+0xa0>)
 8000b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b28:	08000b3d 	.word	0x08000b3d
 8000b2c:	08000b45 	.word	0x08000b45
 8000b30:	08000b4d 	.word	0x08000b4d
 8000b34:	08000b55 	.word	0x08000b55
 8000b38:	08000b5d 	.word	0x08000b5d
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	2246      	movs	r2, #70	; 0x46
 8000b40:	801a      	strh	r2, [r3, #0]
		break;
 8000b42:	e00f      	b.n	8000b64 <SerialInitialise+0xdc>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	2246      	movs	r2, #70	; 0x46
 8000b48:	801a      	strh	r2, [r3, #0]
		break;
 8000b4a:	e00b      	b.n	8000b64 <SerialInitialise+0xdc>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	2246      	movs	r2, #70	; 0x46
 8000b50:	801a      	strh	r2, [r3, #0]
		break;
 8000b52:	e007      	b.n	8000b64 <SerialInitialise+0xdc>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	2246      	movs	r2, #70	; 0x46
 8000b58:	801a      	strh	r2, [r3, #0]
		break;
 8000b5a:	e003      	b.n	8000b64 <SerialInitialise+0xdc>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	2246      	movs	r2, #70	; 0x46
 8000b60:	801a      	strh	r2, [r3, #0]
		break;
 8000b62:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f042 020d 	orr.w	r2, r2, #13
 8000b72:	601a      	str	r2, [r3, #0]
}
 8000b74:	bf00      	nop
 8000b76:	371c      	adds	r7, #28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	40021000 	.word	0x40021000

08000b84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b84:	480d      	ldr	r0, [pc, #52]	; (8000bbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b86:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b88:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b8c:	480c      	ldr	r0, [pc, #48]	; (8000bc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8e:	490d      	ldr	r1, [pc, #52]	; (8000bc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b90:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <LoopForever+0xe>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba4:	4c0a      	ldr	r4, [pc, #40]	; (8000bd0 <LoopForever+0x16>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bb2:	f000 f811 	bl	8000bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bb6:	f7ff ff5f 	bl	8000a78 <main>

08000bba <LoopForever>:

LoopForever:
  b LoopForever
 8000bba:	e7fe      	b.n	8000bba <LoopForever>
  ldr   r0, =_estack
 8000bbc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc4:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000bc8:	08000c40 	.word	0x08000c40
  ldr r2, =_sbss
 8000bcc:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000bd0:	20000044 	.word	0x20000044

08000bd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC1_2_IRQHandler>
	...

08000bd8 <__libc_init_array>:
 8000bd8:	b570      	push	{r4, r5, r6, lr}
 8000bda:	4d0d      	ldr	r5, [pc, #52]	; (8000c10 <__libc_init_array+0x38>)
 8000bdc:	4c0d      	ldr	r4, [pc, #52]	; (8000c14 <__libc_init_array+0x3c>)
 8000bde:	1b64      	subs	r4, r4, r5
 8000be0:	10a4      	asrs	r4, r4, #2
 8000be2:	2600      	movs	r6, #0
 8000be4:	42a6      	cmp	r6, r4
 8000be6:	d109      	bne.n	8000bfc <__libc_init_array+0x24>
 8000be8:	4d0b      	ldr	r5, [pc, #44]	; (8000c18 <__libc_init_array+0x40>)
 8000bea:	4c0c      	ldr	r4, [pc, #48]	; (8000c1c <__libc_init_array+0x44>)
 8000bec:	f000 f818 	bl	8000c20 <_init>
 8000bf0:	1b64      	subs	r4, r4, r5
 8000bf2:	10a4      	asrs	r4, r4, #2
 8000bf4:	2600      	movs	r6, #0
 8000bf6:	42a6      	cmp	r6, r4
 8000bf8:	d105      	bne.n	8000c06 <__libc_init_array+0x2e>
 8000bfa:	bd70      	pop	{r4, r5, r6, pc}
 8000bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c00:	4798      	blx	r3
 8000c02:	3601      	adds	r6, #1
 8000c04:	e7ee      	b.n	8000be4 <__libc_init_array+0xc>
 8000c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c0a:	4798      	blx	r3
 8000c0c:	3601      	adds	r6, #1
 8000c0e:	e7f2      	b.n	8000bf6 <__libc_init_array+0x1e>
 8000c10:	08000c38 	.word	0x08000c38
 8000c14:	08000c38 	.word	0x08000c38
 8000c18:	08000c38 	.word	0x08000c38
 8000c1c:	08000c3c 	.word	0x08000c3c

08000c20 <_init>:
 8000c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c22:	bf00      	nop
 8000c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c26:	bc08      	pop	{r3}
 8000c28:	469e      	mov	lr, r3
 8000c2a:	4770      	bx	lr

08000c2c <_fini>:
 8000c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c2e:	bf00      	nop
 8000c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c32:	bc08      	pop	{r3}
 8000c34:	469e      	mov	lr, r3
 8000c36:	4770      	bx	lr
